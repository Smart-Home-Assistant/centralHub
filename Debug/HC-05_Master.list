
HC-05_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004c34  08004c34  00014c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd0  08004cd0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd8  08004cd8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000010  08004cf0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08004cf0  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001173e  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002696  00000000  00000000  000317c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  00033e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c1a  00000000  00000000  00034de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027198  00000000  00000000  000359fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f00  00000000  00000000  0005cb92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2313  00000000  00000000  0006fa92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004084  00000000  00000000  00161da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00165e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c1c 	.word	0x08004c1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004c1c 	.word	0x08004c1c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b23      	ldr	r3, [pc, #140]	; (8000568 <MX_GPIO_Init+0xa4>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a22      	ldr	r2, [pc, #136]	; (8000568 <MX_GPIO_Init+0xa4>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <MX_GPIO_Init+0xa4>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <MX_GPIO_Init+0xa4>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <MX_GPIO_Init+0xa4>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_GPIO_Init+0xa4>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, doorStatus_Pin|lightStatus_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2103      	movs	r1, #3
 800050e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000512:	f000 ff51 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = userControl_Pin;
 8000516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800051c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userControl_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 030c 	add.w	r3, r7, #12
 800052a:	4619      	mov	r1, r3
 800052c:	480f      	ldr	r0, [pc, #60]	; (800056c <MX_GPIO_Init+0xa8>)
 800052e:	f000 fd99 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = doorStatus_Pin|lightStatus_Pin;
 8000532:	2303      	movs	r3, #3
 8000534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	4619      	mov	r1, r3
 8000548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054c:	f000 fd8a 	bl	8001064 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	2028      	movs	r0, #40	; 0x28
 8000556:	f000 fcd0 	bl	8000efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800055a:	2028      	movs	r0, #40	; 0x28
 800055c:	f000 fce9 	bl	8000f32 <HAL_NVIC_EnableIRQ>

}
 8000560:	bf00      	nop
 8000562:	3720      	adds	r7, #32
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000
 800056c:	48000800 	.word	0x48000800

08000570 <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 0 */

// TODO put this elsewhere
uint8_t data[64];

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
	if (strncmp((char *)data, "Light is ON", strlen("Light is ON")) == 0) {
 800057c:	220b      	movs	r2, #11
 800057e:	4921      	ldr	r1, [pc, #132]	; (8000604 <HAL_UARTEx_RxEventCallback+0x94>)
 8000580:	4821      	ldr	r0, [pc, #132]	; (8000608 <HAL_UARTEx_RxEventCallback+0x98>)
 8000582:	f004 fb0d 	bl	8004ba0 <strncmp>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d106      	bne.n	800059a <HAL_UARTEx_RxEventCallback+0x2a>
	        HAL_GPIO_WritePin(lightStatus_GPIO_Port, lightStatus_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2102      	movs	r1, #2
 8000590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000594:	f000 ff10 	bl	80013b8 <HAL_GPIO_WritePin>
 8000598:	e00d      	b.n	80005b6 <HAL_UARTEx_RxEventCallback+0x46>
	}

	else if (strncmp((char *)data, "Light is OFF", strlen("Light is OFF")) == 0) {
 800059a:	220c      	movs	r2, #12
 800059c:	491b      	ldr	r1, [pc, #108]	; (800060c <HAL_UARTEx_RxEventCallback+0x9c>)
 800059e:	481a      	ldr	r0, [pc, #104]	; (8000608 <HAL_UARTEx_RxEventCallback+0x98>)
 80005a0:	f004 fafe 	bl	8004ba0 <strncmp>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d105      	bne.n	80005b6 <HAL_UARTEx_RxEventCallback+0x46>
	        HAL_GPIO_WritePin(lightStatus_GPIO_Port, lightStatus_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2102      	movs	r1, #2
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f000 ff01 	bl	80013b8 <HAL_GPIO_WritePin>
	}

	if (strncmp((char *)data, "Door is OPEN", strlen("Door is OPEN")) == 0) {
 80005b6:	220c      	movs	r2, #12
 80005b8:	4915      	ldr	r1, [pc, #84]	; (8000610 <HAL_UARTEx_RxEventCallback+0xa0>)
 80005ba:	4813      	ldr	r0, [pc, #76]	; (8000608 <HAL_UARTEx_RxEventCallback+0x98>)
 80005bc:	f004 faf0 	bl	8004ba0 <strncmp>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d106      	bne.n	80005d4 <HAL_UARTEx_RxEventCallback+0x64>
			HAL_GPIO_WritePin(doorStatus_GPIO_Port, doorStatus_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2101      	movs	r1, #1
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f000 fef3 	bl	80013b8 <HAL_GPIO_WritePin>
 80005d2:	e00d      	b.n	80005f0 <HAL_UARTEx_RxEventCallback+0x80>
	}

	else if (strncmp((char *)data, "Door is CLOSED", strlen("Door is CLOSED")) == 0) {
 80005d4:	220e      	movs	r2, #14
 80005d6:	490f      	ldr	r1, [pc, #60]	; (8000614 <HAL_UARTEx_RxEventCallback+0xa4>)
 80005d8:	480b      	ldr	r0, [pc, #44]	; (8000608 <HAL_UARTEx_RxEventCallback+0x98>)
 80005da:	f004 fae1 	bl	8004ba0 <strncmp>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d105      	bne.n	80005f0 <HAL_UARTEx_RxEventCallback+0x80>
			HAL_GPIO_WritePin(doorStatus_GPIO_Port, doorStatus_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2101      	movs	r1, #1
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f000 fee4 	bl	80013b8 <HAL_GPIO_WritePin>
	}


	HAL_UARTEx_ReceiveToIdle_IT(huart, data, 64);
 80005f0:	2240      	movs	r2, #64	; 0x40
 80005f2:	4905      	ldr	r1, [pc, #20]	; (8000608 <HAL_UARTEx_RxEventCallback+0x98>)
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f004 fa83 	bl	8004b00 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	08004c34 	.word	0x08004c34
 8000608:	2000002c 	.word	0x2000002c
 800060c:	08004c40 	.word	0x08004c40
 8000610:	08004c50 	.word	0x08004c50
 8000614:	08004c60 	.word	0x08004c60

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fb1d 	bl	8000c5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f826 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f7ff ff4e 	bl	80004c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000628:	f000 fa0c 	bl	8000a44 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800062c:	f000 f964 	bl	80008f8 <MX_TIM3_Init>
  MX_UART4_Init();
 8000630:	f000 f9d8 	bl	80009e4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  // UART Interrupt Init
  // LIGHT
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, data, 64);
 8000634:	2240      	movs	r2, #64	; 0x40
 8000636:	490b      	ldr	r1, [pc, #44]	; (8000664 <main+0x4c>)
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <main+0x50>)
 800063a:	f004 fa61 	bl	8004b00 <HAL_UARTEx_ReceiveToIdle_IT>

  // DOOR
  HAL_UARTEx_ReceiveToIdle_IT(&huart3, data, 64);
 800063e:	2240      	movs	r2, #64	; 0x40
 8000640:	4908      	ldr	r1, [pc, #32]	; (8000664 <main+0x4c>)
 8000642:	480a      	ldr	r0, [pc, #40]	; (800066c <main+0x54>)
 8000644:	f004 fa5c 	bl	8004b00 <HAL_UARTEx_ReceiveToIdle_IT>

  // set status of light to off on start (Opposite than LED due to relay)
  HAL_GPIO_WritePin(lightStatus_GPIO_Port, lightStatus_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2102      	movs	r1, #2
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f000 feb2 	bl	80013b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(doorStatus_GPIO_Port, doorStatus_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2101      	movs	r1, #1
 8000658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065c:	f000 feac 	bl	80013b8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0x48>
 8000662:	bf00      	nop
 8000664:	2000002c 	.word	0x2000002c
 8000668:	200000c0 	.word	0x200000c0
 800066c:	20000148 	.word	0x20000148

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b096      	sub	sp, #88	; 0x58
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2244      	movs	r2, #68	; 0x44
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f004 faa0 	bl	8004bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000692:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000696:	f000 fed9 	bl	800144c <HAL_PWREx_ControlVoltageScaling>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a0:	f000 f838 	bl	8000714 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006a4:	2310      	movs	r3, #16
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b0:	2360      	movs	r3, #96	; 0x60
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b8:	2301      	movs	r3, #1
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006c0:	2328      	movs	r3, #40	; 0x28
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 ff0f 	bl	80014f8 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006e0:	f000 f818 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2303      	movs	r3, #3
 80006ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	2104      	movs	r1, #4
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fad7 	bl	8001cb0 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000708:	f000 f804 	bl	8000714 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3758      	adds	r7, #88	; 0x58
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x8>
	...

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_MspInit+0x44>)
 8000728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <HAL_MspInit+0x44>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6613      	str	r3, [r2, #96]	; 0x60
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_MspInit+0x44>)
 8000734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_MspInit+0x44>)
 8000740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_MspInit+0x44>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6593      	str	r3, [r2, #88]	; 0x58
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_MspInit+0x44>)
 800074c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800076c:	e7fe      	b.n	800076c <NMI_Handler+0x4>

0800076e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <HardFault_Handler+0x4>

08000774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <MemManage_Handler+0x4>

0800077a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <BusFault_Handler+0x4>

08000780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <UsageFault_Handler+0x4>

08000786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b4:	f000 faa6 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//HAL_GPIO_TogglePin(lightStatus_GPIO_Port, lightStatus_Pin);

  if(!buttonReady){
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <TIM3_IRQHandler+0x2c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <TIM3_IRQHandler+0x12>
	  buttonReady = 1;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <TIM3_IRQHandler+0x2c>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	601a      	str	r2, [r3, #0]
  }

  // Disable the TIM3 interrupt

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <TIM3_IRQHandler+0x30>)
 80007d0:	f002 fa45 	bl	8002c5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK) {
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <TIM3_IRQHandler+0x30>)
 80007d6:	f002 fa13 	bl	8002c00 <HAL_TIM_Base_Stop_IT>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <TIM3_IRQHandler+0x28>
    Error_Handler();
 80007e0:	f7ff ff98 	bl	8000714 <Error_Handler>
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000074 	.word	0x20000074

080007f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <USART3_IRQHandler+0x10>)
 80007f6:	f002 fee1 	bl	80035bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000148 	.word	0x20000148

08000804 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//	HAL_GPIO_TogglePin(lightStatus_GPIO_Port, lightStatus_Pin);
	if(buttonReady){
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <EXTI15_10_IRQHandler+0x94>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d03c      	beq.n	800088a <EXTI15_10_IRQHandler+0x86>
	       //TODO: move this into the interrupt driven code / when database tells to send command to peripheral
	    if (isDoorOPEN) {
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <EXTI15_10_IRQHandler+0x98>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00a      	beq.n	800082e <EXTI15_10_IRQHandler+0x2a>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"CLOSE", strlen("CLOSE"), HAL_MAX_DELAY);
 8000818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800081c:	2205      	movs	r2, #5
 800081e:	4920      	ldr	r1, [pc, #128]	; (80008a0 <EXTI15_10_IRQHandler+0x9c>)
 8000820:	4820      	ldr	r0, [pc, #128]	; (80008a4 <EXTI15_10_IRQHandler+0xa0>)
 8000822:	f002 fe41 	bl	80034a8 <HAL_UART_Transmit>
	        isDoorOPEN = 0;
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <EXTI15_10_IRQHandler+0x98>)
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	e009      	b.n	8000842 <EXTI15_10_IRQHandler+0x3e>
	    } else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"OPEN", strlen("OPEN"), HAL_MAX_DELAY);
 800082e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000832:	2204      	movs	r2, #4
 8000834:	491c      	ldr	r1, [pc, #112]	; (80008a8 <EXTI15_10_IRQHandler+0xa4>)
 8000836:	481b      	ldr	r0, [pc, #108]	; (80008a4 <EXTI15_10_IRQHandler+0xa0>)
 8000838:	f002 fe36 	bl	80034a8 <HAL_UART_Transmit>
	        isDoorOPEN = 1;
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <EXTI15_10_IRQHandler+0x98>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
	    }

	    // Button is pressed, toggle the state
	    if (isLightON) {
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <EXTI15_10_IRQHandler+0xa8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00a      	beq.n	8000860 <EXTI15_10_IRQHandler+0x5c>
	        HAL_UART_Transmit(&huart4, (uint8_t *)"OFF", strlen("OFF"), HAL_MAX_DELAY);
 800084a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800084e:	2203      	movs	r2, #3
 8000850:	4917      	ldr	r1, [pc, #92]	; (80008b0 <EXTI15_10_IRQHandler+0xac>)
 8000852:	4818      	ldr	r0, [pc, #96]	; (80008b4 <EXTI15_10_IRQHandler+0xb0>)
 8000854:	f002 fe28 	bl	80034a8 <HAL_UART_Transmit>
	        isLightON = 0;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <EXTI15_10_IRQHandler+0xa8>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	e009      	b.n	8000874 <EXTI15_10_IRQHandler+0x70>
	    } else {
	        HAL_UART_Transmit(&huart4, (uint8_t *)"ON", strlen("ON"), HAL_MAX_DELAY);
 8000860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000864:	2202      	movs	r2, #2
 8000866:	4914      	ldr	r1, [pc, #80]	; (80008b8 <EXTI15_10_IRQHandler+0xb4>)
 8000868:	4812      	ldr	r0, [pc, #72]	; (80008b4 <EXTI15_10_IRQHandler+0xb0>)
 800086a:	f002 fe1d 	bl	80034a8 <HAL_UART_Transmit>
	        isLightON = 1;
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <EXTI15_10_IRQHandler+0xa8>)
 8000870:	2201      	movs	r2, #1
 8000872:	601a      	str	r2, [r3, #0]
	    }

	    buttonReady = 0;
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <EXTI15_10_IRQHandler+0x94>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]

		  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 800087a:	4810      	ldr	r0, [pc, #64]	; (80008bc <EXTI15_10_IRQHandler+0xb8>)
 800087c:	f002 f950 	bl	8002b20 <HAL_TIM_Base_Start_IT>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <EXTI15_10_IRQHandler+0x86>
			  Error_Handler();
 8000886:	f7ff ff45 	bl	8000714 <Error_Handler>
		  }

	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userControl_Pin);
 800088a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800088e:	f000 fdab 	bl	80013e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000000 	.word	0x20000000
 800089c:	20000070 	.word	0x20000070
 80008a0:	08004c70 	.word	0x08004c70
 80008a4:	20000148 	.word	0x20000148
 80008a8:	08004c78 	.word	0x08004c78
 80008ac:	2000006c 	.word	0x2000006c
 80008b0:	08004c80 	.word	0x08004c80
 80008b4:	200000c0 	.word	0x200000c0
 80008b8:	08004c84 	.word	0x08004c84
 80008bc:	20000074 	.word	0x20000074

080008c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <UART4_IRQHandler+0x10>)
 80008c6:	f002 fe79 	bl	80035bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000c0 	.word	0x200000c0

080008d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_TIM3_Init+0x98>)
 8000918:	4a1e      	ldr	r2, [pc, #120]	; (8000994 <MX_TIM3_Init+0x9c>)
 800091a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_TIM3_Init+0x98>)
 800091e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_TIM3_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_TIM3_Init+0x98>)
 800092c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_TIM3_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_TIM3_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800093e:	4814      	ldr	r0, [pc, #80]	; (8000990 <MX_TIM3_Init+0x98>)
 8000940:	f002 f896 	bl	8002a70 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800094a:	f7ff fee3 	bl	8000714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000952:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	4619      	mov	r1, r3
 800095a:	480d      	ldr	r0, [pc, #52]	; (8000990 <MX_TIM3_Init+0x98>)
 800095c:	f002 fa81 	bl	8002e62 <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000966:	f7ff fed5 	bl	8000714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <MX_TIM3_Init+0x98>)
 8000978:	f002 fca2 	bl	80032c0 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000982:	f7ff fec7 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000074 	.word	0x20000074
 8000994:	40000400 	.word	0x40000400

08000998 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <HAL_TIM_Base_MspInit+0x44>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d113      	bne.n	80009d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_TIM_Base_MspInit+0x48>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <HAL_TIM_Base_MspInit+0x48>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6593      	str	r3, [r2, #88]	; 0x58
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_TIM_Base_MspInit+0x48>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	201d      	movs	r0, #29
 80009c8:	f000 fa97 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009cc:	201d      	movs	r0, #29
 80009ce:	f000 fab0 	bl	8000f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40000400 	.word	0x40000400
 80009e0:	40021000 	.word	0x40021000

080009e4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_UART4_Init+0x58>)
 80009ea:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <MX_UART4_Init+0x5c>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_UART4_Init+0x58>)
 80009f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_UART4_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_UART4_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_UART4_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_UART4_Init+0x58>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_UART4_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_UART4_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_UART4_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_UART4_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_UART4_Init+0x58>)
 8000a28:	f002 fcf0 	bl	800340c <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a32:	f7ff fe6f 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000c0 	.word	0x200000c0
 8000a40:	40004c00 	.word	0x40004c00

08000a44 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <MX_USART3_UART_Init+0x5c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a88:	f002 fcc0 	bl	800340c <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a92:	f7ff fe3f 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000148 	.word	0x20000148
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0ae      	sub	sp, #184	; 0xb8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	2288      	movs	r2, #136	; 0x88
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f004 f87d 	bl	8004bc4 <memset>
  if(uartHandle->Instance==UART4)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a4a      	ldr	r2, [pc, #296]	; (8000bf8 <HAL_UART_MspInit+0x154>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d144      	bne.n	8000b5e <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fb09 	bl	80020f8 <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aec:	f7ff fe12 	bl	8000714 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000af0:	4b42      	ldr	r3, [pc, #264]	; (8000bfc <HAL_UART_MspInit+0x158>)
 8000af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af4:	4a41      	ldr	r2, [pc, #260]	; (8000bfc <HAL_UART_MspInit+0x158>)
 8000af6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000afa:	6593      	str	r3, [r2, #88]	; 0x58
 8000afc:	4b3f      	ldr	r3, [pc, #252]	; (8000bfc <HAL_UART_MspInit+0x158>)
 8000afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b08:	4b3c      	ldr	r3, [pc, #240]	; (8000bfc <HAL_UART_MspInit+0x158>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0c:	4a3b      	ldr	r2, [pc, #236]	; (8000bfc <HAL_UART_MspInit+0x158>)
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b14:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <HAL_UART_MspInit+0x158>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b44:	4619      	mov	r1, r3
 8000b46:	482e      	ldr	r0, [pc, #184]	; (8000c00 <HAL_UART_MspInit+0x15c>)
 8000b48:	f000 fa8c 	bl	8001064 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2034      	movs	r0, #52	; 0x34
 8000b52:	f000 f9d2 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000b56:	2034      	movs	r0, #52	; 0x34
 8000b58:	f000 f9eb 	bl	8000f32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b5c:	e047      	b.n	8000bee <HAL_UART_MspInit+0x14a>
  else if(uartHandle->Instance==USART3)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a28      	ldr	r2, [pc, #160]	; (8000c04 <HAL_UART_MspInit+0x160>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d142      	bne.n	8000bee <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 fabf 	bl	80020f8 <HAL_RCCEx_PeriphCLKConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000b80:	f7ff fdc8 	bl	8000714 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <HAL_UART_MspInit+0x158>)
 8000b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b88:	4a1c      	ldr	r2, [pc, #112]	; (8000bfc <HAL_UART_MspInit+0x158>)
 8000b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_UART_MspInit+0x158>)
 8000b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_UART_MspInit+0x158>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba0:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <HAL_UART_MspInit+0x158>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_UART_MspInit+0x158>)
 8000baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bb4:	2330      	movs	r3, #48	; 0x30
 8000bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bcc:	2307      	movs	r3, #7
 8000bce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <HAL_UART_MspInit+0x15c>)
 8000bda:	f000 fa43 	bl	8001064 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2027      	movs	r0, #39	; 0x27
 8000be4:	f000 f989 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000be8:	2027      	movs	r0, #39	; 0x27
 8000bea:	f000 f9a2 	bl	8000f32 <HAL_NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	37b8      	adds	r7, #184	; 0xb8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40004c00 	.word	0x40004c00
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	48000800 	.word	0x48000800
 8000c04:	40004800 	.word	0x40004800

08000c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c0c:	f7ff fe62 	bl	80008d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	; (8000c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	; (8000c54 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f003 ffcd 	bl	8004bd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3a:	f7ff fced 	bl	8000618 <main>

08000c3e <LoopForever>:

LoopForever:
    b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c4c:	08004ce0 	.word	0x08004ce0
  ldr r2, =_sbss
 8000c50:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c54:	200001d4 	.word	0x200001d4

08000c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_2_IRQHandler>

08000c5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f93d 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f000 f80e 	bl	8000c8c <HAL_InitTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	e001      	b.n	8000c80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7c:	f7ff fd50 	bl	8000720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_InitTick+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d023      	beq.n	8000ce8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <HAL_InitTick+0x70>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_InitTick+0x6c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f949 	bl	8000f4e <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10f      	bne.n	8000ce2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d809      	bhi.n	8000cdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd0:	f000 f913 	bl	8000efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_InitTick+0x74>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e007      	b.n	8000cec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e004      	b.n	8000cec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e001      	b.n	8000cec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000000c 	.word	0x2000000c
 8000cfc:	20000004 	.word	0x20000004
 8000d00:	20000008 	.word	0x20000008

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	2000000c 	.word	0x2000000c
 8000d28:	200001d0 	.word	0x200001d0

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	200001d0 	.word	0x200001d0

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff29 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff3e 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff8e 	bl	8000e38 <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5d 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff31 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffa2 	bl	8000ea0 <SysTick_Config>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b085      	sub	sp, #20
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d008      	beq.n	8000f90 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2204      	movs	r2, #4
 8000f82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e022      	b.n	8000fd6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 020e 	bic.w	r2, r2, #14
 8000f9e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0201 	bic.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb4:	f003 021c 	and.w	r2, r3, #28
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d005      	beq.n	8001006 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e029      	b.n	800105a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 020e 	bic.w	r2, r2, #14
 8001014:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f003 021c 	and.w	r2, r3, #28
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	2101      	movs	r1, #1
 8001034:	fa01 f202 	lsl.w	r2, r1, r2
 8001038:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	4798      	blx	r3
    }
  }
  return status;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001072:	e17f      	b.n	8001374 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	2101      	movs	r1, #1
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	4013      	ands	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 8171 	beq.w	800136e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d005      	beq.n	80010a4 <HAL_GPIO_Init+0x40>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d130      	bne.n	8001106 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010da:	2201      	movs	r2, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	091b      	lsrs	r3, r3, #4
 80010f0:	f003 0201 	and.w	r2, r3, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b03      	cmp	r3, #3
 8001110:	d118      	bne.n	8001144 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001118:	2201      	movs	r2, #1
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	f003 0201 	and.w	r2, r3, #1
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b03      	cmp	r3, #3
 800114e:	d017      	beq.n	8001180 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d123      	bne.n	80011d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	6939      	ldr	r1, [r7, #16]
 80011d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0203 	and.w	r2, r3, #3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80ac 	beq.w	800136e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b5f      	ldr	r3, [pc, #380]	; (8001394 <HAL_GPIO_Init+0x330>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	4a5e      	ldr	r2, [pc, #376]	; (8001394 <HAL_GPIO_Init+0x330>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6613      	str	r3, [r2, #96]	; 0x60
 8001222:	4b5c      	ldr	r3, [pc, #368]	; (8001394 <HAL_GPIO_Init+0x330>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800122e:	4a5a      	ldr	r2, [pc, #360]	; (8001398 <HAL_GPIO_Init+0x334>)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001258:	d025      	beq.n	80012a6 <HAL_GPIO_Init+0x242>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4f      	ldr	r2, [pc, #316]	; (800139c <HAL_GPIO_Init+0x338>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d01f      	beq.n	80012a2 <HAL_GPIO_Init+0x23e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4e      	ldr	r2, [pc, #312]	; (80013a0 <HAL_GPIO_Init+0x33c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d019      	beq.n	800129e <HAL_GPIO_Init+0x23a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4d      	ldr	r2, [pc, #308]	; (80013a4 <HAL_GPIO_Init+0x340>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d013      	beq.n	800129a <HAL_GPIO_Init+0x236>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4c      	ldr	r2, [pc, #304]	; (80013a8 <HAL_GPIO_Init+0x344>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00d      	beq.n	8001296 <HAL_GPIO_Init+0x232>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4b      	ldr	r2, [pc, #300]	; (80013ac <HAL_GPIO_Init+0x348>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d007      	beq.n	8001292 <HAL_GPIO_Init+0x22e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4a      	ldr	r2, [pc, #296]	; (80013b0 <HAL_GPIO_Init+0x34c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_GPIO_Init+0x22a>
 800128a:	2306      	movs	r3, #6
 800128c:	e00c      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 800128e:	2307      	movs	r3, #7
 8001290:	e00a      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 8001292:	2305      	movs	r3, #5
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 8001296:	2304      	movs	r3, #4
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x244>
 80012a6:	2300      	movs	r3, #0
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012b8:	4937      	ldr	r1, [pc, #220]	; (8001398 <HAL_GPIO_Init+0x334>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c6:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_GPIO_Init+0x350>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ea:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <HAL_GPIO_Init+0x350>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_GPIO_Init+0x350>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001314:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <HAL_GPIO_Init+0x350>)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <HAL_GPIO_Init+0x350>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <HAL_GPIO_Init+0x350>)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_GPIO_Init+0x350>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <HAL_GPIO_Init+0x350>)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	f47f ae78 	bne.w	8001074 <HAL_GPIO_Init+0x10>
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	371c      	adds	r7, #28
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	40010000 	.word	0x40010000
 800139c:	48000400 	.word	0x48000400
 80013a0:	48000800 	.word	0x48000800
 80013a4:	48000c00 	.word	0x48000c00
 80013a8:	48001000 	.word	0x48001000
 80013ac:	48001400 	.word	0x48001400
 80013b0:	48001800 	.word	0x48001800
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d006      	beq.n	800140c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f806 	bl	8001418 <HAL_GPIO_EXTI_Callback>
  }
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40010400 	.word	0x40010400

08001418 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <HAL_PWREx_GetVoltageRange+0x18>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40007000 	.word	0x40007000

0800144c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800145a:	d130      	bne.n	80014be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001468:	d038      	beq.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001478:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2232      	movs	r2, #50	; 0x32
 8001480:	fb02 f303 	mul.w	r3, r2, r3
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	0c9b      	lsrs	r3, r3, #18
 800148c:	3301      	adds	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001490:	e002      	b.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3b01      	subs	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a4:	d102      	bne.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f2      	bne.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b8:	d110      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e00f      	b.n	80014de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ca:	d007      	beq.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d4:	4a05      	ldr	r2, [pc, #20]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40007000 	.word	0x40007000
 80014f0:	20000004 	.word	0x20000004
 80014f4:	431bde83 	.word	0x431bde83

080014f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e3ca      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800150a:	4b97      	ldr	r3, [pc, #604]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001514:	4b94      	ldr	r3, [pc, #592]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80e4 	beq.w	80016f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <HAL_RCC_OscConfig+0x4a>
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	f040 808b 	bne.w	8001650 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b01      	cmp	r3, #1
 800153e:	f040 8087 	bne.w	8001650 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_RCC_OscConfig+0x62>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e3a2      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1a      	ldr	r2, [r3, #32]
 800155e:	4b82      	ldr	r3, [pc, #520]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d004      	beq.n	8001574 <HAL_RCC_OscConfig+0x7c>
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001572:	e005      	b.n	8001580 <HAL_RCC_OscConfig+0x88>
 8001574:	4b7c      	ldr	r3, [pc, #496]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001580:	4293      	cmp	r3, r2
 8001582:	d223      	bcs.n	80015cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fd55 	bl	8002038 <RCC_SetFlashLatencyFromMSIRange>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e383      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001598:	4b73      	ldr	r3, [pc, #460]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a72      	ldr	r2, [pc, #456]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b70      	ldr	r3, [pc, #448]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	496d      	ldr	r1, [pc, #436]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b6:	4b6c      	ldr	r3, [pc, #432]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	4968      	ldr	r1, [pc, #416]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
 80015ca:	e025      	b.n	8001618 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015cc:	4b66      	ldr	r3, [pc, #408]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a65      	ldr	r2, [pc, #404]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015d2:	f043 0308 	orr.w	r3, r3, #8
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b63      	ldr	r3, [pc, #396]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4960      	ldr	r1, [pc, #384]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ea:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	495b      	ldr	r1, [pc, #364]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d109      	bne.n	8001618 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fd15 	bl	8002038 <RCC_SetFlashLatencyFromMSIRange>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e343      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001618:	f000 fc4a 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 800161c:	4602      	mov	r2, r0
 800161e:	4b52      	ldr	r3, [pc, #328]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	4950      	ldr	r1, [pc, #320]	; (800176c <HAL_RCC_OscConfig+0x274>)
 800162a:	5ccb      	ldrb	r3, [r1, r3]
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
 8001634:	4a4e      	ldr	r2, [pc, #312]	; (8001770 <HAL_RCC_OscConfig+0x278>)
 8001636:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001638:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <HAL_RCC_OscConfig+0x27c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fb25 	bl	8000c8c <HAL_InitTick>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d052      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	e327      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d032      	beq.n	80016be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001658:	4b43      	ldr	r3, [pc, #268]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a42      	ldr	r2, [pc, #264]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001664:	f7ff fb62 	bl	8000d2c <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800166c:	f7ff fb5e 	bl	8000d2c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e310      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800167e:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a36      	ldr	r2, [pc, #216]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4931      	ldr	r1, [pc, #196]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a8:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	492c      	ldr	r1, [pc, #176]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
 80016bc:	e01a      	b.n	80016f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016be:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a29      	ldr	r2, [pc, #164]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fb2f 	bl	8000d2c <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d2:	f7ff fb2b 	bl	8000d2c <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e2dd      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016e4:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x1da>
 80016f0:	e000      	b.n	80016f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d074      	beq.n	80017ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2b08      	cmp	r3, #8
 8001704:	d005      	beq.n	8001712 <HAL_RCC_OscConfig+0x21a>
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2b0c      	cmp	r3, #12
 800170a:	d10e      	bne.n	800172a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d10b      	bne.n	800172a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d064      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2f0>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d160      	bne.n	80017e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e2ba      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x24a>
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800173a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e026      	b.n	8001790 <HAL_RCC_OscConfig+0x298>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800174a:	d115      	bne.n	8001778 <HAL_RCC_OscConfig+0x280>
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 8001752:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a02      	ldr	r2, [pc, #8]	; (8001768 <HAL_RCC_OscConfig+0x270>)
 800175e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e014      	b.n	8001790 <HAL_RCC_OscConfig+0x298>
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	08004c88 	.word	0x08004c88
 8001770:	20000004 	.word	0x20000004
 8001774:	20000008 	.word	0x20000008
 8001778:	4ba0      	ldr	r3, [pc, #640]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a9f      	ldr	r2, [pc, #636]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800177e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b9d      	ldr	r3, [pc, #628]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a9c      	ldr	r2, [pc, #624]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800178a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fac8 	bl	8000d2c <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fac4 	bl	8000d2c <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e276      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b2:	4b92      	ldr	r3, [pc, #584]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x2a8>
 80017be:	e014      	b.n	80017ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff fab4 	bl	8000d2c <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fab0 	bl	8000d2c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e262      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017da:	4b88      	ldr	r3, [pc, #544]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x2d0>
 80017e6:	e000      	b.n	80017ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d060      	beq.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_OscConfig+0x310>
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d119      	bne.n	8001836 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d116      	bne.n	8001836 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001808:	4b7c      	ldr	r3, [pc, #496]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_OscConfig+0x328>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e23f      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b76      	ldr	r3, [pc, #472]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	4973      	ldr	r1, [pc, #460]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001834:	e040      	b.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d023      	beq.n	8001886 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183e:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a6e      	ldr	r2, [pc, #440]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff fa6f 	bl	8000d2c <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff fa6b 	bl	8000d2c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e21d      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001864:	4b65      	ldr	r3, [pc, #404]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b62      	ldr	r3, [pc, #392]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	061b      	lsls	r3, r3, #24
 800187e:	495f      	ldr	r1, [pc, #380]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
 8001884:	e018      	b.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001886:	4b5d      	ldr	r3, [pc, #372]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a5c      	ldr	r2, [pc, #368]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800188c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fa4b 	bl	8000d2c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff fa47 	bl	8000d2c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e1f9      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d03c      	beq.n	800193e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d01c      	beq.n	8001906 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018cc:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80018ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d2:	4a4a      	ldr	r2, [pc, #296]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff fa26 	bl	8000d2c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e4:	f7ff fa22 	bl	8000d2c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e1d4      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80018f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0ef      	beq.n	80018e4 <HAL_RCC_OscConfig+0x3ec>
 8001904:	e01b      	b.n	800193e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001906:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190c:	4a3b      	ldr	r2, [pc, #236]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff fa09 	bl	8000d2c <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191e:	f7ff fa05 	bl	8000d2c <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e1b7      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001930:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ef      	bne.n	800191e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80a6 	beq.w	8001a98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194c:	2300      	movs	r3, #0
 800194e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10d      	bne.n	8001978 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	4a26      	ldr	r2, [pc, #152]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 8001962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001966:	6593      	str	r3, [r2, #88]	; 0x58
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001974:	2301      	movs	r3, #1
 8001976:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_RCC_OscConfig+0x508>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d118      	bne.n	80019b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001984:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <HAL_RCC_OscConfig+0x508>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_RCC_OscConfig+0x508>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001990:	f7ff f9cc 	bl	8000d2c <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001998:	f7ff f9c8 	bl	8000d2c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e17a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_RCC_OscConfig+0x508>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d108      	bne.n	80019d0 <HAL_RCC_OscConfig+0x4d8>
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ce:	e029      	b.n	8001a24 <HAL_RCC_OscConfig+0x52c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d115      	bne.n	8001a04 <HAL_RCC_OscConfig+0x50c>
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	4a03      	ldr	r2, [pc, #12]	; (80019fc <HAL_RCC_OscConfig+0x504>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f8:	e014      	b.n	8001a24 <HAL_RCC_OscConfig+0x52c>
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007000 	.word	0x40007000
 8001a04:	4b9c      	ldr	r3, [pc, #624]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0a:	4a9b      	ldr	r2, [pc, #620]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a14:	4b98      	ldr	r3, [pc, #608]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1a:	4a97      	ldr	r2, [pc, #604]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d016      	beq.n	8001a5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f97e 	bl	8000d2c <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a34:	f7ff f97a 	bl	8000d2c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e12a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4a:	4b8b      	ldr	r3, [pc, #556]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ed      	beq.n	8001a34 <HAL_RCC_OscConfig+0x53c>
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f967 	bl	8000d2c <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff f963 	bl	8000d2c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e113      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a78:	4b7f      	ldr	r3, [pc, #508]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ed      	bne.n	8001a62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a86:	7ffb      	ldrb	r3, [r7, #31]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b7a      	ldr	r3, [pc, #488]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	4a79      	ldr	r2, [pc, #484]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a96:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80fe 	beq.w	8001c9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	f040 80d0 	bne.w	8001c4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001aac:	4b72      	ldr	r3, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0203 	and.w	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d130      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	3b01      	subs	r3, #1
 8001acc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d127      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001adc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d11f      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aec:	2a07      	cmp	r2, #7
 8001aee:	bf14      	ite	ne
 8001af0:	2201      	movne	r2, #1
 8001af2:	2200      	moveq	r2, #0
 8001af4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d113      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b04:	085b      	lsrs	r3, r3, #1
 8001b06:	3b01      	subs	r3, #1
 8001b08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d109      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d06e      	beq.n	8001c00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b0c      	cmp	r3, #12
 8001b26:	d069      	beq.n	8001bfc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b28:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0ad      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b44:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a4b      	ldr	r2, [pc, #300]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b50:	f7ff f8ec 	bl	8000d2c <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f8e8 	bl	8000d2c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e09a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6a:	4b43      	ldr	r3, [pc, #268]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b76:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <HAL_RCC_OscConfig+0x784>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b86:	3a01      	subs	r2, #1
 8001b88:	0112      	lsls	r2, r2, #4
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b90:	0212      	lsls	r2, r2, #8
 8001b92:	4311      	orrs	r1, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b98:	0852      	lsrs	r2, r2, #1
 8001b9a:	3a01      	subs	r2, #1
 8001b9c:	0552      	lsls	r2, r2, #21
 8001b9e:	4311      	orrs	r1, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ba4:	0852      	lsrs	r2, r2, #1
 8001ba6:	3a01      	subs	r2, #1
 8001ba8:	0652      	lsls	r2, r2, #25
 8001baa:	4311      	orrs	r1, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bb0:	0912      	lsrs	r2, r2, #4
 8001bb2:	0452      	lsls	r2, r2, #17
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	4930      	ldr	r1, [pc, #192]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2d      	ldr	r2, [pc, #180]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bd4:	f7ff f8aa 	bl	8000d2c <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff f8a6 	bl	8000d2c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e058      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bfa:	e050      	b.n	8001c9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e04f      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d148      	bne.n	8001c9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c24:	f7ff f882 	bl	8000d2c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7ff f87e 	bl	8000d2c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e030      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x734>
 8001c4a:	e028      	b.n	8001c9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	d023      	beq.n	8001c9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_RCC_OscConfig+0x780>)
 8001c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f865 	bl	8000d2c <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c64:	e00c      	b.n	8001c80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff f861 	bl	8000d2c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d905      	bls.n	8001c80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e013      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_OscConfig+0x7b0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1ec      	bne.n	8001c66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_RCC_OscConfig+0x7b0>)
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	4905      	ldr	r1, [pc, #20]	; (8001ca8 <HAL_RCC_OscConfig+0x7b0>)
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_OscConfig+0x7b4>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	60cb      	str	r3, [r1, #12]
 8001c98:	e001      	b.n	8001c9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	feeefffc 	.word	0xfeeefffc

08001cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0e7      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b75      	ldr	r3, [pc, #468]	; (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d910      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b72      	ldr	r3, [pc, #456]	; (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 0207 	bic.w	r2, r3, #7
 8001cda:	4970      	ldr	r1, [pc, #448]	; (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b6e      	ldr	r3, [pc, #440]	; (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0cf      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d010      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d908      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b63      	ldr	r3, [pc, #396]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4960      	ldr	r1, [pc, #384]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d04c      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d36:	4b5a      	ldr	r3, [pc, #360]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d121      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0a6      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4e:	4b54      	ldr	r3, [pc, #336]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d115      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e09a      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d66:	4b4e      	ldr	r3, [pc, #312]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e08e      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d76:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e086      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d86:	4b46      	ldr	r3, [pc, #280]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f023 0203 	bic.w	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4943      	ldr	r1, [pc, #268]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d98:	f7fe ffc8 	bl	8000d2c <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da0:	f7fe ffc4 	bl	8000d2c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e06e      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 020c 	and.w	r2, r3, #12
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1eb      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d010      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d208      	bcs.n	8001df6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	492b      	ldr	r1, [pc, #172]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d210      	bcs.n	8001e26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 0207 	bic.w	r2, r3, #7
 8001e0c:	4923      	ldr	r1, [pc, #140]	; (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e14:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <HAL_RCC_ClockConfig+0x1ec>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e036      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4918      	ldr	r1, [pc, #96]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d009      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4910      	ldr	r1, [pc, #64]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e64:	f000 f824 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	490b      	ldr	r1, [pc, #44]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e76:	5ccb      	ldrb	r3, [r1, r3]
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e80:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_RCC_ClockConfig+0x1fc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe feff 	bl	8000c8c <HAL_InitTick>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e92:	7afb      	ldrb	r3, [r7, #11]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40022000 	.word	0x40022000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08004c88 	.word	0x08004c88
 8001ea8:	20000004 	.word	0x20000004
 8001eac:	20000008 	.word	0x20000008

08001eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec8:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b0c      	cmp	r3, #12
 8001edc:	d121      	bne.n	8001f22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d11e      	bne.n	8001f22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ee4:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d107      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ef0:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	e005      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f00:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f0c:	4a2b      	ldr	r2, [pc, #172]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10d      	bne.n	8001f38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d102      	bne.n	8001f2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f28:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	e004      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f34:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d134      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d003      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d003      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0xac>
 8001f54:	e005      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f58:	617b      	str	r3, [r7, #20]
      break;
 8001f5a:	e005      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f5e:	617b      	str	r3, [r7, #20]
      break;
 8001f60:	e002      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	617b      	str	r3, [r7, #20]
      break;
 8001f66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	3301      	adds	r3, #1
 8001f74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	fb03 f202 	mul.w	r2, r3, r2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	0e5b      	lsrs	r3, r3, #25
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fa8:	69bb      	ldr	r3, [r7, #24]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3724      	adds	r7, #36	; 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08004ca0 	.word	0x08004ca0
 8001fc0:	00f42400 	.word	0x00f42400
 8001fc4:	007a1200 	.word	0x007a1200

08001fc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fe4:	f7ff fff0 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4904      	ldr	r1, [pc, #16]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	08004c98 	.word	0x08004c98

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002010:	f7ff ffda 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0adb      	lsrs	r3, r3, #11
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4904      	ldr	r1, [pc, #16]	; (8002034 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	08004c98 	.word	0x08004c98

08002038 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002044:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002050:	f7ff f9ee 	bl	8001430 <HAL_PWREx_GetVoltageRange>
 8002054:	6178      	str	r0, [r7, #20]
 8002056:	e014      	b.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	4a24      	ldr	r2, [pc, #144]	; (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002062:	6593      	str	r3, [r2, #88]	; 0x58
 8002064:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002070:	f7ff f9de 	bl	8001430 <HAL_PWREx_GetVoltageRange>
 8002074:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002080:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002088:	d10b      	bne.n	80020a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b80      	cmp	r3, #128	; 0x80
 800208e:	d919      	bls.n	80020c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2ba0      	cmp	r3, #160	; 0xa0
 8002094:	d902      	bls.n	800209c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002096:	2302      	movs	r3, #2
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	e013      	b.n	80020c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800209c:	2301      	movs	r3, #1
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	e010      	b.n	80020c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b80      	cmp	r3, #128	; 0x80
 80020a6:	d902      	bls.n	80020ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020a8:	2303      	movs	r3, #3
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	e00a      	b.n	80020c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b80      	cmp	r3, #128	; 0x80
 80020b2:	d102      	bne.n	80020ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020b4:	2302      	movs	r3, #2
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	e004      	b.n	80020c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b70      	cmp	r3, #112	; 0x70
 80020be:	d101      	bne.n	80020c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020c0:	2301      	movs	r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f023 0207 	bic.w	r2, r3, #7
 80020cc:	4909      	ldr	r1, [pc, #36]	; (80020f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d001      	beq.n	80020e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40022000 	.word	0x40022000

080020f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002100:	2300      	movs	r3, #0
 8002102:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002104:	2300      	movs	r3, #0
 8002106:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002110:	2b00      	cmp	r3, #0
 8002112:	d041      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002118:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800211c:	d02a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800211e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002122:	d824      	bhi.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002124:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002128:	d008      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800212a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800212e:	d81e      	bhi.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002138:	d010      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800213a:	e018      	b.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800213c:	4b86      	ldr	r3, [pc, #536]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4a85      	ldr	r2, [pc, #532]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002146:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002148:	e015      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3304      	adds	r3, #4
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fabb 	bl	80026cc <RCCEx_PLLSAI1_Config>
 8002156:	4603      	mov	r3, r0
 8002158:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800215a:	e00c      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3320      	adds	r3, #32
 8002160:	2100      	movs	r1, #0
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fba6 	bl	80028b4 <RCCEx_PLLSAI2_Config>
 8002168:	4603      	mov	r3, r0
 800216a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800216c:	e003      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	74fb      	strb	r3, [r7, #19]
      break;
 8002172:	e000      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10b      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800217c:	4b76      	ldr	r3, [pc, #472]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800218a:	4973      	ldr	r1, [pc, #460]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002192:	e001      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d041      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021ac:	d02a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021b2:	d824      	bhi.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021b8:	d008      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021be:	d81e      	bhi.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c8:	d010      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021ca:	e018      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021cc:	4b62      	ldr	r3, [pc, #392]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a61      	ldr	r2, [pc, #388]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021d8:	e015      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3304      	adds	r3, #4
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fa73 	bl	80026cc <RCCEx_PLLSAI1_Config>
 80021e6:	4603      	mov	r3, r0
 80021e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ea:	e00c      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3320      	adds	r3, #32
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fb5e 	bl	80028b4 <RCCEx_PLLSAI2_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021fc:	e003      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	74fb      	strb	r3, [r7, #19]
      break;
 8002202:	e000      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002206:	7cfb      	ldrb	r3, [r7, #19]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10b      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800220c:	4b52      	ldr	r3, [pc, #328]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800221a:	494f      	ldr	r1, [pc, #316]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002222:	e001      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a0 	beq.w	8002376 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800223a:	4b47      	ldr	r3, [pc, #284]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800224a:	2300      	movs	r3, #0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00d      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	4b41      	ldr	r3, [pc, #260]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	4a40      	ldr	r2, [pc, #256]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225a:	6593      	str	r3, [r2, #88]	; 0x58
 800225c:	4b3e      	ldr	r3, [pc, #248]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002268:	2301      	movs	r3, #1
 800226a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800226c:	4b3b      	ldr	r3, [pc, #236]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a3a      	ldr	r2, [pc, #232]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002276:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002278:	f7fe fd58 	bl	8000d2c <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800227e:	e009      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002280:	f7fe fd54 	bl	8000d2c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d902      	bls.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	74fb      	strb	r3, [r7, #19]
        break;
 8002292:	e005      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002294:	4b31      	ldr	r3, [pc, #196]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0ef      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d15c      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022a6:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01f      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d019      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	4a20      	ldr	r2, [pc, #128]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	4a1c      	ldr	r2, [pc, #112]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022f0:	4a19      	ldr	r2, [pc, #100]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d016      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002302:	f7fe fd13 	bl	8000d2c <HAL_GetTick>
 8002306:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002308:	e00b      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f7fe fd0f 	bl	8000d2c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f241 3288 	movw	r2, #5000	; 0x1388
 8002318:	4293      	cmp	r3, r2
 800231a:	d902      	bls.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	74fb      	strb	r3, [r7, #19]
            break;
 8002320:	e006      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0ec      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10c      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002346:	4904      	ldr	r1, [pc, #16]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800234e:	e009      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	74bb      	strb	r3, [r7, #18]
 8002354:	e006      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002364:	7c7b      	ldrb	r3, [r7, #17]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d105      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4b9e      	ldr	r3, [pc, #632]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	4a9d      	ldr	r2, [pc, #628]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002382:	4b98      	ldr	r3, [pc, #608]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f023 0203 	bic.w	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	4994      	ldr	r1, [pc, #592]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023a4:	4b8f      	ldr	r3, [pc, #572]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f023 020c 	bic.w	r2, r3, #12
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b2:	498c      	ldr	r1, [pc, #560]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023c6:	4b87      	ldr	r3, [pc, #540]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	4983      	ldr	r1, [pc, #524]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023e8:	4b7e      	ldr	r3, [pc, #504]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	497b      	ldr	r1, [pc, #492]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002418:	4972      	ldr	r1, [pc, #456]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800242c:	4b6d      	ldr	r3, [pc, #436]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	496a      	ldr	r1, [pc, #424]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002454:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	4961      	ldr	r1, [pc, #388]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002470:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247e:	4959      	ldr	r1, [pc, #356]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002492:	4b54      	ldr	r3, [pc, #336]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a0:	4950      	ldr	r1, [pc, #320]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024b4:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	4948      	ldr	r1, [pc, #288]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024d6:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	493f      	ldr	r1, [pc, #252]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d028      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024f8:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002506:	4937      	ldr	r1, [pc, #220]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002516:	d106      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002518:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4a31      	ldr	r2, [pc, #196]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002522:	60d3      	str	r3, [r2, #12]
 8002524:	e011      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800252e:	d10c      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3304      	adds	r3, #4
 8002534:	2101      	movs	r1, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f8c8 	bl	80026cc <RCCEx_PLLSAI1_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002546:	7cfb      	ldrb	r3, [r7, #19]
 8002548:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d028      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	491f      	ldr	r1, [pc, #124]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002574:	d106      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002580:	60d3      	str	r3, [r2, #12]
 8002582:	e011      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3304      	adds	r3, #4
 8002592:	2101      	movs	r1, #1
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f899 	bl	80026cc <RCCEx_PLLSAI1_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d02b      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c2:	4908      	ldr	r1, [pc, #32]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025d2:	d109      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a02      	ldr	r2, [pc, #8]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025de:	60d3      	str	r3, [r2, #12]
 80025e0:	e014      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025f0:	d10c      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2101      	movs	r1, #1
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 f867 	bl	80026cc <RCCEx_PLLSAI1_Config>
 80025fe:	4603      	mov	r3, r0
 8002600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002602:	7cfb      	ldrb	r3, [r7, #19]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d02f      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002618:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002626:	4928      	ldr	r1, [pc, #160]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002636:	d10d      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	2102      	movs	r1, #2
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f844 	bl	80026cc <RCCEx_PLLSAI1_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d014      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	74bb      	strb	r3, [r7, #18]
 8002652:	e011      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800265c:	d10c      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3320      	adds	r3, #32
 8002662:	2102      	movs	r1, #2
 8002664:	4618      	mov	r0, r3
 8002666:	f000 f925 	bl	80028b4 <RCCEx_PLLSAI2_Config>
 800266a:	4603      	mov	r3, r0
 800266c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800266e:	7cfb      	ldrb	r3, [r7, #19]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002684:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002692:	490d      	ldr	r1, [pc, #52]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026b6:	4904      	ldr	r1, [pc, #16]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026be:	7cbb      	ldrb	r3, [r7, #18]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000

080026cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026da:	4b75      	ldr	r3, [pc, #468]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d018      	beq.n	8002718 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026e6:	4b72      	ldr	r3, [pc, #456]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0203 	and.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d10d      	bne.n	8002712 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
       ||
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026fe:	4b6c      	ldr	r3, [pc, #432]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
       ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d047      	beq.n	80027a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
 8002716:	e044      	b.n	80027a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d018      	beq.n	8002752 <RCCEx_PLLSAI1_Config+0x86>
 8002720:	2b03      	cmp	r3, #3
 8002722:	d825      	bhi.n	8002770 <RCCEx_PLLSAI1_Config+0xa4>
 8002724:	2b01      	cmp	r3, #1
 8002726:	d002      	beq.n	800272e <RCCEx_PLLSAI1_Config+0x62>
 8002728:	2b02      	cmp	r3, #2
 800272a:	d009      	beq.n	8002740 <RCCEx_PLLSAI1_Config+0x74>
 800272c:	e020      	b.n	8002770 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800272e:	4b60      	ldr	r3, [pc, #384]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d11d      	bne.n	8002776 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800273e:	e01a      	b.n	8002776 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002740:	4b5b      	ldr	r3, [pc, #364]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002748:	2b00      	cmp	r3, #0
 800274a:	d116      	bne.n	800277a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002750:	e013      	b.n	800277a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002752:	4b57      	ldr	r3, [pc, #348]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10f      	bne.n	800277e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800275e:	4b54      	ldr	r3, [pc, #336]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800276e:	e006      	b.n	800277e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      break;
 8002774:	e004      	b.n	8002780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800277e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10d      	bne.n	80027a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002786:	4b4a      	ldr	r3, [pc, #296]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6819      	ldr	r1, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	430b      	orrs	r3, r1
 800279c:	4944      	ldr	r1, [pc, #272]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d17d      	bne.n	80028a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027a8:	4b41      	ldr	r3, [pc, #260]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a40      	ldr	r2, [pc, #256]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b4:	f7fe faba 	bl	8000d2c <HAL_GetTick>
 80027b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027ba:	e009      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027bc:	f7fe fab6 	bl	8000d2c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d902      	bls.n	80027d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	73fb      	strb	r3, [r7, #15]
        break;
 80027ce:	e005      	b.n	80027dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027d0:	4b37      	ldr	r3, [pc, #220]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ef      	bne.n	80027bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d160      	bne.n	80028a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d111      	bne.n	800280c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027e8:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6892      	ldr	r2, [r2, #8]
 80027f8:	0211      	lsls	r1, r2, #8
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68d2      	ldr	r2, [r2, #12]
 80027fe:	0912      	lsrs	r2, r2, #4
 8002800:	0452      	lsls	r2, r2, #17
 8002802:	430a      	orrs	r2, r1
 8002804:	492a      	ldr	r1, [pc, #168]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	610b      	str	r3, [r1, #16]
 800280a:	e027      	b.n	800285c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d112      	bne.n	8002838 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002812:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800281a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6892      	ldr	r2, [r2, #8]
 8002822:	0211      	lsls	r1, r2, #8
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6912      	ldr	r2, [r2, #16]
 8002828:	0852      	lsrs	r2, r2, #1
 800282a:	3a01      	subs	r2, #1
 800282c:	0552      	lsls	r2, r2, #21
 800282e:	430a      	orrs	r2, r1
 8002830:	491f      	ldr	r1, [pc, #124]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	610b      	str	r3, [r1, #16]
 8002836:	e011      	b.n	800285c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002840:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6892      	ldr	r2, [r2, #8]
 8002848:	0211      	lsls	r1, r2, #8
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6952      	ldr	r2, [r2, #20]
 800284e:	0852      	lsrs	r2, r2, #1
 8002850:	3a01      	subs	r2, #1
 8002852:	0652      	lsls	r2, r2, #25
 8002854:	430a      	orrs	r2, r1
 8002856:	4916      	ldr	r1, [pc, #88]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002858:	4313      	orrs	r3, r2
 800285a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002862:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002866:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7fe fa60 	bl	8000d2c <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800286e:	e009      	b.n	8002884 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002870:	f7fe fa5c 	bl	8000d2c <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d902      	bls.n	8002884 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	73fb      	strb	r3, [r7, #15]
          break;
 8002882:	e005      	b.n	8002890 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ef      	beq.n	8002870 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	4904      	ldr	r1, [pc, #16]	; (80028b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000

080028b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028c2:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d018      	beq.n	8002900 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028ce:	4b67      	ldr	r3, [pc, #412]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0203 	and.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d10d      	bne.n	80028fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
       ||
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028e6:	4b61      	ldr	r3, [pc, #388]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
       ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d047      	beq.n	800298a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e044      	b.n	800298a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d018      	beq.n	800293a <RCCEx_PLLSAI2_Config+0x86>
 8002908:	2b03      	cmp	r3, #3
 800290a:	d825      	bhi.n	8002958 <RCCEx_PLLSAI2_Config+0xa4>
 800290c:	2b01      	cmp	r3, #1
 800290e:	d002      	beq.n	8002916 <RCCEx_PLLSAI2_Config+0x62>
 8002910:	2b02      	cmp	r3, #2
 8002912:	d009      	beq.n	8002928 <RCCEx_PLLSAI2_Config+0x74>
 8002914:	e020      	b.n	8002958 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002916:	4b55      	ldr	r3, [pc, #340]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d11d      	bne.n	800295e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002926:	e01a      	b.n	800295e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002928:	4b50      	ldr	r3, [pc, #320]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d116      	bne.n	8002962 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002938:	e013      	b.n	8002962 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800293a:	4b4c      	ldr	r3, [pc, #304]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10f      	bne.n	8002966 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002946:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d109      	bne.n	8002966 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002956:	e006      	b.n	8002966 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
      break;
 800295c:	e004      	b.n	8002968 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800295e:	bf00      	nop
 8002960:	e002      	b.n	8002968 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002962:	bf00      	nop
 8002964:	e000      	b.n	8002968 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002966:	bf00      	nop
    }

    if(status == HAL_OK)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10d      	bne.n	800298a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800296e:	4b3f      	ldr	r3, [pc, #252]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6819      	ldr	r1, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	430b      	orrs	r3, r1
 8002984:	4939      	ldr	r1, [pc, #228]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002986:	4313      	orrs	r3, r2
 8002988:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d167      	bne.n	8002a60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a35      	ldr	r2, [pc, #212]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800299c:	f7fe f9c6 	bl	8000d2c <HAL_GetTick>
 80029a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029a2:	e009      	b.n	80029b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029a4:	f7fe f9c2 	bl	8000d2c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d902      	bls.n	80029b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	73fb      	strb	r3, [r7, #15]
        break;
 80029b6:	e005      	b.n	80029c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029b8:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ef      	bne.n	80029a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d14a      	bne.n	8002a60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d111      	bne.n	80029f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029d0:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6892      	ldr	r2, [r2, #8]
 80029e0:	0211      	lsls	r1, r2, #8
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68d2      	ldr	r2, [r2, #12]
 80029e6:	0912      	lsrs	r2, r2, #4
 80029e8:	0452      	lsls	r2, r2, #17
 80029ea:	430a      	orrs	r2, r1
 80029ec:	491f      	ldr	r1, [pc, #124]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	614b      	str	r3, [r1, #20]
 80029f2:	e011      	b.n	8002a18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029f4:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6892      	ldr	r2, [r2, #8]
 8002a04:	0211      	lsls	r1, r2, #8
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6912      	ldr	r2, [r2, #16]
 8002a0a:	0852      	lsrs	r2, r2, #1
 8002a0c:	3a01      	subs	r2, #1
 8002a0e:	0652      	lsls	r2, r2, #25
 8002a10:	430a      	orrs	r2, r1
 8002a12:	4916      	ldr	r1, [pc, #88]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7fe f982 	bl	8000d2c <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a2a:	e009      	b.n	8002a40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a2c:	f7fe f97e 	bl	8000d2c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d902      	bls.n	8002a40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a3e:	e005      	b.n	8002a4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a40:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0ef      	beq.n	8002a2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	4904      	ldr	r1, [pc, #16]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000

08002a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e049      	b.n	8002b16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fd ff7e 	bl	8000998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3304      	adds	r3, #4
 8002aac:	4619      	mov	r1, r3
 8002aae:	4610      	mov	r0, r2
 8002ab0:	f000 fad2 	bl	8003058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d001      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e04f      	b.n	8002bd8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a23      	ldr	r2, [pc, #140]	; (8002be4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d01d      	beq.n	8002b96 <HAL_TIM_Base_Start_IT+0x76>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b62:	d018      	beq.n	8002b96 <HAL_TIM_Base_Start_IT+0x76>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1f      	ldr	r2, [pc, #124]	; (8002be8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_TIM_Base_Start_IT+0x76>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1e      	ldr	r2, [pc, #120]	; (8002bec <HAL_TIM_Base_Start_IT+0xcc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00e      	beq.n	8002b96 <HAL_TIM_Base_Start_IT+0x76>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d009      	beq.n	8002b96 <HAL_TIM_Base_Start_IT+0x76>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_TIM_Base_Start_IT+0x76>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a19      	ldr	r2, [pc, #100]	; (8002bf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d115      	bne.n	8002bc2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_TIM_Base_Start_IT+0xdc>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b06      	cmp	r3, #6
 8002ba6:	d015      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0xb4>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bae:	d011      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc0:	e008      	b.n	8002bd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e000      	b.n	8002bd6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40012c00 	.word	0x40012c00
 8002be8:	40000400 	.word	0x40000400
 8002bec:	40000800 	.word	0x40000800
 8002bf0:	40000c00 	.word	0x40000c00
 8002bf4:	40013400 	.word	0x40013400
 8002bf8:	40014000 	.word	0x40014000
 8002bfc:	00010007 	.word	0x00010007

08002c00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6a1a      	ldr	r2, [r3, #32]
 8002c1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10f      	bne.n	8002c48 <HAL_TIM_Base_Stop_IT+0x48>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a1a      	ldr	r2, [r3, #32]
 8002c2e:	f240 4344 	movw	r3, #1092	; 0x444
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d107      	bne.n	8002c48 <HAL_TIM_Base_Stop_IT+0x48>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d020      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01b      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f06f 0202 	mvn.w	r2, #2
 8002c92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f9b7 	bl	800301c <HAL_TIM_IC_CaptureCallback>
 8002cae:	e005      	b.n	8002cbc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f9a9 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f9ba 	bl	8003030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01b      	beq.n	8002d0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0204 	mvn.w	r2, #4
 8002cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f991 	bl	800301c <HAL_TIM_IC_CaptureCallback>
 8002cfa:	e005      	b.n	8002d08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f983 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f994 	bl	8003030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d020      	beq.n	8002d5a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01b      	beq.n	8002d5a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f06f 0208 	mvn.w	r2, #8
 8002d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f96b 	bl	800301c <HAL_TIM_IC_CaptureCallback>
 8002d46:	e005      	b.n	8002d54 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f95d 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f96e 	bl	8003030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d020      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d01b      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f06f 0210 	mvn.w	r2, #16
 8002d76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f945 	bl	800301c <HAL_TIM_IC_CaptureCallback>
 8002d92:	e005      	b.n	8002da0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f937 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f948 	bl	8003030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00c      	beq.n	8002dca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f06f 0201 	mvn.w	r2, #1
 8002dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f915 	bl	8002ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00c      	beq.n	8002dee <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fafb 	bl	80033e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00c      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 faf3 	bl	80033f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00c      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d007      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f907 	bl	8003044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00c      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f06f 0220 	mvn.w	r2, #32
 8002e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fabb 	bl	80033d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_ConfigClockSource+0x1c>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0b6      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x18a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ea0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ea8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eba:	d03e      	beq.n	8002f3a <HAL_TIM_ConfigClockSource+0xd8>
 8002ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec0:	f200 8087 	bhi.w	8002fd2 <HAL_TIM_ConfigClockSource+0x170>
 8002ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec8:	f000 8086 	beq.w	8002fd8 <HAL_TIM_ConfigClockSource+0x176>
 8002ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed0:	d87f      	bhi.n	8002fd2 <HAL_TIM_ConfigClockSource+0x170>
 8002ed2:	2b70      	cmp	r3, #112	; 0x70
 8002ed4:	d01a      	beq.n	8002f0c <HAL_TIM_ConfigClockSource+0xaa>
 8002ed6:	2b70      	cmp	r3, #112	; 0x70
 8002ed8:	d87b      	bhi.n	8002fd2 <HAL_TIM_ConfigClockSource+0x170>
 8002eda:	2b60      	cmp	r3, #96	; 0x60
 8002edc:	d050      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x11e>
 8002ede:	2b60      	cmp	r3, #96	; 0x60
 8002ee0:	d877      	bhi.n	8002fd2 <HAL_TIM_ConfigClockSource+0x170>
 8002ee2:	2b50      	cmp	r3, #80	; 0x50
 8002ee4:	d03c      	beq.n	8002f60 <HAL_TIM_ConfigClockSource+0xfe>
 8002ee6:	2b50      	cmp	r3, #80	; 0x50
 8002ee8:	d873      	bhi.n	8002fd2 <HAL_TIM_ConfigClockSource+0x170>
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d058      	beq.n	8002fa0 <HAL_TIM_ConfigClockSource+0x13e>
 8002eee:	2b40      	cmp	r3, #64	; 0x40
 8002ef0:	d86f      	bhi.n	8002fd2 <HAL_TIM_ConfigClockSource+0x170>
 8002ef2:	2b30      	cmp	r3, #48	; 0x30
 8002ef4:	d064      	beq.n	8002fc0 <HAL_TIM_ConfigClockSource+0x15e>
 8002ef6:	2b30      	cmp	r3, #48	; 0x30
 8002ef8:	d86b      	bhi.n	8002fd2 <HAL_TIM_ConfigClockSource+0x170>
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d060      	beq.n	8002fc0 <HAL_TIM_ConfigClockSource+0x15e>
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d867      	bhi.n	8002fd2 <HAL_TIM_ConfigClockSource+0x170>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d05c      	beq.n	8002fc0 <HAL_TIM_ConfigClockSource+0x15e>
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	d05a      	beq.n	8002fc0 <HAL_TIM_ConfigClockSource+0x15e>
 8002f0a:	e062      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f1c:	f000 f9b0 	bl	8003280 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f2e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	609a      	str	r2, [r3, #8]
      break;
 8002f38:	e04f      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f4a:	f000 f999 	bl	8003280 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f5c:	609a      	str	r2, [r3, #8]
      break;
 8002f5e:	e03c      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f000 f90d 	bl	800318c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2150      	movs	r1, #80	; 0x50
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f966 	bl	800324a <TIM_ITRx_SetConfig>
      break;
 8002f7e:	e02c      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f000 f92c 	bl	80031ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2160      	movs	r1, #96	; 0x60
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f956 	bl	800324a <TIM_ITRx_SetConfig>
      break;
 8002f9e:	e01c      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fac:	461a      	mov	r2, r3
 8002fae:	f000 f8ed 	bl	800318c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2140      	movs	r1, #64	; 0x40
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 f946 	bl	800324a <TIM_ITRx_SetConfig>
      break;
 8002fbe:	e00c      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f000 f93d 	bl	800324a <TIM_ITRx_SetConfig>
      break;
 8002fd0:	e003      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd6:	e000      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002fd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a40      	ldr	r2, [pc, #256]	; (800316c <TIM_Base_SetConfig+0x114>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d013      	beq.n	8003098 <TIM_Base_SetConfig+0x40>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003076:	d00f      	beq.n	8003098 <TIM_Base_SetConfig+0x40>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a3d      	ldr	r2, [pc, #244]	; (8003170 <TIM_Base_SetConfig+0x118>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00b      	beq.n	8003098 <TIM_Base_SetConfig+0x40>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a3c      	ldr	r2, [pc, #240]	; (8003174 <TIM_Base_SetConfig+0x11c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d007      	beq.n	8003098 <TIM_Base_SetConfig+0x40>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3b      	ldr	r2, [pc, #236]	; (8003178 <TIM_Base_SetConfig+0x120>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <TIM_Base_SetConfig+0x40>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a3a      	ldr	r2, [pc, #232]	; (800317c <TIM_Base_SetConfig+0x124>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d108      	bne.n	80030aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a2f      	ldr	r2, [pc, #188]	; (800316c <TIM_Base_SetConfig+0x114>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01f      	beq.n	80030f2 <TIM_Base_SetConfig+0x9a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b8:	d01b      	beq.n	80030f2 <TIM_Base_SetConfig+0x9a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a2c      	ldr	r2, [pc, #176]	; (8003170 <TIM_Base_SetConfig+0x118>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d017      	beq.n	80030f2 <TIM_Base_SetConfig+0x9a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a2b      	ldr	r2, [pc, #172]	; (8003174 <TIM_Base_SetConfig+0x11c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <TIM_Base_SetConfig+0x9a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a2a      	ldr	r2, [pc, #168]	; (8003178 <TIM_Base_SetConfig+0x120>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00f      	beq.n	80030f2 <TIM_Base_SetConfig+0x9a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a29      	ldr	r2, [pc, #164]	; (800317c <TIM_Base_SetConfig+0x124>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00b      	beq.n	80030f2 <TIM_Base_SetConfig+0x9a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a28      	ldr	r2, [pc, #160]	; (8003180 <TIM_Base_SetConfig+0x128>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <TIM_Base_SetConfig+0x9a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a27      	ldr	r2, [pc, #156]	; (8003184 <TIM_Base_SetConfig+0x12c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d003      	beq.n	80030f2 <TIM_Base_SetConfig+0x9a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a26      	ldr	r2, [pc, #152]	; (8003188 <TIM_Base_SetConfig+0x130>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d108      	bne.n	8003104 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a10      	ldr	r2, [pc, #64]	; (800316c <TIM_Base_SetConfig+0x114>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00f      	beq.n	8003150 <TIM_Base_SetConfig+0xf8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <TIM_Base_SetConfig+0x124>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00b      	beq.n	8003150 <TIM_Base_SetConfig+0xf8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a11      	ldr	r2, [pc, #68]	; (8003180 <TIM_Base_SetConfig+0x128>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d007      	beq.n	8003150 <TIM_Base_SetConfig+0xf8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <TIM_Base_SetConfig+0x12c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d003      	beq.n	8003150 <TIM_Base_SetConfig+0xf8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a0f      	ldr	r2, [pc, #60]	; (8003188 <TIM_Base_SetConfig+0x130>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d103      	bne.n	8003158 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	615a      	str	r2, [r3, #20]
}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800
 8003178:	40000c00 	.word	0x40000c00
 800317c:	40013400 	.word	0x40013400
 8003180:	40014000 	.word	0x40014000
 8003184:	40014400 	.word	0x40014400
 8003188:	40014800 	.word	0x40014800

0800318c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	f023 0201 	bic.w	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f023 030a 	bic.w	r3, r3, #10
 80031c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	621a      	str	r2, [r3, #32]
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b087      	sub	sp, #28
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f023 0210 	bic.w	r2, r3, #16
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	031b      	lsls	r3, r3, #12
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003226:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	621a      	str	r2, [r3, #32]
}
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800324a:	b480      	push	{r7}
 800324c:	b085      	sub	sp, #20
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	f043 0307 	orr.w	r3, r3, #7
 800326c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	609a      	str	r2, [r3, #8]
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800329a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	021a      	lsls	r2, r3, #8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	609a      	str	r2, [r3, #8]
}
 80032b4:	bf00      	nop
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e068      	b.n	80033aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2e      	ldr	r2, [pc, #184]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d108      	bne.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003312:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003324:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01d      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334a:	d018      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1a      	ldr	r2, [pc, #104]	; (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a13      	ldr	r2, [pc, #76]	; (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a14      	ldr	r2, [pc, #80]	; (80033cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d10c      	bne.n	8003398 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	4313      	orrs	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40013400 	.word	0x40013400
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40000c00 	.word	0x40000c00
 80033cc:	40014000 	.word	0x40014000

080033d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e040      	b.n	80034a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fb38 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fe72 	bl	800413c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fbb7 	bl	8003bcc <UART_SetConfig>
 800345e:	4603      	mov	r3, r0
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e01b      	b.n	80034a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fef1 	bl	8004280 <UART_CheckIdleState>
 800349e:	4603      	mov	r3, r0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d178      	bne.n	80035b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_UART_Transmit+0x24>
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e071      	b.n	80035b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2221      	movs	r2, #33	; 0x21
 80034dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034de:	f7fd fc25 	bl	8000d2c <HAL_GetTick>
 80034e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	88fa      	ldrh	r2, [r7, #6]
 80034f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fc:	d108      	bne.n	8003510 <HAL_UART_Transmit+0x68>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d104      	bne.n	8003510 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	e003      	b.n	8003518 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003514:	2300      	movs	r3, #0
 8003516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003518:	e030      	b.n	800357c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2200      	movs	r2, #0
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 ff53 	bl	80043d0 <UART_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d004      	beq.n	800353a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e03c      	b.n	80035b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10b      	bne.n	8003558 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	881a      	ldrh	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800354c:	b292      	uxth	r2, r2
 800354e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	3302      	adds	r3, #2
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	e008      	b.n	800356a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b292      	uxth	r2, r2
 8003562:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	3301      	adds	r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1c8      	bne.n	800351a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2200      	movs	r2, #0
 8003590:	2140      	movs	r1, #64	; 0x40
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 ff1c 	bl	80043d0 <UART_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d004      	beq.n	80035a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e005      	b.n	80035b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e000      	b.n	80035b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3720      	adds	r7, #32
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b0ba      	sub	sp, #232	; 0xe8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80035e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80035ea:	4013      	ands	r3, r2
 80035ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80035f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d115      	bne.n	8003624 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00f      	beq.n	8003624 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d009      	beq.n	8003624 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 82ae 	beq.w	8003b76 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
      }
      return;
 8003622:	e2a8      	b.n	8003b76 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8117 	beq.w	800385c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800362e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800363a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800363e:	4b85      	ldr	r3, [pc, #532]	; (8003854 <HAL_UART_IRQHandler+0x298>)
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 810a 	beq.w	800385c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d011      	beq.n	8003678 <HAL_UART_IRQHandler+0xbc>
 8003654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2201      	movs	r2, #1
 8003666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366e:	f043 0201 	orr.w	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d011      	beq.n	80036a8 <HAL_UART_IRQHandler+0xec>
 8003684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2202      	movs	r2, #2
 8003696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800369e:	f043 0204 	orr.w	r2, r3, #4
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d011      	beq.n	80036d8 <HAL_UART_IRQHandler+0x11c>
 80036b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2204      	movs	r2, #4
 80036c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ce:	f043 0202 	orr.w	r2, r3, #2
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d017      	beq.n	8003714 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00b      	beq.n	8003714 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2208      	movs	r2, #8
 8003702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370a:	f043 0208 	orr.w	r2, r3, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <HAL_UART_IRQHandler+0x18a>
 8003720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00c      	beq.n	8003746 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373c:	f043 0220 	orr.w	r2, r3, #32
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8214 	beq.w	8003b7a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800375e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003780:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d005      	beq.n	800379e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003796:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800379a:	2b00      	cmp	r3, #0
 800379c:	d04f      	beq.n	800383e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 ff44 	bl	800462c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ae:	2b40      	cmp	r3, #64	; 0x40
 80037b0:	d141      	bne.n	8003836 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3308      	adds	r3, #8
 80037b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3308      	adds	r3, #8
 80037da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1d9      	bne.n	80037b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003802:	2b00      	cmp	r3, #0
 8003804:	d013      	beq.n	800382e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380a:	4a13      	ldr	r2, [pc, #76]	; (8003858 <HAL_UART_IRQHandler+0x29c>)
 800380c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd fbe5 	bl	8000fe2 <HAL_DMA_Abort_IT>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d017      	beq.n	800384e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003828:	4610      	mov	r0, r2
 800382a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	e00f      	b.n	800384e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f9c2 	bl	8003bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	e00b      	b.n	800384e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f9be 	bl	8003bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383c:	e007      	b.n	800384e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f9ba 	bl	8003bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800384c:	e195      	b.n	8003b7a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384e:	bf00      	nop
    return;
 8003850:	e193      	b.n	8003b7a <HAL_UART_IRQHandler+0x5be>
 8003852:	bf00      	nop
 8003854:	04000120 	.word	0x04000120
 8003858:	080046f5 	.word	0x080046f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003860:	2b01      	cmp	r3, #1
 8003862:	f040 814e 	bne.w	8003b02 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8147 	beq.w	8003b02 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8140 	beq.w	8003b02 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2210      	movs	r2, #16
 8003888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	f040 80b8 	bne.w	8003a0a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8167 	beq.w	8003b7e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80038b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038ba:	429a      	cmp	r2, r3
 80038bc:	f080 815f 	bcs.w	8003b7e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 8086 	bne.w	80039e8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003906:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800390a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800391e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1da      	bne.n	80038dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3308      	adds	r3, #8
 800392c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3308      	adds	r3, #8
 8003946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800394a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800394e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003952:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800395c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e1      	bne.n	8003926 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3308      	adds	r3, #8
 8003968:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3308      	adds	r3, #8
 8003982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003986:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003988:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800398c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e3      	bne.n	8003962 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b8:	f023 0310 	bic.w	r3, r3, #16
 80039bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80039cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e4      	bne.n	80039a8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd fabf 	bl	8000f66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	4619      	mov	r1, r3
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fc fdb4 	bl	8000570 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a08:	e0b9      	b.n	8003b7e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80ab 	beq.w	8003b82 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003a2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80a6 	beq.w	8003b82 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a58:	647b      	str	r3, [r7, #68]	; 0x44
 8003a5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a60:	e841 2300 	strex	r3, r2, [r1]
 8003a64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e4      	bne.n	8003a36 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3308      	adds	r3, #8
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a90:	633a      	str	r2, [r7, #48]	; 0x30
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a98:	e841 2300 	strex	r3, r2, [r1]
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e3      	bne.n	8003a6c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f023 0310 	bic.w	r3, r3, #16
 8003acc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	69b9      	ldr	r1, [r7, #24]
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e4      	bne.n	8003ab8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fc fd38 	bl	8000570 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b00:	e03f      	b.n	8003b82 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00e      	beq.n	8003b2c <HAL_UART_IRQHandler+0x570>
 8003b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 ffe1 	bl	8004aec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b2a:	e02d      	b.n	8003b88 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00e      	beq.n	8003b56 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01c      	beq.n	8003b86 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
    }
    return;
 8003b54:	e017      	b.n	8003b86 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d012      	beq.n	8003b88 <HAL_UART_IRQHandler+0x5cc>
 8003b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00c      	beq.n	8003b88 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fdd6 	bl	8004720 <UART_EndTransmit_IT>
    return;
 8003b74:	e008      	b.n	8003b88 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003b76:	bf00      	nop
 8003b78:	e006      	b.n	8003b88 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003b7a:	bf00      	nop
 8003b7c:	e004      	b.n	8003b88 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003b7e:	bf00      	nop
 8003b80:	e002      	b.n	8003b88 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003b82:	bf00      	nop
 8003b84:	e000      	b.n	8003b88 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003b86:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003b88:	37e8      	adds	r7, #232	; 0xe8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop

08003b90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd0:	b08a      	sub	sp, #40	; 0x28
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4ba4      	ldr	r3, [pc, #656]	; (8003e8c <UART_SetConfig+0x2c0>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a99      	ldr	r2, [pc, #612]	; (8003e90 <UART_SetConfig+0x2c4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c34:	4313      	orrs	r3, r2
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a90      	ldr	r2, [pc, #576]	; (8003e94 <UART_SetConfig+0x2c8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d126      	bne.n	8003ca4 <UART_SetConfig+0xd8>
 8003c56:	4b90      	ldr	r3, [pc, #576]	; (8003e98 <UART_SetConfig+0x2cc>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d81b      	bhi.n	8003c9c <UART_SetConfig+0xd0>
 8003c64:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <UART_SetConfig+0xa0>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003c8d 	.word	0x08003c8d
 8003c74:	08003c85 	.word	0x08003c85
 8003c78:	08003c95 	.word	0x08003c95
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c82:	e116      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003c84:	2302      	movs	r3, #2
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8a:	e112      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c92:	e10e      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003c94:	2308      	movs	r3, #8
 8003c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9a:	e10a      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca2:	e106      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a7c      	ldr	r2, [pc, #496]	; (8003e9c <UART_SetConfig+0x2d0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d138      	bne.n	8003d20 <UART_SetConfig+0x154>
 8003cae:	4b7a      	ldr	r3, [pc, #488]	; (8003e98 <UART_SetConfig+0x2cc>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	f003 030c 	and.w	r3, r3, #12
 8003cb8:	2b0c      	cmp	r3, #12
 8003cba:	d82d      	bhi.n	8003d18 <UART_SetConfig+0x14c>
 8003cbc:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <UART_SetConfig+0xf8>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003cf9 	.word	0x08003cf9
 8003cc8:	08003d19 	.word	0x08003d19
 8003ccc:	08003d19 	.word	0x08003d19
 8003cd0:	08003d19 	.word	0x08003d19
 8003cd4:	08003d09 	.word	0x08003d09
 8003cd8:	08003d19 	.word	0x08003d19
 8003cdc:	08003d19 	.word	0x08003d19
 8003ce0:	08003d19 	.word	0x08003d19
 8003ce4:	08003d01 	.word	0x08003d01
 8003ce8:	08003d19 	.word	0x08003d19
 8003cec:	08003d19 	.word	0x08003d19
 8003cf0:	08003d19 	.word	0x08003d19
 8003cf4:	08003d11 	.word	0x08003d11
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfe:	e0d8      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003d00:	2302      	movs	r3, #2
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d06:	e0d4      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d0e:	e0d0      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003d10:	2308      	movs	r3, #8
 8003d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d16:	e0cc      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1e:	e0c8      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a5e      	ldr	r2, [pc, #376]	; (8003ea0 <UART_SetConfig+0x2d4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d125      	bne.n	8003d76 <UART_SetConfig+0x1aa>
 8003d2a:	4b5b      	ldr	r3, [pc, #364]	; (8003e98 <UART_SetConfig+0x2cc>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d34:	2b30      	cmp	r3, #48	; 0x30
 8003d36:	d016      	beq.n	8003d66 <UART_SetConfig+0x19a>
 8003d38:	2b30      	cmp	r3, #48	; 0x30
 8003d3a:	d818      	bhi.n	8003d6e <UART_SetConfig+0x1a2>
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d00a      	beq.n	8003d56 <UART_SetConfig+0x18a>
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d814      	bhi.n	8003d6e <UART_SetConfig+0x1a2>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <UART_SetConfig+0x182>
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d008      	beq.n	8003d5e <UART_SetConfig+0x192>
 8003d4c:	e00f      	b.n	8003d6e <UART_SetConfig+0x1a2>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d54:	e0ad      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003d56:	2302      	movs	r3, #2
 8003d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5c:	e0a9      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003d5e:	2304      	movs	r3, #4
 8003d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d64:	e0a5      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003d66:	2308      	movs	r3, #8
 8003d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6c:	e0a1      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003d6e:	2310      	movs	r3, #16
 8003d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d74:	e09d      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a4a      	ldr	r2, [pc, #296]	; (8003ea4 <UART_SetConfig+0x2d8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d125      	bne.n	8003dcc <UART_SetConfig+0x200>
 8003d80:	4b45      	ldr	r3, [pc, #276]	; (8003e98 <UART_SetConfig+0x2cc>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d8c:	d016      	beq.n	8003dbc <UART_SetConfig+0x1f0>
 8003d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d90:	d818      	bhi.n	8003dc4 <UART_SetConfig+0x1f8>
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	d00a      	beq.n	8003dac <UART_SetConfig+0x1e0>
 8003d96:	2b80      	cmp	r3, #128	; 0x80
 8003d98:	d814      	bhi.n	8003dc4 <UART_SetConfig+0x1f8>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <UART_SetConfig+0x1d8>
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d008      	beq.n	8003db4 <UART_SetConfig+0x1e8>
 8003da2:	e00f      	b.n	8003dc4 <UART_SetConfig+0x1f8>
 8003da4:	2300      	movs	r3, #0
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003daa:	e082      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003dac:	2302      	movs	r3, #2
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db2:	e07e      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003db4:	2304      	movs	r3, #4
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dba:	e07a      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003dbc:	2308      	movs	r3, #8
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc2:	e076      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dca:	e072      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a35      	ldr	r2, [pc, #212]	; (8003ea8 <UART_SetConfig+0x2dc>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d12a      	bne.n	8003e2c <UART_SetConfig+0x260>
 8003dd6:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <UART_SetConfig+0x2cc>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003de4:	d01a      	beq.n	8003e1c <UART_SetConfig+0x250>
 8003de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dea:	d81b      	bhi.n	8003e24 <UART_SetConfig+0x258>
 8003dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df0:	d00c      	beq.n	8003e0c <UART_SetConfig+0x240>
 8003df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df6:	d815      	bhi.n	8003e24 <UART_SetConfig+0x258>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <UART_SetConfig+0x238>
 8003dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e00:	d008      	beq.n	8003e14 <UART_SetConfig+0x248>
 8003e02:	e00f      	b.n	8003e24 <UART_SetConfig+0x258>
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e0a:	e052      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e12:	e04e      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003e14:	2304      	movs	r3, #4
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1a:	e04a      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003e1c:	2308      	movs	r3, #8
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e22:	e046      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003e24:	2310      	movs	r3, #16
 8003e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2a:	e042      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <UART_SetConfig+0x2c4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d13a      	bne.n	8003eac <UART_SetConfig+0x2e0>
 8003e36:	4b18      	ldr	r3, [pc, #96]	; (8003e98 <UART_SetConfig+0x2cc>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e44:	d01a      	beq.n	8003e7c <UART_SetConfig+0x2b0>
 8003e46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e4a:	d81b      	bhi.n	8003e84 <UART_SetConfig+0x2b8>
 8003e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e50:	d00c      	beq.n	8003e6c <UART_SetConfig+0x2a0>
 8003e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e56:	d815      	bhi.n	8003e84 <UART_SetConfig+0x2b8>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <UART_SetConfig+0x298>
 8003e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e60:	d008      	beq.n	8003e74 <UART_SetConfig+0x2a8>
 8003e62:	e00f      	b.n	8003e84 <UART_SetConfig+0x2b8>
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6a:	e022      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e72:	e01e      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003e74:	2304      	movs	r3, #4
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7a:	e01a      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003e7c:	2308      	movs	r3, #8
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e82:	e016      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003e84:	2310      	movs	r3, #16
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8a:	e012      	b.n	8003eb2 <UART_SetConfig+0x2e6>
 8003e8c:	efff69f3 	.word	0xefff69f3
 8003e90:	40008000 	.word	0x40008000
 8003e94:	40013800 	.word	0x40013800
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40004400 	.word	0x40004400
 8003ea0:	40004800 	.word	0x40004800
 8003ea4:	40004c00 	.word	0x40004c00
 8003ea8:	40005000 	.word	0x40005000
 8003eac:	2310      	movs	r3, #16
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a9f      	ldr	r2, [pc, #636]	; (8004134 <UART_SetConfig+0x568>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d17a      	bne.n	8003fb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d824      	bhi.n	8003f0e <UART_SetConfig+0x342>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <UART_SetConfig+0x300>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003f0f 	.word	0x08003f0f
 8003ed4:	08003ef9 	.word	0x08003ef9
 8003ed8:	08003f0f 	.word	0x08003f0f
 8003edc:	08003eff 	.word	0x08003eff
 8003ee0:	08003f0f 	.word	0x08003f0f
 8003ee4:	08003f0f 	.word	0x08003f0f
 8003ee8:	08003f0f 	.word	0x08003f0f
 8003eec:	08003f07 	.word	0x08003f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef0:	f7fe f876 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8003ef4:	61f8      	str	r0, [r7, #28]
        break;
 8003ef6:	e010      	b.n	8003f1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef8:	4b8f      	ldr	r3, [pc, #572]	; (8004138 <UART_SetConfig+0x56c>)
 8003efa:	61fb      	str	r3, [r7, #28]
        break;
 8003efc:	e00d      	b.n	8003f1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efe:	f7fd ffd7 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8003f02:	61f8      	str	r0, [r7, #28]
        break;
 8003f04:	e009      	b.n	8003f1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0a:	61fb      	str	r3, [r7, #28]
        break;
 8003f0c:	e005      	b.n	8003f1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80fb 	beq.w	8004118 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4413      	add	r3, r2
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d305      	bcc.n	8003f3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d903      	bls.n	8003f46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f44:	e0e8      	b.n	8004118 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	461c      	mov	r4, r3
 8003f4c:	4615      	mov	r5, r2
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	022b      	lsls	r3, r5, #8
 8003f58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f5c:	0222      	lsls	r2, r4, #8
 8003f5e:	68f9      	ldr	r1, [r7, #12]
 8003f60:	6849      	ldr	r1, [r1, #4]
 8003f62:	0849      	lsrs	r1, r1, #1
 8003f64:	2000      	movs	r0, #0
 8003f66:	4688      	mov	r8, r1
 8003f68:	4681      	mov	r9, r0
 8003f6a:	eb12 0a08 	adds.w	sl, r2, r8
 8003f6e:	eb43 0b09 	adc.w	fp, r3, r9
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	603b      	str	r3, [r7, #0]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f80:	4650      	mov	r0, sl
 8003f82:	4659      	mov	r1, fp
 8003f84:	f7fc f920 	bl	80001c8 <__aeabi_uldivmod>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f96:	d308      	bcc.n	8003faa <UART_SetConfig+0x3de>
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f9e:	d204      	bcs.n	8003faa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	60da      	str	r2, [r3, #12]
 8003fa8:	e0b6      	b.n	8004118 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fb0:	e0b2      	b.n	8004118 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fba:	d15e      	bne.n	800407a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d828      	bhi.n	8004016 <UART_SetConfig+0x44a>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0x400>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	08003ff9 	.word	0x08003ff9
 8003fd4:	08004001 	.word	0x08004001
 8003fd8:	08004017 	.word	0x08004017
 8003fdc:	08004007 	.word	0x08004007
 8003fe0:	08004017 	.word	0x08004017
 8003fe4:	08004017 	.word	0x08004017
 8003fe8:	08004017 	.word	0x08004017
 8003fec:	0800400f 	.word	0x0800400f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff0:	f7fd fff6 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8003ff4:	61f8      	str	r0, [r7, #28]
        break;
 8003ff6:	e014      	b.n	8004022 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ff8:	f7fe f808 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8003ffc:	61f8      	str	r0, [r7, #28]
        break;
 8003ffe:	e010      	b.n	8004022 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004000:	4b4d      	ldr	r3, [pc, #308]	; (8004138 <UART_SetConfig+0x56c>)
 8004002:	61fb      	str	r3, [r7, #28]
        break;
 8004004:	e00d      	b.n	8004022 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004006:	f7fd ff53 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 800400a:	61f8      	str	r0, [r7, #28]
        break;
 800400c:	e009      	b.n	8004022 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800400e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004012:	61fb      	str	r3, [r7, #28]
        break;
 8004014:	e005      	b.n	8004022 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004020:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d077      	beq.n	8004118 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005a      	lsls	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	085b      	lsrs	r3, r3, #1
 8004032:	441a      	add	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	fbb2 f3f3 	udiv	r3, r2, r3
 800403c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b0f      	cmp	r3, #15
 8004042:	d916      	bls.n	8004072 <UART_SetConfig+0x4a6>
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404a:	d212      	bcs.n	8004072 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	b29b      	uxth	r3, r3
 8004050:	f023 030f 	bic.w	r3, r3, #15
 8004054:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	b29b      	uxth	r3, r3
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	b29a      	uxth	r2, r3
 8004062:	8afb      	ldrh	r3, [r7, #22]
 8004064:	4313      	orrs	r3, r2
 8004066:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	8afa      	ldrh	r2, [r7, #22]
 800406e:	60da      	str	r2, [r3, #12]
 8004070:	e052      	b.n	8004118 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004078:	e04e      	b.n	8004118 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800407a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800407e:	2b08      	cmp	r3, #8
 8004080:	d827      	bhi.n	80040d2 <UART_SetConfig+0x506>
 8004082:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <UART_SetConfig+0x4bc>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	080040ad 	.word	0x080040ad
 800408c:	080040b5 	.word	0x080040b5
 8004090:	080040bd 	.word	0x080040bd
 8004094:	080040d3 	.word	0x080040d3
 8004098:	080040c3 	.word	0x080040c3
 800409c:	080040d3 	.word	0x080040d3
 80040a0:	080040d3 	.word	0x080040d3
 80040a4:	080040d3 	.word	0x080040d3
 80040a8:	080040cb 	.word	0x080040cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ac:	f7fd ff98 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 80040b0:	61f8      	str	r0, [r7, #28]
        break;
 80040b2:	e014      	b.n	80040de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040b4:	f7fd ffaa 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 80040b8:	61f8      	str	r0, [r7, #28]
        break;
 80040ba:	e010      	b.n	80040de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040bc:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <UART_SetConfig+0x56c>)
 80040be:	61fb      	str	r3, [r7, #28]
        break;
 80040c0:	e00d      	b.n	80040de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040c2:	f7fd fef5 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 80040c6:	61f8      	str	r0, [r7, #28]
        break;
 80040c8:	e009      	b.n	80040de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ce:	61fb      	str	r3, [r7, #28]
        break;
 80040d0:	e005      	b.n	80040de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040dc:	bf00      	nop
    }

    if (pclk != 0U)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d019      	beq.n	8004118 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	085a      	lsrs	r2, r3, #1
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	441a      	add	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	2b0f      	cmp	r3, #15
 80040fc:	d909      	bls.n	8004112 <UART_SetConfig+0x546>
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d205      	bcs.n	8004112 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60da      	str	r2, [r3, #12]
 8004110:	e002      	b.n	8004118 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004124:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004128:	4618      	mov	r0, r3
 800412a:	3728      	adds	r7, #40	; 0x28
 800412c:	46bd      	mov	sp, r7
 800412e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004132:	bf00      	nop
 8004134:	40008000 	.word	0x40008000
 8004138:	00f42400 	.word	0x00f42400

0800413c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01a      	beq.n	8004252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800423a:	d10a      	bne.n	8004252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]
  }
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b098      	sub	sp, #96	; 0x60
 8004284:	af02      	add	r7, sp, #8
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004290:	f7fc fd4c 	bl	8000d2c <HAL_GetTick>
 8004294:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d12e      	bne.n	8004302 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ac:	2200      	movs	r2, #0
 80042ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f88c 	bl	80043d0 <UART_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d021      	beq.n	8004302 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d2:	653b      	str	r3, [r7, #80]	; 0x50
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042dc:	647b      	str	r3, [r7, #68]	; 0x44
 80042de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e6      	bne.n	80042be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e062      	b.n	80043c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b04      	cmp	r3, #4
 800430e:	d149      	bne.n	80043a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004318:	2200      	movs	r2, #0
 800431a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f856 	bl	80043d0 <UART_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d03c      	beq.n	80043a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	623b      	str	r3, [r7, #32]
   return(result);
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800433e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004348:	633b      	str	r3, [r7, #48]	; 0x30
 800434a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800434e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e6      	bne.n	800432a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3308      	adds	r3, #8
 8004362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	60fb      	str	r3, [r7, #12]
   return(result);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	64bb      	str	r3, [r7, #72]	; 0x48
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3308      	adds	r3, #8
 800437a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800437c:	61fa      	str	r2, [r7, #28]
 800437e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	69b9      	ldr	r1, [r7, #24]
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	617b      	str	r3, [r7, #20]
   return(result);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e5      	bne.n	800435c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e011      	b.n	80043c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3758      	adds	r7, #88	; 0x58
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	4613      	mov	r3, r2
 80043de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e0:	e049      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e8:	d045      	beq.n	8004476 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ea:	f7fc fc9f 	bl	8000d2c <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d302      	bcc.n	8004400 <UART_WaitOnFlagUntilTimeout+0x30>
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e048      	b.n	8004496 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d031      	beq.n	8004476 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b08      	cmp	r3, #8
 800441e:	d110      	bne.n	8004442 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2208      	movs	r2, #8
 8004426:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f8ff 	bl	800462c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2208      	movs	r2, #8
 8004432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e029      	b.n	8004496 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800444c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004450:	d111      	bne.n	8004476 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800445a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f8e5 	bl	800462c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e00f      	b.n	8004496 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4013      	ands	r3, r2
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	429a      	cmp	r2, r3
 8004484:	bf0c      	ite	eq
 8004486:	2301      	moveq	r3, #1
 8004488:	2300      	movne	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	429a      	cmp	r2, r3
 8004492:	d0a6      	beq.n	80043e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b097      	sub	sp, #92	; 0x5c
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	88fa      	ldrh	r2, [r7, #6]
 80044b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	88fa      	ldrh	r2, [r7, #6]
 80044c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d2:	d10e      	bne.n	80044f2 <UART_Start_Receive_IT+0x52>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <UART_Start_Receive_IT+0x48>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044e6:	e02d      	b.n	8004544 <UART_Start_Receive_IT+0xa4>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	22ff      	movs	r2, #255	; 0xff
 80044ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044f0:	e028      	b.n	8004544 <UART_Start_Receive_IT+0xa4>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10d      	bne.n	8004516 <UART_Start_Receive_IT+0x76>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <UART_Start_Receive_IT+0x6c>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	22ff      	movs	r2, #255	; 0xff
 8004506:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800450a:	e01b      	b.n	8004544 <UART_Start_Receive_IT+0xa4>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	227f      	movs	r2, #127	; 0x7f
 8004510:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004514:	e016      	b.n	8004544 <UART_Start_Receive_IT+0xa4>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800451e:	d10d      	bne.n	800453c <UART_Start_Receive_IT+0x9c>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <UART_Start_Receive_IT+0x92>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	227f      	movs	r2, #127	; 0x7f
 800452c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004530:	e008      	b.n	8004544 <UART_Start_Receive_IT+0xa4>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	223f      	movs	r2, #63	; 0x3f
 8004536:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800453a:	e003      	b.n	8004544 <UART_Start_Receive_IT+0xa4>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2222      	movs	r2, #34	; 0x22
 8004550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3308      	adds	r3, #8
 800455a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	657b      	str	r3, [r7, #84]	; 0x54
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3308      	adds	r3, #8
 8004572:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004574:	64ba      	str	r2, [r7, #72]	; 0x48
 8004576:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800457a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e5      	bne.n	8004554 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004590:	d107      	bne.n	80045a2 <UART_Start_Receive_IT+0x102>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a21      	ldr	r2, [pc, #132]	; (8004624 <UART_Start_Receive_IT+0x184>)
 800459e:	669a      	str	r2, [r3, #104]	; 0x68
 80045a0:	e002      	b.n	80045a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4a20      	ldr	r2, [pc, #128]	; (8004628 <UART_Start_Receive_IT+0x188>)
 80045a6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d019      	beq.n	80045e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80045c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
 80045d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e6      	bne.n	80045b0 <UART_Start_Receive_IT+0x110>
 80045e2:	e018      	b.n	8004616 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	613b      	str	r3, [r7, #16]
   return(result);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f043 0320 	orr.w	r3, r3, #32
 80045f8:	653b      	str	r3, [r7, #80]	; 0x50
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004602:	623b      	str	r3, [r7, #32]
 8004604:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	69f9      	ldr	r1, [r7, #28]
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e6      	bne.n	80045e4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	375c      	adds	r7, #92	; 0x5c
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	08004931 	.word	0x08004931
 8004628:	08004775 	.word	0x08004775

0800462c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800462c:	b480      	push	{r7}
 800462e:	b095      	sub	sp, #84	; 0x54
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004648:	64fb      	str	r3, [r7, #76]	; 0x4c
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004652:	643b      	str	r3, [r7, #64]	; 0x40
 8004654:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004658:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e6      	bne.n	8004634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3308      	adds	r3, #8
 800466c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	61fb      	str	r3, [r7, #28]
   return(result);
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	64bb      	str	r3, [r7, #72]	; 0x48
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3308      	adds	r3, #8
 8004684:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004686:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800468c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e5      	bne.n	8004666 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d118      	bne.n	80046d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f023 0310 	bic.w	r3, r3, #16
 80046b6:	647b      	str	r3, [r7, #68]	; 0x44
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	6979      	ldr	r1, [r7, #20]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	613b      	str	r3, [r7, #16]
   return(result);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e6      	bne.n	80046a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046e8:	bf00      	nop
 80046ea:	3754      	adds	r7, #84	; 0x54
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff fa50 	bl	8003bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	60bb      	str	r3, [r7, #8]
   return(result);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6979      	ldr	r1, [r7, #20]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	613b      	str	r3, [r7, #16]
   return(result);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e6      	bne.n	8004728 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff fa12 	bl	8003b90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800476c:	bf00      	nop
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b09c      	sub	sp, #112	; 0x70
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004782:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800478c:	2b22      	cmp	r3, #34	; 0x22
 800478e:	f040 80be 	bne.w	800490e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004798:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800479c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80047a0:	b2d9      	uxtb	r1, r3
 80047a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ac:	400a      	ands	r2, r1
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 80a3 	bne.w	8004922 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80047fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004800:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e6      	bne.n	80047dc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3308      	adds	r3, #8
 8004814:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800481e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	667b      	str	r3, [r7, #100]	; 0x64
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3308      	adds	r3, #8
 800482c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800482e:	647a      	str	r2, [r7, #68]	; 0x44
 8004830:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e5      	bne.n	800480e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a34      	ldr	r2, [pc, #208]	; (800492c <UART_RxISR_8BIT+0x1b8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d01f      	beq.n	80048a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d018      	beq.n	80048a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	623b      	str	r3, [r7, #32]
   return(result);
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004882:	663b      	str	r3, [r7, #96]	; 0x60
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800488c:	633b      	str	r3, [r7, #48]	; 0x30
 800488e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e6      	bne.n	800486e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d12e      	bne.n	8004906 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0310 	bic.w	r3, r3, #16
 80048c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	69b9      	ldr	r1, [r7, #24]
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	617b      	str	r3, [r7, #20]
   return(result);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e6      	bne.n	80048ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d103      	bne.n	80048f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2210      	movs	r2, #16
 80048f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048fc:	4619      	mov	r1, r3
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fb fe36 	bl	8000570 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004904:	e00d      	b.n	8004922 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff f94c 	bl	8003ba4 <HAL_UART_RxCpltCallback>
}
 800490c:	e009      	b.n	8004922 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	8b1b      	ldrh	r3, [r3, #24]
 8004914:	b29a      	uxth	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0208 	orr.w	r2, r2, #8
 800491e:	b292      	uxth	r2, r2
 8004920:	831a      	strh	r2, [r3, #24]
}
 8004922:	bf00      	nop
 8004924:	3770      	adds	r7, #112	; 0x70
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40008000 	.word	0x40008000

08004930 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b09c      	sub	sp, #112	; 0x70
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800493e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004948:	2b22      	cmp	r3, #34	; 0x22
 800494a:	f040 80be 	bne.w	8004aca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004954:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800495e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004962:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004966:	4013      	ands	r3, r2
 8004968:	b29a      	uxth	r2, r3
 800496a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800496c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	1c9a      	adds	r2, r3, #2
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	f040 80a3 	bne.w	8004ade <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80049a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ac:	667b      	str	r3, [r7, #100]	; 0x64
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049b6:	657b      	str	r3, [r7, #84]	; 0x54
 80049b8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80049bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e6      	bne.n	8004998 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3308      	adds	r3, #8
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	663b      	str	r3, [r7, #96]	; 0x60
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3308      	adds	r3, #8
 80049e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049ea:	643a      	str	r2, [r7, #64]	; 0x40
 80049ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e5      	bne.n	80049ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a34      	ldr	r2, [pc, #208]	; (8004ae8 <UART_RxISR_16BIT+0x1b8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d01f      	beq.n	8004a5c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d018      	beq.n	8004a5c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a4a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a50:	e841 2300 	strex	r3, r2, [r1]
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e6      	bne.n	8004a2a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d12e      	bne.n	8004ac2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f023 0310 	bic.w	r3, r3, #16
 8004a7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a88:	61bb      	str	r3, [r7, #24]
 8004a8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	6979      	ldr	r1, [r7, #20]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	613b      	str	r3, [r7, #16]
   return(result);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e6      	bne.n	8004a6a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	f003 0310 	and.w	r3, r3, #16
 8004aa6:	2b10      	cmp	r3, #16
 8004aa8:	d103      	bne.n	8004ab2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2210      	movs	r2, #16
 8004ab0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ab8:	4619      	mov	r1, r3
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fb fd58 	bl	8000570 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ac0:	e00d      	b.n	8004ade <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff f86e 	bl	8003ba4 <HAL_UART_RxCpltCallback>
}
 8004ac8:	e009      	b.n	8004ade <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	8b1b      	ldrh	r3, [r3, #24]
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0208 	orr.w	r2, r2, #8
 8004ada:	b292      	uxth	r2, r2
 8004adc:	831a      	strh	r2, [r3, #24]
}
 8004ade:	bf00      	nop
 8004ae0:	3770      	adds	r7, #112	; 0x70
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40008000 	.word	0x40008000

08004aec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08c      	sub	sp, #48	; 0x30
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d13b      	bne.n	8004b96 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e034      	b.n	8004b98 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	665a      	str	r2, [r3, #100]	; 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff fcad 	bl	80044a0 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d11d      	bne.n	8004b8a <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2210      	movs	r2, #16
 8004b54:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	e853 3f00 	ldrex	r3, [r3]
 8004b62:	617b      	str	r3, [r7, #20]
   return(result);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f043 0310 	orr.w	r3, r3, #16
 8004b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
 8004b76:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6a39      	ldr	r1, [r7, #32]
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e6      	bne.n	8004b56 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8004b88:	e002      	b.n	8004b90 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8004b90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b94:	e000      	b.n	8004b98 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3730      	adds	r7, #48	; 0x30
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <strncmp>:
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	b16a      	cbz	r2, 8004bc0 <strncmp+0x20>
 8004ba4:	3901      	subs	r1, #1
 8004ba6:	1884      	adds	r4, r0, r2
 8004ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d103      	bne.n	8004bbc <strncmp+0x1c>
 8004bb4:	42a0      	cmp	r0, r4
 8004bb6:	d001      	beq.n	8004bbc <strncmp+0x1c>
 8004bb8:	2a00      	cmp	r2, #0
 8004bba:	d1f5      	bne.n	8004ba8 <strncmp+0x8>
 8004bbc:	1ad0      	subs	r0, r2, r3
 8004bbe:	bd10      	pop	{r4, pc}
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	e7fc      	b.n	8004bbe <strncmp+0x1e>

08004bc4 <memset>:
 8004bc4:	4402      	add	r2, r0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d100      	bne.n	8004bce <memset+0xa>
 8004bcc:	4770      	bx	lr
 8004bce:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd2:	e7f9      	b.n	8004bc8 <memset+0x4>

08004bd4 <__libc_init_array>:
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	4d0d      	ldr	r5, [pc, #52]	; (8004c0c <__libc_init_array+0x38>)
 8004bd8:	4c0d      	ldr	r4, [pc, #52]	; (8004c10 <__libc_init_array+0x3c>)
 8004bda:	1b64      	subs	r4, r4, r5
 8004bdc:	10a4      	asrs	r4, r4, #2
 8004bde:	2600      	movs	r6, #0
 8004be0:	42a6      	cmp	r6, r4
 8004be2:	d109      	bne.n	8004bf8 <__libc_init_array+0x24>
 8004be4:	4d0b      	ldr	r5, [pc, #44]	; (8004c14 <__libc_init_array+0x40>)
 8004be6:	4c0c      	ldr	r4, [pc, #48]	; (8004c18 <__libc_init_array+0x44>)
 8004be8:	f000 f818 	bl	8004c1c <_init>
 8004bec:	1b64      	subs	r4, r4, r5
 8004bee:	10a4      	asrs	r4, r4, #2
 8004bf0:	2600      	movs	r6, #0
 8004bf2:	42a6      	cmp	r6, r4
 8004bf4:	d105      	bne.n	8004c02 <__libc_init_array+0x2e>
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfc:	4798      	blx	r3
 8004bfe:	3601      	adds	r6, #1
 8004c00:	e7ee      	b.n	8004be0 <__libc_init_array+0xc>
 8004c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c06:	4798      	blx	r3
 8004c08:	3601      	adds	r6, #1
 8004c0a:	e7f2      	b.n	8004bf2 <__libc_init_array+0x1e>
 8004c0c:	08004cd8 	.word	0x08004cd8
 8004c10:	08004cd8 	.word	0x08004cd8
 8004c14:	08004cd8 	.word	0x08004cd8
 8004c18:	08004cdc 	.word	0x08004cdc

08004c1c <_init>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	bf00      	nop
 8004c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c22:	bc08      	pop	{r3}
 8004c24:	469e      	mov	lr, r3
 8004c26:	4770      	bx	lr

08004c28 <_fini>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	bf00      	nop
 8004c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2e:	bc08      	pop	{r3}
 8004c30:	469e      	mov	lr, r3
 8004c32:	4770      	bx	lr
