
storagetest_withspeaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c920  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  0800cab0  0800cab0  0001cab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d164  0800d164  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d164  0800d164  0001d164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d16c  0800d16c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d16c  0800d16c  0001d16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d170  0800d170  0001d170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f30  20000094  0800d208  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00005204  20005fc4  0800d208  00025fc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e22a  00000000  00000000  00020107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f36  00000000  00000000  0003e331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c08  00000000  00000000  00042268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c1  00000000  00000000  00043e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ddb4  00000000  00000000  00045431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000223f0  00000000  00000000  000731e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010c24e  00000000  00000000  000955d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ff4  00000000  00000000  001a1824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a9818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca98 	.word	0x0800ca98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800ca98 	.word	0x0800ca98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800088c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000890:	f000 b970 	b.w	8000b74 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9e08      	ldr	r6, [sp, #32]
 80008b2:	460d      	mov	r5, r1
 80008b4:	4604      	mov	r4, r0
 80008b6:	460f      	mov	r7, r1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d14a      	bne.n	8000952 <__udivmoddi4+0xa6>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4694      	mov	ip, r2
 80008c0:	d965      	bls.n	800098e <__udivmoddi4+0xe2>
 80008c2:	fab2 f382 	clz	r3, r2
 80008c6:	b143      	cbz	r3, 80008da <__udivmoddi4+0x2e>
 80008c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008cc:	f1c3 0220 	rsb	r2, r3, #32
 80008d0:	409f      	lsls	r7, r3
 80008d2:	fa20 f202 	lsr.w	r2, r0, r2
 80008d6:	4317      	orrs	r7, r2
 80008d8:	409c      	lsls	r4, r3
 80008da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008de:	fa1f f58c 	uxth.w	r5, ip
 80008e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008e6:	0c22      	lsrs	r2, r4, #16
 80008e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008f0:	fb01 f005 	mul.w	r0, r1, r5
 80008f4:	4290      	cmp	r0, r2
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x62>
 80008f8:	eb1c 0202 	adds.w	r2, ip, r2
 80008fc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000900:	f080 811c 	bcs.w	8000b3c <__udivmoddi4+0x290>
 8000904:	4290      	cmp	r0, r2
 8000906:	f240 8119 	bls.w	8000b3c <__udivmoddi4+0x290>
 800090a:	3902      	subs	r1, #2
 800090c:	4462      	add	r2, ip
 800090e:	1a12      	subs	r2, r2, r0
 8000910:	b2a4      	uxth	r4, r4
 8000912:	fbb2 f0fe 	udiv	r0, r2, lr
 8000916:	fb0e 2210 	mls	r2, lr, r0, r2
 800091a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800091e:	fb00 f505 	mul.w	r5, r0, r5
 8000922:	42a5      	cmp	r5, r4
 8000924:	d90a      	bls.n	800093c <__udivmoddi4+0x90>
 8000926:	eb1c 0404 	adds.w	r4, ip, r4
 800092a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800092e:	f080 8107 	bcs.w	8000b40 <__udivmoddi4+0x294>
 8000932:	42a5      	cmp	r5, r4
 8000934:	f240 8104 	bls.w	8000b40 <__udivmoddi4+0x294>
 8000938:	4464      	add	r4, ip
 800093a:	3802      	subs	r0, #2
 800093c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000940:	1b64      	subs	r4, r4, r5
 8000942:	2100      	movs	r1, #0
 8000944:	b11e      	cbz	r6, 800094e <__udivmoddi4+0xa2>
 8000946:	40dc      	lsrs	r4, r3
 8000948:	2300      	movs	r3, #0
 800094a:	e9c6 4300 	strd	r4, r3, [r6]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	428b      	cmp	r3, r1
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0xbc>
 8000956:	2e00      	cmp	r6, #0
 8000958:	f000 80ed 	beq.w	8000b36 <__udivmoddi4+0x28a>
 800095c:	2100      	movs	r1, #0
 800095e:	e9c6 0500 	strd	r0, r5, [r6]
 8000962:	4608      	mov	r0, r1
 8000964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000968:	fab3 f183 	clz	r1, r3
 800096c:	2900      	cmp	r1, #0
 800096e:	d149      	bne.n	8000a04 <__udivmoddi4+0x158>
 8000970:	42ab      	cmp	r3, r5
 8000972:	d302      	bcc.n	800097a <__udivmoddi4+0xce>
 8000974:	4282      	cmp	r2, r0
 8000976:	f200 80f8 	bhi.w	8000b6a <__udivmoddi4+0x2be>
 800097a:	1a84      	subs	r4, r0, r2
 800097c:	eb65 0203 	sbc.w	r2, r5, r3
 8000980:	2001      	movs	r0, #1
 8000982:	4617      	mov	r7, r2
 8000984:	2e00      	cmp	r6, #0
 8000986:	d0e2      	beq.n	800094e <__udivmoddi4+0xa2>
 8000988:	e9c6 4700 	strd	r4, r7, [r6]
 800098c:	e7df      	b.n	800094e <__udivmoddi4+0xa2>
 800098e:	b902      	cbnz	r2, 8000992 <__udivmoddi4+0xe6>
 8000990:	deff      	udf	#255	; 0xff
 8000992:	fab2 f382 	clz	r3, r2
 8000996:	2b00      	cmp	r3, #0
 8000998:	f040 8090 	bne.w	8000abc <__udivmoddi4+0x210>
 800099c:	1a8a      	subs	r2, r1, r2
 800099e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a2:	fa1f fe8c 	uxth.w	lr, ip
 80009a6:	2101      	movs	r1, #1
 80009a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009ac:	fb07 2015 	mls	r0, r7, r5, r2
 80009b0:	0c22      	lsrs	r2, r4, #16
 80009b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009b6:	fb0e f005 	mul.w	r0, lr, r5
 80009ba:	4290      	cmp	r0, r2
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x124>
 80009be:	eb1c 0202 	adds.w	r2, ip, r2
 80009c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x122>
 80009c8:	4290      	cmp	r0, r2
 80009ca:	f200 80cb 	bhi.w	8000b64 <__udivmoddi4+0x2b8>
 80009ce:	4645      	mov	r5, r8
 80009d0:	1a12      	subs	r2, r2, r0
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d8:	fb07 2210 	mls	r2, r7, r0, r2
 80009dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e0:	fb0e fe00 	mul.w	lr, lr, r0
 80009e4:	45a6      	cmp	lr, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x14e>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80009f0:	d202      	bcs.n	80009f8 <__udivmoddi4+0x14c>
 80009f2:	45a6      	cmp	lr, r4
 80009f4:	f200 80bb 	bhi.w	8000b6e <__udivmoddi4+0x2c2>
 80009f8:	4610      	mov	r0, r2
 80009fa:	eba4 040e 	sub.w	r4, r4, lr
 80009fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a02:	e79f      	b.n	8000944 <__udivmoddi4+0x98>
 8000a04:	f1c1 0720 	rsb	r7, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a12:	fa05 f401 	lsl.w	r4, r5, r1
 8000a16:	fa20 f307 	lsr.w	r3, r0, r7
 8000a1a:	40fd      	lsrs	r5, r7
 8000a1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a20:	4323      	orrs	r3, r4
 8000a22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a26:	fa1f fe8c 	uxth.w	lr, ip
 8000a2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a2e:	0c1c      	lsrs	r4, r3, #16
 8000a30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a34:	fb08 f50e 	mul.w	r5, r8, lr
 8000a38:	42a5      	cmp	r5, r4
 8000a3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b0>
 8000a44:	eb1c 0404 	adds.w	r4, ip, r4
 8000a48:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a4c:	f080 8088 	bcs.w	8000b60 <__udivmoddi4+0x2b4>
 8000a50:	42a5      	cmp	r5, r4
 8000a52:	f240 8085 	bls.w	8000b60 <__udivmoddi4+0x2b4>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	4464      	add	r4, ip
 8000a5c:	1b64      	subs	r4, r4, r5
 8000a5e:	b29d      	uxth	r5, r3
 8000a60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a64:	fb09 4413 	mls	r4, r9, r3, r4
 8000a68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a70:	45a6      	cmp	lr, r4
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1da>
 8000a74:	eb1c 0404 	adds.w	r4, ip, r4
 8000a78:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000a7c:	d26c      	bcs.n	8000b58 <__udivmoddi4+0x2ac>
 8000a7e:	45a6      	cmp	lr, r4
 8000a80:	d96a      	bls.n	8000b58 <__udivmoddi4+0x2ac>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	4464      	add	r4, ip
 8000a86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a8e:	eba4 040e 	sub.w	r4, r4, lr
 8000a92:	42ac      	cmp	r4, r5
 8000a94:	46c8      	mov	r8, r9
 8000a96:	46ae      	mov	lr, r5
 8000a98:	d356      	bcc.n	8000b48 <__udivmoddi4+0x29c>
 8000a9a:	d053      	beq.n	8000b44 <__udivmoddi4+0x298>
 8000a9c:	b156      	cbz	r6, 8000ab4 <__udivmoddi4+0x208>
 8000a9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000aa2:	eb64 040e 	sbc.w	r4, r4, lr
 8000aa6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aaa:	40ca      	lsrs	r2, r1
 8000aac:	40cc      	lsrs	r4, r1
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abc:	f1c3 0120 	rsb	r1, r3, #32
 8000ac0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ac4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac8:	fa25 f101 	lsr.w	r1, r5, r1
 8000acc:	409d      	lsls	r5, r3
 8000ace:	432a      	orrs	r2, r5
 8000ad0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000adc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ae0:	0c11      	lsrs	r1, r2, #16
 8000ae2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ae6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aea:	428d      	cmp	r5, r1
 8000aec:	fa04 f403 	lsl.w	r4, r4, r3
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x258>
 8000af2:	eb1c 0101 	adds.w	r1, ip, r1
 8000af6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000afa:	d22f      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000afc:	428d      	cmp	r5, r1
 8000afe:	d92d      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b00:	3802      	subs	r0, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	1b49      	subs	r1, r1, r5
 8000b06:	b292      	uxth	r2, r2
 8000b08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b14:	fb05 f10e 	mul.w	r1, r5, lr
 8000b18:	4291      	cmp	r1, r2
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x282>
 8000b1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b20:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b24:	d216      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000b26:	4291      	cmp	r1, r2
 8000b28:	d914      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000b2a:	3d02      	subs	r5, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a52      	subs	r2, r2, r1
 8000b30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b34:	e738      	b.n	80009a8 <__udivmoddi4+0xfc>
 8000b36:	4631      	mov	r1, r6
 8000b38:	4630      	mov	r0, r6
 8000b3a:	e708      	b.n	800094e <__udivmoddi4+0xa2>
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e6e6      	b.n	800090e <__udivmoddi4+0x62>
 8000b40:	4610      	mov	r0, r2
 8000b42:	e6fb      	b.n	800093c <__udivmoddi4+0x90>
 8000b44:	4548      	cmp	r0, r9
 8000b46:	d2a9      	bcs.n	8000a9c <__udivmoddi4+0x1f0>
 8000b48:	ebb9 0802 	subs.w	r8, r9, r2
 8000b4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b50:	3b01      	subs	r3, #1
 8000b52:	e7a3      	b.n	8000a9c <__udivmoddi4+0x1f0>
 8000b54:	4645      	mov	r5, r8
 8000b56:	e7ea      	b.n	8000b2e <__udivmoddi4+0x282>
 8000b58:	462b      	mov	r3, r5
 8000b5a:	e794      	b.n	8000a86 <__udivmoddi4+0x1da>
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	e7d1      	b.n	8000b04 <__udivmoddi4+0x258>
 8000b60:	46d0      	mov	r8, sl
 8000b62:	e77b      	b.n	8000a5c <__udivmoddi4+0x1b0>
 8000b64:	3d02      	subs	r5, #2
 8000b66:	4462      	add	r2, ip
 8000b68:	e732      	b.n	80009d0 <__udivmoddi4+0x124>
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e70a      	b.n	8000984 <__udivmoddi4+0xd8>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	e742      	b.n	80009fa <__udivmoddi4+0x14e>

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <__NVIC_EnableIRQ+0x38>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db12      	blt.n	8000c08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	490a      	ldr	r1, [pc, #40]	; (8000c14 <__NVIC_DisableIRQ+0x44>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	3320      	adds	r3, #32
 8000bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bfc:	f3bf 8f4f 	dsb	sy
}
 8000c00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c02:	f3bf 8f6f 	isb	sy
}
 8000c06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f043 0201 	orr.w	r2, r3, #1
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 0201 	bic.w	r2, r3, #1
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	601a      	str	r2, [r3, #0]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000d44:	f023 0307 	bic.w	r3, r3, #7
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	431a      	orrs	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	605a      	str	r2, [r3, #4]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	609a      	str	r2, [r3, #8]
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	f043 0201 	orr.w	r2, r3, #1
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60da      	str	r2, [r3, #12]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4013      	ands	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000

08000df4 <mount_SD_card>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void mount_SD_card(void){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0

    //Mount the SD Card
	fres = f_mount(&FatFs, "", 1);    //1=mount now
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	492a      	ldr	r1, [pc, #168]	; (8000ea8 <mount_SD_card+0xb4>)
 8000dfe:	482b      	ldr	r0, [pc, #172]	; (8000eac <mount_SD_card+0xb8>)
 8000e00:	f009 feea 	bl	800abd8 <f_mount>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <mount_SD_card+0xbc>)
 8000e0a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <mount_SD_card+0xbc>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <mount_SD_card+0x2e>
		printf("No SD Card found : (%i)\r\n", fres);
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <mount_SD_card+0xbc>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4826      	ldr	r0, [pc, #152]	; (8000eb4 <mount_SD_card+0xc0>)
 8000e1c:	f00a ff5c 	bl	800bcd8 <iprintf>
 8000e20:	e03f      	b.n	8000ea2 <mount_SD_card+0xae>
        return;
	}
	printf("SD Card Mounted Successfully\r\n");
 8000e22:	4825      	ldr	r0, [pc, #148]	; (8000eb8 <mount_SD_card+0xc4>)
 8000e24:	f00a ffbe 	bl	800bda4 <puts>

    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;

    f_getfree("", &fre_clust, &pfs);
 8000e28:	1d3a      	adds	r2, r7, #4
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481e      	ldr	r0, [pc, #120]	; (8000ea8 <mount_SD_card+0xb4>)
 8000e30:	f00a fcb8 	bl	800b7a4 <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	3b02      	subs	r3, #2
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	8952      	ldrh	r2, [r2, #10]
 8000e3e:	fb02 f303 	mul.w	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fc80 	bl	8000748 <__aeabi_ui2d>
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <mount_SD_card+0xc8>)
 8000e4e:	f7ff fa0f 	bl	8000270 <__aeabi_dmul>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4610      	mov	r0, r2
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f7ff fcef 	bl	800083c <__aeabi_d2uiz>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <mount_SD_card+0xcc>)
 8000e62:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	895b      	ldrh	r3, [r3, #10]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	fb02 f303 	mul.w	r3, r2, r3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fc69 	bl	8000748 <__aeabi_ui2d>
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <mount_SD_card+0xc8>)
 8000e7c:	f7ff f9f8 	bl	8000270 <__aeabi_dmul>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fcd8 	bl	800083c <__aeabi_d2uiz>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <mount_SD_card+0xd0>)
 8000e90:	6013      	str	r3, [r2, #0]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\r\n", totalSpace, freeSpace);
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <mount_SD_card+0xcc>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <mount_SD_card+0xd0>)
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <mount_SD_card+0xd4>)
 8000e9e:	f00a ff1b 	bl	800bcd8 <iprintf>

}
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	0800cac4 	.word	0x0800cac4
 8000eac:	20003b48 	.word	0x20003b48
 8000eb0:	20004b80 	.word	0x20004b80
 8000eb4:	0800cac8 	.word	0x0800cac8
 8000eb8:	0800cae4 	.word	0x0800cae4
 8000ebc:	3fe00000 	.word	0x3fe00000
 8000ec0:	20005bb4 	.word	0x20005bb4
 8000ec4:	20005bb8 	.word	0x20005bb8
 8000ec8:	0800cb04 	.word	0x0800cb04

08000ecc <read_SD_card_song_initial>:
void unmount_SD_card(void){
	f_mount(NULL, "", 0);
	printf("SD Card Unmounted Successfully\r\n");
}

void read_SD_card_song_initial(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
    if (f_read(&file, &playback_buffer[0], AUDIO_BUFFER_SIZE*2*2, &bytesRead) == FR_OK) {
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <read_SD_card_song_initial+0x40>)
 8000ed2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ed6:	490e      	ldr	r1, [pc, #56]	; (8000f10 <read_SD_card_song_initial+0x44>)
 8000ed8:	480e      	ldr	r0, [pc, #56]	; (8000f14 <read_SD_card_song_initial+0x48>)
 8000eda:	f00a f88f 	bl	800affc <f_read>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d110      	bne.n	8000f06 <read_SD_card_song_initial+0x3a>
            // Check if the expected number of bytes were read
    	if (bytesRead == AUDIO_BUFFER_SIZE*2*2) {
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <read_SD_card_song_initial+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000eec:	d10b      	bne.n	8000f06 <read_SD_card_song_initial+0x3a>
            	printf("Audio Loaded, %d bytes.\r\n", bytesRead);
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <read_SD_card_song_initial+0x40>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4808      	ldr	r0, [pc, #32]	; (8000f18 <read_SD_card_song_initial+0x4c>)
 8000ef6:	f00a feef 	bl	800bcd8 <iprintf>
            	audio_position += AUDIO_BUFFER_SIZE*2*2;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <read_SD_card_song_initial+0x50>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8000f02:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <read_SD_card_song_initial+0x50>)
 8000f04:	6013      	str	r3, [r2, #0]
    	} else {
                // Handle the case where not all bytes were read
    	}
	}

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20003b40 	.word	0x20003b40
 8000f10:	20002ba0 	.word	0x20002ba0
 8000f14:	20004b84 	.word	0x20004b84
 8000f18:	0800cb54 	.word	0x0800cb54
 8000f1c:	20002b8c 	.word	0x20002b8c

08000f20 <read_SD_card_song_at_position>:

void read_SD_card_song_at_position(int buffer_position){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if ( audio_position + AUDIO_BUFFER_SIZE * 2 <= song_length_total){
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <read_SD_card_song_at_position+0x50>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f203 72cf 	addw	r2, r3, #1999	; 0x7cf
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <read_SD_card_song_at_position+0x54>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	da17      	bge.n	8000f68 <read_SD_card_song_at_position+0x48>
		if (f_read(&file, &playback_buffer[buffer_position], bytes_to_read, &bytesRead) == FR_OK) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <read_SD_card_song_at_position+0x58>)
 8000f3e:	1899      	adds	r1, r3, r2
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <read_SD_card_song_at_position+0x5c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <read_SD_card_song_at_position+0x60>)
 8000f46:	480f      	ldr	r0, [pc, #60]	; (8000f84 <read_SD_card_song_at_position+0x64>)
 8000f48:	f00a f858 	bl	800affc <f_read>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10a      	bne.n	8000f68 <read_SD_card_song_at_position+0x48>
						// Check if the expected number of bytes were read
			if (bytesRead == AUDIO_BUFFER_SIZE * 2) {
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <read_SD_card_song_at_position+0x60>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f5a:	d105      	bne.n	8000f68 <read_SD_card_song_at_position+0x48>
				audio_position += AUDIO_BUFFER_SIZE*2;
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <read_SD_card_song_at_position+0x50>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f64:	4a02      	ldr	r2, [pc, #8]	; (8000f70 <read_SD_card_song_at_position+0x50>)
 8000f66:	6013      	str	r3, [r2, #0]
			} else {
							// Handle the case where not all bytes were read
			}
		}
	}
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20002b8c 	.word	0x20002b8c
 8000f74:	20002b94 	.word	0x20002b94
 8000f78:	20002ba0 	.word	0x20002ba0
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20003b40 	.word	0x20003b40
 8000f84:	20004b84 	.word	0x20004b84

08000f88 <open_SD_card_song>:


void open_SD_card_song(const char *mypath){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0ca      	sub	sp, #296	; 0x128
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f92:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f96:	6018      	str	r0, [r3, #0]

	FILINFO fileInfo;
	const TCHAR *songpath = _T(mypath);
 8000f98:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	fres = f_open(&file, songpath, FA_READ);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8000fac:	481a      	ldr	r0, [pc, #104]	; (8001018 <open_SD_card_song+0x90>)
 8000fae:	f009 fe59 	bl	800ac64 <f_open>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <open_SD_card_song+0x94>)
 8000fb8:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <open_SD_card_song+0x94>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d125      	bne.n	800100e <open_SD_card_song+0x86>
		return;
	}

    fres = f_stat(songpath, &fileInfo);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8000fcc:	f00a fbb1 	bl	800b732 <f_stat>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <open_SD_card_song+0x94>)
 8000fd6:	701a      	strb	r2, [r3, #0]
    if (fres == FR_OK) {
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <open_SD_card_song+0x94>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d110      	bne.n	8001002 <open_SD_card_song+0x7a>
        // Print file size
    	printf("File size: %lu bytes\r\n", fileInfo.fsize);
 8000fe0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fe4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <open_SD_card_song+0x98>)
 8000fee:	f00a fe73 	bl	800bcd8 <iprintf>
    	song_length = fileInfo.fsize;
 8000ff2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ff6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <open_SD_card_song+0x9c>)
 8001000:	601a      	str	r2, [r3, #0]
    }
    printf("path: %s\r\n", songpath);
 8001002:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001006:	4808      	ldr	r0, [pc, #32]	; (8001028 <open_SD_card_song+0xa0>)
 8001008:	f00a fe66 	bl	800bcd8 <iprintf>
 800100c:	e000      	b.n	8001010 <open_SD_card_song+0x88>
		return;
 800100e:	bf00      	nop

}
 8001010:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20004b84 	.word	0x20004b84
 800101c:	20004b80 	.word	0x20004b80
 8001020:	0800cb70 	.word	0x0800cb70
 8001024:	20002b90 	.word	0x20002b90
 8001028:	0800cb88 	.word	0x0800cb88

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f001 fa6a 	bl	800250a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f947 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 fbdb 	bl	80017f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800103e:	f000 fbbb 	bl	80017b8 <MX_DMA_Init>
  MX_SPI2_Init();
 8001042:	f000 fa29 	bl	8001498 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001046:	f000 fb57 	bl	80016f8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800104a:	f006 fdd1 	bl	8007bf0 <MX_FATFS_Init>
  MX_DAC1_Init();
 800104e:	f000 f98d 	bl	800136c <MX_DAC1_Init>
  MX_TIM2_Init();
 8001052:	f000 fa5f 	bl	8001514 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001056:	f000 fa9f 	bl	8001598 <MX_TIM3_Init>
  MX_UART4_Init();
 800105a:	f000 faed 	bl	8001638 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800105e:	f000 fb7b 	bl	8001758 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001062:	f000 fb19 	bl	8001698 <MX_USART1_UART_Init>
  MX_DFSDM1_Init();
 8001066:	f000 f9b3 	bl	80013d0 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */


  // UART Interrupt Init
  // LIGHT
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, data, 64);
 800106a:	2240      	movs	r2, #64	; 0x40
 800106c:	497c      	ldr	r1, [pc, #496]	; (8001260 <main+0x234>)
 800106e:	487d      	ldr	r0, [pc, #500]	; (8001264 <main+0x238>)
 8001070:	f006 fca0 	bl	80079b4 <HAL_UARTEx_ReceiveToIdle_IT>

  // DOOR
  HAL_UARTEx_ReceiveToIdle_IT(&huart3, data, 64);
 8001074:	2240      	movs	r2, #64	; 0x40
 8001076:	497a      	ldr	r1, [pc, #488]	; (8001260 <main+0x234>)
 8001078:	487b      	ldr	r0, [pc, #492]	; (8001268 <main+0x23c>)
 800107a:	f006 fc9b 	bl	80079b4 <HAL_UARTEx_ReceiveToIdle_IT>


  HAL_UARTEx_ReceiveToIdle_IT(&huart1, data, 64);
 800107e:	2240      	movs	r2, #64	; 0x40
 8001080:	4977      	ldr	r1, [pc, #476]	; (8001260 <main+0x234>)
 8001082:	487a      	ldr	r0, [pc, #488]	; (800126c <main+0x240>)
 8001084:	f006 fc96 	bl	80079b4 <HAL_UARTEx_ReceiveToIdle_IT>

  // set status of light to off on start (Opposite than LED due to relay)
  HAL_GPIO_WritePin(lightStatus_GPIO_Port, lightStatus_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2102      	movs	r1, #2
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f002 fbca 	bl	8003828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(doorStatus_GPIO_Port, doorStatus_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2101      	movs	r1, #1
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f002 fbc4 	bl	8003828 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Initilize SD Card and Play start up Sound*/

  mount_SD_card();
 80010a0:	f7ff fea8 	bl	8000df4 <mount_SD_card>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80010a4:	2100      	movs	r1, #0
 80010a6:	4872      	ldr	r0, [pc, #456]	; (8001270 <main+0x244>)
 80010a8:	f001 fbfb 	bl	80028a2 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x7FF);
 80010ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	486e      	ldr	r0, [pc, #440]	; (8001270 <main+0x244>)
 80010b6:	f001 fc9b 	bl	80029f0 <HAL_DAC_SetValue>

  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (recording_audio){
 80010ba:	4b6e      	ldr	r3, [pc, #440]	; (8001274 <main+0x248>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 8094 	beq.w	80011ec <main+0x1c0>
			  printf("\r\n\n");

			  return 1;
		  }
		  */
		  if (finished_recording){
 80010c4:	4b6c      	ldr	r3, [pc, #432]	; (8001278 <main+0x24c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d013      	beq.n	80010f4 <main+0xc8>
			  __HAL_DMA_DISABLE(&hdma_dfsdm1_flt1);
 80010cc:	4b6b      	ldr	r3, [pc, #428]	; (800127c <main+0x250>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b6a      	ldr	r3, [pc, #424]	; (800127c <main+0x250>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
			  printf("Finished Recording Audio\r\n");
 80010dc:	4868      	ldr	r0, [pc, #416]	; (8001280 <main+0x254>)
 80010de:	f00a fe61 	bl	800bda4 <puts>
			  recording_audio = 0;
 80010e2:	4b64      	ldr	r3, [pc, #400]	; (8001274 <main+0x248>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
			  finished_recording = 0;
 80010e8:	4b63      	ldr	r3, [pc, #396]	; (8001278 <main+0x24c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
			  f_close(&file);
 80010ee:	4865      	ldr	r0, [pc, #404]	; (8001284 <main+0x258>)
 80010f0:	f00a faf5 	bl	800b6de <f_close>
		  }
		  if(mic_half_transfer){
 80010f4:	4b64      	ldr	r3, [pc, #400]	; (8001288 <main+0x25c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d038      	beq.n	800116e <main+0x142>
			  for (int i = 0; i < DFSDM_BUFFER_SIZE; i++){
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	e01b      	b.n	800113a <main+0x10e>
				  recording[i] = SaturaLH((dfsdm_buffer[i] >> 8), -32768, 32767);
 8001102:	4a62      	ldr	r2, [pc, #392]	; (800128c <main+0x260>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	121b      	asrs	r3, r3, #8
 800110c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001110:	db0b      	blt.n	800112a <main+0xfe>
 8001112:	4a5e      	ldr	r2, [pc, #376]	; (800128c <main+0x260>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111a:	121b      	asrs	r3, r3, #8
 800111c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001120:	4293      	cmp	r3, r2
 8001122:	bfa8      	it	ge
 8001124:	4613      	movge	r3, r2
 8001126:	b21a      	sxth	r2, r3
 8001128:	e000      	b.n	800112c <main+0x100>
 800112a:	4a59      	ldr	r2, [pc, #356]	; (8001290 <main+0x264>)
 800112c:	4959      	ldr	r1, [pc, #356]	; (8001294 <main+0x268>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			  for (int i = 0; i < DFSDM_BUFFER_SIZE; i++){
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001140:	dbdf      	blt.n	8001102 <main+0xd6>
				  //transfer_position ++;
			  }
			  if (f_write(&file, recording, bytes_to_record, &bytesWritten) != FR_OK) {
 8001142:	4b55      	ldr	r3, [pc, #340]	; (8001298 <main+0x26c>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b55      	ldr	r3, [pc, #340]	; (800129c <main+0x270>)
 8001148:	4952      	ldr	r1, [pc, #328]	; (8001294 <main+0x268>)
 800114a:	484e      	ldr	r0, [pc, #312]	; (8001284 <main+0x258>)
 800114c:	f00a f8b5 	bl	800b2ba <f_write>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d007      	beq.n	8001166 <main+0x13a>
				  printf("Error Writing To File 1.\n");
 8001156:	4852      	ldr	r0, [pc, #328]	; (80012a0 <main+0x274>)
 8001158:	f00a fe24 	bl	800bda4 <puts>
				  f_close(&file);
 800115c:	4849      	ldr	r0, [pc, #292]	; (8001284 <main+0x258>)
 800115e:	f00a fabe 	bl	800b6de <f_close>
				  return 1;
 8001162:	2301      	movs	r3, #1
 8001164:	e078      	b.n	8001258 <main+0x22c>
			  }
			  mic_half_transfer = 0;
 8001166:	4b48      	ldr	r3, [pc, #288]	; (8001288 <main+0x25c>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e03e      	b.n	80011ec <main+0x1c0>
		  }
		  else if (mic_transfer_complete){
 800116e:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <main+0x278>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d03a      	beq.n	80011ec <main+0x1c0>
			  for (int i = DFSDM_BUFFER_SIZE; i < DFSDM_BUFFER_SIZE * 2; i++){
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	e01d      	b.n	80011ba <main+0x18e>
				  recording[i - DFSDM_BUFFER_SIZE] = SaturaLH((dfsdm_buffer[i] >> 8), -32768, 32767);
 800117e:	4a43      	ldr	r2, [pc, #268]	; (800128c <main+0x260>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	121b      	asrs	r3, r3, #8
 8001188:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800118c:	db0b      	blt.n	80011a6 <main+0x17a>
 800118e:	4a3f      	ldr	r2, [pc, #252]	; (800128c <main+0x260>)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	121b      	asrs	r3, r3, #8
 8001198:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800119c:	4293      	cmp	r3, r2
 800119e:	bfa8      	it	ge
 80011a0:	4613      	movge	r3, r2
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	e000      	b.n	80011a8 <main+0x17c>
 80011a6:	4a3a      	ldr	r2, [pc, #232]	; (8001290 <main+0x264>)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80011ae:	4939      	ldr	r1, [pc, #228]	; (8001294 <main+0x268>)
 80011b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			  for (int i = DFSDM_BUFFER_SIZE; i < DFSDM_BUFFER_SIZE * 2; i++){
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011c0:	dbdd      	blt.n	800117e <main+0x152>
				  //transfer_position ++;
			  }
			  if (f_write(&file, recording, bytes_to_record, &bytesWritten) != FR_OK) {
 80011c2:	4b35      	ldr	r3, [pc, #212]	; (8001298 <main+0x26c>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <main+0x270>)
 80011c8:	4932      	ldr	r1, [pc, #200]	; (8001294 <main+0x268>)
 80011ca:	482e      	ldr	r0, [pc, #184]	; (8001284 <main+0x258>)
 80011cc:	f00a f875 	bl	800b2ba <f_write>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <main+0x1ba>
				  printf("Error Writing to File 2.\n");
 80011d6:	4834      	ldr	r0, [pc, #208]	; (80012a8 <main+0x27c>)
 80011d8:	f00a fde4 	bl	800bda4 <puts>
				  f_close(&file);
 80011dc:	4829      	ldr	r0, [pc, #164]	; (8001284 <main+0x258>)
 80011de:	f00a fa7e 	bl	800b6de <f_close>
				  return 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e038      	b.n	8001258 <main+0x22c>
			  }
			  mic_transfer_complete = 0;
 80011e6:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <main+0x278>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if (audio_playing){
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <main+0x280>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f43f af62 	beq.w	80010ba <main+0x8e>
		  if (samples_played >= song_length_total/2){
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <main+0x284>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	0fda      	lsrs	r2, r3, #31
 80011fc:	4413      	add	r3, r2
 80011fe:	105b      	asrs	r3, r3, #1
 8001200:	461a      	mov	r2, r3
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <main+0x288>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	dc0f      	bgt.n	800122a <main+0x1fe>
			  NVIC_DisableIRQ(TIM2_IRQn);
 800120a:	201c      	movs	r0, #28
 800120c:	f7ff fce0 	bl	8000bd0 <__NVIC_DisableIRQ>
			  LL_TIM_DisableCounter(TIM2);
 8001210:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001214:	f7ff fd6d 	bl	8000cf2 <LL_TIM_DisableCounter>
			  printf("Song Finished at %d\r\n", audio_position);
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <main+0x28c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4827      	ldr	r0, [pc, #156]	; (80012bc <main+0x290>)
 8001220:	f00a fd5a 	bl	800bcd8 <iprintf>
			  audio_playing = 0;
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <main+0x280>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
		  }
		  if (buffer_half){
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <main+0x294>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d005      	beq.n	800123e <main+0x212>
			  read_SD_card_song_at_position(0);
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff fe74 	bl	8000f20 <read_SD_card_song_at_position>
			  buffer_half = 0;
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <main+0x294>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
		  }
		  if (buffer_complete){
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <main+0x298>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f43f af39 	beq.w	80010ba <main+0x8e>
			  read_SD_card_song_at_position(AUDIO_BUFFER_SIZE);
 8001248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124c:	f7ff fe68 	bl	8000f20 <read_SD_card_song_at_position>
			  buffer_complete = 0;
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <main+0x298>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
	  if (recording_audio){
 8001256:	e730      	b.n	80010ba <main+0x8e>
	  }

  }
  unmount_SD_card();
  /* USER CODE END 3 */
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20005bbc 	.word	0x20005bbc
 8001264:	20000248 	.word	0x20000248
 8001268:	200003e0 	.word	0x200003e0
 800126c:	200002d0 	.word	0x200002d0
 8001270:	200000b0 	.word	0x200000b0
 8001274:	20000468 	.word	0x20000468
 8001278:	2000046c 	.word	0x2000046c
 800127c:	20000150 	.word	0x20000150
 8001280:	0800cb94 	.word	0x0800cb94
 8001284:	20004b84 	.word	0x20004b84
 8001288:	20002b84 	.word	0x20002b84
 800128c:	20000c40 	.word	0x20000c40
 8001290:	ffff8000 	.word	0xffff8000
 8001294:	20000470 	.word	0x20000470
 8001298:	2000000c 	.word	0x2000000c
 800129c:	20003b44 	.word	0x20003b44
 80012a0:	0800cbb0 	.word	0x0800cbb0
 80012a4:	20002b80 	.word	0x20002b80
 80012a8:	0800cbcc 	.word	0x0800cbcc
 80012ac:	20002b88 	.word	0x20002b88
 80012b0:	20002b94 	.word	0x20002b94
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20002b8c 	.word	0x20002b8c
 80012bc:	0800cbe8 	.word	0x0800cbe8
 80012c0:	20002b98 	.word	0x20002b98
 80012c4:	20002b9c 	.word	0x20002b9c

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b096      	sub	sp, #88	; 0x58
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	2244      	movs	r2, #68	; 0x44
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f00a fd7e 	bl	800bdd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	463b      	mov	r3, r7
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ee:	f002 fad9 	bl	80038a4 <HAL_PWREx_ControlVoltageScaling>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012f8:	f000 fba4 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012fc:	2310      	movs	r3, #16
 80012fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001300:	2301      	movs	r3, #1
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130c:	2302      	movs	r3, #2
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001310:	2301      	movs	r3, #1
 8001312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001314:	2301      	movs	r3, #1
 8001316:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001318:	2320      	movs	r3, #32
 800131a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800131c:	2307      	movs	r3, #7
 800131e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001320:	2302      	movs	r3, #2
 8001322:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001324:	2302      	movs	r3, #2
 8001326:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4618      	mov	r0, r3
 800132e:	f002 fb0f 	bl	8003950 <HAL_RCC_OscConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001338:	f000 fb84 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133c:	230f      	movs	r3, #15
 800133e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001340:	2303      	movs	r3, #3
 8001342:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	2103      	movs	r1, #3
 8001354:	4618      	mov	r0, r3
 8001356:	f002 fed7 	bl	8004108 <HAL_RCC_ClockConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001360:	f000 fb70 	bl	8001a44 <Error_Handler>
  }
}
 8001364:	bf00      	nop
 8001366:	3758      	adds	r7, #88	; 0x58
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2224      	movs	r2, #36	; 0x24
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f00a fd2d 	bl	800bdd8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_DAC1_Init+0x5c>)
 8001380:	4a12      	ldr	r2, [pc, #72]	; (80013cc <MX_DAC1_Init+0x60>)
 8001382:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001384:	4810      	ldr	r0, [pc, #64]	; (80013c8 <MX_DAC1_Init+0x5c>)
 8001386:	f001 fa6a 	bl	800285e <HAL_DAC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001390:	f000 fb58 	bl	8001a44 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <MX_DAC1_Init+0x5c>)
 80013b0:	f001 fb4d 	bl	8002a4e <HAL_DAC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80013ba:	f000 fb43 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200000b0 	.word	0x200000b0
 80013cc:	40007400 	.word	0x40007400

080013d0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80013d4:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <MX_DFSDM1_Init+0xb8>)
 80013d6:	4a2d      	ldr	r2, [pc, #180]	; (800148c <MX_DFSDM1_Init+0xbc>)
 80013d8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80013da:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <MX_DFSDM1_Init+0xb8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <MX_DFSDM1_Init+0xb8>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80013e6:	4b28      	ldr	r3, [pc, #160]	; (8001488 <MX_DFSDM1_Init+0xb8>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80013ec:	4b26      	ldr	r3, [pc, #152]	; (8001488 <MX_DFSDM1_Init+0xb8>)
 80013ee:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80013f2:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 125;
 80013f4:	4b24      	ldr	r3, [pc, #144]	; (8001488 <MX_DFSDM1_Init+0xb8>)
 80013f6:	227d      	movs	r2, #125	; 0x7d
 80013f8:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <MX_DFSDM1_Init+0xb8>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8001400:	4821      	ldr	r0, [pc, #132]	; (8001488 <MX_DFSDM1_Init+0xb8>)
 8001402:	f001 fd15 	bl	8002e30 <HAL_DFSDM_FilterInit>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 800140c:	f000 fb1a 	bl	8001a44 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <MX_DFSDM1_Init+0xc4>)
 8001414:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 8001418:	2201      	movs	r2, #1
 800141a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 31;
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 8001424:	221f      	movs	r2, #31
 8001426:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 800143c:	2200      	movs	r2, #0
 800143e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 8001442:	2204      	movs	r2, #4
 8001444:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 800144e:	2201      	movs	r2, #1
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 8001454:	2200      	movs	r2, #0
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x02;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 800145a:	2202      	movs	r2, #2
 800145c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800145e:	480c      	ldr	r0, [pc, #48]	; (8001490 <MX_DFSDM1_Init+0xc0>)
 8001460:	f001 fc26 	bl	8002cb0 <HAL_DFSDM_ChannelInit>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800146a:	f000 faeb 	bl	8001a44 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800146e:	2201      	movs	r2, #1
 8001470:	2101      	movs	r1, #1
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_DFSDM1_Init+0xb8>)
 8001474:	f001 fdb6 	bl	8002fe4 <HAL_DFSDM_FilterConfigRegChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 800147e:	f000 fae1 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200000c4 	.word	0x200000c4
 800148c:	40016180 	.word	0x40016180
 8001490:	20000118 	.word	0x20000118
 8001494:	40016000 	.word	0x40016000

08001498 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <MX_SPI2_Init+0x74>)
 800149e:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <MX_SPI2_Init+0x78>)
 80014a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_SPI2_Init+0x74>)
 80014a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <MX_SPI2_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b0:	4b16      	ldr	r3, [pc, #88]	; (800150c <MX_SPI2_Init+0x74>)
 80014b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_SPI2_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <MX_SPI2_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_SPI2_Init+0x74>)
 80014c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_SPI2_Init+0x74>)
 80014ce:	2208      	movs	r2, #8
 80014d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_SPI2_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_SPI2_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_SPI2_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_SPI2_Init+0x74>)
 80014e6:	2207      	movs	r2, #7
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_SPI2_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_SPI2_Init+0x74>)
 80014f2:	2208      	movs	r2, #8
 80014f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_SPI2_Init+0x74>)
 80014f8:	f003 fce6 	bl	8004ec8 <HAL_SPI_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001502:	f000 fa9f 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000198 	.word	0x20000198
 8001510:	40003800 	.word	0x40003800

08001514 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff fc4b 	bl	8000dc4 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800152e:	f7ff fb23 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8001532:	4603      	mov	r3, r0
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fb97 	bl	8000c6c <NVIC_EncodePriority>
 800153e:	4603      	mov	r3, r0
 8001540:	4619      	mov	r1, r3
 8001542:	201c      	movs	r0, #28
 8001544:	f7ff fb68 	bl	8000c18 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001548:	201c      	movs	r0, #28
 800154a:	f7ff fb23 	bl	8000b94 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 2000;
 8001556:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800155a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001568:	f006 faae 	bl	8007ac8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800156c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001570:	f7ff fbcf 	bl	8000d12 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001574:	2100      	movs	r1, #0
 8001576:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800157a:	f7ff fbda 	bl	8000d32 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800157e:	2100      	movs	r1, #0
 8001580:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001584:	f7ff fbea 	bl	8000d5c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001588:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800158c:	f7ff fbf9 	bl	8000d82 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <MX_TIM3_Init+0x98>)
 80015b8:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <MX_TIM3_Init+0x9c>)
 80015ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_TIM3_Init+0x98>)
 80015be:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_TIM3_Init+0x98>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MX_TIM3_Init+0x98>)
 80015cc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <MX_TIM3_Init+0x98>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <MX_TIM3_Init+0x98>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015de:	4814      	ldr	r0, [pc, #80]	; (8001630 <MX_TIM3_Init+0x98>)
 80015e0:	f004 fa10 	bl	8005a04 <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80015ea:	f000 fa2b 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4619      	mov	r1, r3
 80015fa:	480d      	ldr	r0, [pc, #52]	; (8001630 <MX_TIM3_Init+0x98>)
 80015fc:	f004 fb8a 	bl	8005d14 <HAL_TIM_ConfigClockSource>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001606:	f000 fa1d 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <MX_TIM3_Init+0x98>)
 8001618:	f004 fdac 	bl	8006174 <HAL_TIMEx_MasterConfigSynchronization>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001622:	f000 fa0f 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001fc 	.word	0x200001fc
 8001634:	40000400 	.word	0x40000400

08001638 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_UART4_Init+0x58>)
 800163e:	4a15      	ldr	r2, [pc, #84]	; (8001694 <MX_UART4_Init+0x5c>)
 8001640:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_UART4_Init+0x58>)
 8001644:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001648:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_UART4_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_UART4_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_UART4_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_UART4_Init+0x58>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_UART4_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_UART4_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_UART4_Init+0x58>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_UART4_Init+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_UART4_Init+0x58>)
 800167c:	f004 fe20 	bl	80062c0 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001686:	f000 f9dd 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000248 	.word	0x20000248
 8001694:	40004c00 	.word	0x40004c00

08001698 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 800169e:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <MX_USART1_UART_Init+0x5c>)
 80016a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016dc:	f004 fdf0 	bl	80062c0 <HAL_UART_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016e6:	f000 f9ad 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200002d0 	.word	0x200002d0
 80016f4:	40013800 	.word	0x40013800

080016f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_USART2_UART_Init+0x58>)
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <MX_USART2_UART_Init+0x5c>)
 8001700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_USART2_UART_Init+0x58>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_USART2_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_USART2_UART_Init+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_USART2_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_USART2_UART_Init+0x58>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_USART2_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_USART2_UART_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_USART2_UART_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_USART2_UART_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_USART2_UART_Init+0x58>)
 800173c:	f004 fdc0 	bl	80062c0 <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001746:	f000 f97d 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000358 	.word	0x20000358
 8001754:	40004400 	.word	0x40004400

08001758 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_USART3_UART_Init+0x58>)
 800175e:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <MX_USART3_UART_Init+0x5c>)
 8001760:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <MX_USART3_UART_Init+0x58>)
 8001764:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001768:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_USART3_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_USART3_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USART3_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_USART3_UART_Init+0x58>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USART3_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_USART3_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USART3_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_USART3_UART_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_USART3_UART_Init+0x58>)
 800179c:	f004 fd90 	bl	80062c0 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017a6:	f000 f94d 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003e0 	.word	0x200003e0
 80017b4:	40004800 	.word	0x40004800

080017b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_DMA_Init+0x38>)
 80017c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <MX_DMA_Init+0x38>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6493      	str	r3, [r2, #72]	; 0x48
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_DMA_Init+0x38>)
 80017cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	200f      	movs	r0, #15
 80017dc:	f001 f809 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80017e0:	200f      	movs	r0, #15
 80017e2:	f001 f822 	bl	800282a <HAL_NVIC_EnableIRQ>

}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <MX_GPIO_Init+0x100>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	4a39      	ldr	r2, [pc, #228]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001822:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	4a33      	ldr	r2, [pc, #204]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182e:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <MX_GPIO_Init+0x100>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	4a27      	ldr	r2, [pc, #156]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185e:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, doorStatus_Pin|lightStatus_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2103      	movs	r1, #3
 800186e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001872:	f001 ffd9 	bl	8003828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ChipSelectSD_GPIO_Port, ChipSelectSD_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800187c:	481e      	ldr	r0, [pc, #120]	; (80018f8 <MX_GPIO_Init+0x104>)
 800187e:	f001 ffd3 	bl	8003828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userControl_Pin */
  GPIO_InitStruct.Pin = userControl_Pin;
 8001882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001888:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(userControl_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4818      	ldr	r0, [pc, #96]	; (80018fc <MX_GPIO_Init+0x108>)
 800189a:	f001 fe1b 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : doorStatus_Pin lightStatus_Pin */
  GPIO_InitStruct.Pin = doorStatus_Pin|lightStatus_Pin;
 800189e:	2303      	movs	r3, #3
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b8:	f001 fe0c 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ChipSelectSD_Pin */
  GPIO_InitStruct.Pin = ChipSelectSD_Pin;
 80018bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ChipSelectSD_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4808      	ldr	r0, [pc, #32]	; (80018f8 <MX_GPIO_Init+0x104>)
 80018d6:	f001 fdfd 	bl	80034d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2102      	movs	r1, #2
 80018de:	2028      	movs	r0, #40	; 0x28
 80018e0:	f000 ff87 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018e4:	2028      	movs	r0, #40	; 0x28
 80018e6:	f000 ffa0 	bl	800282a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	48000400 	.word	0x48000400
 80018fc:	48000800 	.word	0x48000800

08001900 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001908:	1d39      	adds	r1, r7, #4
 800190a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800190e:	2201      	movs	r2, #1
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <__io_putchar+0x20>)
 8001912:	f004 fd23 	bl	800635c <HAL_UART_Transmit>
  return ch;
 8001916:	687b      	ldr	r3, [r7, #4]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000358 	.word	0x20000358

08001924 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]

	  open_SD_card_song(recordingPath);
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_GPIO_EXTI_Callback+0x44>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fb28 	bl	8000f88 <open_SD_card_song>
	  read_SD_card_song_initial();
 8001938:	f7ff fac8 	bl	8000ecc <read_SD_card_song_initial>
	  printf("Starting Playback \r\n");
 800193c:	480b      	ldr	r0, [pc, #44]	; (800196c <HAL_GPIO_EXTI_Callback+0x48>)
 800193e:	f00a fa31 	bl	800bda4 <puts>
	  audio_playing = 1;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
	  song_length_total = song_length;
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_GPIO_EXTI_Callback+0x50>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <HAL_GPIO_EXTI_Callback+0x54>)
 800194e:	6013      	str	r3, [r2, #0]
	  LL_TIM_EnableIT_UPDATE(TIM2);
 8001950:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001954:	f7ff fa25 	bl	8000da2 <LL_TIM_EnableIT_UPDATE>
	  LL_TIM_EnableCounter(TIM2);
 8001958:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800195c:	f7ff f9b9 	bl	8000cd2 <LL_TIM_EnableCounter>
	} else if (recording_audio == 1){
		finished_recording = 1;
	}
*/

}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000004 	.word	0x20000004
 800196c:	0800cc00 	.word	0x0800cc00
 8001970:	20002b88 	.word	0x20002b88
 8001974:	20002b90 	.word	0x20002b90
 8001978:	20002b94 	.word	0x20002b94

0800197c <HAL_UARTEx_RxEventCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
	mic_transfer_complete = 1;
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
	if (strncmp((char*)data, "LIGHT_ON\r\n", strlen("LIGHT_ON\r\n")) == 0) {
 8001988:	220a      	movs	r2, #10
 800198a:	4923      	ldr	r1, [pc, #140]	; (8001a18 <HAL_UARTEx_RxEventCallback+0x9c>)
 800198c:	4823      	ldr	r0, [pc, #140]	; (8001a1c <HAL_UARTEx_RxEventCallback+0xa0>)
 800198e:	f00a fa11 	bl	800bdb4 <strncmp>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <HAL_UARTEx_RxEventCallback+0x2c>
	        HAL_UART_Transmit(&huart4, (uint8_t*)"ON", strlen("ON"), HAL_MAX_DELAY);
 8001998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800199c:	2202      	movs	r2, #2
 800199e:	4920      	ldr	r1, [pc, #128]	; (8001a20 <HAL_UARTEx_RxEventCallback+0xa4>)
 80019a0:	4820      	ldr	r0, [pc, #128]	; (8001a24 <HAL_UARTEx_RxEventCallback+0xa8>)
 80019a2:	f004 fcdb 	bl	800635c <HAL_UART_Transmit>
 80019a6:	e00e      	b.n	80019c6 <HAL_UARTEx_RxEventCallback+0x4a>
	}

	else if (strncmp((char*)data, "LIGHT_OFF\r\n", strlen("LIGHT_OFF\r\n")) == 0) {
 80019a8:	220b      	movs	r2, #11
 80019aa:	491f      	ldr	r1, [pc, #124]	; (8001a28 <HAL_UARTEx_RxEventCallback+0xac>)
 80019ac:	481b      	ldr	r0, [pc, #108]	; (8001a1c <HAL_UARTEx_RxEventCallback+0xa0>)
 80019ae:	f00a fa01 	bl	800bdb4 <strncmp>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d106      	bne.n	80019c6 <HAL_UARTEx_RxEventCallback+0x4a>
	        HAL_UART_Transmit(&huart4, (uint8_t *)"OFF", strlen("OFF"), HAL_MAX_DELAY);
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019bc:	2203      	movs	r2, #3
 80019be:	491b      	ldr	r1, [pc, #108]	; (8001a2c <HAL_UARTEx_RxEventCallback+0xb0>)
 80019c0:	4818      	ldr	r0, [pc, #96]	; (8001a24 <HAL_UARTEx_RxEventCallback+0xa8>)
 80019c2:	f004 fccb 	bl	800635c <HAL_UART_Transmit>
	}

	if (strncmp((char*)data, "DOOR_OPEN\r\n", strlen("DOOR_OPEN\r\n")) == 0) {
 80019c6:	220b      	movs	r2, #11
 80019c8:	4919      	ldr	r1, [pc, #100]	; (8001a30 <HAL_UARTEx_RxEventCallback+0xb4>)
 80019ca:	4814      	ldr	r0, [pc, #80]	; (8001a1c <HAL_UARTEx_RxEventCallback+0xa0>)
 80019cc:	f00a f9f2 	bl	800bdb4 <strncmp>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d107      	bne.n	80019e6 <HAL_UARTEx_RxEventCallback+0x6a>
	    HAL_UART_Transmit(&huart3, (uint8_t *)"OPEN", strlen("OPEN"), HAL_MAX_DELAY);
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019da:	2204      	movs	r2, #4
 80019dc:	4915      	ldr	r1, [pc, #84]	; (8001a34 <HAL_UARTEx_RxEventCallback+0xb8>)
 80019de:	4816      	ldr	r0, [pc, #88]	; (8001a38 <HAL_UARTEx_RxEventCallback+0xbc>)
 80019e0:	f004 fcbc 	bl	800635c <HAL_UART_Transmit>
 80019e4:	e00e      	b.n	8001a04 <HAL_UARTEx_RxEventCallback+0x88>
	}

	else if (strncmp((char*)data, "DOOR_CLOSE\r\n", strlen("DOOR_CLOSE\r\n")) == 0) {
 80019e6:	220c      	movs	r2, #12
 80019e8:	4914      	ldr	r1, [pc, #80]	; (8001a3c <HAL_UARTEx_RxEventCallback+0xc0>)
 80019ea:	480c      	ldr	r0, [pc, #48]	; (8001a1c <HAL_UARTEx_RxEventCallback+0xa0>)
 80019ec:	f00a f9e2 	bl	800bdb4 <strncmp>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_UARTEx_RxEventCallback+0x88>
	    HAL_UART_Transmit(&huart3, (uint8_t *)"CLOSE", strlen("CLOSE"), HAL_MAX_DELAY);
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019fa:	2205      	movs	r2, #5
 80019fc:	4910      	ldr	r1, [pc, #64]	; (8001a40 <HAL_UARTEx_RxEventCallback+0xc4>)
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001a00:	f004 fcac 	bl	800635c <HAL_UART_Transmit>
	}


	    HAL_UARTEx_ReceiveToIdle_IT(huart, data, 64);
 8001a04:	2240      	movs	r2, #64	; 0x40
 8001a06:	4905      	ldr	r1, [pc, #20]	; (8001a1c <HAL_UARTEx_RxEventCallback+0xa0>)
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f005 ffd3 	bl	80079b4 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	0800cc14 	.word	0x0800cc14
 8001a1c:	20005bbc 	.word	0x20005bbc
 8001a20:	0800cc20 	.word	0x0800cc20
 8001a24:	20000248 	.word	0x20000248
 8001a28:	0800cc24 	.word	0x0800cc24
 8001a2c:	0800cc30 	.word	0x0800cc30
 8001a30:	0800cc34 	.word	0x0800cc34
 8001a34:	0800cc40 	.word	0x0800cc40
 8001a38:	200003e0 	.word	0x200003e0
 8001a3c:	0800cc48 	.word	0x0800cc48
 8001a40:	0800cc58 	.word	0x0800cc58

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>
	...

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_MspInit+0x44>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_MspInit+0x44>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6613      	str	r3, [r2, #96]	; 0x60
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_MspInit+0x44>)
 8001a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_MspInit+0x44>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_MspInit+0x44>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_MspInit+0x44>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a19      	ldr	r2, [pc, #100]	; (8001b1c <HAL_DAC_MspInit+0x84>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d12c      	bne.n	8001b14 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_DAC_MspInit+0x88>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <HAL_DAC_MspInit+0x88>)
 8001ac0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_DAC_MspInit+0x88>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_DAC_MspInit+0x88>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <HAL_DAC_MspInit+0x88>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_DAC_MspInit+0x88>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aea:	2310      	movs	r3, #16
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aee:	2303      	movs	r3, #3
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b00:	f001 fce8 	bl	80034d4 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2036      	movs	r0, #54	; 0x36
 8001b0a:	f000 fe72 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b0e:	2036      	movs	r0, #54	; 0x36
 8001b10:	f000 fe8b 	bl	800282a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40007400 	.word	0x40007400
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b0ac      	sub	sp, #176	; 0xb0
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2288      	movs	r2, #136	; 0x88
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f00a f947 	bl	800bdd8 <memset>
  if(DFSDM1_Init == 0)
 8001b4a:	4b55      	ldr	r3, [pc, #340]	; (8001ca0 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d16b      	bne.n	8001c2a <HAL_DFSDM_FilterMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 fcf4 	bl	8004550 <HAL_RCCEx_PeriphCLKConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001b6e:	f7ff ff69 	bl	8001a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001b72:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	4a4a      	ldr	r2, [pc, #296]	; (8001ca4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001b7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001b7c:	4b49      	ldr	r3, [pc, #292]	; (8001ca4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10b      	bne.n	8001b9c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b84:	4b48      	ldr	r3, [pc, #288]	; (8001ca8 <HAL_DFSDM_FilterMspInit+0x184>)
 8001b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b88:	4a47      	ldr	r2, [pc, #284]	; (8001ca8 <HAL_DFSDM_FilterMspInit+0x184>)
 8001b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b8e:	6613      	str	r3, [r2, #96]	; 0x60
 8001b90:	4b45      	ldr	r3, [pc, #276]	; (8001ca8 <HAL_DFSDM_FilterMspInit+0x184>)
 8001b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9c:	4b42      	ldr	r3, [pc, #264]	; (8001ca8 <HAL_DFSDM_FilterMspInit+0x184>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba0:	4a41      	ldr	r2, [pc, #260]	; (8001ca8 <HAL_DFSDM_FilterMspInit+0x184>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <HAL_DFSDM_FilterMspInit+0x184>)
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb4:	4b3c      	ldr	r3, [pc, #240]	; (8001ca8 <HAL_DFSDM_FilterMspInit+0x184>)
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb8:	4a3b      	ldr	r2, [pc, #236]	; (8001ca8 <HAL_DFSDM_FilterMspInit+0x184>)
 8001bba:	f043 0302 	orr.w	r3, r3, #2
 8001bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_DFSDM_FilterMspInit+0x184>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bcc:	2304      	movs	r3, #4
 8001bce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001be4:	2306      	movs	r3, #6
 8001be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bee:	4619      	mov	r1, r3
 8001bf0:	482e      	ldr	r0, [pc, #184]	; (8001cac <HAL_DFSDM_FilterMspInit+0x188>)
 8001bf2:	f001 fc6f 	bl	80034d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c0e:	2306      	movs	r3, #6
 8001c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4825      	ldr	r0, [pc, #148]	; (8001cb0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c1c:	f001 fc5a 	bl	80034d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3301      	adds	r3, #1
 8001c26:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001c28:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a21      	ldr	r2, [pc, #132]	; (8001cb4 <HAL_DFSDM_FilterMspInit+0x190>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d131      	bne.n	8001c98 <HAL_DFSDM_FilterMspInit+0x174>
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8001c34:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c36:	4a21      	ldr	r2, [pc, #132]	; (8001cbc <HAL_DFSDM_FilterMspInit+0x198>)
 8001c38:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c4e:	2280      	movs	r2, #128	; 0x80
 8001c50:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c58:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c60:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c64:	2220      	movs	r2, #32
 8001c66:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8001c70:	4811      	ldr	r0, [pc, #68]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c72:	f001 fa49 	bl	8003108 <HAL_DMA_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_DFSDM_FilterMspInit+0x15c>
    {
      Error_Handler();
 8001c7c:	f7ff fee2 	bl	8001a44 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c86:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c90:	629a      	str	r2, [r3, #40]	; 0x28
 8001c92:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001c98:	bf00      	nop
 8001c9a:	37b0      	adds	r7, #176	; 0xb0
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20005c00 	.word	0x20005c00
 8001ca4:	20005bfc 	.word	0x20005bfc
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	48000800 	.word	0x48000800
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	40016180 	.word	0x40016180
 8001cb8:	20000150 	.word	0x20000150
 8001cbc:	40020058 	.word	0x40020058

08001cc0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0ac      	sub	sp, #176	; 0xb0
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2288      	movs	r2, #136	; 0x88
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f00a f879 	bl	800bdd8 <memset>
  if(DFSDM1_Init == 0)
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d16b      	bne.n	8001dc6 <HAL_DFSDM_ChannelMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 fc26 	bl	8004550 <HAL_RCCEx_PeriphCLKConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001d0a:	f7ff fe9b 	bl	8001a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001d0e:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_DFSDM_ChannelMspInit+0x114>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	4a2f      	ldr	r2, [pc, #188]	; (8001dd4 <HAL_DFSDM_ChannelMspInit+0x114>)
 8001d16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001d18:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <HAL_DFSDM_ChannelMspInit+0x114>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d10b      	bne.n	8001d38 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d20:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d24:	4a2c      	ldr	r2, [pc, #176]	; (8001dd8 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d54:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d80:	2306      	movs	r3, #6
 8001d82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4813      	ldr	r0, [pc, #76]	; (8001ddc <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001d8e:	f001 fba1 	bl	80034d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d92:	2302      	movs	r3, #2
 8001d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001daa:	2306      	movs	r3, #6
 8001dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001db4:	4619      	mov	r1, r3
 8001db6:	480a      	ldr	r0, [pc, #40]	; (8001de0 <HAL_DFSDM_ChannelMspInit+0x120>)
 8001db8:	f001 fb8c 	bl	80034d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	4a03      	ldr	r2, [pc, #12]	; (8001dd0 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001dc4:	6013      	str	r3, [r2, #0]
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	37b0      	adds	r7, #176	; 0xb0
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20005c00 	.word	0x20005c00
 8001dd4:	20005bfc 	.word	0x20005bfc
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	48000400 	.word	0x48000400

08001de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <HAL_SPI_MspInit+0x7c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d128      	bne.n	8001e58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	4a16      	ldr	r2, [pc, #88]	; (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e10:	6593      	str	r3, [r2, #88]	; 0x58
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	4a10      	ldr	r2, [pc, #64]	; (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_SPI_MspInit+0x80>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e36:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e48:	2305      	movs	r3, #5
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <HAL_SPI_MspInit+0x84>)
 8001e54:	f001 fb3e 	bl	80034d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	; 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40003800 	.word	0x40003800
 8001e64:	40021000 	.word	0x40021000
 8001e68:	48000400 	.word	0x48000400

08001e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <HAL_TIM_Base_MspInit+0x44>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d113      	bne.n	8001ea6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <HAL_TIM_Base_MspInit+0x48>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <HAL_TIM_Base_MspInit+0x48>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_TIM_Base_MspInit+0x48>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	201d      	movs	r0, #29
 8001e9c:	f000 fca9 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ea0:	201d      	movs	r0, #29
 8001ea2:	f000 fcc2 	bl	800282a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b0b2      	sub	sp, #200	; 0xc8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed4:	2288      	movs	r2, #136	; 0x88
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f009 ff7d 	bl	800bdd8 <memset>
  if(huart->Instance==UART4)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a90      	ldr	r2, [pc, #576]	; (8002124 <HAL_UART_MspInit+0x26c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d144      	bne.n	8001f72 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 fb2b 	bl	8004550 <HAL_RCCEx_PeriphCLKConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f00:	f7ff fda0 	bl	8001a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f04:	4b88      	ldr	r3, [pc, #544]	; (8002128 <HAL_UART_MspInit+0x270>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	4a87      	ldr	r2, [pc, #540]	; (8002128 <HAL_UART_MspInit+0x270>)
 8001f0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f10:	4b85      	ldr	r3, [pc, #532]	; (8002128 <HAL_UART_MspInit+0x270>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1c:	4b82      	ldr	r3, [pc, #520]	; (8002128 <HAL_UART_MspInit+0x270>)
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f20:	4a81      	ldr	r2, [pc, #516]	; (8002128 <HAL_UART_MspInit+0x270>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f28:	4b7f      	ldr	r3, [pc, #508]	; (8002128 <HAL_UART_MspInit+0x270>)
 8001f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f4e:	2308      	movs	r3, #8
 8001f50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f54:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4874      	ldr	r0, [pc, #464]	; (800212c <HAL_UART_MspInit+0x274>)
 8001f5c:	f001 faba 	bl	80034d4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2100      	movs	r1, #0
 8001f64:	2034      	movs	r0, #52	; 0x34
 8001f66:	f000 fc44 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f6a:	2034      	movs	r0, #52	; 0x34
 8001f6c:	f000 fc5d 	bl	800282a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f70:	e0d4      	b.n	800211c <HAL_UART_MspInit+0x264>
  else if(huart->Instance==USART1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a6e      	ldr	r2, [pc, #440]	; (8002130 <HAL_UART_MspInit+0x278>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d145      	bne.n	8002008 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f80:	2300      	movs	r3, #0
 8001f82:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f002 fae1 	bl	8004550 <HAL_RCCEx_PeriphCLKConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001f94:	f7ff fd56 	bl	8001a44 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f98:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_UART_MspInit+0x270>)
 8001f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9c:	4a62      	ldr	r2, [pc, #392]	; (8002128 <HAL_UART_MspInit+0x270>)
 8001f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa4:	4b60      	ldr	r3, [pc, #384]	; (8002128 <HAL_UART_MspInit+0x270>)
 8001fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fac:	623b      	str	r3, [r7, #32]
 8001fae:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb0:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <HAL_UART_MspInit+0x270>)
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	4a5c      	ldr	r2, [pc, #368]	; (8002128 <HAL_UART_MspInit+0x270>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fbc:	4b5a      	ldr	r3, [pc, #360]	; (8002128 <HAL_UART_MspInit+0x270>)
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fc8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fe2:	2307      	movs	r3, #7
 8001fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fec:	4619      	mov	r1, r3
 8001fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff2:	f001 fa6f 	bl	80034d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2025      	movs	r0, #37	; 0x25
 8001ffc:	f000 fbf9 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002000:	2025      	movs	r0, #37	; 0x25
 8002002:	f000 fc12 	bl	800282a <HAL_NVIC_EnableIRQ>
}
 8002006:	e089      	b.n	800211c <HAL_UART_MspInit+0x264>
  else if(huart->Instance==USART2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a49      	ldr	r2, [pc, #292]	; (8002134 <HAL_UART_MspInit+0x27c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d13c      	bne.n	800208c <HAL_UART_MspInit+0x1d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002012:	2302      	movs	r3, #2
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002016:	2300      	movs	r3, #0
 8002018:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800201a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800201e:	4618      	mov	r0, r3
 8002020:	f002 fa96 	bl	8004550 <HAL_RCCEx_PeriphCLKConfig>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_UART_MspInit+0x176>
      Error_Handler();
 800202a:	f7ff fd0b 	bl	8001a44 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800202e:	4b3e      	ldr	r3, [pc, #248]	; (8002128 <HAL_UART_MspInit+0x270>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	4a3d      	ldr	r2, [pc, #244]	; (8002128 <HAL_UART_MspInit+0x270>)
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	6593      	str	r3, [r2, #88]	; 0x58
 800203a:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <HAL_UART_MspInit+0x270>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <HAL_UART_MspInit+0x270>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	4a37      	ldr	r2, [pc, #220]	; (8002128 <HAL_UART_MspInit+0x270>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002052:	4b35      	ldr	r3, [pc, #212]	; (8002128 <HAL_UART_MspInit+0x270>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800205e:	230c      	movs	r3, #12
 8002060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002076:	2307      	movs	r3, #7
 8002078:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002080:	4619      	mov	r1, r3
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002086:	f001 fa25 	bl	80034d4 <HAL_GPIO_Init>
}
 800208a:	e047      	b.n	800211c <HAL_UART_MspInit+0x264>
  else if(huart->Instance==USART3)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a29      	ldr	r2, [pc, #164]	; (8002138 <HAL_UART_MspInit+0x280>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d142      	bne.n	800211c <HAL_UART_MspInit+0x264>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002096:	2304      	movs	r3, #4
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800209a:	2300      	movs	r3, #0
 800209c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800209e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a2:	4618      	mov	r0, r3
 80020a4:	f002 fa54 	bl	8004550 <HAL_RCCEx_PeriphCLKConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 80020ae:	f7ff fcc9 	bl	8001a44 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_UART_MspInit+0x270>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <HAL_UART_MspInit+0x270>)
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020bc:	6593      	str	r3, [r2, #88]	; 0x58
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_UART_MspInit+0x270>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_UART_MspInit+0x270>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	4a16      	ldr	r2, [pc, #88]	; (8002128 <HAL_UART_MspInit+0x270>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_UART_MspInit+0x270>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020e2:	2330      	movs	r3, #48	; 0x30
 80020e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020fa:	2307      	movs	r3, #7
 80020fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002104:	4619      	mov	r1, r3
 8002106:	4809      	ldr	r0, [pc, #36]	; (800212c <HAL_UART_MspInit+0x274>)
 8002108:	f001 f9e4 	bl	80034d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	2027      	movs	r0, #39	; 0x27
 8002112:	f000 fb6e 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002116:	2027      	movs	r0, #39	; 0x27
 8002118:	f000 fb87 	bl	800282a <HAL_NVIC_EnableIRQ>
}
 800211c:	bf00      	nop
 800211e:	37c8      	adds	r7, #200	; 0xc8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40004c00 	.word	0x40004c00
 8002128:	40021000 	.word	0x40021000
 800212c:	48000800 	.word	0x48000800
 8002130:	40013800 	.word	0x40013800
 8002134:	40004400 	.word	0x40004400
 8002138:	40004800 	.word	0x40004800

0800213c <LL_TIM_ClearFlag_UPDATE>:
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f06f 0201 	mvn.w	r2, #1
 800214a:	611a      	str	r2, [r3, #16]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <NMI_Handler+0x4>

08002184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <HardFault_Handler+0x4>

0800218a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <MemManage_Handler+0x4>

08002190 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <BusFault_Handler+0x4>

08002196 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <UsageFault_Handler+0x4>

0800219c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <SysTick_Handler+0x34>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <SysTick_Handler+0x18>
	  Timer1--;
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <SysTick_Handler+0x34>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <SysTick_Handler+0x34>)
 80021de:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <SysTick_Handler+0x38>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <SysTick_Handler+0x2c>
	  Timer2--;
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <SysTick_Handler+0x38>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <SysTick_Handler+0x38>)
 80021f2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f4:	f000 f9de 	bl	80025b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20005c3c 	.word	0x20005c3c
 8002200:	20005c3e 	.word	0x20005c3e

08002204 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <DMA1_Channel5_IRQHandler+0x10>)
 800220a:	f001 f8b4 	bl	8003376 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000150 	.word	0x20000150

08002218 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if (LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 800221c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002220:	f7ff ff9a 	bl	8002158 <LL_TIM_IsActiveFlag_UPDATE>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d035      	beq.n	8002296 <TIM2_IRQHandler+0x7e>
		LL_TIM_ClearFlag_UPDATE(TIM2);
 800222a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800222e:	f7ff ff85 	bl	800213c <LL_TIM_ClearFlag_UPDATE>
		newSample.uShort = (uint16_t)32768 + playback_buffer[sample_position];
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <TIM2_IRQHandler+0x84>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1a      	ldr	r2, [pc, #104]	; (80022a0 <TIM2_IRQHandler+0x88>)
 8002238:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800223c:	b29b      	uxth	r3, r3
 800223e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002242:	b29a      	uxth	r2, r3
 8002244:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <TIM2_IRQHandler+0x8c>)
 8002246:	801a      	strh	r2, [r3, #0]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (newSample.uShort>>4));
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <TIM2_IRQHandler+0x8c>)
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	b29b      	uxth	r3, r3
 8002250:	2200      	movs	r2, #0
 8002252:	2100      	movs	r1, #0
 8002254:	4814      	ldr	r0, [pc, #80]	; (80022a8 <TIM2_IRQHandler+0x90>)
 8002256:	f000 fbcb 	bl	80029f0 <HAL_DAC_SetValue>

		sample_position++;
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <TIM2_IRQHandler+0x84>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	3301      	adds	r3, #1
 8002260:	4a0e      	ldr	r2, [pc, #56]	; (800229c <TIM2_IRQHandler+0x84>)
 8002262:	6013      	str	r3, [r2, #0]
		samples_played++;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <TIM2_IRQHandler+0x94>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <TIM2_IRQHandler+0x94>)
 800226c:	6013      	str	r3, [r2, #0]

		if (sample_position == AUDIO_BUFFER_SIZE){
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <TIM2_IRQHandler+0x84>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002276:	d102      	bne.n	800227e <TIM2_IRQHandler+0x66>
			buffer_half = 1;
 8002278:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <TIM2_IRQHandler+0x98>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]
		}
		if (sample_position == AUDIO_BUFFER_SIZE * 2){
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <TIM2_IRQHandler+0x84>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002286:	d106      	bne.n	8002296 <TIM2_IRQHandler+0x7e>
			buffer_complete = 1;
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <TIM2_IRQHandler+0x9c>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]
			sample_position = 0;
 800228e:	4b03      	ldr	r3, [pc, #12]	; (800229c <TIM2_IRQHandler+0x84>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
		}

	}
	return;
 8002294:	bf00      	nop
 8002296:	bf00      	nop
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000014 	.word	0x20000014
 80022a0:	20002ba0 	.word	0x20002ba0
 80022a4:	20005c04 	.word	0x20005c04
 80022a8:	200000b0 	.word	0x200000b0
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20002b98 	.word	0x20002b98
 80022b4:	20002b9c 	.word	0x20002b9c

080022b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  if(!buttonReady){
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <TIM3_IRQHandler+0x2c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <TIM3_IRQHandler+0x12>
	buttonReady = 1;
 80022c4:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <TIM3_IRQHandler+0x2c>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022ca:	4807      	ldr	r0, [pc, #28]	; (80022e8 <TIM3_IRQHandler+0x30>)
 80022cc:	f003 fc20 	bl	8005b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK) {
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <TIM3_IRQHandler+0x30>)
 80022d2:	f003 fbee 	bl	8005ab2 <HAL_TIM_Base_Stop_IT>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <TIM3_IRQHandler+0x28>
    Error_Handler();
 80022dc:	f7ff fbb2 	bl	8001a44 <Error_Handler>
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000010 	.word	0x20000010
 80022e8:	200001fc 	.word	0x200001fc

080022ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <USART1_IRQHandler+0x10>)
 80022f2:	f004 f8bd 	bl	8006470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200002d0 	.word	0x200002d0

08002300 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <USART3_IRQHandler+0x10>)
 8002306:	f004 f8b3 	bl	8006470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */


  /* USER CODE END USART3_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200003e0 	.word	0x200003e0

08002314 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userControl_Pin);
 8002318:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800231c:	f001 fa9c 	bl	8003858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}

08002324 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <UART4_IRQHandler+0x10>)
 800232a:	f004 f8a1 	bl	8006470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000248 	.word	0x20000248

08002338 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <TIM6_DAC_IRQHandler+0x10>)
 800233e:	f000 fafd 	bl	800293c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200000b0 	.word	0x200000b0

0800234c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e00a      	b.n	8002374 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800235e:	f3af 8000 	nop.w
 8002362:	4601      	mov	r1, r0
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	60ba      	str	r2, [r7, #8]
 800236a:	b2ca      	uxtb	r2, r1
 800236c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	dbf0      	blt.n	800235e <_read+0x12>
  }

  return len;
 800237c:	687b      	ldr	r3, [r7, #4]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e009      	b.n	80023ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	60ba      	str	r2, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff faad 	bl	8001900 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf1      	blt.n	8002398 <_write+0x12>
  }
  return len;
 80023b4:	687b      	ldr	r3, [r7, #4]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_close>:

int _close(int file)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e6:	605a      	str	r2, [r3, #4]
  return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <_isatty>:

int _isatty(int file)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <_sbrk+0x5c>)
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <_sbrk+0x60>)
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <_sbrk+0x64>)
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <_sbrk+0x68>)
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d207      	bcs.n	8002468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002458:	f009 fcc6 	bl	800bde8 <__errno>
 800245c:	4603      	mov	r3, r0
 800245e:	220c      	movs	r2, #12
 8002460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002466:	e009      	b.n	800247c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <_sbrk+0x64>)
 8002478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20018000 	.word	0x20018000
 8002488:	00005000 	.word	0x00005000
 800248c:	20005c08 	.word	0x20005c08
 8002490:	20005fc8 	.word	0x20005fc8

08002494 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <SystemInit+0x20>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <SystemInit+0x20>)
 80024a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024bc:	f7ff ffea 	bl	8002494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c0:	480c      	ldr	r0, [pc, #48]	; (80024f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024c2:	490d      	ldr	r1, [pc, #52]	; (80024f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <LoopForever+0xe>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024d8:	4c0a      	ldr	r4, [pc, #40]	; (8002504 <LoopForever+0x16>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024e6:	f009 fc85 	bl	800bdf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ea:	f7fe fd9f 	bl	800102c <main>

080024ee <LoopForever>:

LoopForever:
    b LoopForever
 80024ee:	e7fe      	b.n	80024ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80024fc:	0800d174 	.word	0x0800d174
  ldr r2, =_sbss
 8002500:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002504:	20005fc4 	.word	0x20005fc4

08002508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC1_2_IRQHandler>

0800250a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002514:	2003      	movs	r0, #3
 8002516:	f000 f961 	bl	80027dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800251a:	2001      	movs	r0, #1
 800251c:	f000 f80e 	bl	800253c <HAL_InitTick>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	71fb      	strb	r3, [r7, #7]
 800252a:	e001      	b.n	8002530 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800252c:	f7ff fa90 	bl	8001a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002530:	79fb      	ldrb	r3, [r7, #7]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <HAL_InitTick+0x6c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d023      	beq.n	8002598 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <HAL_InitTick+0x70>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_InitTick+0x6c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800255e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f96d 	bl	8002846 <HAL_SYSTICK_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d809      	bhi.n	800258c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002578:	2200      	movs	r2, #0
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002580:	f000 f937 	bl	80027f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_InitTick+0x74>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e007      	b.n	800259c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e004      	b.n	800259c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	e001      	b.n	800259c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000020 	.word	0x20000020
 80025ac:	20000018 	.word	0x20000018
 80025b0:	2000001c 	.word	0x2000001c

080025b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_IncTick+0x20>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_IncTick+0x24>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <HAL_IncTick+0x24>)
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000020 	.word	0x20000020
 80025d8:	20005c0c 	.word	0x20005c0c

080025dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return uwTick;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_GetTick+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20005c0c 	.word	0x20005c0c

080025f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff ffee 	bl	80025dc <HAL_GetTick>
 8002600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800260c:	d005      	beq.n	800261a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_Delay+0x44>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800261a:	bf00      	nop
 800261c:	f7ff ffde 	bl	80025dc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	429a      	cmp	r2, r3
 800262a:	d8f7      	bhi.n	800261c <HAL_Delay+0x28>
  {
  }
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000020 	.word	0x20000020

0800263c <__NVIC_SetPriorityGrouping>:
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_GetPriorityGrouping>:
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_EnableIRQ>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0b      	blt.n	80026ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4907      	ldr	r1, [pc, #28]	; (80026d8 <__NVIC_EnableIRQ+0x38>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	; (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <__NVIC_SetPriority+0x50>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a8:	d301      	bcc.n	80027ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00f      	b.n	80027ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <SysTick_Config+0x40>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b6:	210f      	movs	r1, #15
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027bc:	f7ff ff8e 	bl	80026dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <SysTick_Config+0x40>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <SysTick_Config+0x40>)
 80027c8:	2207      	movs	r2, #7
 80027ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	e000e010 	.word	0xe000e010

080027dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff29 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002804:	f7ff ff3e 	bl	8002684 <__NVIC_GetPriorityGrouping>
 8002808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	f7ff ff8e 	bl	8002730 <NVIC_EncodePriority>
 8002814:	4602      	mov	r2, r0
 8002816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff5d 	bl	80026dc <__NVIC_SetPriority>
}
 8002822:	bf00      	nop
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff31 	bl	80026a0 <__NVIC_EnableIRQ>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff ffa2 	bl	8002798 <SysTick_Config>
 8002854:	4603      	mov	r3, r0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e014      	b.n	800289a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	791b      	ldrb	r3, [r3, #4]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff f909 	bl	8001a98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2202      	movs	r2, #2
 800288a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	795b      	ldrb	r3, [r3, #5]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_DAC_Start+0x16>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e03b      	b.n	8002930 <HAL_DAC_Start+0x8e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2202      	movs	r2, #2
 80028c2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6819      	ldr	r1, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2201      	movs	r2, #1
 80028d2:	409a      	lsls	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10f      	bne.n	8002902 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d118      	bne.n	8002922 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	e00f      	b.n	8002922 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800290c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002910:	d107      	bne.n	8002922 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0202 	orr.w	r2, r2, #2
 8002920:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800294e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002952:	d120      	bne.n	8002996 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800295e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002962:	d118      	bne.n	8002996 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2204      	movs	r2, #4
 8002968:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800297e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800298e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f852 	bl	8002a3a <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a4:	d120      	bne.n	80029e8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b4:	d118      	bne.n	80029e8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2204      	movs	r2, #4
 80029ba:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f043 0202 	orr.w	r2, r3, #2
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80029d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80029e0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f95a 	bl	8002c9c <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4413      	add	r3, r2
 8002a14:	3308      	adds	r3, #8
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	e004      	b.n	8002a24 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4413      	add	r3, r2
 8002a20:	3314      	adds	r3, #20
 8002a22:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	461a      	mov	r2, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b088      	sub	sp, #32
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	795b      	ldrb	r3, [r3, #5]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_DAC_ConfigChannel+0x1c>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e114      	b.n	8002c94 <HAL_DAC_ConfigChannel+0x246>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2202      	movs	r2, #2
 8002a74:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	f040 8081 	bne.w	8002b82 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002a80:	f7ff fdac 	bl	80025dc <HAL_GetTick>
 8002a84:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d140      	bne.n	8002b0e <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a8c:	e018      	b.n	8002ac0 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a8e:	f7ff fda5 	bl	80025dc <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d911      	bls.n	8002ac0 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f043 0208 	orr.w	r2, r3, #8
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e0e9      	b.n	8002c94 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1df      	bne.n	8002a8e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f7ff fd90 	bl	80025f4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	6992      	ldr	r2, [r2, #24]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
 8002ade:	e023      	b.n	8002b28 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ae0:	f7ff fd7c 	bl	80025dc <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d90f      	bls.n	8002b0e <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	da0a      	bge.n	8002b0e <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f043 0208 	orr.w	r2, r3, #8
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2203      	movs	r2, #3
 8002b08:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e0c2      	b.n	8002c94 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	dbe3      	blt.n	8002ae0 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f7ff fd6b 	bl	80025f4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	6992      	ldr	r2, [r2, #24]
 8002b26:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002b38:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	ea02 0103 	and.w	r1, r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	69da      	ldr	r2, [r3, #28]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	21ff      	movs	r1, #255	; 0xff
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	ea02 0103 	and.w	r1, r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	6a1a      	ldr	r2, [r3, #32]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d11d      	bne.n	8002bc6 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	221f      	movs	r2, #31
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bcc:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6819      	ldr	r1, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	400a      	ands	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	22c0      	movs	r2, #192	; 0xc0
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	400a      	ands	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3720      	adds	r7, #32
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e0ac      	b.n	8002e1c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f9d2 	bl	8003070 <DFSDM_GetChannelFromInstance>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4a55      	ldr	r2, [pc, #340]	; (8002e24 <HAL_DFSDM_ChannelInit+0x174>)
 8002cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e09f      	b.n	8002e1c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7fe ffef 	bl	8001cc0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002ce2:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <HAL_DFSDM_ChannelInit+0x178>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	4a4f      	ldr	r2, [pc, #316]	; (8002e28 <HAL_DFSDM_ChannelInit+0x178>)
 8002cea:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002cec:	4b4e      	ldr	r3, [pc, #312]	; (8002e28 <HAL_DFSDM_ChannelInit+0x178>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d125      	bne.n	8002d40 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002cf4:	4b4d      	ldr	r3, [pc, #308]	; (8002e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a4c      	ldr	r2, [pc, #304]	; (8002e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002cfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cfe:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002d00:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4948      	ldr	r1, [pc, #288]	; (8002e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a46      	ldr	r2, [pc, #280]	; (8002e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002d14:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002d18:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	791b      	ldrb	r3, [r3, #4]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d108      	bne.n	8002d34 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002d22:	4b42      	ldr	r3, [pc, #264]	; (8002e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	493f      	ldr	r1, [pc, #252]	; (8002e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002d34:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a3c      	ldr	r2, [pc, #240]	; (8002e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8002d3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d3e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002d4e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6819      	ldr	r1, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d5e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002d64:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 020f 	bic.w	r2, r2, #15
 8002d7c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6819      	ldr	r1, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002da4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6899      	ldr	r1, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	3b01      	subs	r3, #1
 8002db6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f002 0207 	and.w	r2, r2, #7
 8002dd0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dfc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f930 	bl	8003070 <DFSDM_GetChannelFromInstance>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4904      	ldr	r1, [pc, #16]	; (8002e24 <HAL_DFSDM_ChannelInit+0x174>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20005c14 	.word	0x20005c14
 8002e28:	20005c10 	.word	0x20005c10
 8002e2c:	40016000 	.word	0x40016000

08002e30 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e0ca      	b.n	8002fd8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a66      	ldr	r2, [pc, #408]	; (8002fe0 <HAL_DFSDM_FilterInit+0x1b0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d109      	bne.n	8002e60 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d003      	beq.n	8002e5c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0bb      	b.n	8002fd8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7fe fe53 	bl	8001b24 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002e8c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7a1b      	ldrb	r3, [r3, #8]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d108      	bne.n	8002ea8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	e007      	b.n	8002eb8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7a5b      	ldrb	r3, [r3, #9]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d108      	bne.n	8002ed2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e007      	b.n	8002ee2 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8002ef0:	f023 0308 	bic.w	r3, r3, #8
 8002ef4:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d108      	bne.n	8002f10 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6819      	ldr	r1, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7c1b      	ldrb	r3, [r3, #16]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d108      	bne.n	8002f2a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0210 	orr.w	r2, r2, #16
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e007      	b.n	8002f3a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0210 	bic.w	r2, r2, #16
 8002f38:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	7c5b      	ldrb	r3, [r3, #17]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d108      	bne.n	8002f54 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0220 	orr.w	r2, r2, #32
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e007      	b.n	8002f64 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0220 	bic.w	r2, r2, #32
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002f72:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002f76:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6959      	ldr	r1, [r3, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002f8a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002f92:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7c1a      	ldrb	r2, [r3, #16]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40016100 	.word	0x40016100

08002fe4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d02e      	beq.n	800305c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003004:	2bff      	cmp	r3, #255	; 0xff
 8003006:	d029      	beq.n	800305c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800301a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d10d      	bne.n	800303e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e00a      	b.n	8003054 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
 800305a:	e001      	b.n	8003060 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003060:	7dfb      	ldrb	r3, [r7, #23]
}
 8003062:	4618      	mov	r0, r3
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <DFSDM_GetChannelFromInstance+0x7c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d102      	bne.n	8003086 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	e02b      	b.n	80030de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a19      	ldr	r2, [pc, #100]	; (80030f0 <DFSDM_GetChannelFromInstance+0x80>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d102      	bne.n	8003094 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800308e:	2301      	movs	r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e024      	b.n	80030de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a17      	ldr	r2, [pc, #92]	; (80030f4 <DFSDM_GetChannelFromInstance+0x84>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d102      	bne.n	80030a2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800309c:	2302      	movs	r3, #2
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e01d      	b.n	80030de <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a14      	ldr	r2, [pc, #80]	; (80030f8 <DFSDM_GetChannelFromInstance+0x88>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d102      	bne.n	80030b0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80030aa:	2304      	movs	r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	e016      	b.n	80030de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a12      	ldr	r2, [pc, #72]	; (80030fc <DFSDM_GetChannelFromInstance+0x8c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d102      	bne.n	80030be <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80030b8:	2305      	movs	r3, #5
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e00f      	b.n	80030de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a0f      	ldr	r2, [pc, #60]	; (8003100 <DFSDM_GetChannelFromInstance+0x90>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d102      	bne.n	80030cc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80030c6:	2306      	movs	r3, #6
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	e008      	b.n	80030de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a0d      	ldr	r2, [pc, #52]	; (8003104 <DFSDM_GetChannelFromInstance+0x94>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d102      	bne.n	80030da <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80030d4:	2307      	movs	r3, #7
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e001      	b.n	80030de <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80030da:	2303      	movs	r3, #3
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80030de:	68fb      	ldr	r3, [r7, #12]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40016000 	.word	0x40016000
 80030f0:	40016020 	.word	0x40016020
 80030f4:	40016040 	.word	0x40016040
 80030f8:	40016080 	.word	0x40016080
 80030fc:	400160a0 	.word	0x400160a0
 8003100:	400160c0 	.word	0x400160c0
 8003104:	400160e0 	.word	0x400160e0

08003108 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e098      	b.n	800324c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	4b4d      	ldr	r3, [pc, #308]	; (8003258 <HAL_DMA_Init+0x150>)
 8003122:	429a      	cmp	r2, r3
 8003124:	d80f      	bhi.n	8003146 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	4b4b      	ldr	r3, [pc, #300]	; (800325c <HAL_DMA_Init+0x154>)
 800312e:	4413      	add	r3, r2
 8003130:	4a4b      	ldr	r2, [pc, #300]	; (8003260 <HAL_DMA_Init+0x158>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	009a      	lsls	r2, r3, #2
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a48      	ldr	r2, [pc, #288]	; (8003264 <HAL_DMA_Init+0x15c>)
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
 8003144:	e00e      	b.n	8003164 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	4b46      	ldr	r3, [pc, #280]	; (8003268 <HAL_DMA_Init+0x160>)
 800314e:	4413      	add	r3, r2
 8003150:	4a43      	ldr	r2, [pc, #268]	; (8003260 <HAL_DMA_Init+0x158>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	009a      	lsls	r2, r3, #2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a42      	ldr	r2, [pc, #264]	; (800326c <HAL_DMA_Init+0x164>)
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800317a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003188:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003194:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031be:	d039      	beq.n	8003234 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	4a27      	ldr	r2, [pc, #156]	; (8003264 <HAL_DMA_Init+0x15c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d11a      	bne.n	8003200 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031ca:	4b29      	ldr	r3, [pc, #164]	; (8003270 <HAL_DMA_Init+0x168>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f003 031c 	and.w	r3, r3, #28
 80031d6:	210f      	movs	r1, #15
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	4924      	ldr	r1, [pc, #144]	; (8003270 <HAL_DMA_Init+0x168>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031e4:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_DMA_Init+0x168>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	f003 031c 	and.w	r3, r3, #28
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	491d      	ldr	r1, [pc, #116]	; (8003270 <HAL_DMA_Init+0x168>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
 80031fe:	e019      	b.n	8003234 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003200:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <HAL_DMA_Init+0x16c>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	f003 031c 	and.w	r3, r3, #28
 800320c:	210f      	movs	r1, #15
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	4917      	ldr	r1, [pc, #92]	; (8003274 <HAL_DMA_Init+0x16c>)
 8003216:	4013      	ands	r3, r2
 8003218:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_DMA_Init+0x16c>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f003 031c 	and.w	r3, r3, #28
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	4911      	ldr	r1, [pc, #68]	; (8003274 <HAL_DMA_Init+0x16c>)
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40020407 	.word	0x40020407
 800325c:	bffdfff8 	.word	0xbffdfff8
 8003260:	cccccccd 	.word	0xcccccccd
 8003264:	40020000 	.word	0x40020000
 8003268:	bffdfbf8 	.word	0xbffdfbf8
 800326c:	40020400 	.word	0x40020400
 8003270:	400200a8 	.word	0x400200a8
 8003274:	400204a8 	.word	0x400204a8

08003278 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d008      	beq.n	80032a2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2204      	movs	r2, #4
 8003294:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e022      	b.n	80032e8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 020e 	bic.w	r2, r2, #14
 80032b0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f003 021c 	and.w	r2, r3, #28
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	2101      	movs	r1, #1
 80032d0:	fa01 f202 	lsl.w	r2, r1, r2
 80032d4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d005      	beq.n	8003318 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2204      	movs	r2, #4
 8003310:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
 8003316:	e029      	b.n	800336c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 020e 	bic.w	r2, r2, #14
 8003326:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f003 021c 	and.w	r2, r3, #28
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	2101      	movs	r1, #1
 8003346:	fa01 f202 	lsl.w	r2, r1, r2
 800334a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
    }
  }
  return status;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f003 031c 	and.w	r3, r3, #28
 8003396:	2204      	movs	r2, #4
 8003398:	409a      	lsls	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d026      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x7a>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d021      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d107      	bne.n	80033ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0204 	bic.w	r2, r2, #4
 80033c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f003 021c 	and.w	r2, r3, #28
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2104      	movs	r1, #4
 80033d8:	fa01 f202 	lsl.w	r2, r1, r2
 80033dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d071      	beq.n	80034ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80033ee:	e06c      	b.n	80034ca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f003 031c 	and.w	r3, r3, #28
 80033f8:	2202      	movs	r2, #2
 80033fa:	409a      	lsls	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d02e      	beq.n	8003462 <HAL_DMA_IRQHandler+0xec>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d029      	beq.n	8003462 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10b      	bne.n	8003434 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 020a 	bic.w	r2, r2, #10
 800342a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	f003 021c 	and.w	r2, r3, #28
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	2102      	movs	r1, #2
 8003442:	fa01 f202 	lsl.w	r2, r1, r2
 8003446:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d038      	beq.n	80034ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003460:	e033      	b.n	80034ca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	f003 031c 	and.w	r3, r3, #28
 800346a:	2208      	movs	r2, #8
 800346c:	409a      	lsls	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d02a      	beq.n	80034cc <HAL_DMA_IRQHandler+0x156>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d025      	beq.n	80034cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 020e 	bic.w	r2, r2, #14
 800348e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	f003 021c 	and.w	r2, r3, #28
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	2101      	movs	r1, #1
 800349e:	fa01 f202 	lsl.w	r2, r1, r2
 80034a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d004      	beq.n	80034cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
}
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e2:	e17f      	b.n	80037e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	2101      	movs	r1, #1
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	4013      	ands	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8171 	beq.w	80037de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d005      	beq.n	8003514 <HAL_GPIO_Init+0x40>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d130      	bne.n	8003576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	2203      	movs	r2, #3
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800354a:	2201      	movs	r2, #1
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43db      	mvns	r3, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4013      	ands	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	f003 0201 	and.w	r2, r3, #1
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b03      	cmp	r3, #3
 8003580:	d118      	bne.n	80035b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003588:	2201      	movs	r2, #1
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	08db      	lsrs	r3, r3, #3
 800359e:	f003 0201 	and.w	r2, r3, #1
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d017      	beq.n	80035f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	2203      	movs	r2, #3
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d123      	bne.n	8003644 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	08da      	lsrs	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3208      	adds	r2, #8
 8003604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003608:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	220f      	movs	r2, #15
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	08da      	lsrs	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3208      	adds	r2, #8
 800363e:	6939      	ldr	r1, [r7, #16]
 8003640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	2203      	movs	r2, #3
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0203 	and.w	r2, r3, #3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80ac 	beq.w	80037de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003686:	4b5f      	ldr	r3, [pc, #380]	; (8003804 <HAL_GPIO_Init+0x330>)
 8003688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368a:	4a5e      	ldr	r2, [pc, #376]	; (8003804 <HAL_GPIO_Init+0x330>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	6613      	str	r3, [r2, #96]	; 0x60
 8003692:	4b5c      	ldr	r3, [pc, #368]	; (8003804 <HAL_GPIO_Init+0x330>)
 8003694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800369e:	4a5a      	ldr	r2, [pc, #360]	; (8003808 <HAL_GPIO_Init+0x334>)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	3302      	adds	r3, #2
 80036a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	220f      	movs	r2, #15
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036c8:	d025      	beq.n	8003716 <HAL_GPIO_Init+0x242>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a4f      	ldr	r2, [pc, #316]	; (800380c <HAL_GPIO_Init+0x338>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01f      	beq.n	8003712 <HAL_GPIO_Init+0x23e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a4e      	ldr	r2, [pc, #312]	; (8003810 <HAL_GPIO_Init+0x33c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d019      	beq.n	800370e <HAL_GPIO_Init+0x23a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a4d      	ldr	r2, [pc, #308]	; (8003814 <HAL_GPIO_Init+0x340>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_GPIO_Init+0x236>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a4c      	ldr	r2, [pc, #304]	; (8003818 <HAL_GPIO_Init+0x344>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00d      	beq.n	8003706 <HAL_GPIO_Init+0x232>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a4b      	ldr	r2, [pc, #300]	; (800381c <HAL_GPIO_Init+0x348>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <HAL_GPIO_Init+0x22e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a4a      	ldr	r2, [pc, #296]	; (8003820 <HAL_GPIO_Init+0x34c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_GPIO_Init+0x22a>
 80036fa:	2306      	movs	r3, #6
 80036fc:	e00c      	b.n	8003718 <HAL_GPIO_Init+0x244>
 80036fe:	2307      	movs	r3, #7
 8003700:	e00a      	b.n	8003718 <HAL_GPIO_Init+0x244>
 8003702:	2305      	movs	r3, #5
 8003704:	e008      	b.n	8003718 <HAL_GPIO_Init+0x244>
 8003706:	2304      	movs	r3, #4
 8003708:	e006      	b.n	8003718 <HAL_GPIO_Init+0x244>
 800370a:	2303      	movs	r3, #3
 800370c:	e004      	b.n	8003718 <HAL_GPIO_Init+0x244>
 800370e:	2302      	movs	r3, #2
 8003710:	e002      	b.n	8003718 <HAL_GPIO_Init+0x244>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <HAL_GPIO_Init+0x244>
 8003716:	2300      	movs	r3, #0
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	f002 0203 	and.w	r2, r2, #3
 800371e:	0092      	lsls	r2, r2, #2
 8003720:	4093      	lsls	r3, r2
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003728:	4937      	ldr	r1, [pc, #220]	; (8003808 <HAL_GPIO_Init+0x334>)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	3302      	adds	r3, #2
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003736:	4b3b      	ldr	r3, [pc, #236]	; (8003824 <HAL_GPIO_Init+0x350>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800375a:	4a32      	ldr	r2, [pc, #200]	; (8003824 <HAL_GPIO_Init+0x350>)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003760:	4b30      	ldr	r3, [pc, #192]	; (8003824 <HAL_GPIO_Init+0x350>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	43db      	mvns	r3, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003784:	4a27      	ldr	r2, [pc, #156]	; (8003824 <HAL_GPIO_Init+0x350>)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800378a:	4b26      	ldr	r3, [pc, #152]	; (8003824 <HAL_GPIO_Init+0x350>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	43db      	mvns	r3, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_GPIO_Init+0x350>)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037b4:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_GPIO_Init+0x350>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	43db      	mvns	r3, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037d8:	4a12      	ldr	r2, [pc, #72]	; (8003824 <HAL_GPIO_Init+0x350>)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	3301      	adds	r3, #1
 80037e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	fa22 f303 	lsr.w	r3, r2, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f47f ae78 	bne.w	80034e4 <HAL_GPIO_Init+0x10>
  }
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	40010000 	.word	0x40010000
 800380c:	48000400 	.word	0x48000400
 8003810:	48000800 	.word	0x48000800
 8003814:	48000c00 	.word	0x48000c00
 8003818:	48001000 	.word	0x48001000
 800381c:	48001400 	.word	0x48001400
 8003820:	48001800 	.word	0x48001800
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	807b      	strh	r3, [r7, #2]
 8003834:	4613      	mov	r3, r2
 8003836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003838:	787b      	ldrb	r3, [r7, #1]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800383e:	887a      	ldrh	r2, [r7, #2]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003844:	e002      	b.n	800384c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003846:	887a      	ldrh	r2, [r7, #2]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003864:	695a      	ldr	r2, [r3, #20]
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d006      	beq.n	800387c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800386e:	4a05      	ldr	r2, [pc, #20]	; (8003884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe f854 	bl	8001924 <HAL_GPIO_EXTI_Callback>
  }
}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40010400 	.word	0x40010400

08003888 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40007000 	.word	0x40007000

080038a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b2:	d130      	bne.n	8003916 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b4:	4b23      	ldr	r3, [pc, #140]	; (8003944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c0:	d038      	beq.n	8003934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038ca:	4a1e      	ldr	r2, [pc, #120]	; (8003944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038d2:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2232      	movs	r2, #50	; 0x32
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	4a1b      	ldr	r2, [pc, #108]	; (800394c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	0c9b      	lsrs	r3, r3, #18
 80038e4:	3301      	adds	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038e8:	e002      	b.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f0:	4b14      	ldr	r3, [pc, #80]	; (8003944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fc:	d102      	bne.n	8003904 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f2      	bne.n	80038ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003910:	d110      	bne.n	8003934 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e00f      	b.n	8003936 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800391e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003922:	d007      	beq.n	8003934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003924:	4b07      	ldr	r3, [pc, #28]	; (8003944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800392c:	4a05      	ldr	r2, [pc, #20]	; (8003944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800392e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003932:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40007000 	.word	0x40007000
 8003948:	20000018 	.word	0x20000018
 800394c:	431bde83 	.word	0x431bde83

08003950 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e3ca      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003962:	4b97      	ldr	r3, [pc, #604]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800396c:	4b94      	ldr	r3, [pc, #592]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80e4 	beq.w	8003b4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HAL_RCC_OscConfig+0x4a>
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b0c      	cmp	r3, #12
 800398e:	f040 808b 	bne.w	8003aa8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b01      	cmp	r3, #1
 8003996:	f040 8087 	bne.w	8003aa8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800399a:	4b89      	ldr	r3, [pc, #548]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_RCC_OscConfig+0x62>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e3a2      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1a      	ldr	r2, [r3, #32]
 80039b6:	4b82      	ldr	r3, [pc, #520]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <HAL_RCC_OscConfig+0x7c>
 80039c2:	4b7f      	ldr	r3, [pc, #508]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ca:	e005      	b.n	80039d8 <HAL_RCC_OscConfig+0x88>
 80039cc:	4b7c      	ldr	r3, [pc, #496]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d2:	091b      	lsrs	r3, r3, #4
 80039d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d8:	4293      	cmp	r3, r2
 80039da:	d223      	bcs.n	8003a24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fd55 	bl	8004490 <RCC_SetFlashLatencyFromMSIRange>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e383      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039f0:	4b73      	ldr	r3, [pc, #460]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a72      	ldr	r2, [pc, #456]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 80039f6:	f043 0308 	orr.w	r3, r3, #8
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	4b70      	ldr	r3, [pc, #448]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	496d      	ldr	r1, [pc, #436]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a0e:	4b6c      	ldr	r3, [pc, #432]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	4968      	ldr	r1, [pc, #416]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
 8003a22:	e025      	b.n	8003a70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a24:	4b66      	ldr	r3, [pc, #408]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a65      	ldr	r2, [pc, #404]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003a2a:	f043 0308 	orr.w	r3, r3, #8
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4960      	ldr	r1, [pc, #384]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a42:	4b5f      	ldr	r3, [pc, #380]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	495b      	ldr	r1, [pc, #364]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fd15 	bl	8004490 <RCC_SetFlashLatencyFromMSIRange>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e343      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a70:	f000 fc4a 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b52      	ldr	r3, [pc, #328]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	4950      	ldr	r1, [pc, #320]	; (8003bc4 <HAL_RCC_OscConfig+0x274>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8c:	4a4e      	ldr	r2, [pc, #312]	; (8003bc8 <HAL_RCC_OscConfig+0x278>)
 8003a8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a90:	4b4e      	ldr	r3, [pc, #312]	; (8003bcc <HAL_RCC_OscConfig+0x27c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe fd51 	bl	800253c <HAL_InitTick>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d052      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	e327      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d032      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ab0:	4b43      	ldr	r3, [pc, #268]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a42      	ldr	r2, [pc, #264]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003abc:	f7fe fd8e 	bl	80025dc <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ac4:	f7fe fd8a 	bl	80025dc <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e310      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ad6:	4b3a      	ldr	r3, [pc, #232]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ae2:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a36      	ldr	r2, [pc, #216]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003ae8:	f043 0308 	orr.w	r3, r3, #8
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b34      	ldr	r3, [pc, #208]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	4931      	ldr	r1, [pc, #196]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b00:	4b2f      	ldr	r3, [pc, #188]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	492c      	ldr	r1, [pc, #176]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
 8003b14:	e01a      	b.n	8003b4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b16:	4b2a      	ldr	r3, [pc, #168]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a29      	ldr	r2, [pc, #164]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b22:	f7fe fd5b 	bl	80025dc <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b2a:	f7fe fd57 	bl	80025dc <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e2dd      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b3c:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f0      	bne.n	8003b2a <HAL_RCC_OscConfig+0x1da>
 8003b48:	e000      	b.n	8003b4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d074      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d005      	beq.n	8003b6a <HAL_RCC_OscConfig+0x21a>
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b0c      	cmp	r3, #12
 8003b62:	d10e      	bne.n	8003b82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d10b      	bne.n	8003b82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6a:	4b15      	ldr	r3, [pc, #84]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d064      	beq.n	8003c40 <HAL_RCC_OscConfig+0x2f0>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d160      	bne.n	8003c40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e2ba      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8a:	d106      	bne.n	8003b9a <HAL_RCC_OscConfig+0x24a>
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0b      	ldr	r2, [pc, #44]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	e026      	b.n	8003be8 <HAL_RCC_OscConfig+0x298>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba2:	d115      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x280>
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a05      	ldr	r2, [pc, #20]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003baa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a02      	ldr	r2, [pc, #8]	; (8003bc0 <HAL_RCC_OscConfig+0x270>)
 8003bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	e014      	b.n	8003be8 <HAL_RCC_OscConfig+0x298>
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	0800cca8 	.word	0x0800cca8
 8003bc8:	20000018 	.word	0x20000018
 8003bcc:	2000001c 	.word	0x2000001c
 8003bd0:	4ba0      	ldr	r3, [pc, #640]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a9f      	ldr	r2, [pc, #636]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	4b9d      	ldr	r3, [pc, #628]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a9c      	ldr	r2, [pc, #624]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d013      	beq.n	8003c18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fe fcf4 	bl	80025dc <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fe fcf0 	bl	80025dc <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e276      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c0a:	4b92      	ldr	r3, [pc, #584]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x2a8>
 8003c16:	e014      	b.n	8003c42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fe fce0 	bl	80025dc <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c20:	f7fe fcdc 	bl	80025dc <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	; 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e262      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c32:	4b88      	ldr	r3, [pc, #544]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x2d0>
 8003c3e:	e000      	b.n	8003c42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d060      	beq.n	8003d10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d005      	beq.n	8003c60 <HAL_RCC_OscConfig+0x310>
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2b0c      	cmp	r3, #12
 8003c58:	d119      	bne.n	8003c8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d116      	bne.n	8003c8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c60:	4b7c      	ldr	r3, [pc, #496]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_OscConfig+0x328>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e23f      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c78:	4b76      	ldr	r3, [pc, #472]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	061b      	lsls	r3, r3, #24
 8003c86:	4973      	ldr	r1, [pc, #460]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c8c:	e040      	b.n	8003d10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d023      	beq.n	8003cde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c96:	4b6f      	ldr	r3, [pc, #444]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a6e      	ldr	r2, [pc, #440]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fc9b 	bl	80025dc <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003caa:	f7fe fc97 	bl	80025dc <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e21d      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cbc:	4b65      	ldr	r3, [pc, #404]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	4b62      	ldr	r3, [pc, #392]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	495f      	ldr	r1, [pc, #380]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
 8003cdc:	e018      	b.n	8003d10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cde:	4b5d      	ldr	r3, [pc, #372]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a5c      	ldr	r2, [pc, #368]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fe fc77 	bl	80025dc <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf2:	f7fe fc73 	bl	80025dc <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e1f9      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f0      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d03c      	beq.n	8003d96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01c      	beq.n	8003d5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d24:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2a:	4a4a      	ldr	r2, [pc, #296]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fe fc52 	bl	80025dc <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3c:	f7fe fc4e 	bl	80025dc <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1d4      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d4e:	4b41      	ldr	r3, [pc, #260]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ef      	beq.n	8003d3c <HAL_RCC_OscConfig+0x3ec>
 8003d5c:	e01b      	b.n	8003d96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d5e:	4b3d      	ldr	r3, [pc, #244]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d64:	4a3b      	ldr	r2, [pc, #236]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6e:	f7fe fc35 	bl	80025dc <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d76:	f7fe fc31 	bl	80025dc <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e1b7      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d88:	4b32      	ldr	r3, [pc, #200]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1ef      	bne.n	8003d76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80a6 	beq.w	8003ef0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da4:	2300      	movs	r3, #0
 8003da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003da8:	4b2a      	ldr	r3, [pc, #168]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10d      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db4:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db8:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003dc0:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd0:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <HAL_RCC_OscConfig+0x508>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d118      	bne.n	8003e0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ddc:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <HAL_RCC_OscConfig+0x508>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <HAL_RCC_OscConfig+0x508>)
 8003de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de8:	f7fe fbf8 	bl	80025dc <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df0:	f7fe fbf4 	bl	80025dc <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e17a      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e02:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <HAL_RCC_OscConfig+0x508>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d108      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4d8>
 8003e16:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1c:	4a0d      	ldr	r2, [pc, #52]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e26:	e029      	b.n	8003e7c <HAL_RCC_OscConfig+0x52c>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b05      	cmp	r3, #5
 8003e2e:	d115      	bne.n	8003e5c <HAL_RCC_OscConfig+0x50c>
 8003e30:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	4a07      	ldr	r2, [pc, #28]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003e38:	f043 0304 	orr.w	r3, r3, #4
 8003e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e40:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	4a03      	ldr	r2, [pc, #12]	; (8003e54 <HAL_RCC_OscConfig+0x504>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e50:	e014      	b.n	8003e7c <HAL_RCC_OscConfig+0x52c>
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	4b9c      	ldr	r3, [pc, #624]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e62:	4a9b      	ldr	r2, [pc, #620]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e6c:	4b98      	ldr	r3, [pc, #608]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	4a97      	ldr	r2, [pc, #604]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003e74:	f023 0304 	bic.w	r3, r3, #4
 8003e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d016      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e84:	f7fe fbaa 	bl	80025dc <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8c:	f7fe fba6 	bl	80025dc <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e12a      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea2:	4b8b      	ldr	r3, [pc, #556]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ed      	beq.n	8003e8c <HAL_RCC_OscConfig+0x53c>
 8003eb0:	e015      	b.n	8003ede <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb2:	f7fe fb93 	bl	80025dc <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eb8:	e00a      	b.n	8003ed0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7fe fb8f 	bl	80025dc <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e113      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ed0:	4b7f      	ldr	r3, [pc, #508]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1ed      	bne.n	8003eba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ede:	7ffb      	ldrb	r3, [r7, #31]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d105      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee4:	4b7a      	ldr	r3, [pc, #488]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	4a79      	ldr	r2, [pc, #484]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80fe 	beq.w	80040f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	f040 80d0 	bne.w	80040a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f04:	4b72      	ldr	r3, [pc, #456]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f003 0203 	and.w	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d130      	bne.n	8003f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	3b01      	subs	r3, #1
 8003f24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d127      	bne.n	8003f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d11f      	bne.n	8003f7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f44:	2a07      	cmp	r2, #7
 8003f46:	bf14      	ite	ne
 8003f48:	2201      	movne	r2, #1
 8003f4a:	2200      	moveq	r2, #0
 8003f4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d113      	bne.n	8003f7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5c:	085b      	lsrs	r3, r3, #1
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d109      	bne.n	8003f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	3b01      	subs	r3, #1
 8003f74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d06e      	beq.n	8004058 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b0c      	cmp	r3, #12
 8003f7e:	d069      	beq.n	8004054 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f80:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d105      	bne.n	8003f98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f8c:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0ad      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f9c:	4b4c      	ldr	r3, [pc, #304]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a4b      	ldr	r2, [pc, #300]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fa8:	f7fe fb18 	bl	80025dc <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fe fb14 	bl	80025dc <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e09a      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc2:	4b43      	ldr	r3, [pc, #268]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fce:	4b40      	ldr	r3, [pc, #256]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	4b40      	ldr	r3, [pc, #256]	; (80040d4 <HAL_RCC_OscConfig+0x784>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fde:	3a01      	subs	r2, #1
 8003fe0:	0112      	lsls	r2, r2, #4
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fe8:	0212      	lsls	r2, r2, #8
 8003fea:	4311      	orrs	r1, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ff0:	0852      	lsrs	r2, r2, #1
 8003ff2:	3a01      	subs	r2, #1
 8003ff4:	0552      	lsls	r2, r2, #21
 8003ff6:	4311      	orrs	r1, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ffc:	0852      	lsrs	r2, r2, #1
 8003ffe:	3a01      	subs	r2, #1
 8004000:	0652      	lsls	r2, r2, #25
 8004002:	4311      	orrs	r1, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004008:	0912      	lsrs	r2, r2, #4
 800400a:	0452      	lsls	r2, r2, #17
 800400c:	430a      	orrs	r2, r1
 800400e:	4930      	ldr	r1, [pc, #192]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8004010:	4313      	orrs	r3, r2
 8004012:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004014:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2d      	ldr	r2, [pc, #180]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 800401a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004020:	4b2b      	ldr	r3, [pc, #172]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4a2a      	ldr	r2, [pc, #168]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8004026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800402c:	f7fe fad6 	bl	80025dc <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fe fad2 	bl	80025dc <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e058      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004052:	e050      	b.n	80040f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e04f      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004058:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d148      	bne.n	80040f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004064:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a19      	ldr	r2, [pc, #100]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 800406a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800406e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004070:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8004076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800407a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800407c:	f7fe faae 	bl	80025dc <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fe faaa 	bl	80025dc <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e030      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004096:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x734>
 80040a2:	e028      	b.n	80040f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b0c      	cmp	r3, #12
 80040a8:	d023      	beq.n	80040f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040aa:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <HAL_RCC_OscConfig+0x780>)
 80040b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b6:	f7fe fa91 	bl	80025dc <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040bc:	e00c      	b.n	80040d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040be:	f7fe fa8d 	bl	80025dc <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d905      	bls.n	80040d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e013      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
 80040d0:	40021000 	.word	0x40021000
 80040d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <HAL_RCC_OscConfig+0x7b0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1ec      	bne.n	80040be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040e4:	4b06      	ldr	r3, [pc, #24]	; (8004100 <HAL_RCC_OscConfig+0x7b0>)
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	4905      	ldr	r1, [pc, #20]	; (8004100 <HAL_RCC_OscConfig+0x7b0>)
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_RCC_OscConfig+0x7b4>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	60cb      	str	r3, [r1, #12]
 80040f0:	e001      	b.n	80040f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3720      	adds	r7, #32
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	feeefffc 	.word	0xfeeefffc

08004108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0e7      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800411c:	4b75      	ldr	r3, [pc, #468]	; (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d910      	bls.n	800414c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412a:	4b72      	ldr	r3, [pc, #456]	; (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f023 0207 	bic.w	r2, r3, #7
 8004132:	4970      	ldr	r1, [pc, #448]	; (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800413a:	4b6e      	ldr	r3, [pc, #440]	; (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d001      	beq.n	800414c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0cf      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d010      	beq.n	800417a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	4b66      	ldr	r3, [pc, #408]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004164:	429a      	cmp	r2, r3
 8004166:	d908      	bls.n	800417a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004168:	4b63      	ldr	r3, [pc, #396]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4960      	ldr	r1, [pc, #384]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d04c      	beq.n	8004220 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800418e:	4b5a      	ldr	r3, [pc, #360]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d121      	bne.n	80041de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e0a6      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041a6:	4b54      	ldr	r3, [pc, #336]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d115      	bne.n	80041de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e09a      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041be:	4b4e      	ldr	r3, [pc, #312]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e08e      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ce:	4b4a      	ldr	r3, [pc, #296]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e086      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041de:	4b46      	ldr	r3, [pc, #280]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f023 0203 	bic.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4943      	ldr	r1, [pc, #268]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f0:	f7fe f9f4 	bl	80025dc <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	e00a      	b.n	800420e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f8:	f7fe f9f0 	bl	80025dc <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e06e      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	4b3a      	ldr	r3, [pc, #232]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 020c 	and.w	r2, r3, #12
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	429a      	cmp	r2, r3
 800421e:	d1eb      	bne.n	80041f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d010      	beq.n	800424e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4b31      	ldr	r3, [pc, #196]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004238:	429a      	cmp	r2, r3
 800423a:	d208      	bcs.n	800424e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b2e      	ldr	r3, [pc, #184]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	492b      	ldr	r1, [pc, #172]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800424e:	4b29      	ldr	r3, [pc, #164]	; (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d210      	bcs.n	800427e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425c:	4b25      	ldr	r3, [pc, #148]	; (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 0207 	bic.w	r2, r3, #7
 8004264:	4923      	ldr	r1, [pc, #140]	; (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	4313      	orrs	r3, r2
 800426a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426c:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d001      	beq.n	800427e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e036      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d008      	beq.n	800429c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800428a:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	4918      	ldr	r1, [pc, #96]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004298:	4313      	orrs	r3, r2
 800429a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d009      	beq.n	80042bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a8:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4910      	ldr	r1, [pc, #64]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042bc:	f000 f824 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	490b      	ldr	r1, [pc, #44]	; (80042fc <HAL_RCC_ClockConfig+0x1f4>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
 80042d8:	4a09      	ldr	r2, [pc, #36]	; (8004300 <HAL_RCC_ClockConfig+0x1f8>)
 80042da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_RCC_ClockConfig+0x1fc>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe f92b 	bl	800253c <HAL_InitTick>
 80042e6:	4603      	mov	r3, r0
 80042e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80042ea:	7afb      	ldrb	r3, [r7, #11]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40022000 	.word	0x40022000
 80042f8:	40021000 	.word	0x40021000
 80042fc:	0800cca8 	.word	0x0800cca8
 8004300:	20000018 	.word	0x20000018
 8004304:	2000001c 	.word	0x2000001c

08004308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	; 0x24
 800430c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	2300      	movs	r3, #0
 8004314:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004316:	4b3e      	ldr	r3, [pc, #248]	; (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004320:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x34>
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b0c      	cmp	r3, #12
 8004334:	d121      	bne.n	800437a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d11e      	bne.n	800437a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800433c:	4b34      	ldr	r3, [pc, #208]	; (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d107      	bne.n	8004358 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004348:	4b31      	ldr	r3, [pc, #196]	; (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 800434a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	e005      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004358:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004364:	4a2b      	ldr	r2, [pc, #172]	; (8004414 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10d      	bne.n	8004390 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004378:	e00a      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b04      	cmp	r3, #4
 800437e:	d102      	bne.n	8004386 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004380:	4b25      	ldr	r3, [pc, #148]	; (8004418 <HAL_RCC_GetSysClockFreq+0x110>)
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	e004      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d101      	bne.n	8004390 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800438c:	4b23      	ldr	r3, [pc, #140]	; (800441c <HAL_RCC_GetSysClockFreq+0x114>)
 800438e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b0c      	cmp	r3, #12
 8004394:	d134      	bne.n	8004400 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004396:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d003      	beq.n	80043ae <HAL_RCC_GetSysClockFreq+0xa6>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d003      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0xac>
 80043ac:	e005      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <HAL_RCC_GetSysClockFreq+0x110>)
 80043b0:	617b      	str	r3, [r7, #20]
      break;
 80043b2:	e005      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043b4:	4b19      	ldr	r3, [pc, #100]	; (800441c <HAL_RCC_GetSysClockFreq+0x114>)
 80043b6:	617b      	str	r3, [r7, #20]
      break;
 80043b8:	e002      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	617b      	str	r3, [r7, #20]
      break;
 80043be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	3301      	adds	r3, #1
 80043cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043ce:	4b10      	ldr	r3, [pc, #64]	; (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	fb03 f202 	mul.w	r2, r3, r2
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	0e5b      	lsrs	r3, r3, #25
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	3301      	adds	r3, #1
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004400:	69bb      	ldr	r3, [r7, #24]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3724      	adds	r7, #36	; 0x24
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000
 8004414:	0800ccc0 	.word	0x0800ccc0
 8004418:	00f42400 	.word	0x00f42400
 800441c:	007a1200 	.word	0x007a1200

08004420 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_RCC_GetHCLKFreq+0x14>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20000018 	.word	0x20000018

08004438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800443c:	f7ff fff0 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4904      	ldr	r1, [pc, #16]	; (8004460 <HAL_RCC_GetPCLK1Freq+0x28>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	0800ccb8 	.word	0x0800ccb8

08004464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004468:	f7ff ffda 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	0adb      	lsrs	r3, r3, #11
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4904      	ldr	r1, [pc, #16]	; (800448c <HAL_RCC_GetPCLK2Freq+0x28>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	0800ccb8 	.word	0x0800ccb8

08004490 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800449c:	4b2a      	ldr	r3, [pc, #168]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044a8:	f7ff f9ee 	bl	8003888 <HAL_PWREx_GetVoltageRange>
 80044ac:	6178      	str	r0, [r7, #20]
 80044ae:	e014      	b.n	80044da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044b0:	4b25      	ldr	r3, [pc, #148]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	4a24      	ldr	r2, [pc, #144]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ba:	6593      	str	r3, [r2, #88]	; 0x58
 80044bc:	4b22      	ldr	r3, [pc, #136]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044c8:	f7ff f9de 	bl	8003888 <HAL_PWREx_GetVoltageRange>
 80044cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044ce:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e0:	d10b      	bne.n	80044fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b80      	cmp	r3, #128	; 0x80
 80044e6:	d919      	bls.n	800451c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2ba0      	cmp	r3, #160	; 0xa0
 80044ec:	d902      	bls.n	80044f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ee:	2302      	movs	r3, #2
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	e013      	b.n	800451c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044f4:	2301      	movs	r3, #1
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	e010      	b.n	800451c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b80      	cmp	r3, #128	; 0x80
 80044fe:	d902      	bls.n	8004506 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004500:	2303      	movs	r3, #3
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	e00a      	b.n	800451c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b80      	cmp	r3, #128	; 0x80
 800450a:	d102      	bne.n	8004512 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800450c:	2302      	movs	r3, #2
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	e004      	b.n	800451c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b70      	cmp	r3, #112	; 0x70
 8004516:	d101      	bne.n	800451c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004518:	2301      	movs	r3, #1
 800451a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f023 0207 	bic.w	r2, r3, #7
 8004524:	4909      	ldr	r1, [pc, #36]	; (800454c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	429a      	cmp	r2, r3
 8004538:	d001      	beq.n	800453e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40021000 	.word	0x40021000
 800454c:	40022000 	.word	0x40022000

08004550 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004558:	2300      	movs	r3, #0
 800455a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800455c:	2300      	movs	r3, #0
 800455e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004568:	2b00      	cmp	r3, #0
 800456a:	d041      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004570:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004574:	d02a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004576:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800457a:	d824      	bhi.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800457c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004580:	d008      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004582:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004586:	d81e      	bhi.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800458c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004590:	d010      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004592:	e018      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004594:	4b86      	ldr	r3, [pc, #536]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4a85      	ldr	r2, [pc, #532]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800459a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045a0:	e015      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fabb 	bl	8004b24 <RCCEx_PLLSAI1_Config>
 80045ae:	4603      	mov	r3, r0
 80045b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045b2:	e00c      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3320      	adds	r3, #32
 80045b8:	2100      	movs	r1, #0
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fba6 	bl	8004d0c <RCCEx_PLLSAI2_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045c4:	e003      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	74fb      	strb	r3, [r7, #19]
      break;
 80045ca:	e000      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ce:	7cfb      	ldrb	r3, [r7, #19]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045d4:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e2:	4973      	ldr	r1, [pc, #460]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045ea:	e001      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d041      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004600:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004604:	d02a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004606:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800460a:	d824      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800460c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004610:	d008      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004616:	d81e      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800461c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004620:	d010      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004622:	e018      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004624:	4b62      	ldr	r3, [pc, #392]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a61      	ldr	r2, [pc, #388]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004630:	e015      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3304      	adds	r3, #4
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fa73 	bl	8004b24 <RCCEx_PLLSAI1_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004642:	e00c      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3320      	adds	r3, #32
 8004648:	2100      	movs	r1, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fb5e 	bl	8004d0c <RCCEx_PLLSAI2_Config>
 8004650:	4603      	mov	r3, r0
 8004652:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004654:	e003      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	74fb      	strb	r3, [r7, #19]
      break;
 800465a:	e000      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800465c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800465e:	7cfb      	ldrb	r3, [r7, #19]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10b      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004664:	4b52      	ldr	r3, [pc, #328]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004672:	494f      	ldr	r1, [pc, #316]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800467a:	e001      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467c:	7cfb      	ldrb	r3, [r7, #19]
 800467e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80a0 	beq.w	80047ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800468e:	2300      	movs	r3, #0
 8004690:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004692:	4b47      	ldr	r3, [pc, #284]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80046a2:	2300      	movs	r3, #0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00d      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a8:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ac:	4a40      	ldr	r2, [pc, #256]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b2:	6593      	str	r3, [r2, #88]	; 0x58
 80046b4:	4b3e      	ldr	r3, [pc, #248]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c0:	2301      	movs	r3, #1
 80046c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046c4:	4b3b      	ldr	r3, [pc, #236]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a3a      	ldr	r2, [pc, #232]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046d0:	f7fd ff84 	bl	80025dc <HAL_GetTick>
 80046d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046d6:	e009      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d8:	f7fd ff80 	bl	80025dc <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d902      	bls.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	74fb      	strb	r3, [r7, #19]
        break;
 80046ea:	e005      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046ec:	4b31      	ldr	r3, [pc, #196]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0ef      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d15c      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046fe:	4b2c      	ldr	r3, [pc, #176]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004708:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01f      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	429a      	cmp	r2, r3
 800471a:	d019      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800471c:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004726:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004728:	4b21      	ldr	r3, [pc, #132]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	4a20      	ldr	r2, [pc, #128]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004738:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d016      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475a:	f7fd ff3f 	bl	80025dc <HAL_GetTick>
 800475e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004760:	e00b      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004762:	f7fd ff3b 	bl	80025dc <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004770:	4293      	cmp	r3, r2
 8004772:	d902      	bls.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	74fb      	strb	r3, [r7, #19]
            break;
 8004778:	e006      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800477a:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0ec      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10c      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800478e:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479e:	4904      	ldr	r1, [pc, #16]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047a6:	e009      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047a8:	7cfb      	ldrb	r3, [r7, #19]
 80047aa:	74bb      	strb	r3, [r7, #18]
 80047ac:	e006      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047bc:	7c7b      	ldrb	r3, [r7, #17]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d105      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c2:	4b9e      	ldr	r3, [pc, #632]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c6:	4a9d      	ldr	r2, [pc, #628]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047da:	4b98      	ldr	r3, [pc, #608]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	f023 0203 	bic.w	r2, r3, #3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	4994      	ldr	r1, [pc, #592]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047fc:	4b8f      	ldr	r3, [pc, #572]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004802:	f023 020c 	bic.w	r2, r3, #12
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480a:	498c      	ldr	r1, [pc, #560]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800481e:	4b87      	ldr	r3, [pc, #540]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004824:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	4983      	ldr	r1, [pc, #524]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004840:	4b7e      	ldr	r3, [pc, #504]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	497b      	ldr	r1, [pc, #492]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004862:	4b76      	ldr	r3, [pc, #472]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004870:	4972      	ldr	r1, [pc, #456]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004884:	4b6d      	ldr	r3, [pc, #436]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004892:	496a      	ldr	r1, [pc, #424]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048a6:	4b65      	ldr	r3, [pc, #404]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	4961      	ldr	r1, [pc, #388]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048c8:	4b5c      	ldr	r3, [pc, #368]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d6:	4959      	ldr	r1, [pc, #356]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048ea:	4b54      	ldr	r3, [pc, #336]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f8:	4950      	ldr	r1, [pc, #320]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800490c:	4b4b      	ldr	r3, [pc, #300]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491a:	4948      	ldr	r1, [pc, #288]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800492e:	4b43      	ldr	r3, [pc, #268]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493c:	493f      	ldr	r1, [pc, #252]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d028      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004950:	4b3a      	ldr	r3, [pc, #232]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495e:	4937      	ldr	r1, [pc, #220]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800496e:	d106      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004970:	4b32      	ldr	r3, [pc, #200]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a31      	ldr	r2, [pc, #196]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800497a:	60d3      	str	r3, [r2, #12]
 800497c:	e011      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004982:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004986:	d10c      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	2101      	movs	r1, #1
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f8c8 	bl	8004b24 <RCCEx_PLLSAI1_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800499e:	7cfb      	ldrb	r3, [r7, #19]
 80049a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d028      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049ae:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049bc:	491f      	ldr	r1, [pc, #124]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049cc:	d106      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ce:	4b1b      	ldr	r3, [pc, #108]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	4a1a      	ldr	r2, [pc, #104]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049d8:	60d3      	str	r3, [r2, #12]
 80049da:	e011      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3304      	adds	r3, #4
 80049ea:	2101      	movs	r1, #1
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 f899 	bl	8004b24 <RCCEx_PLLSAI1_Config>
 80049f2:	4603      	mov	r3, r0
 80049f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049fc:	7cfb      	ldrb	r3, [r7, #19]
 80049fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d02b      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1a:	4908      	ldr	r1, [pc, #32]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a2a:	d109      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a2c:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4a02      	ldr	r2, [pc, #8]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a36:	60d3      	str	r3, [r2, #12]
 8004a38:	e014      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	2101      	movs	r1, #1
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 f867 	bl	8004b24 <RCCEx_PLLSAI1_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d02f      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a70:	4b2b      	ldr	r3, [pc, #172]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a7e:	4928      	ldr	r1, [pc, #160]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a8e:	d10d      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	2102      	movs	r1, #2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 f844 	bl	8004b24 <RCCEx_PLLSAI1_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aa0:	7cfb      	ldrb	r3, [r7, #19]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d014      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004aa6:	7cfb      	ldrb	r3, [r7, #19]
 8004aa8:	74bb      	strb	r3, [r7, #18]
 8004aaa:	e011      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3320      	adds	r3, #32
 8004aba:	2102      	movs	r1, #2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 f925 	bl	8004d0c <RCCEx_PLLSAI2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ac6:	7cfb      	ldrb	r3, [r7, #19]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004acc:	7cfb      	ldrb	r3, [r7, #19]
 8004ace:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004adc:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aea:	490d      	ldr	r1, [pc, #52]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004afe:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b0e:	4904      	ldr	r1, [pc, #16]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b16:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40021000 	.word	0x40021000

08004b24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b32:	4b75      	ldr	r3, [pc, #468]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d018      	beq.n	8004b70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b3e:	4b72      	ldr	r3, [pc, #456]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0203 	and.w	r2, r3, #3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d10d      	bne.n	8004b6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
       ||
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d009      	beq.n	8004b6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b56:	4b6c      	ldr	r3, [pc, #432]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
       ||
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d047      	beq.n	8004bfa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	73fb      	strb	r3, [r7, #15]
 8004b6e:	e044      	b.n	8004bfa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d018      	beq.n	8004baa <RCCEx_PLLSAI1_Config+0x86>
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d825      	bhi.n	8004bc8 <RCCEx_PLLSAI1_Config+0xa4>
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d002      	beq.n	8004b86 <RCCEx_PLLSAI1_Config+0x62>
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d009      	beq.n	8004b98 <RCCEx_PLLSAI1_Config+0x74>
 8004b84:	e020      	b.n	8004bc8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b86:	4b60      	ldr	r3, [pc, #384]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d11d      	bne.n	8004bce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b96:	e01a      	b.n	8004bce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b98:	4b5b      	ldr	r3, [pc, #364]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d116      	bne.n	8004bd2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ba8:	e013      	b.n	8004bd2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004baa:	4b57      	ldr	r3, [pc, #348]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10f      	bne.n	8004bd6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bb6:	4b54      	ldr	r3, [pc, #336]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d109      	bne.n	8004bd6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bc6:	e006      	b.n	8004bd6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
      break;
 8004bcc:	e004      	b.n	8004bd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bce:	bf00      	nop
 8004bd0:	e002      	b.n	8004bd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bd2:	bf00      	nop
 8004bd4:	e000      	b.n	8004bd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10d      	bne.n	8004bfa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bde:	4b4a      	ldr	r3, [pc, #296]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6819      	ldr	r1, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	4944      	ldr	r1, [pc, #272]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d17d      	bne.n	8004cfc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c00:	4b41      	ldr	r3, [pc, #260]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a40      	ldr	r2, [pc, #256]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0c:	f7fd fce6 	bl	80025dc <HAL_GetTick>
 8004c10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c12:	e009      	b.n	8004c28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c14:	f7fd fce2 	bl	80025dc <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d902      	bls.n	8004c28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	73fb      	strb	r3, [r7, #15]
        break;
 8004c26:	e005      	b.n	8004c34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c28:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1ef      	bne.n	8004c14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d160      	bne.n	8004cfc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d111      	bne.n	8004c64 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c40:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6892      	ldr	r2, [r2, #8]
 8004c50:	0211      	lsls	r1, r2, #8
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68d2      	ldr	r2, [r2, #12]
 8004c56:	0912      	lsrs	r2, r2, #4
 8004c58:	0452      	lsls	r2, r2, #17
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	492a      	ldr	r1, [pc, #168]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	610b      	str	r3, [r1, #16]
 8004c62:	e027      	b.n	8004cb4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d112      	bne.n	8004c90 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c6a:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6892      	ldr	r2, [r2, #8]
 8004c7a:	0211      	lsls	r1, r2, #8
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6912      	ldr	r2, [r2, #16]
 8004c80:	0852      	lsrs	r2, r2, #1
 8004c82:	3a01      	subs	r2, #1
 8004c84:	0552      	lsls	r2, r2, #21
 8004c86:	430a      	orrs	r2, r1
 8004c88:	491f      	ldr	r1, [pc, #124]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	610b      	str	r3, [r1, #16]
 8004c8e:	e011      	b.n	8004cb4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c90:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6892      	ldr	r2, [r2, #8]
 8004ca0:	0211      	lsls	r1, r2, #8
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6952      	ldr	r2, [r2, #20]
 8004ca6:	0852      	lsrs	r2, r2, #1
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	0652      	lsls	r2, r2, #25
 8004cac:	430a      	orrs	r2, r1
 8004cae:	4916      	ldr	r1, [pc, #88]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004cb4:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc0:	f7fd fc8c 	bl	80025dc <HAL_GetTick>
 8004cc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cc6:	e009      	b.n	8004cdc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cc8:	f7fd fc88 	bl	80025dc <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d902      	bls.n	8004cdc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	73fb      	strb	r3, [r7, #15]
          break;
 8004cda:	e005      	b.n	8004ce8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0ef      	beq.n	8004cc8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	4904      	ldr	r1, [pc, #16]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40021000 	.word	0x40021000

08004d0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d1a:	4b6a      	ldr	r3, [pc, #424]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d018      	beq.n	8004d58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d26:	4b67      	ldr	r3, [pc, #412]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 0203 	and.w	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d10d      	bne.n	8004d52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
       ||
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d3e:	4b61      	ldr	r3, [pc, #388]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	091b      	lsrs	r3, r3, #4
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d047      	beq.n	8004de2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	e044      	b.n	8004de2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d018      	beq.n	8004d92 <RCCEx_PLLSAI2_Config+0x86>
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d825      	bhi.n	8004db0 <RCCEx_PLLSAI2_Config+0xa4>
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d002      	beq.n	8004d6e <RCCEx_PLLSAI2_Config+0x62>
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d009      	beq.n	8004d80 <RCCEx_PLLSAI2_Config+0x74>
 8004d6c:	e020      	b.n	8004db0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d6e:	4b55      	ldr	r3, [pc, #340]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d11d      	bne.n	8004db6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d7e:	e01a      	b.n	8004db6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d80:	4b50      	ldr	r3, [pc, #320]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d116      	bne.n	8004dba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d90:	e013      	b.n	8004dba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d92:	4b4c      	ldr	r3, [pc, #304]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10f      	bne.n	8004dbe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d9e:	4b49      	ldr	r3, [pc, #292]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dae:	e006      	b.n	8004dbe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
      break;
 8004db4:	e004      	b.n	8004dc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004db6:	bf00      	nop
 8004db8:	e002      	b.n	8004dc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dba:	bf00      	nop
 8004dbc:	e000      	b.n	8004dc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10d      	bne.n	8004de2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dc6:	4b3f      	ldr	r3, [pc, #252]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6819      	ldr	r1, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	4939      	ldr	r1, [pc, #228]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d167      	bne.n	8004eb8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004de8:	4b36      	ldr	r3, [pc, #216]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a35      	ldr	r2, [pc, #212]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df4:	f7fd fbf2 	bl	80025dc <HAL_GetTick>
 8004df8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dfa:	e009      	b.n	8004e10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dfc:	f7fd fbee 	bl	80025dc <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d902      	bls.n	8004e10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e0e:	e005      	b.n	8004e1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e10:	4b2c      	ldr	r3, [pc, #176]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1ef      	bne.n	8004dfc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d14a      	bne.n	8004eb8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d111      	bne.n	8004e4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e28:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6892      	ldr	r2, [r2, #8]
 8004e38:	0211      	lsls	r1, r2, #8
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	68d2      	ldr	r2, [r2, #12]
 8004e3e:	0912      	lsrs	r2, r2, #4
 8004e40:	0452      	lsls	r2, r2, #17
 8004e42:	430a      	orrs	r2, r1
 8004e44:	491f      	ldr	r1, [pc, #124]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	614b      	str	r3, [r1, #20]
 8004e4a:	e011      	b.n	8004e70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6892      	ldr	r2, [r2, #8]
 8004e5c:	0211      	lsls	r1, r2, #8
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6912      	ldr	r2, [r2, #16]
 8004e62:	0852      	lsrs	r2, r2, #1
 8004e64:	3a01      	subs	r2, #1
 8004e66:	0652      	lsls	r2, r2, #25
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	4916      	ldr	r1, [pc, #88]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e70:	4b14      	ldr	r3, [pc, #80]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7c:	f7fd fbae 	bl	80025dc <HAL_GetTick>
 8004e80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e82:	e009      	b.n	8004e98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e84:	f7fd fbaa 	bl	80025dc <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d902      	bls.n	8004e98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	73fb      	strb	r3, [r7, #15]
          break;
 8004e96:	e005      	b.n	8004ea4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0ef      	beq.n	8004e84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004eaa:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	4904      	ldr	r1, [pc, #16]	; (8004ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40021000 	.word	0x40021000

08004ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e095      	b.n	8005006 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d108      	bne.n	8004ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eea:	d009      	beq.n	8004f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	61da      	str	r2, [r3, #28]
 8004ef2:	e005      	b.n	8004f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fc ff62 	bl	8001de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f40:	d902      	bls.n	8004f48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	e002      	b.n	8004f4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f56:	d007      	beq.n	8004f68 <HAL_SPI_Init+0xa0>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f60:	d002      	beq.n	8004f68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004faa:	ea42 0103 	orr.w	r1, r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	0c1b      	lsrs	r3, r3, #16
 8004fc4:	f003 0204 	and.w	r2, r3, #4
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004fe4:	ea42 0103 	orr.w	r1, r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b088      	sub	sp, #32
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	603b      	str	r3, [r7, #0]
 800501a:	4613      	mov	r3, r2
 800501c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_SPI_Transmit+0x22>
 800502c:	2302      	movs	r3, #2
 800502e:	e15f      	b.n	80052f0 <HAL_SPI_Transmit+0x2e2>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005038:	f7fd fad0 	bl	80025dc <HAL_GetTick>
 800503c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d002      	beq.n	8005054 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800504e:	2302      	movs	r3, #2
 8005050:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005052:	e148      	b.n	80052e6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_SPI_Transmit+0x52>
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005064:	e13f      	b.n	80052e6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2203      	movs	r2, #3
 800506a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	88fa      	ldrh	r2, [r7, #6]
 800507e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b0:	d10f      	bne.n	80050d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b40      	cmp	r3, #64	; 0x40
 80050de:	d007      	beq.n	80050f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050f8:	d94f      	bls.n	800519a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <HAL_SPI_Transmit+0xfa>
 8005102:	8afb      	ldrh	r3, [r7, #22]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d142      	bne.n	800518e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	881a      	ldrh	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	1c9a      	adds	r2, r3, #2
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800512c:	e02f      	b.n	800518e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b02      	cmp	r3, #2
 800513a:	d112      	bne.n	8005162 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	881a      	ldrh	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	1c9a      	adds	r2, r3, #2
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005160:	e015      	b.n	800518e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005162:	f7fd fa3b 	bl	80025dc <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d803      	bhi.n	800517a <HAL_SPI_Transmit+0x16c>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005178:	d102      	bne.n	8005180 <HAL_SPI_Transmit+0x172>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d106      	bne.n	800518e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800518c:	e0ab      	b.n	80052e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1ca      	bne.n	800512e <HAL_SPI_Transmit+0x120>
 8005198:	e080      	b.n	800529c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_SPI_Transmit+0x19a>
 80051a2:	8afb      	ldrh	r3, [r7, #22]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d174      	bne.n	8005292 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d912      	bls.n	80051d8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	881a      	ldrh	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	1c9a      	adds	r2, r3, #2
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b02      	subs	r3, #2
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051d6:	e05c      	b.n	8005292 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	330c      	adds	r3, #12
 80051e2:	7812      	ldrb	r2, [r2, #0]
 80051e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80051fe:	e048      	b.n	8005292 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b02      	cmp	r3, #2
 800520c:	d12b      	bne.n	8005266 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d912      	bls.n	800523e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	881a      	ldrh	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	1c9a      	adds	r2, r3, #2
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b02      	subs	r3, #2
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800523c:	e029      	b.n	8005292 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	330c      	adds	r3, #12
 8005248:	7812      	ldrb	r2, [r2, #0]
 800524a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005264:	e015      	b.n	8005292 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005266:	f7fd f9b9 	bl	80025dc <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d803      	bhi.n	800527e <HAL_SPI_Transmit+0x270>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800527c:	d102      	bne.n	8005284 <HAL_SPI_Transmit+0x276>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005290:	e029      	b.n	80052e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1b1      	bne.n	8005200 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	6839      	ldr	r1, [r7, #0]
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 fb69 	bl	8005978 <SPI_EndRxTxTransaction>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	77fb      	strb	r3, [r7, #31]
 80052dc:	e003      	b.n	80052e6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	; 0x28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005306:	2301      	movs	r3, #1
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_SPI_TransmitReceive+0x26>
 800531a:	2302      	movs	r3, #2
 800531c:	e20a      	b.n	8005734 <HAL_SPI_TransmitReceive+0x43c>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005326:	f7fd f959 	bl	80025dc <HAL_GetTick>
 800532a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005332:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800533a:	887b      	ldrh	r3, [r7, #2]
 800533c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800533e:	887b      	ldrh	r3, [r7, #2]
 8005340:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005342:	7efb      	ldrb	r3, [r7, #27]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d00e      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x6e>
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534e:	d106      	bne.n	800535e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <HAL_SPI_TransmitReceive+0x66>
 8005358:	7efb      	ldrb	r3, [r7, #27]
 800535a:	2b04      	cmp	r3, #4
 800535c:	d003      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800535e:	2302      	movs	r3, #2
 8005360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005364:	e1e0      	b.n	8005728 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_SPI_TransmitReceive+0x80>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_SPI_TransmitReceive+0x80>
 8005372:	887b      	ldrh	r3, [r7, #2]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d103      	bne.n	8005380 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800537e:	e1d3      	b.n	8005728 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b04      	cmp	r3, #4
 800538a:	d003      	beq.n	8005394 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2205      	movs	r2, #5
 8005390:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	887a      	ldrh	r2, [r7, #2]
 80053a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	887a      	ldrh	r2, [r7, #2]
 80053ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	887a      	ldrh	r2, [r7, #2]
 80053ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	887a      	ldrh	r2, [r7, #2]
 80053c0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053d6:	d802      	bhi.n	80053de <HAL_SPI_TransmitReceive+0xe6>
 80053d8:	8a3b      	ldrh	r3, [r7, #16]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d908      	bls.n	80053f0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053ec:	605a      	str	r2, [r3, #4]
 80053ee:	e007      	b.n	8005400 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b40      	cmp	r3, #64	; 0x40
 800540c:	d007      	beq.n	800541e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800541c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005426:	f240 8081 	bls.w	800552c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <HAL_SPI_TransmitReceive+0x140>
 8005432:	8a7b      	ldrh	r3, [r7, #18]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d16d      	bne.n	8005514 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	881a      	ldrh	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	1c9a      	adds	r2, r3, #2
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800545c:	e05a      	b.n	8005514 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b02      	cmp	r3, #2
 800546a:	d11b      	bne.n	80054a4 <HAL_SPI_TransmitReceive+0x1ac>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d016      	beq.n	80054a4 <HAL_SPI_TransmitReceive+0x1ac>
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	2b01      	cmp	r3, #1
 800547a:	d113      	bne.n	80054a4 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	881a      	ldrh	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	1c9a      	adds	r2, r3, #2
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d11c      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x1f4>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	b292      	uxth	r2, r2
 80054ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	1c9a      	adds	r2, r3, #2
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054e8:	2301      	movs	r3, #1
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054ec:	f7fd f876 	bl	80025dc <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d80b      	bhi.n	8005514 <HAL_SPI_TransmitReceive+0x21c>
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005502:	d007      	beq.n	8005514 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005512:	e109      	b.n	8005728 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d19f      	bne.n	800545e <HAL_SPI_TransmitReceive+0x166>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d199      	bne.n	800545e <HAL_SPI_TransmitReceive+0x166>
 800552a:	e0e3      	b.n	80056f4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_SPI_TransmitReceive+0x244>
 8005534:	8a7b      	ldrh	r3, [r7, #18]
 8005536:	2b01      	cmp	r3, #1
 8005538:	f040 80cf 	bne.w	80056da <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b01      	cmp	r3, #1
 8005544:	d912      	bls.n	800556c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	881a      	ldrh	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	1c9a      	adds	r2, r3, #2
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b02      	subs	r3, #2
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	87da      	strh	r2, [r3, #62]	; 0x3e
 800556a:	e0b6      	b.n	80056da <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	330c      	adds	r3, #12
 8005576:	7812      	ldrb	r2, [r2, #0]
 8005578:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005592:	e0a2      	b.n	80056da <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d134      	bne.n	800560c <HAL_SPI_TransmitReceive+0x314>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d02f      	beq.n	800560c <HAL_SPI_TransmitReceive+0x314>
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d12c      	bne.n	800560c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d912      	bls.n	80055e2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	881a      	ldrh	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	1c9a      	adds	r2, r3, #2
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b02      	subs	r3, #2
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055e0:	e012      	b.n	8005608 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	330c      	adds	r3, #12
 80055ec:	7812      	ldrb	r2, [r2, #0]
 80055ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	d148      	bne.n	80056ac <HAL_SPI_TransmitReceive+0x3b4>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d042      	beq.n	80056ac <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b01      	cmp	r3, #1
 8005630:	d923      	bls.n	800567a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	b292      	uxth	r2, r2
 800563e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	1c9a      	adds	r2, r3, #2
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b02      	subs	r3, #2
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b01      	cmp	r3, #1
 8005666:	d81f      	bhi.n	80056a8 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005676:	605a      	str	r2, [r3, #4]
 8005678:	e016      	b.n	80056a8 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f103 020c 	add.w	r2, r3, #12
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	7812      	ldrb	r2, [r2, #0]
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056a8:	2301      	movs	r3, #1
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056ac:	f7fc ff96 	bl	80025dc <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d803      	bhi.n	80056c4 <HAL_SPI_TransmitReceive+0x3cc>
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056c2:	d102      	bne.n	80056ca <HAL_SPI_TransmitReceive+0x3d2>
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d107      	bne.n	80056da <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80056d8:	e026      	b.n	8005728 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f47f af57 	bne.w	8005594 <HAL_SPI_TransmitReceive+0x29c>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f47f af50 	bne.w	8005594 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f93d 	bl	8005978 <SPI_EndRxTxTransaction>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571e:	e003      	b.n	8005728 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005734:	4618      	mov	r0, r3
 8005736:	3728      	adds	r7, #40	; 0x28
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	4613      	mov	r3, r2
 800574a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800574c:	f7fc ff46 	bl	80025dc <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	4413      	add	r3, r2
 800575a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800575c:	f7fc ff3e 	bl	80025dc <HAL_GetTick>
 8005760:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005762:	4b39      	ldr	r3, [pc, #228]	; (8005848 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	015b      	lsls	r3, r3, #5
 8005768:	0d1b      	lsrs	r3, r3, #20
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	fb02 f303 	mul.w	r3, r2, r3
 8005770:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005772:	e054      	b.n	800581e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800577a:	d050      	beq.n	800581e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800577c:	f7fc ff2e 	bl	80025dc <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	429a      	cmp	r2, r3
 800578a:	d902      	bls.n	8005792 <SPI_WaitFlagStateUntilTimeout+0x56>
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d13d      	bne.n	800580e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057aa:	d111      	bne.n	80057d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b4:	d004      	beq.n	80057c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057be:	d107      	bne.n	80057d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d8:	d10f      	bne.n	80057fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e017      	b.n	800583e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	3b01      	subs	r3, #1
 800581c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4013      	ands	r3, r2
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	429a      	cmp	r2, r3
 800582c:	bf0c      	ite	eq
 800582e:	2301      	moveq	r3, #1
 8005830:	2300      	movne	r3, #0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	429a      	cmp	r2, r3
 800583a:	d19b      	bne.n	8005774 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000018 	.word	0x20000018

0800584c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	; 0x28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800585e:	f7fc febd 	bl	80025dc <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	4413      	add	r3, r2
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800586e:	f7fc feb5 	bl	80025dc <HAL_GetTick>
 8005872:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	330c      	adds	r3, #12
 800587a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800587c:	4b3d      	ldr	r3, [pc, #244]	; (8005974 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	00da      	lsls	r2, r3, #3
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	0d1b      	lsrs	r3, r3, #20
 800588c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005894:	e060      	b.n	8005958 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800589c:	d107      	bne.n	80058ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d104      	bne.n	80058ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058b4:	d050      	beq.n	8005958 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058b6:	f7fc fe91 	bl	80025dc <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d902      	bls.n	80058cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d13d      	bne.n	8005948 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e4:	d111      	bne.n	800590a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ee:	d004      	beq.n	80058fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f8:	d107      	bne.n	800590a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005908:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005912:	d10f      	bne.n	8005934 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005932:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e010      	b.n	800596a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	3b01      	subs	r3, #1
 8005956:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4013      	ands	r3, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	429a      	cmp	r2, r3
 8005966:	d196      	bne.n	8005896 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3728      	adds	r7, #40	; 0x28
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20000018 	.word	0x20000018

08005978 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2200      	movs	r2, #0
 800598c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff ff5b 	bl	800584c <SPI_WaitFifoStateUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d007      	beq.n	80059ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a0:	f043 0220 	orr.w	r2, r3, #32
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e027      	b.n	80059fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	2180      	movs	r1, #128	; 0x80
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff fec0 	bl	800573c <SPI_WaitFlagStateUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c6:	f043 0220 	orr.w	r2, r3, #32
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e014      	b.n	80059fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2200      	movs	r2, #0
 80059da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7ff ff34 	bl	800584c <SPI_WaitFifoStateUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ee:	f043 0220 	orr.w	r2, r3, #32
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e000      	b.n	80059fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e049      	b.n	8005aaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fc fa1e 	bl	8001e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f000 fa62 	bl	8005f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0201 	bic.w	r2, r2, #1
 8005ac8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6a1a      	ldr	r2, [r3, #32]
 8005ad0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10f      	bne.n	8005afa <HAL_TIM_Base_Stop_IT+0x48>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6a1a      	ldr	r2, [r3, #32]
 8005ae0:	f240 4344 	movw	r3, #1092	; 0x444
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d107      	bne.n	8005afa <HAL_TIM_Base_Stop_IT+0x48>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0201 	bic.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d020      	beq.n	8005b74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01b      	beq.n	8005b74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0202 	mvn.w	r2, #2
 8005b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9b7 	bl	8005ece <HAL_TIM_IC_CaptureCallback>
 8005b60:	e005      	b.n	8005b6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f9a9 	bl	8005eba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f9ba 	bl	8005ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d020      	beq.n	8005bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01b      	beq.n	8005bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f06f 0204 	mvn.w	r2, #4
 8005b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2202      	movs	r2, #2
 8005b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f991 	bl	8005ece <HAL_TIM_IC_CaptureCallback>
 8005bac:	e005      	b.n	8005bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f983 	bl	8005eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f994 	bl	8005ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d020      	beq.n	8005c0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01b      	beq.n	8005c0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0208 	mvn.w	r2, #8
 8005bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2204      	movs	r2, #4
 8005be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f96b 	bl	8005ece <HAL_TIM_IC_CaptureCallback>
 8005bf8:	e005      	b.n	8005c06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f95d 	bl	8005eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f96e 	bl	8005ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f003 0310 	and.w	r3, r3, #16
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d020      	beq.n	8005c58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d01b      	beq.n	8005c58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f06f 0210 	mvn.w	r2, #16
 8005c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f945 	bl	8005ece <HAL_TIM_IC_CaptureCallback>
 8005c44:	e005      	b.n	8005c52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f937 	bl	8005eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f948 	bl	8005ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00c      	beq.n	8005c7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f06f 0201 	mvn.w	r2, #1
 8005c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f915 	bl	8005ea6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00c      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fafc 	bl	8006298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00c      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d007      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 faf4 	bl	80062ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00c      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d007      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f907 	bl	8005ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00c      	beq.n	8005d0c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f06f 0220 	mvn.w	r2, #32
 8005d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fabc 	bl	8006284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_TIM_ConfigClockSource+0x1c>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e0b6      	b.n	8005e9e <HAL_TIM_ConfigClockSource+0x18a>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6c:	d03e      	beq.n	8005dec <HAL_TIM_ConfigClockSource+0xd8>
 8005d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d72:	f200 8087 	bhi.w	8005e84 <HAL_TIM_ConfigClockSource+0x170>
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7a:	f000 8086 	beq.w	8005e8a <HAL_TIM_ConfigClockSource+0x176>
 8005d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d82:	d87f      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x170>
 8005d84:	2b70      	cmp	r3, #112	; 0x70
 8005d86:	d01a      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0xaa>
 8005d88:	2b70      	cmp	r3, #112	; 0x70
 8005d8a:	d87b      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x170>
 8005d8c:	2b60      	cmp	r3, #96	; 0x60
 8005d8e:	d050      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0x11e>
 8005d90:	2b60      	cmp	r3, #96	; 0x60
 8005d92:	d877      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x170>
 8005d94:	2b50      	cmp	r3, #80	; 0x50
 8005d96:	d03c      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0xfe>
 8005d98:	2b50      	cmp	r3, #80	; 0x50
 8005d9a:	d873      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x170>
 8005d9c:	2b40      	cmp	r3, #64	; 0x40
 8005d9e:	d058      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0x13e>
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d86f      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x170>
 8005da4:	2b30      	cmp	r3, #48	; 0x30
 8005da6:	d064      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15e>
 8005da8:	2b30      	cmp	r3, #48	; 0x30
 8005daa:	d86b      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x170>
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d060      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15e>
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d867      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x170>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d05c      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15e>
 8005db8:	2b10      	cmp	r3, #16
 8005dba:	d05a      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15e>
 8005dbc:	e062      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dce:	f000 f9b1 	bl	8006134 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005de0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	609a      	str	r2, [r3, #8]
      break;
 8005dea:	e04f      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dfc:	f000 f99a 	bl	8006134 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e0e:	609a      	str	r2, [r3, #8]
      break;
 8005e10:	e03c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f000 f90e 	bl	8006040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2150      	movs	r1, #80	; 0x50
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 f967 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 8005e30:	e02c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f000 f92d 	bl	800609e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2160      	movs	r1, #96	; 0x60
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 f957 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 8005e50:	e01c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f000 f8ee 	bl	8006040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2140      	movs	r1, #64	; 0x40
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 f947 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 8005e70:	e00c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f000 f93e 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 8005e82:	e003      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	73fb      	strb	r3, [r7, #15]
      break;
 8005e88:	e000      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005e8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
	...

08005f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a40      	ldr	r2, [pc, #256]	; (8006020 <TIM_Base_SetConfig+0x114>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d013      	beq.n	8005f4c <TIM_Base_SetConfig+0x40>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2a:	d00f      	beq.n	8005f4c <TIM_Base_SetConfig+0x40>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a3d      	ldr	r2, [pc, #244]	; (8006024 <TIM_Base_SetConfig+0x118>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00b      	beq.n	8005f4c <TIM_Base_SetConfig+0x40>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a3c      	ldr	r2, [pc, #240]	; (8006028 <TIM_Base_SetConfig+0x11c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d007      	beq.n	8005f4c <TIM_Base_SetConfig+0x40>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a3b      	ldr	r2, [pc, #236]	; (800602c <TIM_Base_SetConfig+0x120>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_Base_SetConfig+0x40>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a3a      	ldr	r2, [pc, #232]	; (8006030 <TIM_Base_SetConfig+0x124>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d108      	bne.n	8005f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a2f      	ldr	r2, [pc, #188]	; (8006020 <TIM_Base_SetConfig+0x114>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01f      	beq.n	8005fa6 <TIM_Base_SetConfig+0x9a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f6c:	d01b      	beq.n	8005fa6 <TIM_Base_SetConfig+0x9a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a2c      	ldr	r2, [pc, #176]	; (8006024 <TIM_Base_SetConfig+0x118>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d017      	beq.n	8005fa6 <TIM_Base_SetConfig+0x9a>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a2b      	ldr	r2, [pc, #172]	; (8006028 <TIM_Base_SetConfig+0x11c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d013      	beq.n	8005fa6 <TIM_Base_SetConfig+0x9a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a2a      	ldr	r2, [pc, #168]	; (800602c <TIM_Base_SetConfig+0x120>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00f      	beq.n	8005fa6 <TIM_Base_SetConfig+0x9a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a29      	ldr	r2, [pc, #164]	; (8006030 <TIM_Base_SetConfig+0x124>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00b      	beq.n	8005fa6 <TIM_Base_SetConfig+0x9a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a28      	ldr	r2, [pc, #160]	; (8006034 <TIM_Base_SetConfig+0x128>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d007      	beq.n	8005fa6 <TIM_Base_SetConfig+0x9a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a27      	ldr	r2, [pc, #156]	; (8006038 <TIM_Base_SetConfig+0x12c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d003      	beq.n	8005fa6 <TIM_Base_SetConfig+0x9a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a26      	ldr	r2, [pc, #152]	; (800603c <TIM_Base_SetConfig+0x130>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d108      	bne.n	8005fb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a10      	ldr	r2, [pc, #64]	; (8006020 <TIM_Base_SetConfig+0x114>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00f      	beq.n	8006004 <TIM_Base_SetConfig+0xf8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a12      	ldr	r2, [pc, #72]	; (8006030 <TIM_Base_SetConfig+0x124>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00b      	beq.n	8006004 <TIM_Base_SetConfig+0xf8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a11      	ldr	r2, [pc, #68]	; (8006034 <TIM_Base_SetConfig+0x128>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d007      	beq.n	8006004 <TIM_Base_SetConfig+0xf8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a10      	ldr	r2, [pc, #64]	; (8006038 <TIM_Base_SetConfig+0x12c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_Base_SetConfig+0xf8>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a0f      	ldr	r2, [pc, #60]	; (800603c <TIM_Base_SetConfig+0x130>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d103      	bne.n	800600c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	615a      	str	r2, [r3, #20]
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40000400 	.word	0x40000400
 8006028:	40000800 	.word	0x40000800
 800602c:	40000c00 	.word	0x40000c00
 8006030:	40013400 	.word	0x40013400
 8006034:	40014000 	.word	0x40014000
 8006038:	40014400 	.word	0x40014400
 800603c:	40014800 	.word	0x40014800

08006040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0201 	bic.w	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f023 030a 	bic.w	r3, r3, #10
 800607c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800609e:	b480      	push	{r7}
 80060a0:	b087      	sub	sp, #28
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	f023 0210 	bic.w	r2, r3, #16
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	031b      	lsls	r3, r3, #12
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	f043 0307 	orr.w	r3, r3, #7
 8006120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	609a      	str	r2, [r3, #8]
}
 8006128:	bf00      	nop
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800614e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	021a      	lsls	r2, r3, #8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	431a      	orrs	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4313      	orrs	r3, r2
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	609a      	str	r2, [r3, #8]
}
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006188:	2302      	movs	r3, #2
 800618a:	e068      	b.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a2e      	ldr	r2, [pc, #184]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d004      	beq.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a2d      	ldr	r2, [pc, #180]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d108      	bne.n	80061d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1e      	ldr	r2, [pc, #120]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d01d      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fe:	d018      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1b      	ldr	r2, [pc, #108]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a18      	ldr	r2, [pc, #96]	; (800627c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a13      	ldr	r2, [pc, #76]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a14      	ldr	r2, [pc, #80]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d10c      	bne.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	4313      	orrs	r3, r2
 8006242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40012c00 	.word	0x40012c00
 8006270:	40013400 	.word	0x40013400
 8006274:	40000400 	.word	0x40000400
 8006278:	40000800 	.word	0x40000800
 800627c:	40000c00 	.word	0x40000c00
 8006280:	40014000 	.word	0x40014000

08006284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e040      	b.n	8006354 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fb fde8 	bl	8001eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2224      	movs	r2, #36	; 0x24
 80062ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0201 	bic.w	r2, r2, #1
 80062fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fe72 	bl	8006ff0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fbb7 	bl	8006a80 <UART_SetConfig>
 8006312:	4603      	mov	r3, r0
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e01b      	b.n	8006354 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800632a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800633a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fef1 	bl	8007134 <UART_CheckIdleState>
 8006352:	4603      	mov	r3, r0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	4613      	mov	r3, r2
 800636a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006370:	2b20      	cmp	r3, #32
 8006372:	d178      	bne.n	8006466 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_UART_Transmit+0x24>
 800637a:	88fb      	ldrh	r3, [r7, #6]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e071      	b.n	8006468 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2221      	movs	r2, #33	; 0x21
 8006390:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006392:	f7fc f923 	bl	80025dc <HAL_GetTick>
 8006396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	88fa      	ldrh	r2, [r7, #6]
 800639c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	88fa      	ldrh	r2, [r7, #6]
 80063a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b0:	d108      	bne.n	80063c4 <HAL_UART_Transmit+0x68>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	e003      	b.n	80063cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063cc:	e030      	b.n	8006430 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2200      	movs	r2, #0
 80063d6:	2180      	movs	r1, #128	; 0x80
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 ff53 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d004      	beq.n	80063ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e03c      	b.n	8006468 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10b      	bne.n	800640c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	881a      	ldrh	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006400:	b292      	uxth	r2, r2
 8006402:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	3302      	adds	r3, #2
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	e008      	b.n	800641e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	781a      	ldrb	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b292      	uxth	r2, r2
 8006416:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3301      	adds	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006424:	b29b      	uxth	r3, r3
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1c8      	bne.n	80063ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2200      	movs	r2, #0
 8006444:	2140      	movs	r1, #64	; 0x40
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 ff1c 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e005      	b.n	8006468 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
  }
}
 8006468:	4618      	mov	r0, r3
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b0ba      	sub	sp, #232	; 0xe8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006496:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800649a:	f640 030f 	movw	r3, #2063	; 0x80f
 800649e:	4013      	ands	r3, r2
 80064a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d115      	bne.n	80064d8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b0:	f003 0320 	and.w	r3, r3, #32
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00f      	beq.n	80064d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d009      	beq.n	80064d8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 82ae 	beq.w	8006a2a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4798      	blx	r3
      }
      return;
 80064d6:	e2a8      	b.n	8006a2a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80064d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8117 	beq.w	8006710 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064f2:	4b85      	ldr	r3, [pc, #532]	; (8006708 <HAL_UART_IRQHandler+0x298>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 810a 	beq.w	8006710 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d011      	beq.n	800652c <HAL_UART_IRQHandler+0xbc>
 8006508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800650c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2201      	movs	r2, #1
 800651a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006522:	f043 0201 	orr.w	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800652c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d011      	beq.n	800655c <HAL_UART_IRQHandler+0xec>
 8006538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2202      	movs	r2, #2
 800654a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006552:	f043 0204 	orr.w	r2, r3, #4
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800655c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	d011      	beq.n	800658c <HAL_UART_IRQHandler+0x11c>
 8006568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2204      	movs	r2, #4
 800657a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006582:	f043 0202 	orr.w	r2, r3, #2
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800658c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d017      	beq.n	80065c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d105      	bne.n	80065b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2208      	movs	r2, #8
 80065b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065be:	f043 0208 	orr.w	r2, r3, #8
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d012      	beq.n	80065fa <HAL_UART_IRQHandler+0x18a>
 80065d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00c      	beq.n	80065fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f0:	f043 0220 	orr.w	r2, r3, #32
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 8214 	beq.w	8006a2e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00d      	beq.n	800662e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006616:	f003 0320 	and.w	r3, r3, #32
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006634:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d005      	beq.n	8006652 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800664a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800664e:	2b00      	cmp	r3, #0
 8006650:	d04f      	beq.n	80066f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 ff44 	bl	80074e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d141      	bne.n	80066ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3308      	adds	r3, #8
 800666c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800667c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3308      	adds	r3, #8
 800668e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006692:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800669e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1d9      	bne.n	8006666 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d013      	beq.n	80066e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066be:	4a13      	ldr	r2, [pc, #76]	; (800670c <HAL_UART_IRQHandler+0x29c>)
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fc fe14 	bl	80032f4 <HAL_DMA_Abort_IT>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d017      	beq.n	8006702 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066dc:	4610      	mov	r0, r2
 80066de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e0:	e00f      	b.n	8006702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f9c2 	bl	8006a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e8:	e00b      	b.n	8006702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f9be 	bl	8006a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f0:	e007      	b.n	8006702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f9ba 	bl	8006a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006700:	e195      	b.n	8006a2e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006702:	bf00      	nop
    return;
 8006704:	e193      	b.n	8006a2e <HAL_UART_IRQHandler+0x5be>
 8006706:	bf00      	nop
 8006708:	04000120 	.word	0x04000120
 800670c:	080075a9 	.word	0x080075a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006714:	2b01      	cmp	r3, #1
 8006716:	f040 814e 	bne.w	80069b6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671e:	f003 0310 	and.w	r3, r3, #16
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 8147 	beq.w	80069b6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 8140 	beq.w	80069b6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2210      	movs	r2, #16
 800673c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006748:	2b40      	cmp	r3, #64	; 0x40
 800674a:	f040 80b8 	bne.w	80068be <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800675a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8167 	beq.w	8006a32 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800676a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800676e:	429a      	cmp	r2, r3
 8006770:	f080 815f 	bcs.w	8006a32 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800677a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	f040 8086 	bne.w	800689c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1da      	bne.n	8006790 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067ec:	f023 0301 	bic.w	r3, r3, #1
 80067f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3308      	adds	r3, #8
 80067fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006802:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006806:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e1      	bne.n	80067da <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3308      	adds	r3, #8
 800681c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3308      	adds	r3, #8
 8006836:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800683a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800683c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006840:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e3      	bne.n	8006816 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800686a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800686c:	f023 0310 	bic.w	r3, r3, #16
 8006870:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800687e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006880:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006884:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800688c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e4      	bne.n	800685c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006896:	4618      	mov	r0, r3
 8006898:	f7fc fcee 	bl	8003278 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7fb f860 	bl	800197c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068bc:	e0b9      	b.n	8006a32 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 80ab 	beq.w	8006a36 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80068e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 80a6 	beq.w	8006a36 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800690c:	647b      	str	r3, [r7, #68]	; 0x44
 800690e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006912:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800691a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e4      	bne.n	80068ea <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3308      	adds	r3, #8
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	623b      	str	r3, [r7, #32]
   return(result);
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	f023 0301 	bic.w	r3, r3, #1
 8006936:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3308      	adds	r3, #8
 8006940:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006944:	633a      	str	r2, [r7, #48]	; 0x30
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800694a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e3      	bne.n	8006920 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2220      	movs	r2, #32
 800695c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	60fb      	str	r3, [r7, #12]
   return(result);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f023 0310 	bic.w	r3, r3, #16
 8006980:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800698e:	61fb      	str	r3, [r7, #28]
 8006990:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	69b9      	ldr	r1, [r7, #24]
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	617b      	str	r3, [r7, #20]
   return(result);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e4      	bne.n	800696c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2202      	movs	r2, #2
 80069a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fa ffe4 	bl	800197c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069b4:	e03f      	b.n	8006a36 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00e      	beq.n	80069e0 <HAL_UART_IRQHandler+0x570>
 80069c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d008      	beq.n	80069e0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 ffe1 	bl	80079a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069de:	e02d      	b.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00e      	beq.n	8006a0a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d008      	beq.n	8006a0a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01c      	beq.n	8006a3a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	4798      	blx	r3
    }
    return;
 8006a08:	e017      	b.n	8006a3a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d012      	beq.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
 8006a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00c      	beq.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fdd6 	bl	80075d4 <UART_EndTransmit_IT>
    return;
 8006a28:	e008      	b.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a2a:	bf00      	nop
 8006a2c:	e006      	b.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
    return;
 8006a2e:	bf00      	nop
 8006a30:	e004      	b.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a32:	bf00      	nop
 8006a34:	e002      	b.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a36:	bf00      	nop
 8006a38:	e000      	b.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
    return;
 8006a3a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006a3c:	37e8      	adds	r7, #232	; 0xe8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop

08006a44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a84:	b08a      	sub	sp, #40	; 0x28
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	4ba4      	ldr	r3, [pc, #656]	; (8006d40 <UART_SetConfig+0x2c0>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	6812      	ldr	r2, [r2, #0]
 8006ab6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a99      	ldr	r2, [pc, #612]	; (8006d44 <UART_SetConfig+0x2c4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d004      	beq.n	8006aec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afc:	430a      	orrs	r2, r1
 8006afe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a90      	ldr	r2, [pc, #576]	; (8006d48 <UART_SetConfig+0x2c8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d126      	bne.n	8006b58 <UART_SetConfig+0xd8>
 8006b0a:	4b90      	ldr	r3, [pc, #576]	; (8006d4c <UART_SetConfig+0x2cc>)
 8006b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d81b      	bhi.n	8006b50 <UART_SetConfig+0xd0>
 8006b18:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <UART_SetConfig+0xa0>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b31 	.word	0x08006b31
 8006b24:	08006b41 	.word	0x08006b41
 8006b28:	08006b39 	.word	0x08006b39
 8006b2c:	08006b49 	.word	0x08006b49
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b36:	e116      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b3e:	e112      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006b40:	2304      	movs	r3, #4
 8006b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b46:	e10e      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006b48:	2308      	movs	r3, #8
 8006b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4e:	e10a      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006b50:	2310      	movs	r3, #16
 8006b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b56:	e106      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a7c      	ldr	r2, [pc, #496]	; (8006d50 <UART_SetConfig+0x2d0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d138      	bne.n	8006bd4 <UART_SetConfig+0x154>
 8006b62:	4b7a      	ldr	r3, [pc, #488]	; (8006d4c <UART_SetConfig+0x2cc>)
 8006b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b68:	f003 030c 	and.w	r3, r3, #12
 8006b6c:	2b0c      	cmp	r3, #12
 8006b6e:	d82d      	bhi.n	8006bcc <UART_SetConfig+0x14c>
 8006b70:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <UART_SetConfig+0xf8>)
 8006b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b76:	bf00      	nop
 8006b78:	08006bad 	.word	0x08006bad
 8006b7c:	08006bcd 	.word	0x08006bcd
 8006b80:	08006bcd 	.word	0x08006bcd
 8006b84:	08006bcd 	.word	0x08006bcd
 8006b88:	08006bbd 	.word	0x08006bbd
 8006b8c:	08006bcd 	.word	0x08006bcd
 8006b90:	08006bcd 	.word	0x08006bcd
 8006b94:	08006bcd 	.word	0x08006bcd
 8006b98:	08006bb5 	.word	0x08006bb5
 8006b9c:	08006bcd 	.word	0x08006bcd
 8006ba0:	08006bcd 	.word	0x08006bcd
 8006ba4:	08006bcd 	.word	0x08006bcd
 8006ba8:	08006bc5 	.word	0x08006bc5
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb2:	e0d8      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bba:	e0d4      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc2:	e0d0      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006bc4:	2308      	movs	r3, #8
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bca:	e0cc      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006bcc:	2310      	movs	r3, #16
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd2:	e0c8      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a5e      	ldr	r2, [pc, #376]	; (8006d54 <UART_SetConfig+0x2d4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d125      	bne.n	8006c2a <UART_SetConfig+0x1aa>
 8006bde:	4b5b      	ldr	r3, [pc, #364]	; (8006d4c <UART_SetConfig+0x2cc>)
 8006be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006be8:	2b30      	cmp	r3, #48	; 0x30
 8006bea:	d016      	beq.n	8006c1a <UART_SetConfig+0x19a>
 8006bec:	2b30      	cmp	r3, #48	; 0x30
 8006bee:	d818      	bhi.n	8006c22 <UART_SetConfig+0x1a2>
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d00a      	beq.n	8006c0a <UART_SetConfig+0x18a>
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d814      	bhi.n	8006c22 <UART_SetConfig+0x1a2>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <UART_SetConfig+0x182>
 8006bfc:	2b10      	cmp	r3, #16
 8006bfe:	d008      	beq.n	8006c12 <UART_SetConfig+0x192>
 8006c00:	e00f      	b.n	8006c22 <UART_SetConfig+0x1a2>
 8006c02:	2300      	movs	r3, #0
 8006c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c08:	e0ad      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c10:	e0a9      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006c12:	2304      	movs	r3, #4
 8006c14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c18:	e0a5      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006c1a:	2308      	movs	r3, #8
 8006c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c20:	e0a1      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006c22:	2310      	movs	r3, #16
 8006c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c28:	e09d      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a4a      	ldr	r2, [pc, #296]	; (8006d58 <UART_SetConfig+0x2d8>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d125      	bne.n	8006c80 <UART_SetConfig+0x200>
 8006c34:	4b45      	ldr	r3, [pc, #276]	; (8006d4c <UART_SetConfig+0x2cc>)
 8006c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c3e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c40:	d016      	beq.n	8006c70 <UART_SetConfig+0x1f0>
 8006c42:	2bc0      	cmp	r3, #192	; 0xc0
 8006c44:	d818      	bhi.n	8006c78 <UART_SetConfig+0x1f8>
 8006c46:	2b80      	cmp	r3, #128	; 0x80
 8006c48:	d00a      	beq.n	8006c60 <UART_SetConfig+0x1e0>
 8006c4a:	2b80      	cmp	r3, #128	; 0x80
 8006c4c:	d814      	bhi.n	8006c78 <UART_SetConfig+0x1f8>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <UART_SetConfig+0x1d8>
 8006c52:	2b40      	cmp	r3, #64	; 0x40
 8006c54:	d008      	beq.n	8006c68 <UART_SetConfig+0x1e8>
 8006c56:	e00f      	b.n	8006c78 <UART_SetConfig+0x1f8>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c5e:	e082      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c66:	e07e      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6e:	e07a      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c76:	e076      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7e:	e072      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a35      	ldr	r2, [pc, #212]	; (8006d5c <UART_SetConfig+0x2dc>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d12a      	bne.n	8006ce0 <UART_SetConfig+0x260>
 8006c8a:	4b30      	ldr	r3, [pc, #192]	; (8006d4c <UART_SetConfig+0x2cc>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c98:	d01a      	beq.n	8006cd0 <UART_SetConfig+0x250>
 8006c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c9e:	d81b      	bhi.n	8006cd8 <UART_SetConfig+0x258>
 8006ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca4:	d00c      	beq.n	8006cc0 <UART_SetConfig+0x240>
 8006ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006caa:	d815      	bhi.n	8006cd8 <UART_SetConfig+0x258>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <UART_SetConfig+0x238>
 8006cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb4:	d008      	beq.n	8006cc8 <UART_SetConfig+0x248>
 8006cb6:	e00f      	b.n	8006cd8 <UART_SetConfig+0x258>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cbe:	e052      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc6:	e04e      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006cc8:	2304      	movs	r3, #4
 8006cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cce:	e04a      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd6:	e046      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cde:	e042      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a17      	ldr	r2, [pc, #92]	; (8006d44 <UART_SetConfig+0x2c4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d13a      	bne.n	8006d60 <UART_SetConfig+0x2e0>
 8006cea:	4b18      	ldr	r3, [pc, #96]	; (8006d4c <UART_SetConfig+0x2cc>)
 8006cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cf8:	d01a      	beq.n	8006d30 <UART_SetConfig+0x2b0>
 8006cfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cfe:	d81b      	bhi.n	8006d38 <UART_SetConfig+0x2b8>
 8006d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d04:	d00c      	beq.n	8006d20 <UART_SetConfig+0x2a0>
 8006d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d0a:	d815      	bhi.n	8006d38 <UART_SetConfig+0x2b8>
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <UART_SetConfig+0x298>
 8006d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d14:	d008      	beq.n	8006d28 <UART_SetConfig+0x2a8>
 8006d16:	e00f      	b.n	8006d38 <UART_SetConfig+0x2b8>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d1e:	e022      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006d20:	2302      	movs	r3, #2
 8006d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d26:	e01e      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006d28:	2304      	movs	r3, #4
 8006d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d2e:	e01a      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006d30:	2308      	movs	r3, #8
 8006d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d36:	e016      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3e:	e012      	b.n	8006d66 <UART_SetConfig+0x2e6>
 8006d40:	efff69f3 	.word	0xefff69f3
 8006d44:	40008000 	.word	0x40008000
 8006d48:	40013800 	.word	0x40013800
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	40004400 	.word	0x40004400
 8006d54:	40004800 	.word	0x40004800
 8006d58:	40004c00 	.word	0x40004c00
 8006d5c:	40005000 	.word	0x40005000
 8006d60:	2310      	movs	r3, #16
 8006d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a9f      	ldr	r2, [pc, #636]	; (8006fe8 <UART_SetConfig+0x568>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d17a      	bne.n	8006e66 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d824      	bhi.n	8006dc2 <UART_SetConfig+0x342>
 8006d78:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <UART_SetConfig+0x300>)
 8006d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7e:	bf00      	nop
 8006d80:	08006da5 	.word	0x08006da5
 8006d84:	08006dc3 	.word	0x08006dc3
 8006d88:	08006dad 	.word	0x08006dad
 8006d8c:	08006dc3 	.word	0x08006dc3
 8006d90:	08006db3 	.word	0x08006db3
 8006d94:	08006dc3 	.word	0x08006dc3
 8006d98:	08006dc3 	.word	0x08006dc3
 8006d9c:	08006dc3 	.word	0x08006dc3
 8006da0:	08006dbb 	.word	0x08006dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006da4:	f7fd fb48 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 8006da8:	61f8      	str	r0, [r7, #28]
        break;
 8006daa:	e010      	b.n	8006dce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dac:	4b8f      	ldr	r3, [pc, #572]	; (8006fec <UART_SetConfig+0x56c>)
 8006dae:	61fb      	str	r3, [r7, #28]
        break;
 8006db0:	e00d      	b.n	8006dce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006db2:	f7fd faa9 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 8006db6:	61f8      	str	r0, [r7, #28]
        break;
 8006db8:	e009      	b.n	8006dce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dbe:	61fb      	str	r3, [r7, #28]
        break;
 8006dc0:	e005      	b.n	8006dce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006dcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 80fb 	beq.w	8006fcc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	4413      	add	r3, r2
 8006de0:	69fa      	ldr	r2, [r7, #28]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d305      	bcc.n	8006df2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d903      	bls.n	8006dfa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006df8:	e0e8      	b.n	8006fcc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	461c      	mov	r4, r3
 8006e00:	4615      	mov	r5, r2
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	022b      	lsls	r3, r5, #8
 8006e0c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e10:	0222      	lsls	r2, r4, #8
 8006e12:	68f9      	ldr	r1, [r7, #12]
 8006e14:	6849      	ldr	r1, [r1, #4]
 8006e16:	0849      	lsrs	r1, r1, #1
 8006e18:	2000      	movs	r0, #0
 8006e1a:	4688      	mov	r8, r1
 8006e1c:	4681      	mov	r9, r0
 8006e1e:	eb12 0a08 	adds.w	sl, r2, r8
 8006e22:	eb43 0b09 	adc.w	fp, r3, r9
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	603b      	str	r3, [r7, #0]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e34:	4650      	mov	r0, sl
 8006e36:	4659      	mov	r1, fp
 8006e38:	f7f9 fd20 	bl	800087c <__aeabi_uldivmod>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4613      	mov	r3, r2
 8006e42:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4a:	d308      	bcc.n	8006e5e <UART_SetConfig+0x3de>
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e52:	d204      	bcs.n	8006e5e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	60da      	str	r2, [r3, #12]
 8006e5c:	e0b6      	b.n	8006fcc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e64:	e0b2      	b.n	8006fcc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e6e:	d15e      	bne.n	8006f2e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006e70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d828      	bhi.n	8006eca <UART_SetConfig+0x44a>
 8006e78:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <UART_SetConfig+0x400>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006ea5 	.word	0x08006ea5
 8006e84:	08006ead 	.word	0x08006ead
 8006e88:	08006eb5 	.word	0x08006eb5
 8006e8c:	08006ecb 	.word	0x08006ecb
 8006e90:	08006ebb 	.word	0x08006ebb
 8006e94:	08006ecb 	.word	0x08006ecb
 8006e98:	08006ecb 	.word	0x08006ecb
 8006e9c:	08006ecb 	.word	0x08006ecb
 8006ea0:	08006ec3 	.word	0x08006ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea4:	f7fd fac8 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 8006ea8:	61f8      	str	r0, [r7, #28]
        break;
 8006eaa:	e014      	b.n	8006ed6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eac:	f7fd fada 	bl	8004464 <HAL_RCC_GetPCLK2Freq>
 8006eb0:	61f8      	str	r0, [r7, #28]
        break;
 8006eb2:	e010      	b.n	8006ed6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb4:	4b4d      	ldr	r3, [pc, #308]	; (8006fec <UART_SetConfig+0x56c>)
 8006eb6:	61fb      	str	r3, [r7, #28]
        break;
 8006eb8:	e00d      	b.n	8006ed6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eba:	f7fd fa25 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 8006ebe:	61f8      	str	r0, [r7, #28]
        break;
 8006ec0:	e009      	b.n	8006ed6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec6:	61fb      	str	r3, [r7, #28]
        break;
 8006ec8:	e005      	b.n	8006ed6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ed4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d077      	beq.n	8006fcc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	005a      	lsls	r2, r3, #1
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	441a      	add	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b0f      	cmp	r3, #15
 8006ef6:	d916      	bls.n	8006f26 <UART_SetConfig+0x4a6>
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006efe:	d212      	bcs.n	8006f26 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f023 030f 	bic.w	r3, r3, #15
 8006f08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	085b      	lsrs	r3, r3, #1
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	8afb      	ldrh	r3, [r7, #22]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	8afa      	ldrh	r2, [r7, #22]
 8006f22:	60da      	str	r2, [r3, #12]
 8006f24:	e052      	b.n	8006fcc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f2c:	e04e      	b.n	8006fcc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f32:	2b08      	cmp	r3, #8
 8006f34:	d827      	bhi.n	8006f86 <UART_SetConfig+0x506>
 8006f36:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <UART_SetConfig+0x4bc>)
 8006f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3c:	08006f61 	.word	0x08006f61
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f71 	.word	0x08006f71
 8006f48:	08006f87 	.word	0x08006f87
 8006f4c:	08006f77 	.word	0x08006f77
 8006f50:	08006f87 	.word	0x08006f87
 8006f54:	08006f87 	.word	0x08006f87
 8006f58:	08006f87 	.word	0x08006f87
 8006f5c:	08006f7f 	.word	0x08006f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f60:	f7fd fa6a 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 8006f64:	61f8      	str	r0, [r7, #28]
        break;
 8006f66:	e014      	b.n	8006f92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f68:	f7fd fa7c 	bl	8004464 <HAL_RCC_GetPCLK2Freq>
 8006f6c:	61f8      	str	r0, [r7, #28]
        break;
 8006f6e:	e010      	b.n	8006f92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f70:	4b1e      	ldr	r3, [pc, #120]	; (8006fec <UART_SetConfig+0x56c>)
 8006f72:	61fb      	str	r3, [r7, #28]
        break;
 8006f74:	e00d      	b.n	8006f92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f76:	f7fd f9c7 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 8006f7a:	61f8      	str	r0, [r7, #28]
        break;
 8006f7c:	e009      	b.n	8006f92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f82:	61fb      	str	r3, [r7, #28]
        break;
 8006f84:	e005      	b.n	8006f92 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f90:	bf00      	nop
    }

    if (pclk != 0U)
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d019      	beq.n	8006fcc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	085a      	lsrs	r2, r3, #1
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	441a      	add	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006faa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	2b0f      	cmp	r3, #15
 8006fb0:	d909      	bls.n	8006fc6 <UART_SetConfig+0x546>
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb8:	d205      	bcs.n	8006fc6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	60da      	str	r2, [r3, #12]
 8006fc4:	e002      	b.n	8006fcc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006fd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3728      	adds	r7, #40	; 0x28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fe6:	bf00      	nop
 8006fe8:	40008000 	.word	0x40008000
 8006fec:	00f42400 	.word	0x00f42400

08006ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	f003 0308 	and.w	r3, r3, #8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00a      	beq.n	800701a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	f003 0310 	and.w	r3, r3, #16
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00a      	beq.n	80070a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01a      	beq.n	8007106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ee:	d10a      	bne.n	8007106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	605a      	str	r2, [r3, #4]
  }
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b098      	sub	sp, #96	; 0x60
 8007138:	af02      	add	r7, sp, #8
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007144:	f7fb fa4a 	bl	80025dc <HAL_GetTick>
 8007148:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b08      	cmp	r3, #8
 8007156:	d12e      	bne.n	80071b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007160:	2200      	movs	r2, #0
 8007162:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f88c 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d021      	beq.n	80071b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	e853 3f00 	ldrex	r3, [r3]
 800717e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007186:	653b      	str	r3, [r7, #80]	; 0x50
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	461a      	mov	r2, r3
 800718e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007190:	647b      	str	r3, [r7, #68]	; 0x44
 8007192:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007194:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007198:	e841 2300 	strex	r3, r2, [r1]
 800719c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800719e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e6      	bne.n	8007172 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e062      	b.n	800727c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	d149      	bne.n	8007258 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071cc:	2200      	movs	r2, #0
 80071ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f856 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d03c      	beq.n	8007258 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	623b      	str	r3, [r7, #32]
   return(result);
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071fc:	633b      	str	r3, [r7, #48]	; 0x30
 80071fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e6      	bne.n	80071de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3308      	adds	r3, #8
 8007216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0301 	bic.w	r3, r3, #1
 8007226:	64bb      	str	r3, [r7, #72]	; 0x48
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3308      	adds	r3, #8
 800722e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007230:	61fa      	str	r2, [r7, #28]
 8007232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	69b9      	ldr	r1, [r7, #24]
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	617b      	str	r3, [r7, #20]
   return(result);
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e5      	bne.n	8007210 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e011      	b.n	800727c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3758      	adds	r7, #88	; 0x58
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	4613      	mov	r3, r2
 8007292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007294:	e049      	b.n	800732a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800729c:	d045      	beq.n	800732a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729e:	f7fb f99d 	bl	80025dc <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d302      	bcc.n	80072b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e048      	b.n	800734a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d031      	beq.n	800732a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b08      	cmp	r3, #8
 80072d2:	d110      	bne.n	80072f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2208      	movs	r2, #8
 80072da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 f8ff 	bl	80074e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2208      	movs	r2, #8
 80072e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e029      	b.n	800734a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007304:	d111      	bne.n	800732a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800730e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f8e5 	bl	80074e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2220      	movs	r2, #32
 800731a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e00f      	b.n	800734a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69da      	ldr	r2, [r3, #28]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4013      	ands	r3, r2
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	429a      	cmp	r2, r3
 8007338:	bf0c      	ite	eq
 800733a:	2301      	moveq	r3, #1
 800733c:	2300      	movne	r3, #0
 800733e:	b2db      	uxtb	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	429a      	cmp	r2, r3
 8007346:	d0a6      	beq.n	8007296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007354:	b480      	push	{r7}
 8007356:	b097      	sub	sp, #92	; 0x5c
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	4613      	mov	r3, r2
 8007360:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	88fa      	ldrh	r2, [r7, #6]
 800736c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	88fa      	ldrh	r2, [r7, #6]
 8007374:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007386:	d10e      	bne.n	80073a6 <UART_Start_Receive_IT+0x52>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d105      	bne.n	800739c <UART_Start_Receive_IT+0x48>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007396:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800739a:	e02d      	b.n	80073f8 <UART_Start_Receive_IT+0xa4>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	22ff      	movs	r2, #255	; 0xff
 80073a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073a4:	e028      	b.n	80073f8 <UART_Start_Receive_IT+0xa4>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10d      	bne.n	80073ca <UART_Start_Receive_IT+0x76>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d104      	bne.n	80073c0 <UART_Start_Receive_IT+0x6c>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	22ff      	movs	r2, #255	; 0xff
 80073ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073be:	e01b      	b.n	80073f8 <UART_Start_Receive_IT+0xa4>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	227f      	movs	r2, #127	; 0x7f
 80073c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073c8:	e016      	b.n	80073f8 <UART_Start_Receive_IT+0xa4>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073d2:	d10d      	bne.n	80073f0 <UART_Start_Receive_IT+0x9c>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d104      	bne.n	80073e6 <UART_Start_Receive_IT+0x92>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	227f      	movs	r2, #127	; 0x7f
 80073e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073e4:	e008      	b.n	80073f8 <UART_Start_Receive_IT+0xa4>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	223f      	movs	r2, #63	; 0x3f
 80073ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073ee:	e003      	b.n	80073f8 <UART_Start_Receive_IT+0xa4>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2222      	movs	r2, #34	; 0x22
 8007404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	f043 0301 	orr.w	r3, r3, #1
 800741e:	657b      	str	r3, [r7, #84]	; 0x54
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3308      	adds	r3, #8
 8007426:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007428:	64ba      	str	r2, [r7, #72]	; 0x48
 800742a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800742e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e5      	bne.n	8007408 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007444:	d107      	bne.n	8007456 <UART_Start_Receive_IT+0x102>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4a21      	ldr	r2, [pc, #132]	; (80074d8 <UART_Start_Receive_IT+0x184>)
 8007452:	669a      	str	r2, [r3, #104]	; 0x68
 8007454:	e002      	b.n	800745c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4a20      	ldr	r2, [pc, #128]	; (80074dc <UART_Start_Receive_IT+0x188>)
 800745a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d019      	beq.n	8007498 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007478:	64fb      	str	r3, [r7, #76]	; 0x4c
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007482:	637b      	str	r3, [r7, #52]	; 0x34
 8007484:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e6      	bne.n	8007464 <UART_Start_Receive_IT+0x110>
 8007496:	e018      	b.n	80074ca <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	e853 3f00 	ldrex	r3, [r3]
 80074a4:	613b      	str	r3, [r7, #16]
   return(result);
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f043 0320 	orr.w	r3, r3, #32
 80074ac:	653b      	str	r3, [r7, #80]	; 0x50
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074b6:	623b      	str	r3, [r7, #32]
 80074b8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ba:	69f9      	ldr	r1, [r7, #28]
 80074bc:	6a3a      	ldr	r2, [r7, #32]
 80074be:	e841 2300 	strex	r3, r2, [r1]
 80074c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1e6      	bne.n	8007498 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	375c      	adds	r7, #92	; 0x5c
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	080077e5 	.word	0x080077e5
 80074dc:	08007629 	.word	0x08007629

080074e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b095      	sub	sp, #84	; 0x54
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007506:	643b      	str	r3, [r7, #64]	; 0x40
 8007508:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800750c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800750e:	e841 2300 	strex	r3, r2, [r1]
 8007512:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1e6      	bne.n	80074e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3308      	adds	r3, #8
 8007520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	61fb      	str	r3, [r7, #28]
   return(result);
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	f023 0301 	bic.w	r3, r3, #1
 8007530:	64bb      	str	r3, [r7, #72]	; 0x48
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3308      	adds	r3, #8
 8007538:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800753a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800753c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e5      	bne.n	800751a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007552:	2b01      	cmp	r3, #1
 8007554:	d118      	bne.n	8007588 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	e853 3f00 	ldrex	r3, [r3]
 8007562:	60bb      	str	r3, [r7, #8]
   return(result);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f023 0310 	bic.w	r3, r3, #16
 800756a:	647b      	str	r3, [r7, #68]	; 0x44
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	461a      	mov	r2, r3
 8007572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007574:	61bb      	str	r3, [r7, #24]
 8007576:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007578:	6979      	ldr	r1, [r7, #20]
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	e841 2300 	strex	r3, r2, [r1]
 8007580:	613b      	str	r3, [r7, #16]
   return(result);
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e6      	bne.n	8007556 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800759c:	bf00      	nop
 800759e:	3754      	adds	r7, #84	; 0x54
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f7ff fa50 	bl	8006a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075cc:	bf00      	nop
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	61bb      	str	r3, [r7, #24]
 80075fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6979      	ldr	r1, [r7, #20]
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	613b      	str	r3, [r7, #16]
   return(result);
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e6      	bne.n	80075dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2220      	movs	r2, #32
 8007612:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff fa12 	bl	8006a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007620:	bf00      	nop
 8007622:	3720      	adds	r7, #32
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b09c      	sub	sp, #112	; 0x70
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007636:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007640:	2b22      	cmp	r3, #34	; 0x22
 8007642:	f040 80be 	bne.w	80077c2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800764c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007650:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007654:	b2d9      	uxtb	r1, r3
 8007656:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800765a:	b2da      	uxtb	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007660:	400a      	ands	r2, r1
 8007662:	b2d2      	uxtb	r2, r2
 8007664:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007676:	b29b      	uxth	r3, r3
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	f040 80a3 	bne.w	80077d6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800769e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80076b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e6      	bne.n	8007690 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3308      	adds	r3, #8
 80076c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d4:	f023 0301 	bic.w	r3, r3, #1
 80076d8:	667b      	str	r3, [r7, #100]	; 0x64
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3308      	adds	r3, #8
 80076e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076e2:	647a      	str	r2, [r7, #68]	; 0x44
 80076e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e5      	bne.n	80076c2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2220      	movs	r2, #32
 80076fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a34      	ldr	r2, [pc, #208]	; (80077e0 <UART_RxISR_8BIT+0x1b8>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d01f      	beq.n	8007754 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d018      	beq.n	8007754 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	e853 3f00 	ldrex	r3, [r3]
 800772e:	623b      	str	r3, [r7, #32]
   return(result);
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007736:	663b      	str	r3, [r7, #96]	; 0x60
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
 800773e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007740:	633b      	str	r3, [r7, #48]	; 0x30
 8007742:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e6      	bne.n	8007722 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007758:	2b01      	cmp	r3, #1
 800775a:	d12e      	bne.n	80077ba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0310 	bic.w	r3, r3, #16
 8007776:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007780:	61fb      	str	r3, [r7, #28]
 8007782:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	69b9      	ldr	r1, [r7, #24]
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	617b      	str	r3, [r7, #20]
   return(result);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e6      	bne.n	8007762 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	f003 0310 	and.w	r3, r3, #16
 800779e:	2b10      	cmp	r3, #16
 80077a0:	d103      	bne.n	80077aa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2210      	movs	r2, #16
 80077a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fa f8e2 	bl	800197c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077b8:	e00d      	b.n	80077d6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff f94c 	bl	8006a58 <HAL_UART_RxCpltCallback>
}
 80077c0:	e009      	b.n	80077d6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	8b1b      	ldrh	r3, [r3, #24]
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0208 	orr.w	r2, r2, #8
 80077d2:	b292      	uxth	r2, r2
 80077d4:	831a      	strh	r2, [r3, #24]
}
 80077d6:	bf00      	nop
 80077d8:	3770      	adds	r7, #112	; 0x70
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	40008000 	.word	0x40008000

080077e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b09c      	sub	sp, #112	; 0x70
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077fc:	2b22      	cmp	r3, #34	; 0x22
 80077fe:	f040 80be 	bne.w	800797e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007808:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007810:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007812:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007816:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800781a:	4013      	ands	r3, r2
 800781c:	b29a      	uxth	r2, r3
 800781e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007820:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007826:	1c9a      	adds	r2, r3, #2
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007832:	b29b      	uxth	r3, r3
 8007834:	3b01      	subs	r3, #1
 8007836:	b29a      	uxth	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	f040 80a3 	bne.w	8007992 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800785a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800785c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007860:	667b      	str	r3, [r7, #100]	; 0x64
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800786a:	657b      	str	r3, [r7, #84]	; 0x54
 800786c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007870:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e6      	bne.n	800784c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3308      	adds	r3, #8
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007888:	e853 3f00 	ldrex	r3, [r3]
 800788c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	f023 0301 	bic.w	r3, r3, #1
 8007894:	663b      	str	r3, [r7, #96]	; 0x60
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800789e:	643a      	str	r2, [r7, #64]	; 0x40
 80078a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e5      	bne.n	800787e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a34      	ldr	r2, [pc, #208]	; (800799c <UART_RxISR_16BIT+0x1b8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d01f      	beq.n	8007910 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d018      	beq.n	8007910 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	e853 3f00 	ldrex	r3, [r3]
 80078ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078fe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007904:	e841 2300 	strex	r3, r2, [r1]
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1e6      	bne.n	80078de <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007914:	2b01      	cmp	r3, #1
 8007916:	d12e      	bne.n	8007976 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	60bb      	str	r3, [r7, #8]
   return(result);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f023 0310 	bic.w	r3, r3, #16
 8007932:	65bb      	str	r3, [r7, #88]	; 0x58
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	6979      	ldr	r1, [r7, #20]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	613b      	str	r3, [r7, #16]
   return(result);
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e6      	bne.n	800791e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	f003 0310 	and.w	r3, r3, #16
 800795a:	2b10      	cmp	r3, #16
 800795c:	d103      	bne.n	8007966 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2210      	movs	r2, #16
 8007964:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7fa f804 	bl	800197c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007974:	e00d      	b.n	8007992 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff f86e 	bl	8006a58 <HAL_UART_RxCpltCallback>
}
 800797c:	e009      	b.n	8007992 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	8b1b      	ldrh	r3, [r3, #24]
 8007984:	b29a      	uxth	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0208 	orr.w	r2, r2, #8
 800798e:	b292      	uxth	r2, r2
 8007990:	831a      	strh	r2, [r3, #24]
}
 8007992:	bf00      	nop
 8007994:	3770      	adds	r7, #112	; 0x70
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40008000 	.word	0x40008000

080079a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08c      	sub	sp, #48	; 0x30
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4613      	mov	r3, r2
 80079c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	d13b      	bne.n	8007a4a <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 80079d8:	88fb      	ldrh	r3, [r7, #6]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e034      	b.n	8007a4c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	665a      	str	r2, [r3, #100]	; 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	461a      	mov	r2, r3
 80079f2:	68b9      	ldr	r1, [r7, #8]
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f7ff fcad 	bl	8007354 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d11d      	bne.n	8007a3e <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2210      	movs	r2, #16
 8007a08:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	617b      	str	r3, [r7, #20]
   return(result);
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f043 0310 	orr.w	r3, r3, #16
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	461a      	mov	r2, r3
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
 8007a2a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6a39      	ldr	r1, [r7, #32]
 8007a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e6      	bne.n	8007a0a <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8007a3c:	e002      	b.n	8007a44 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8007a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a48:	e000      	b.n	8007a4c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8007a4a:	2302      	movs	r3, #2
  }
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3730      	adds	r7, #48	; 0x30
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <LL_TIM_SetPrescaler>:
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <LL_TIM_SetAutoReload>:
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <LL_TIM_SetRepetitionCounter>:
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	f043 0201 	orr.w	r2, r3, #1
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	615a      	str	r2, [r3, #20]
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a3d      	ldr	r2, [pc, #244]	; (8007bd0 <LL_TIM_Init+0x108>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d013      	beq.n	8007b08 <LL_TIM_Init+0x40>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae6:	d00f      	beq.n	8007b08 <LL_TIM_Init+0x40>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a3a      	ldr	r2, [pc, #232]	; (8007bd4 <LL_TIM_Init+0x10c>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00b      	beq.n	8007b08 <LL_TIM_Init+0x40>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a39      	ldr	r2, [pc, #228]	; (8007bd8 <LL_TIM_Init+0x110>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d007      	beq.n	8007b08 <LL_TIM_Init+0x40>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a38      	ldr	r2, [pc, #224]	; (8007bdc <LL_TIM_Init+0x114>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d003      	beq.n	8007b08 <LL_TIM_Init+0x40>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a37      	ldr	r2, [pc, #220]	; (8007be0 <LL_TIM_Init+0x118>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d106      	bne.n	8007b16 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a2d      	ldr	r2, [pc, #180]	; (8007bd0 <LL_TIM_Init+0x108>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d01f      	beq.n	8007b5e <LL_TIM_Init+0x96>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b24:	d01b      	beq.n	8007b5e <LL_TIM_Init+0x96>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a2a      	ldr	r2, [pc, #168]	; (8007bd4 <LL_TIM_Init+0x10c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d017      	beq.n	8007b5e <LL_TIM_Init+0x96>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a29      	ldr	r2, [pc, #164]	; (8007bd8 <LL_TIM_Init+0x110>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <LL_TIM_Init+0x96>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a28      	ldr	r2, [pc, #160]	; (8007bdc <LL_TIM_Init+0x114>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d00f      	beq.n	8007b5e <LL_TIM_Init+0x96>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a27      	ldr	r2, [pc, #156]	; (8007be0 <LL_TIM_Init+0x118>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d00b      	beq.n	8007b5e <LL_TIM_Init+0x96>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a26      	ldr	r2, [pc, #152]	; (8007be4 <LL_TIM_Init+0x11c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d007      	beq.n	8007b5e <LL_TIM_Init+0x96>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a25      	ldr	r2, [pc, #148]	; (8007be8 <LL_TIM_Init+0x120>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d003      	beq.n	8007b5e <LL_TIM_Init+0x96>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a24      	ldr	r2, [pc, #144]	; (8007bec <LL_TIM_Init+0x124>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d106      	bne.n	8007b6c <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7ff ff79 	bl	8007a70 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff ff65 	bl	8007a54 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a10      	ldr	r2, [pc, #64]	; (8007bd0 <LL_TIM_Init+0x108>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d00f      	beq.n	8007bb2 <LL_TIM_Init+0xea>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a12      	ldr	r2, [pc, #72]	; (8007be0 <LL_TIM_Init+0x118>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d00b      	beq.n	8007bb2 <LL_TIM_Init+0xea>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a11      	ldr	r2, [pc, #68]	; (8007be4 <LL_TIM_Init+0x11c>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d007      	beq.n	8007bb2 <LL_TIM_Init+0xea>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a10      	ldr	r2, [pc, #64]	; (8007be8 <LL_TIM_Init+0x120>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d003      	beq.n	8007bb2 <LL_TIM_Init+0xea>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a0f      	ldr	r2, [pc, #60]	; (8007bec <LL_TIM_Init+0x124>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d105      	bne.n	8007bbe <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff ff67 	bl	8007a8c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff ff72 	bl	8007aa8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	40012c00 	.word	0x40012c00
 8007bd4:	40000400 	.word	0x40000400
 8007bd8:	40000800 	.word	0x40000800
 8007bdc:	40000c00 	.word	0x40000c00
 8007be0:	40013400 	.word	0x40013400
 8007be4:	40014000 	.word	0x40014000
 8007be8:	40014400 	.word	0x40014400
 8007bec:	40014800 	.word	0x40014800

08007bf0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007bf4:	4904      	ldr	r1, [pc, #16]	; (8007c08 <MX_FATFS_Init+0x18>)
 8007bf6:	4805      	ldr	r0, [pc, #20]	; (8007c0c <MX_FATFS_Init+0x1c>)
 8007bf8:	f003 fed6 	bl	800b9a8 <FATFS_LinkDriver>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	461a      	mov	r2, r3
 8007c00:	4b03      	ldr	r3, [pc, #12]	; (8007c10 <MX_FATFS_Init+0x20>)
 8007c02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007c04:	bf00      	nop
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20005c38 	.word	0x20005c38
 8007c0c:	20000024 	.word	0x20000024
 8007c10:	20005c34 	.word	0x20005c34

08007c14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007c14:	b480      	push	{r7}
 8007c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007c18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c2e:	4804      	ldr	r0, [pc, #16]	; (8007c40 <SELECT+0x1c>)
 8007c30:	f7fb fdfa 	bl	8003828 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8007c34:	2001      	movs	r0, #1
 8007c36:	f7fa fcdd 	bl	80025f4 <HAL_Delay>
}
 8007c3a:	bf00      	nop
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	48000400 	.word	0x48000400

08007c44 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c4e:	4804      	ldr	r0, [pc, #16]	; (8007c60 <DESELECT+0x1c>)
 8007c50:	f7fb fdea 	bl	8003828 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8007c54:	2001      	movs	r0, #1
 8007c56:	f7fa fccd 	bl	80025f4 <HAL_Delay>
}
 8007c5a:	bf00      	nop
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	48000400 	.word	0x48000400

08007c64 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8007c6e:	bf00      	nop
 8007c70:	4b08      	ldr	r3, [pc, #32]	; (8007c94 <SPI_TxByte+0x30>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d1f8      	bne.n	8007c70 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8007c7e:	1df9      	adds	r1, r7, #7
 8007c80:	2364      	movs	r3, #100	; 0x64
 8007c82:	2201      	movs	r2, #1
 8007c84:	4803      	ldr	r0, [pc, #12]	; (8007c94 <SPI_TxByte+0x30>)
 8007c86:	f7fd f9c2 	bl	800500e <HAL_SPI_Transmit>
}
 8007c8a:	bf00      	nop
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20000198 	.word	0x20000198

08007c98 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8007ca4:	bf00      	nop
 8007ca6:	4b08      	ldr	r3, [pc, #32]	; (8007cc8 <SPI_TxBuffer+0x30>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d1f8      	bne.n	8007ca6 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8007cb4:	887a      	ldrh	r2, [r7, #2]
 8007cb6:	2364      	movs	r3, #100	; 0x64
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	4803      	ldr	r0, [pc, #12]	; (8007cc8 <SPI_TxBuffer+0x30>)
 8007cbc:	f7fd f9a7 	bl	800500e <HAL_SPI_Transmit>
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20000198 	.word	0x20000198

08007ccc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8007cd2:	23ff      	movs	r3, #255	; 0xff
 8007cd4:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8007cd6:	bf00      	nop
 8007cd8:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <SPI_RxByte+0x34>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d1f8      	bne.n	8007cd8 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8007ce6:	1dba      	adds	r2, r7, #6
 8007ce8:	1df9      	adds	r1, r7, #7
 8007cea:	2364      	movs	r3, #100	; 0x64
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4803      	ldr	r0, [pc, #12]	; (8007d00 <SPI_RxByte+0x34>)
 8007cf2:	f7fd fb01 	bl	80052f8 <HAL_SPI_TransmitReceive>

  return data;
 8007cf6:	79bb      	ldrb	r3, [r7, #6]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	20000198 	.word	0x20000198

08007d04 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8007d0c:	f7ff ffde 	bl	8007ccc <SPI_RxByte>
 8007d10:	4603      	mov	r3, r0
 8007d12:	461a      	mov	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	701a      	strb	r2, [r3, #0]
}
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8007d26:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <SD_ReadyWait+0x30>)
 8007d28:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007d2c:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8007d2e:	f7ff ffcd 	bl	8007ccc <SPI_RxByte>
 8007d32:	4603      	mov	r3, r0
 8007d34:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8007d36:	79fb      	ldrb	r3, [r7, #7]
 8007d38:	2bff      	cmp	r3, #255	; 0xff
 8007d3a:	d003      	beq.n	8007d44 <SD_ReadyWait+0x24>
 8007d3c:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <SD_ReadyWait+0x30>)
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1f4      	bne.n	8007d2e <SD_ReadyWait+0xe>

  return res;
 8007d44:	79fb      	ldrb	r3, [r7, #7]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20005c3e 	.word	0x20005c3e

08007d54 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8007d5a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8007d60:	f7ff ff70 	bl	8007c44 <DESELECT>
  for(int i = 0; i < 10; i++)
 8007d64:	2300      	movs	r3, #0
 8007d66:	60bb      	str	r3, [r7, #8]
 8007d68:	e005      	b.n	8007d76 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8007d6a:	20ff      	movs	r0, #255	; 0xff
 8007d6c:	f7ff ff7a 	bl	8007c64 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	3301      	adds	r3, #1
 8007d74:	60bb      	str	r3, [r7, #8]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b09      	cmp	r3, #9
 8007d7a:	ddf6      	ble.n	8007d6a <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8007d7c:	f7ff ff52 	bl	8007c24 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8007d80:	2340      	movs	r3, #64	; 0x40
 8007d82:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8007d84:	2300      	movs	r3, #0
 8007d86:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8007d94:	2395      	movs	r3, #149	; 0x95
 8007d96:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8007d98:	463b      	mov	r3, r7
 8007d9a:	2106      	movs	r1, #6
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff ff7b 	bl	8007c98 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8007da2:	e002      	b.n	8007daa <SD_PowerOn+0x56>
  {
    cnt--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8007daa:	f7ff ff8f 	bl	8007ccc <SPI_RxByte>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d002      	beq.n	8007dba <SD_PowerOn+0x66>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1f4      	bne.n	8007da4 <SD_PowerOn+0x50>
  }

  DESELECT();
 8007dba:	f7ff ff43 	bl	8007c44 <DESELECT>
  SPI_TxByte(0XFF);
 8007dbe:	20ff      	movs	r0, #255	; 0xff
 8007dc0:	f7ff ff50 	bl	8007c64 <SPI_TxByte>

  PowerFlag = 1;
 8007dc4:	4b03      	ldr	r3, [pc, #12]	; (8007dd4 <SD_PowerOn+0x80>)
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	701a      	strb	r2, [r3, #0]
}
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20005c41 	.word	0x20005c41

08007dd8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8007ddc:	4b03      	ldr	r3, [pc, #12]	; (8007dec <SD_PowerOff+0x14>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	701a      	strb	r2, [r3, #0]
}
 8007de2:	bf00      	nop
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	20005c41 	.word	0x20005c41

08007df0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
  return PowerFlag;
 8007df4:	4b03      	ldr	r3, [pc, #12]	; (8007e04 <SD_CheckPower+0x14>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20005c41 	.word	0x20005c41

08007e08 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8007e12:	4b13      	ldr	r3, [pc, #76]	; (8007e60 <SD_RxDataBlock+0x58>)
 8007e14:	22c8      	movs	r2, #200	; 0xc8
 8007e16:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8007e18:	f7ff ff58 	bl	8007ccc <SPI_RxByte>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	2bff      	cmp	r3, #255	; 0xff
 8007e24:	d103      	bne.n	8007e2e <SD_RxDataBlock+0x26>
 8007e26:	4b0e      	ldr	r3, [pc, #56]	; (8007e60 <SD_RxDataBlock+0x58>)
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1f4      	bne.n	8007e18 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	2bfe      	cmp	r3, #254	; 0xfe
 8007e32:	d001      	beq.n	8007e38 <SD_RxDataBlock+0x30>
 8007e34:	2300      	movs	r3, #0
 8007e36:	e00f      	b.n	8007e58 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	607a      	str	r2, [r7, #4]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff ff60 	bl	8007d04 <SPI_RxBytePtr>
  } while(len--);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	1e5a      	subs	r2, r3, #1
 8007e48:	603a      	str	r2, [r7, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1f4      	bne.n	8007e38 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8007e4e:	f7ff ff3d 	bl	8007ccc <SPI_RxByte>
  SPI_RxByte();
 8007e52:	f7ff ff3b 	bl	8007ccc <SPI_RxByte>

  return TRUE;
 8007e56:	2301      	movs	r3, #1
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20005c3c 	.word	0x20005c3c

08007e64 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8007e74:	f7ff ff54 	bl	8007d20 <SD_ReadyWait>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2bff      	cmp	r3, #255	; 0xff
 8007e7c:	d001      	beq.n	8007e82 <SD_TxDataBlock+0x1e>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e02f      	b.n	8007ee2 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7ff feed 	bl	8007c64 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	2bfd      	cmp	r3, #253	; 0xfd
 8007e8e:	d020      	beq.n	8007ed2 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8007e90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7ff feff 	bl	8007c98 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8007e9a:	f7ff ff17 	bl	8007ccc <SPI_RxByte>
    SPI_RxByte();
 8007e9e:	f7ff ff15 	bl	8007ccc <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8007ea2:	e00b      	b.n	8007ebc <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8007ea4:	f7ff ff12 	bl	8007ccc <SPI_RxByte>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	f003 031f 	and.w	r3, r3, #31
 8007eb2:	2b05      	cmp	r3, #5
 8007eb4:	d006      	beq.n	8007ec4 <SD_TxDataBlock+0x60>
      i++;
 8007eb6:	7bbb      	ldrb	r3, [r7, #14]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	2b40      	cmp	r3, #64	; 0x40
 8007ec0:	d9f0      	bls.n	8007ea4 <SD_TxDataBlock+0x40>
 8007ec2:	e000      	b.n	8007ec6 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8007ec4:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8007ec6:	bf00      	nop
 8007ec8:	f7ff ff00 	bl	8007ccc <SPI_RxByte>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0fa      	beq.n	8007ec8 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
 8007ed4:	f003 031f 	and.w	r3, r3, #31
 8007ed8:	2b05      	cmp	r3, #5
 8007eda:	d101      	bne.n	8007ee0 <SD_TxDataBlock+0x7c>
 8007edc:	2301      	movs	r3, #1
 8007ede:	e000      	b.n	8007ee2 <SD_TxDataBlock+0x7e>

  return FALSE;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	6039      	str	r1, [r7, #0]
 8007ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8007ef6:	f7ff ff13 	bl	8007d20 <SD_ReadyWait>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2bff      	cmp	r3, #255	; 0xff
 8007efe:	d001      	beq.n	8007f04 <SD_SendCmd+0x1a>
 8007f00:	23ff      	movs	r3, #255	; 0xff
 8007f02:	e042      	b.n	8007f8a <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8007f04:	79fb      	ldrb	r3, [r7, #7]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff feac 	bl	8007c64 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	0e1b      	lsrs	r3, r3, #24
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff fea6 	bl	8007c64 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	0c1b      	lsrs	r3, r3, #16
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7ff fea0 	bl	8007c64 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	0a1b      	lsrs	r3, r3, #8
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff fe9a 	bl	8007c64 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff fe95 	bl	8007c64 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8007f3a:	79fb      	ldrb	r3, [r7, #7]
 8007f3c:	2b40      	cmp	r3, #64	; 0x40
 8007f3e:	d102      	bne.n	8007f46 <SD_SendCmd+0x5c>
 8007f40:	2395      	movs	r3, #149	; 0x95
 8007f42:	73fb      	strb	r3, [r7, #15]
 8007f44:	e007      	b.n	8007f56 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	2b48      	cmp	r3, #72	; 0x48
 8007f4a:	d102      	bne.n	8007f52 <SD_SendCmd+0x68>
 8007f4c:	2387      	movs	r3, #135	; 0x87
 8007f4e:	73fb      	strb	r3, [r7, #15]
 8007f50:	e001      	b.n	8007f56 <SD_SendCmd+0x6c>
  else crc = 1;
 8007f52:	2301      	movs	r3, #1
 8007f54:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff fe83 	bl	8007c64 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8007f5e:	79fb      	ldrb	r3, [r7, #7]
 8007f60:	2b4c      	cmp	r3, #76	; 0x4c
 8007f62:	d101      	bne.n	8007f68 <SD_SendCmd+0x7e>
 8007f64:	f7ff feb2 	bl	8007ccc <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8007f68:	230a      	movs	r3, #10
 8007f6a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8007f6c:	f7ff feae 	bl	8007ccc <SPI_RxByte>
 8007f70:	4603      	mov	r3, r0
 8007f72:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8007f74:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da05      	bge.n	8007f88 <SD_SendCmd+0x9e>
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	73bb      	strb	r3, [r7, #14]
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1f1      	bne.n	8007f6c <SD_SendCmd+0x82>

  return res;
 8007f88:	7b7b      	ldrb	r3, [r7, #13]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
	...

08007f94 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8007f94:	b590      	push	{r4, r7, lr}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <SD_disk_initialize+0x14>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e0d1      	b.n	800814c <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8007fa8:	4b6a      	ldr	r3, [pc, #424]	; (8008154 <SD_disk_initialize+0x1c0>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <SD_disk_initialize+0x2a>
 8007fb6:	4b67      	ldr	r3, [pc, #412]	; (8008154 <SD_disk_initialize+0x1c0>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	e0c6      	b.n	800814c <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8007fbe:	f7ff fec9 	bl	8007d54 <SD_PowerOn>

  /* slave select */
  SELECT();
 8007fc2:	f7ff fe2f 	bl	8007c24 <SELECT>

  /* check disk type */
  type = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8007fca:	2100      	movs	r1, #0
 8007fcc:	2040      	movs	r0, #64	; 0x40
 8007fce:	f7ff ff8c 	bl	8007eea <SD_SendCmd>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	f040 80a1 	bne.w	800811c <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8007fda:	4b5f      	ldr	r3, [pc, #380]	; (8008158 <SD_disk_initialize+0x1c4>)
 8007fdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fe0:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8007fe2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007fe6:	2048      	movs	r0, #72	; 0x48
 8007fe8:	f7ff ff7f 	bl	8007eea <SD_SendCmd>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d155      	bne.n	800809e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]
 8007ff6:	e00c      	b.n	8008012 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8007ff8:	7bfc      	ldrb	r4, [r7, #15]
 8007ffa:	f7ff fe67 	bl	8007ccc <SPI_RxByte>
 8007ffe:	4603      	mov	r3, r0
 8008000:	461a      	mov	r2, r3
 8008002:	f104 0310 	add.w	r3, r4, #16
 8008006:	443b      	add	r3, r7
 8008008:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800800c:	7bfb      	ldrb	r3, [r7, #15]
 800800e:	3301      	adds	r3, #1
 8008010:	73fb      	strb	r3, [r7, #15]
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	2b03      	cmp	r3, #3
 8008016:	d9ef      	bls.n	8007ff8 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8008018:	7abb      	ldrb	r3, [r7, #10]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d17e      	bne.n	800811c <SD_disk_initialize+0x188>
 800801e:	7afb      	ldrb	r3, [r7, #11]
 8008020:	2baa      	cmp	r3, #170	; 0xaa
 8008022:	d17b      	bne.n	800811c <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8008024:	2100      	movs	r1, #0
 8008026:	2077      	movs	r0, #119	; 0x77
 8008028:	f7ff ff5f 	bl	8007eea <SD_SendCmd>
 800802c:	4603      	mov	r3, r0
 800802e:	2b01      	cmp	r3, #1
 8008030:	d807      	bhi.n	8008042 <SD_disk_initialize+0xae>
 8008032:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008036:	2069      	movs	r0, #105	; 0x69
 8008038:	f7ff ff57 	bl	8007eea <SD_SendCmd>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d004      	beq.n	800804c <SD_disk_initialize+0xb8>
        } while (Timer1);
 8008042:	4b45      	ldr	r3, [pc, #276]	; (8008158 <SD_disk_initialize+0x1c4>)
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1ec      	bne.n	8008024 <SD_disk_initialize+0x90>
 800804a:	e000      	b.n	800804e <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800804c:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800804e:	4b42      	ldr	r3, [pc, #264]	; (8008158 <SD_disk_initialize+0x1c4>)
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d062      	beq.n	800811c <SD_disk_initialize+0x188>
 8008056:	2100      	movs	r1, #0
 8008058:	207a      	movs	r0, #122	; 0x7a
 800805a:	f7ff ff46 	bl	8007eea <SD_SendCmd>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d15b      	bne.n	800811c <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]
 8008068:	e00c      	b.n	8008084 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800806a:	7bfc      	ldrb	r4, [r7, #15]
 800806c:	f7ff fe2e 	bl	8007ccc <SPI_RxByte>
 8008070:	4603      	mov	r3, r0
 8008072:	461a      	mov	r2, r3
 8008074:	f104 0310 	add.w	r3, r4, #16
 8008078:	443b      	add	r3, r7
 800807a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	3301      	adds	r3, #1
 8008082:	73fb      	strb	r3, [r7, #15]
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	2b03      	cmp	r3, #3
 8008088:	d9ef      	bls.n	800806a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800808a:	7a3b      	ldrb	r3, [r7, #8]
 800808c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <SD_disk_initialize+0x104>
 8008094:	230c      	movs	r3, #12
 8008096:	e000      	b.n	800809a <SD_disk_initialize+0x106>
 8008098:	2304      	movs	r3, #4
 800809a:	73bb      	strb	r3, [r7, #14]
 800809c:	e03e      	b.n	800811c <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800809e:	2100      	movs	r1, #0
 80080a0:	2077      	movs	r0, #119	; 0x77
 80080a2:	f7ff ff22 	bl	8007eea <SD_SendCmd>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d808      	bhi.n	80080be <SD_disk_initialize+0x12a>
 80080ac:	2100      	movs	r1, #0
 80080ae:	2069      	movs	r0, #105	; 0x69
 80080b0:	f7ff ff1b 	bl	8007eea <SD_SendCmd>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d801      	bhi.n	80080be <SD_disk_initialize+0x12a>
 80080ba:	2302      	movs	r3, #2
 80080bc:	e000      	b.n	80080c0 <SD_disk_initialize+0x12c>
 80080be:	2301      	movs	r3, #1
 80080c0:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d10e      	bne.n	80080e6 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80080c8:	2100      	movs	r1, #0
 80080ca:	2077      	movs	r0, #119	; 0x77
 80080cc:	f7ff ff0d 	bl	8007eea <SD_SendCmd>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d80e      	bhi.n	80080f4 <SD_disk_initialize+0x160>
 80080d6:	2100      	movs	r1, #0
 80080d8:	2069      	movs	r0, #105	; 0x69
 80080da:	f7ff ff06 	bl	8007eea <SD_SendCmd>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d107      	bne.n	80080f4 <SD_disk_initialize+0x160>
 80080e4:	e00c      	b.n	8008100 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80080e6:	2100      	movs	r1, #0
 80080e8:	2041      	movs	r0, #65	; 0x41
 80080ea:	f7ff fefe 	bl	8007eea <SD_SendCmd>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d004      	beq.n	80080fe <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 80080f4:	4b18      	ldr	r3, [pc, #96]	; (8008158 <SD_disk_initialize+0x1c4>)
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e2      	bne.n	80080c2 <SD_disk_initialize+0x12e>
 80080fc:	e000      	b.n	8008100 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80080fe:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8008100:	4b15      	ldr	r3, [pc, #84]	; (8008158 <SD_disk_initialize+0x1c4>)
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d007      	beq.n	8008118 <SD_disk_initialize+0x184>
 8008108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800810c:	2050      	movs	r0, #80	; 0x50
 800810e:	f7ff feec 	bl	8007eea <SD_SendCmd>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <SD_disk_initialize+0x188>
 8008118:	2300      	movs	r3, #0
 800811a:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 800811c:	4a0f      	ldr	r2, [pc, #60]	; (800815c <SD_disk_initialize+0x1c8>)
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8008122:	f7ff fd8f 	bl	8007c44 <DESELECT>
  SPI_RxByte();
 8008126:	f7ff fdd1 	bl	8007ccc <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d008      	beq.n	8008142 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8008130:	4b08      	ldr	r3, [pc, #32]	; (8008154 <SD_disk_initialize+0x1c0>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	f023 0301 	bic.w	r3, r3, #1
 800813a:	b2da      	uxtb	r2, r3
 800813c:	4b05      	ldr	r3, [pc, #20]	; (8008154 <SD_disk_initialize+0x1c0>)
 800813e:	701a      	strb	r2, [r3, #0]
 8008140:	e001      	b.n	8008146 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8008142:	f7ff fe49 	bl	8007dd8 <SD_PowerOff>
  }

  return Stat;
 8008146:	4b03      	ldr	r3, [pc, #12]	; (8008154 <SD_disk_initialize+0x1c0>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	b2db      	uxtb	r3, r3
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	bd90      	pop	{r4, r7, pc}
 8008154:	20000021 	.word	0x20000021
 8008158:	20005c3c 	.word	0x20005c3c
 800815c:	20005c40 	.word	0x20005c40

08008160 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	4603      	mov	r3, r0
 8008168:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <SD_disk_status+0x14>
 8008170:	2301      	movs	r3, #1
 8008172:	e002      	b.n	800817a <SD_disk_status+0x1a>
  return Stat;
 8008174:	4b04      	ldr	r3, [pc, #16]	; (8008188 <SD_disk_status+0x28>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	b2db      	uxtb	r3, r3
}
 800817a:	4618      	mov	r0, r3
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	20000021 	.word	0x20000021

0800818c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d102      	bne.n	80081a8 <SD_disk_read+0x1c>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <SD_disk_read+0x20>
 80081a8:	2304      	movs	r3, #4
 80081aa:	e051      	b.n	8008250 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80081ac:	4b2a      	ldr	r3, [pc, #168]	; (8008258 <SD_disk_read+0xcc>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <SD_disk_read+0x32>
 80081ba:	2303      	movs	r3, #3
 80081bc:	e048      	b.n	8008250 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80081be:	4b27      	ldr	r3, [pc, #156]	; (800825c <SD_disk_read+0xd0>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	f003 0304 	and.w	r3, r3, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d102      	bne.n	80081d0 <SD_disk_read+0x44>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	025b      	lsls	r3, r3, #9
 80081ce:	607b      	str	r3, [r7, #4]

  SELECT();
 80081d0:	f7ff fd28 	bl	8007c24 <SELECT>

  if (count == 1)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d111      	bne.n	80081fe <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	2051      	movs	r0, #81	; 0x51
 80081de:	f7ff fe84 	bl	8007eea <SD_SendCmd>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d129      	bne.n	800823c <SD_disk_read+0xb0>
 80081e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081ec:	68b8      	ldr	r0, [r7, #8]
 80081ee:	f7ff fe0b 	bl	8007e08 <SD_RxDataBlock>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d021      	beq.n	800823c <SD_disk_read+0xb0>
 80081f8:	2300      	movs	r3, #0
 80081fa:	603b      	str	r3, [r7, #0]
 80081fc:	e01e      	b.n	800823c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80081fe:	6879      	ldr	r1, [r7, #4]
 8008200:	2052      	movs	r0, #82	; 0x52
 8008202:	f7ff fe72 	bl	8007eea <SD_SendCmd>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d117      	bne.n	800823c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800820c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008210:	68b8      	ldr	r0, [r7, #8]
 8008212:	f7ff fdf9 	bl	8007e08 <SD_RxDataBlock>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00a      	beq.n	8008232 <SD_disk_read+0xa6>
        buff += 512;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008222:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	3b01      	subs	r3, #1
 8008228:	603b      	str	r3, [r7, #0]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1ed      	bne.n	800820c <SD_disk_read+0x80>
 8008230:	e000      	b.n	8008234 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8008232:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8008234:	2100      	movs	r1, #0
 8008236:	204c      	movs	r0, #76	; 0x4c
 8008238:	f7ff fe57 	bl	8007eea <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800823c:	f7ff fd02 	bl	8007c44 <DESELECT>
  SPI_RxByte();
 8008240:	f7ff fd44 	bl	8007ccc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	bf14      	ite	ne
 800824a:	2301      	movne	r3, #1
 800824c:	2300      	moveq	r3, #0
 800824e:	b2db      	uxtb	r3, r3
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000021 	.word	0x20000021
 800825c:	20005c40 	.word	0x20005c40

08008260 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
 800826a:	603b      	str	r3, [r7, #0]
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d102      	bne.n	800827c <SD_disk_write+0x1c>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <SD_disk_write+0x20>
 800827c:	2304      	movs	r3, #4
 800827e:	e06b      	b.n	8008358 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008280:	4b37      	ldr	r3, [pc, #220]	; (8008360 <SD_disk_write+0x100>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <SD_disk_write+0x32>
 800828e:	2303      	movs	r3, #3
 8008290:	e062      	b.n	8008358 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8008292:	4b33      	ldr	r3, [pc, #204]	; (8008360 <SD_disk_write+0x100>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <SD_disk_write+0x44>
 80082a0:	2302      	movs	r3, #2
 80082a2:	e059      	b.n	8008358 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80082a4:	4b2f      	ldr	r3, [pc, #188]	; (8008364 <SD_disk_write+0x104>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <SD_disk_write+0x56>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	025b      	lsls	r3, r3, #9
 80082b4:	607b      	str	r3, [r7, #4]

  SELECT();
 80082b6:	f7ff fcb5 	bl	8007c24 <SELECT>

  if (count == 1)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d110      	bne.n	80082e2 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	2058      	movs	r0, #88	; 0x58
 80082c4:	f7ff fe11 	bl	8007eea <SD_SendCmd>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d13a      	bne.n	8008344 <SD_disk_write+0xe4>
 80082ce:	21fe      	movs	r1, #254	; 0xfe
 80082d0:	68b8      	ldr	r0, [r7, #8]
 80082d2:	f7ff fdc7 	bl	8007e64 <SD_TxDataBlock>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d033      	beq.n	8008344 <SD_disk_write+0xe4>
      count = 0;
 80082dc:	2300      	movs	r3, #0
 80082de:	603b      	str	r3, [r7, #0]
 80082e0:	e030      	b.n	8008344 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80082e2:	4b20      	ldr	r3, [pc, #128]	; (8008364 <SD_disk_write+0x104>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80082ee:	2100      	movs	r1, #0
 80082f0:	2077      	movs	r0, #119	; 0x77
 80082f2:	f7ff fdfa 	bl	8007eea <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	2057      	movs	r0, #87	; 0x57
 80082fa:	f7ff fdf6 	bl	8007eea <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	2059      	movs	r0, #89	; 0x59
 8008302:	f7ff fdf2 	bl	8007eea <SD_SendCmd>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d11b      	bne.n	8008344 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800830c:	21fc      	movs	r1, #252	; 0xfc
 800830e:	68b8      	ldr	r0, [r7, #8]
 8008310:	f7ff fda8 	bl	8007e64 <SD_TxDataBlock>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <SD_disk_write+0xd0>
        buff += 512;
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008320:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	3b01      	subs	r3, #1
 8008326:	603b      	str	r3, [r7, #0]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1ee      	bne.n	800830c <SD_disk_write+0xac>
 800832e:	e000      	b.n	8008332 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8008330:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8008332:	21fd      	movs	r1, #253	; 0xfd
 8008334:	2000      	movs	r0, #0
 8008336:	f7ff fd95 	bl	8007e64 <SD_TxDataBlock>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <SD_disk_write+0xe4>
      {
        count = 1;
 8008340:	2301      	movs	r3, #1
 8008342:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8008344:	f7ff fc7e 	bl	8007c44 <DESELECT>
  SPI_RxByte();
 8008348:	f7ff fcc0 	bl	8007ccc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	bf14      	ite	ne
 8008352:	2301      	movne	r3, #1
 8008354:	2300      	moveq	r3, #0
 8008356:	b2db      	uxtb	r3, r3
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20000021 	.word	0x20000021
 8008364:	20005c40 	.word	0x20005c40

08008368 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8008368:	b590      	push	{r4, r7, lr}
 800836a:	b08b      	sub	sp, #44	; 0x2c
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	603a      	str	r2, [r7, #0]
 8008372:	71fb      	strb	r3, [r7, #7]
 8008374:	460b      	mov	r3, r1
 8008376:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <SD_disk_ioctl+0x1e>
 8008382:	2304      	movs	r3, #4
 8008384:	e115      	b.n	80085b2 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 800838c:	79bb      	ldrb	r3, [r7, #6]
 800838e:	2b05      	cmp	r3, #5
 8008390:	d124      	bne.n	80083dc <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b02      	cmp	r3, #2
 8008398:	d012      	beq.n	80083c0 <SD_disk_ioctl+0x58>
 800839a:	2b02      	cmp	r3, #2
 800839c:	dc1a      	bgt.n	80083d4 <SD_disk_ioctl+0x6c>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d002      	beq.n	80083a8 <SD_disk_ioctl+0x40>
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d006      	beq.n	80083b4 <SD_disk_ioctl+0x4c>
 80083a6:	e015      	b.n	80083d4 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80083a8:	f7ff fd16 	bl	8007dd8 <SD_PowerOff>
      res = RES_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80083b2:	e0fc      	b.n	80085ae <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 80083b4:	f7ff fcce 	bl	8007d54 <SD_PowerOn>
      res = RES_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80083be:	e0f6      	b.n	80085ae <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	1c5c      	adds	r4, r3, #1
 80083c4:	f7ff fd14 	bl	8007df0 <SD_CheckPower>
 80083c8:	4603      	mov	r3, r0
 80083ca:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80083cc:	2300      	movs	r3, #0
 80083ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80083d2:	e0ec      	b.n	80085ae <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 80083d4:	2304      	movs	r3, #4
 80083d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083da:	e0e8      	b.n	80085ae <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80083dc:	4b77      	ldr	r3, [pc, #476]	; (80085bc <SD_disk_ioctl+0x254>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <SD_disk_ioctl+0x86>
 80083ea:	2303      	movs	r3, #3
 80083ec:	e0e1      	b.n	80085b2 <SD_disk_ioctl+0x24a>

    SELECT();
 80083ee:	f7ff fc19 	bl	8007c24 <SELECT>

    switch (ctrl)
 80083f2:	79bb      	ldrb	r3, [r7, #6]
 80083f4:	2b0d      	cmp	r3, #13
 80083f6:	f200 80cb 	bhi.w	8008590 <SD_disk_ioctl+0x228>
 80083fa:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <SD_disk_ioctl+0x98>)
 80083fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008400:	080084fb 	.word	0x080084fb
 8008404:	08008439 	.word	0x08008439
 8008408:	080084eb 	.word	0x080084eb
 800840c:	08008591 	.word	0x08008591
 8008410:	08008591 	.word	0x08008591
 8008414:	08008591 	.word	0x08008591
 8008418:	08008591 	.word	0x08008591
 800841c:	08008591 	.word	0x08008591
 8008420:	08008591 	.word	0x08008591
 8008424:	08008591 	.word	0x08008591
 8008428:	08008591 	.word	0x08008591
 800842c:	0800850d 	.word	0x0800850d
 8008430:	08008531 	.word	0x08008531
 8008434:	08008555 	.word	0x08008555
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8008438:	2100      	movs	r1, #0
 800843a:	2049      	movs	r0, #73	; 0x49
 800843c:	f7ff fd55 	bl	8007eea <SD_SendCmd>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	f040 80a8 	bne.w	8008598 <SD_disk_ioctl+0x230>
 8008448:	f107 030c 	add.w	r3, r7, #12
 800844c:	2110      	movs	r1, #16
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff fcda 	bl	8007e08 <SD_RxDataBlock>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 809e 	beq.w	8008598 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 800845c:	7b3b      	ldrb	r3, [r7, #12]
 800845e:	099b      	lsrs	r3, r3, #6
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b01      	cmp	r3, #1
 8008464:	d10e      	bne.n	8008484 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8008466:	7d7b      	ldrb	r3, [r7, #21]
 8008468:	b29a      	uxth	r2, r3
 800846a:	7d3b      	ldrb	r3, [r7, #20]
 800846c:	b29b      	uxth	r3, r3
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	b29b      	uxth	r3, r3
 8008472:	4413      	add	r3, r2
 8008474:	b29b      	uxth	r3, r3
 8008476:	3301      	adds	r3, #1
 8008478:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800847a:	8bfb      	ldrh	r3, [r7, #30]
 800847c:	029a      	lsls	r2, r3, #10
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	e02e      	b.n	80084e2 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008484:	7c7b      	ldrb	r3, [r7, #17]
 8008486:	f003 030f 	and.w	r3, r3, #15
 800848a:	b2da      	uxtb	r2, r3
 800848c:	7dbb      	ldrb	r3, [r7, #22]
 800848e:	09db      	lsrs	r3, r3, #7
 8008490:	b2db      	uxtb	r3, r3
 8008492:	4413      	add	r3, r2
 8008494:	b2da      	uxtb	r2, r3
 8008496:	7d7b      	ldrb	r3, [r7, #21]
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	b2db      	uxtb	r3, r3
 800849c:	f003 0306 	and.w	r3, r3, #6
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	4413      	add	r3, r2
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	3302      	adds	r3, #2
 80084a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80084ac:	7d3b      	ldrb	r3, [r7, #20]
 80084ae:	099b      	lsrs	r3, r3, #6
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	7cfb      	ldrb	r3, [r7, #19]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	4413      	add	r3, r2
 80084be:	b29a      	uxth	r2, r3
 80084c0:	7cbb      	ldrb	r3, [r7, #18]
 80084c2:	029b      	lsls	r3, r3, #10
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	4413      	add	r3, r2
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	3301      	adds	r3, #1
 80084d2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80084d4:	8bfa      	ldrh	r2, [r7, #30]
 80084d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80084da:	3b09      	subs	r3, #9
 80084dc:	409a      	lsls	r2, r3
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80084e8:	e056      	b.n	8008598 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084f0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80084f8:	e055      	b.n	80085a6 <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80084fa:	f7ff fc11 	bl	8007d20 <SD_ReadyWait>
 80084fe:	4603      	mov	r3, r0
 8008500:	2bff      	cmp	r3, #255	; 0xff
 8008502:	d14b      	bne.n	800859c <SD_disk_ioctl+0x234>
 8008504:	2300      	movs	r3, #0
 8008506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800850a:	e047      	b.n	800859c <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800850c:	2100      	movs	r1, #0
 800850e:	2049      	movs	r0, #73	; 0x49
 8008510:	f7ff fceb 	bl	8007eea <SD_SendCmd>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d142      	bne.n	80085a0 <SD_disk_ioctl+0x238>
 800851a:	2110      	movs	r1, #16
 800851c:	6a38      	ldr	r0, [r7, #32]
 800851e:	f7ff fc73 	bl	8007e08 <SD_RxDataBlock>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d03b      	beq.n	80085a0 <SD_disk_ioctl+0x238>
 8008528:	2300      	movs	r3, #0
 800852a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800852e:	e037      	b.n	80085a0 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8008530:	2100      	movs	r1, #0
 8008532:	204a      	movs	r0, #74	; 0x4a
 8008534:	f7ff fcd9 	bl	8007eea <SD_SendCmd>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d132      	bne.n	80085a4 <SD_disk_ioctl+0x23c>
 800853e:	2110      	movs	r1, #16
 8008540:	6a38      	ldr	r0, [r7, #32]
 8008542:	f7ff fc61 	bl	8007e08 <SD_RxDataBlock>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d02b      	beq.n	80085a4 <SD_disk_ioctl+0x23c>
 800854c:	2300      	movs	r3, #0
 800854e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008552:	e027      	b.n	80085a4 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8008554:	2100      	movs	r1, #0
 8008556:	207a      	movs	r0, #122	; 0x7a
 8008558:	f7ff fcc7 	bl	8007eea <SD_SendCmd>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d116      	bne.n	8008590 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8008562:	2300      	movs	r3, #0
 8008564:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008568:	e00b      	b.n	8008582 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 800856a:	6a3c      	ldr	r4, [r7, #32]
 800856c:	1c63      	adds	r3, r4, #1
 800856e:	623b      	str	r3, [r7, #32]
 8008570:	f7ff fbac 	bl	8007ccc <SPI_RxByte>
 8008574:	4603      	mov	r3, r0
 8008576:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8008578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800857c:	3301      	adds	r3, #1
 800857e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008582:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008586:	2b03      	cmp	r3, #3
 8008588:	d9ef      	bls.n	800856a <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8008590:	2304      	movs	r3, #4
 8008592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008596:	e006      	b.n	80085a6 <SD_disk_ioctl+0x23e>
      break;
 8008598:	bf00      	nop
 800859a:	e004      	b.n	80085a6 <SD_disk_ioctl+0x23e>
      break;
 800859c:	bf00      	nop
 800859e:	e002      	b.n	80085a6 <SD_disk_ioctl+0x23e>
      break;
 80085a0:	bf00      	nop
 80085a2:	e000      	b.n	80085a6 <SD_disk_ioctl+0x23e>
      break;
 80085a4:	bf00      	nop
    }

    DESELECT();
 80085a6:	f7ff fb4d 	bl	8007c44 <DESELECT>
    SPI_RxByte();
 80085aa:	f7ff fb8f 	bl	8007ccc <SPI_RxByte>
  }

  return res;
 80085ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	372c      	adds	r7, #44	; 0x2c
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd90      	pop	{r4, r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000021 	.word	0x20000021

080085c0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7ff fce1 	bl	8007f94 <SD_disk_initialize>
 80085d2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7ff fdb9 	bl	8008160 <SD_disk_status>
 80085ee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8008608:	7bf8      	ldrb	r0, [r7, #15]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	68b9      	ldr	r1, [r7, #8]
 8008610:	f7ff fdbc 	bl	800818c <SD_disk_read>
 8008614:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800862e:	7bf8      	ldrb	r0, [r7, #15]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	68b9      	ldr	r1, [r7, #8]
 8008636:	f7ff fe13 	bl	8008260 <SD_disk_write>
 800863a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	603a      	str	r2, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
 8008650:	460b      	mov	r3, r1
 8008652:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8008654:	79b9      	ldrb	r1, [r7, #6]
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	4618      	mov	r0, r3
 800865c:	f7ff fe84 	bl	8008368 <SD_disk_ioctl>
 8008660:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	4a08      	ldr	r2, [pc, #32]	; (800869c <disk_status+0x30>)
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	79fa      	ldrb	r2, [r7, #7]
 8008684:	4905      	ldr	r1, [pc, #20]	; (800869c <disk_status+0x30>)
 8008686:	440a      	add	r2, r1
 8008688:	7a12      	ldrb	r2, [r2, #8]
 800868a:	4610      	mov	r0, r2
 800868c:	4798      	blx	r3
 800868e:	4603      	mov	r3, r0
 8008690:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008692:	7bfb      	ldrb	r3, [r7, #15]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	20005e6c 	.word	0x20005e6c

080086a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	4603      	mov	r3, r0
 80086a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	4a0d      	ldr	r2, [pc, #52]	; (80086e8 <disk_initialize+0x48>)
 80086b2:	5cd3      	ldrb	r3, [r2, r3]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d111      	bne.n	80086dc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	4a0b      	ldr	r2, [pc, #44]	; (80086e8 <disk_initialize+0x48>)
 80086bc:	2101      	movs	r1, #1
 80086be:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80086c0:	79fb      	ldrb	r3, [r7, #7]
 80086c2:	4a09      	ldr	r2, [pc, #36]	; (80086e8 <disk_initialize+0x48>)
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	79fa      	ldrb	r2, [r7, #7]
 80086ce:	4906      	ldr	r1, [pc, #24]	; (80086e8 <disk_initialize+0x48>)
 80086d0:	440a      	add	r2, r1
 80086d2:	7a12      	ldrb	r2, [r2, #8]
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	4603      	mov	r3, r0
 80086da:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20005e6c 	.word	0x20005e6c

080086ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80086ec:	b590      	push	{r4, r7, lr}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	607a      	str	r2, [r7, #4]
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	4a0a      	ldr	r2, [pc, #40]	; (8008728 <disk_read+0x3c>)
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	689c      	ldr	r4, [r3, #8]
 8008708:	7bfb      	ldrb	r3, [r7, #15]
 800870a:	4a07      	ldr	r2, [pc, #28]	; (8008728 <disk_read+0x3c>)
 800870c:	4413      	add	r3, r2
 800870e:	7a18      	ldrb	r0, [r3, #8]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	47a0      	blx	r4
 8008718:	4603      	mov	r3, r0
 800871a:	75fb      	strb	r3, [r7, #23]
  return res;
 800871c:	7dfb      	ldrb	r3, [r7, #23]
}
 800871e:	4618      	mov	r0, r3
 8008720:	371c      	adds	r7, #28
 8008722:	46bd      	mov	sp, r7
 8008724:	bd90      	pop	{r4, r7, pc}
 8008726:	bf00      	nop
 8008728:	20005e6c 	.word	0x20005e6c

0800872c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800872c:	b590      	push	{r4, r7, lr}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	60b9      	str	r1, [r7, #8]
 8008734:	607a      	str	r2, [r7, #4]
 8008736:	603b      	str	r3, [r7, #0]
 8008738:	4603      	mov	r3, r0
 800873a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	4a0a      	ldr	r2, [pc, #40]	; (8008768 <disk_write+0x3c>)
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	68dc      	ldr	r4, [r3, #12]
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	4a07      	ldr	r2, [pc, #28]	; (8008768 <disk_write+0x3c>)
 800874c:	4413      	add	r3, r2
 800874e:	7a18      	ldrb	r0, [r3, #8]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	68b9      	ldr	r1, [r7, #8]
 8008756:	47a0      	blx	r4
 8008758:	4603      	mov	r3, r0
 800875a:	75fb      	strb	r3, [r7, #23]
  return res;
 800875c:	7dfb      	ldrb	r3, [r7, #23]
}
 800875e:	4618      	mov	r0, r3
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	bd90      	pop	{r4, r7, pc}
 8008766:	bf00      	nop
 8008768:	20005e6c 	.word	0x20005e6c

0800876c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	603a      	str	r2, [r7, #0]
 8008776:	71fb      	strb	r3, [r7, #7]
 8008778:	460b      	mov	r3, r1
 800877a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	4a09      	ldr	r2, [pc, #36]	; (80087a4 <disk_ioctl+0x38>)
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	79fa      	ldrb	r2, [r7, #7]
 800878a:	4906      	ldr	r1, [pc, #24]	; (80087a4 <disk_ioctl+0x38>)
 800878c:	440a      	add	r2, r1
 800878e:	7a10      	ldrb	r0, [r2, #8]
 8008790:	79b9      	ldrb	r1, [r7, #6]
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	4798      	blx	r3
 8008796:	4603      	mov	r3, r0
 8008798:	73fb      	strb	r3, [r7, #15]
  return res;
 800879a:	7bfb      	ldrb	r3, [r7, #15]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20005e6c 	.word	0x20005e6c

080087a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3301      	adds	r3, #1
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80087b8:	89fb      	ldrh	r3, [r7, #14]
 80087ba:	021b      	lsls	r3, r3, #8
 80087bc:	b21a      	sxth	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	b21b      	sxth	r3, r3
 80087c4:	4313      	orrs	r3, r2
 80087c6:	b21b      	sxth	r3, r3
 80087c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80087ca:	89fb      	ldrh	r3, [r7, #14]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3303      	adds	r3, #3
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	021b      	lsls	r3, r3, #8
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	3202      	adds	r2, #2
 80087f0:	7812      	ldrb	r2, [r2, #0]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	3201      	adds	r2, #1
 80087fe:	7812      	ldrb	r2, [r2, #0]
 8008800:	4313      	orrs	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	021b      	lsls	r3, r3, #8
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	7812      	ldrb	r2, [r2, #0]
 800880c:	4313      	orrs	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008810:	68fb      	ldr	r3, [r7, #12]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	460b      	mov	r3, r1
 8008828:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	607a      	str	r2, [r7, #4]
 8008830:	887a      	ldrh	r2, [r7, #2]
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	887b      	ldrh	r3, [r7, #2]
 8008838:	0a1b      	lsrs	r3, r3, #8
 800883a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	607a      	str	r2, [r7, #4]
 8008842:	887a      	ldrh	r2, [r7, #2]
 8008844:	b2d2      	uxtb	r2, r2
 8008846:	701a      	strb	r2, [r3, #0]
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	b2d2      	uxtb	r2, r2
 8008868:	701a      	strb	r2, [r3, #0]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	0a1b      	lsrs	r3, r3, #8
 800886e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	607a      	str	r2, [r7, #4]
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	b2d2      	uxtb	r2, r2
 800887a:	701a      	strb	r2, [r3, #0]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	0a1b      	lsrs	r3, r3, #8
 8008880:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	1c5a      	adds	r2, r3, #1
 8008886:	607a      	str	r2, [r7, #4]
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	701a      	strb	r2, [r3, #0]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	0a1b      	lsrs	r3, r3, #8
 8008892:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	607a      	str	r2, [r7, #4]
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	b2d2      	uxtb	r2, r2
 800889e:	701a      	strb	r2, [r3, #0]
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00d      	beq.n	80088e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	1c53      	adds	r3, r2, #1
 80088ca:	613b      	str	r3, [r7, #16]
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	1c59      	adds	r1, r3, #1
 80088d0:	6179      	str	r1, [r7, #20]
 80088d2:	7812      	ldrb	r2, [r2, #0]
 80088d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	3b01      	subs	r3, #1
 80088da:	607b      	str	r3, [r7, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f1      	bne.n	80088c6 <mem_cpy+0x1a>
	}
}
 80088e2:	bf00      	nop
 80088e4:	371c      	adds	r7, #28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80088ee:	b480      	push	{r7}
 80088f0:	b087      	sub	sp, #28
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	1c5a      	adds	r2, r3, #1
 8008902:	617a      	str	r2, [r7, #20]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3b01      	subs	r3, #1
 800890e:	607b      	str	r3, [r7, #4]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1f3      	bne.n	80088fe <mem_set+0x10>
}
 8008916:	bf00      	nop
 8008918:	bf00      	nop
 800891a:	371c      	adds	r7, #28
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008924:	b480      	push	{r7}
 8008926:	b089      	sub	sp, #36	; 0x24
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	61fb      	str	r3, [r7, #28]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	61fa      	str	r2, [r7, #28]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	4619      	mov	r1, r3
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	61ba      	str	r2, [r7, #24]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	1acb      	subs	r3, r1, r3
 8008950:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3b01      	subs	r3, #1
 8008956:	607b      	str	r3, [r7, #4]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <mem_cmp+0x40>
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0eb      	beq.n	800893c <mem_cmp+0x18>

	return r;
 8008964:	697b      	ldr	r3, [r7, #20]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3724      	adds	r7, #36	; 0x24
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800897c:	e002      	b.n	8008984 <chk_chr+0x12>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	3301      	adds	r3, #1
 8008982:	607b      	str	r3, [r7, #4]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <chk_chr+0x26>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	461a      	mov	r2, r3
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	4293      	cmp	r3, r2
 8008996:	d1f2      	bne.n	800897e <chk_chr+0xc>
	return *str;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	781b      	ldrb	r3, [r3, #0]
}
 800899c:	4618      	mov	r0, r3
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80089b2:	2300      	movs	r3, #0
 80089b4:	60bb      	str	r3, [r7, #8]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	e029      	b.n	8008a10 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80089bc:	4a27      	ldr	r2, [pc, #156]	; (8008a5c <chk_lock+0xb4>)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	011b      	lsls	r3, r3, #4
 80089c2:	4413      	add	r3, r2
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d01d      	beq.n	8008a06 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80089ca:	4a24      	ldr	r2, [pc, #144]	; (8008a5c <chk_lock+0xb4>)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	011b      	lsls	r3, r3, #4
 80089d0:	4413      	add	r3, r2
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d116      	bne.n	8008a0a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80089dc:	4a1f      	ldr	r2, [pc, #124]	; (8008a5c <chk_lock+0xb4>)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	4413      	add	r3, r2
 80089e4:	3304      	adds	r3, #4
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d10c      	bne.n	8008a0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80089f0:	4a1a      	ldr	r2, [pc, #104]	; (8008a5c <chk_lock+0xb4>)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	4413      	add	r3, r2
 80089f8:	3308      	adds	r3, #8
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d102      	bne.n	8008a0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008a04:	e007      	b.n	8008a16 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008a06:	2301      	movs	r3, #1
 8008a08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d9d2      	bls.n	80089bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d109      	bne.n	8008a30 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d102      	bne.n	8008a28 <chk_lock+0x80>
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d101      	bne.n	8008a2c <chk_lock+0x84>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	e010      	b.n	8008a4e <chk_lock+0xa6>
 8008a2c:	2312      	movs	r3, #18
 8008a2e:	e00e      	b.n	8008a4e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d108      	bne.n	8008a48 <chk_lock+0xa0>
 8008a36:	4a09      	ldr	r2, [pc, #36]	; (8008a5c <chk_lock+0xb4>)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	011b      	lsls	r3, r3, #4
 8008a3c:	4413      	add	r3, r2
 8008a3e:	330c      	adds	r3, #12
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a46:	d101      	bne.n	8008a4c <chk_lock+0xa4>
 8008a48:	2310      	movs	r3, #16
 8008a4a:	e000      	b.n	8008a4e <chk_lock+0xa6>
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	20005c4c 	.word	0x20005c4c

08008a60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a66:	2300      	movs	r3, #0
 8008a68:	607b      	str	r3, [r7, #4]
 8008a6a:	e002      	b.n	8008a72 <enq_lock+0x12>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	607b      	str	r3, [r7, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d806      	bhi.n	8008a86 <enq_lock+0x26>
 8008a78:	4a09      	ldr	r2, [pc, #36]	; (8008aa0 <enq_lock+0x40>)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	011b      	lsls	r3, r3, #4
 8008a7e:	4413      	add	r3, r2
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1f2      	bne.n	8008a6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	bf14      	ite	ne
 8008a8c:	2301      	movne	r3, #1
 8008a8e:	2300      	moveq	r3, #0
 8008a90:	b2db      	uxtb	r3, r3
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	20005c4c 	.word	0x20005c4c

08008aa4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	e01f      	b.n	8008af4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008ab4:	4a41      	ldr	r2, [pc, #260]	; (8008bbc <inc_lock+0x118>)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	011b      	lsls	r3, r3, #4
 8008aba:	4413      	add	r3, r2
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d113      	bne.n	8008aee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008ac6:	4a3d      	ldr	r2, [pc, #244]	; (8008bbc <inc_lock+0x118>)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	011b      	lsls	r3, r3, #4
 8008acc:	4413      	add	r3, r2
 8008ace:	3304      	adds	r3, #4
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d109      	bne.n	8008aee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008ada:	4a38      	ldr	r2, [pc, #224]	; (8008bbc <inc_lock+0x118>)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	4413      	add	r3, r2
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d006      	beq.n	8008afc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3301      	adds	r3, #1
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d9dc      	bls.n	8008ab4 <inc_lock+0x10>
 8008afa:	e000      	b.n	8008afe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008afc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d132      	bne.n	8008b6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b04:	2300      	movs	r3, #0
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	e002      	b.n	8008b10 <inc_lock+0x6c>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d806      	bhi.n	8008b24 <inc_lock+0x80>
 8008b16:	4a29      	ldr	r2, [pc, #164]	; (8008bbc <inc_lock+0x118>)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	4413      	add	r3, r2
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1f2      	bne.n	8008b0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d101      	bne.n	8008b2e <inc_lock+0x8a>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e040      	b.n	8008bb0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	4922      	ldr	r1, [pc, #136]	; (8008bbc <inc_lock+0x118>)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	440b      	add	r3, r1
 8008b3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	491e      	ldr	r1, [pc, #120]	; (8008bbc <inc_lock+0x118>)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	011b      	lsls	r3, r3, #4
 8008b46:	440b      	add	r3, r1
 8008b48:	3304      	adds	r3, #4
 8008b4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	695a      	ldr	r2, [r3, #20]
 8008b50:	491a      	ldr	r1, [pc, #104]	; (8008bbc <inc_lock+0x118>)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	011b      	lsls	r3, r3, #4
 8008b56:	440b      	add	r3, r1
 8008b58:	3308      	adds	r3, #8
 8008b5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008b5c:	4a17      	ldr	r2, [pc, #92]	; (8008bbc <inc_lock+0x118>)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	4413      	add	r3, r2
 8008b64:	330c      	adds	r3, #12
 8008b66:	2200      	movs	r2, #0
 8008b68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d009      	beq.n	8008b84 <inc_lock+0xe0>
 8008b70:	4a12      	ldr	r2, [pc, #72]	; (8008bbc <inc_lock+0x118>)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	011b      	lsls	r3, r3, #4
 8008b76:	4413      	add	r3, r2
 8008b78:	330c      	adds	r3, #12
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <inc_lock+0xe0>
 8008b80:	2300      	movs	r3, #0
 8008b82:	e015      	b.n	8008bb0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d108      	bne.n	8008b9c <inc_lock+0xf8>
 8008b8a:	4a0c      	ldr	r2, [pc, #48]	; (8008bbc <inc_lock+0x118>)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	011b      	lsls	r3, r3, #4
 8008b90:	4413      	add	r3, r2
 8008b92:	330c      	adds	r3, #12
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	3301      	adds	r3, #1
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	e001      	b.n	8008ba0 <inc_lock+0xfc>
 8008b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ba0:	4906      	ldr	r1, [pc, #24]	; (8008bbc <inc_lock+0x118>)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	440b      	add	r3, r1
 8008ba8:	330c      	adds	r3, #12
 8008baa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3301      	adds	r3, #1
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	20005c4c 	.word	0x20005c4c

08008bc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	607b      	str	r3, [r7, #4]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d825      	bhi.n	8008c20 <dec_lock+0x60>
		n = Files[i].ctr;
 8008bd4:	4a17      	ldr	r2, [pc, #92]	; (8008c34 <dec_lock+0x74>)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	011b      	lsls	r3, r3, #4
 8008bda:	4413      	add	r3, r2
 8008bdc:	330c      	adds	r3, #12
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008be2:	89fb      	ldrh	r3, [r7, #14]
 8008be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be8:	d101      	bne.n	8008bee <dec_lock+0x2e>
 8008bea:	2300      	movs	r3, #0
 8008bec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008bee:	89fb      	ldrh	r3, [r7, #14]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <dec_lock+0x3a>
 8008bf4:	89fb      	ldrh	r3, [r7, #14]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008bfa:	4a0e      	ldr	r2, [pc, #56]	; (8008c34 <dec_lock+0x74>)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	4413      	add	r3, r2
 8008c02:	330c      	adds	r3, #12
 8008c04:	89fa      	ldrh	r2, [r7, #14]
 8008c06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008c08:	89fb      	ldrh	r3, [r7, #14]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d105      	bne.n	8008c1a <dec_lock+0x5a>
 8008c0e:	4a09      	ldr	r2, [pc, #36]	; (8008c34 <dec_lock+0x74>)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	011b      	lsls	r3, r3, #4
 8008c14:	4413      	add	r3, r2
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	737b      	strb	r3, [r7, #13]
 8008c1e:	e001      	b.n	8008c24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008c20:	2302      	movs	r3, #2
 8008c22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008c24:	7b7b      	ldrb	r3, [r7, #13]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	20005c4c 	.word	0x20005c4c

08008c38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	e010      	b.n	8008c68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008c46:	4a0d      	ldr	r2, [pc, #52]	; (8008c7c <clear_lock+0x44>)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	011b      	lsls	r3, r3, #4
 8008c4c:	4413      	add	r3, r2
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d105      	bne.n	8008c62 <clear_lock+0x2a>
 8008c56:	4a09      	ldr	r2, [pc, #36]	; (8008c7c <clear_lock+0x44>)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	4413      	add	r3, r2
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	3301      	adds	r3, #1
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d9eb      	bls.n	8008c46 <clear_lock+0xe>
	}
}
 8008c6e:	bf00      	nop
 8008c70:	bf00      	nop
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	20005c4c 	.word	0x20005c4c

08008c80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	78db      	ldrb	r3, [r3, #3]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d034      	beq.n	8008cfe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	7858      	ldrb	r0, [r3, #1]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	f7ff fd40 	bl	800872c <disk_write>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d002      	beq.n	8008cb8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	73fb      	strb	r3, [r7, #15]
 8008cb6:	e022      	b.n	8008cfe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	1ad2      	subs	r2, r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d217      	bcs.n	8008cfe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	789b      	ldrb	r3, [r3, #2]
 8008cd2:	613b      	str	r3, [r7, #16]
 8008cd4:	e010      	b.n	8008cf8 <sync_window+0x78>
					wsect += fs->fsize;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	4413      	add	r3, r2
 8008cde:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	7858      	ldrb	r0, [r3, #1]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008cea:	2301      	movs	r3, #1
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	f7ff fd1d 	bl	800872c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	613b      	str	r3, [r7, #16]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d8eb      	bhi.n	8008cd6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d01b      	beq.n	8008d58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff ffad 	bl	8008c80 <sync_window>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d113      	bne.n	8008d58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	7858      	ldrb	r0, [r3, #1]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	f7ff fcd5 	bl	80086ec <disk_read>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d004      	beq.n	8008d52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
	...

08008d64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff ff87 	bl	8008c80 <sync_window>
 8008d72:	4603      	mov	r3, r0
 8008d74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d159      	bne.n	8008e30 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d149      	bne.n	8008e18 <sync_fs+0xb4>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	791b      	ldrb	r3, [r3, #4]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d145      	bne.n	8008e18 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	899b      	ldrh	r3, [r3, #12]
 8008d96:	461a      	mov	r2, r3
 8008d98:	2100      	movs	r1, #0
 8008d9a:	f7ff fda8 	bl	80088ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3338      	adds	r3, #56	; 0x38
 8008da2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008da6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff fd37 	bl	800881e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3338      	adds	r3, #56	; 0x38
 8008db4:	4921      	ldr	r1, [pc, #132]	; (8008e3c <sync_fs+0xd8>)
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7ff fd4c 	bl	8008854 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3338      	adds	r3, #56	; 0x38
 8008dc0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008dc4:	491e      	ldr	r1, [pc, #120]	; (8008e40 <sync_fs+0xdc>)
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7ff fd44 	bl	8008854 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3338      	adds	r3, #56	; 0x38
 8008dd0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	f7ff fd3a 	bl	8008854 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	3338      	adds	r3, #56	; 0x38
 8008de4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f7ff fd30 	bl	8008854 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	7858      	ldrb	r0, [r3, #1]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	f7ff fc8d 	bl	800872c <disk_write>
			fs->fsi_flag = 0;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	785b      	ldrb	r3, [r3, #1]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2100      	movs	r1, #0
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff fca3 	bl	800876c <disk_ioctl>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <sync_fs+0xcc>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	41615252 	.word	0x41615252
 8008e40:	61417272 	.word	0x61417272

08008e44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	3b02      	subs	r3, #2
 8008e52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	3b02      	subs	r3, #2
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d301      	bcc.n	8008e64 <clust2sect+0x20>
 8008e60:	2300      	movs	r3, #0
 8008e62:	e008      	b.n	8008e76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	895b      	ldrh	r3, [r3, #10]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	fb03 f202 	mul.w	r2, r3, r2
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e74:	4413      	add	r3, r2
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b086      	sub	sp, #24
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d904      	bls.n	8008ea2 <get_fat+0x20>
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d302      	bcc.n	8008ea8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	617b      	str	r3, [r7, #20]
 8008ea6:	e0bb      	b.n	8009020 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	f000 8083 	beq.w	8008fbe <get_fat+0x13c>
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	f300 80a7 	bgt.w	800900c <get_fat+0x18a>
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d002      	beq.n	8008ec8 <get_fat+0x46>
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d056      	beq.n	8008f74 <get_fat+0xf2>
 8008ec6:	e0a1      	b.n	800900c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	085b      	lsrs	r3, r3, #1
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	899b      	ldrh	r3, [r3, #12]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ee6:	4413      	add	r3, r2
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6938      	ldr	r0, [r7, #16]
 8008eec:	f7ff ff0c 	bl	8008d08 <move_window>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f040 808d 	bne.w	8009012 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	60fa      	str	r2, [r7, #12]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	8992      	ldrh	r2, [r2, #12]
 8008f02:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f06:	fb01 f202 	mul.w	r2, r1, r2
 8008f0a:	1a9b      	subs	r3, r3, r2
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f14:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	899b      	ldrh	r3, [r3, #12]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f26:	4413      	add	r3, r2
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6938      	ldr	r0, [r7, #16]
 8008f2c:	f7ff feec 	bl	8008d08 <move_window>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d16f      	bne.n	8009016 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	899b      	ldrh	r3, [r3, #12]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f42:	fb01 f202 	mul.w	r2, r1, r2
 8008f46:	1a9b      	subs	r3, r3, r2
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f50:	021b      	lsls	r3, r3, #8
 8008f52:	461a      	mov	r2, r3
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <get_fat+0xe8>
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	091b      	lsrs	r3, r3, #4
 8008f68:	e002      	b.n	8008f70 <get_fat+0xee>
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f70:	617b      	str	r3, [r7, #20]
			break;
 8008f72:	e055      	b.n	8009020 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	899b      	ldrh	r3, [r3, #12]
 8008f7c:	085b      	lsrs	r3, r3, #1
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	4619      	mov	r1, r3
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f88:	4413      	add	r3, r2
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6938      	ldr	r0, [r7, #16]
 8008f8e:	f7ff febb 	bl	8008d08 <move_window>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d140      	bne.n	800901a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	005b      	lsls	r3, r3, #1
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	8992      	ldrh	r2, [r2, #12]
 8008fa6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008faa:	fb00 f202 	mul.w	r2, r0, r2
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	440b      	add	r3, r1
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7ff fbf8 	bl	80087a8 <ld_word>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	617b      	str	r3, [r7, #20]
			break;
 8008fbc:	e030      	b.n	8009020 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	899b      	ldrh	r3, [r3, #12]
 8008fc6:	089b      	lsrs	r3, r3, #2
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	4619      	mov	r1, r3
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fd2:	4413      	add	r3, r2
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6938      	ldr	r0, [r7, #16]
 8008fd8:	f7ff fe96 	bl	8008d08 <move_window>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d11d      	bne.n	800901e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	8992      	ldrh	r2, [r2, #12]
 8008ff0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ff4:	fb00 f202 	mul.w	r2, r0, r2
 8008ff8:	1a9b      	subs	r3, r3, r2
 8008ffa:	440b      	add	r3, r1
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7ff fbeb 	bl	80087d8 <ld_dword>
 8009002:	4603      	mov	r3, r0
 8009004:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009008:	617b      	str	r3, [r7, #20]
			break;
 800900a:	e009      	b.n	8009020 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800900c:	2301      	movs	r3, #1
 800900e:	617b      	str	r3, [r7, #20]
 8009010:	e006      	b.n	8009020 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009012:	bf00      	nop
 8009014:	e004      	b.n	8009020 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009016:	bf00      	nop
 8009018:	e002      	b.n	8009020 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800901a:	bf00      	nop
 800901c:	e000      	b.n	8009020 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800901e:	bf00      	nop
		}
	}

	return val;
 8009020:	697b      	ldr	r3, [r7, #20]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800902a:	b590      	push	{r4, r7, lr}
 800902c:	b089      	sub	sp, #36	; 0x24
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009036:	2302      	movs	r3, #2
 8009038:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2b01      	cmp	r3, #1
 800903e:	f240 8109 	bls.w	8009254 <put_fat+0x22a>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	429a      	cmp	r2, r3
 800904a:	f080 8103 	bcs.w	8009254 <put_fat+0x22a>
		switch (fs->fs_type) {
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2b03      	cmp	r3, #3
 8009054:	f000 80b6 	beq.w	80091c4 <put_fat+0x19a>
 8009058:	2b03      	cmp	r3, #3
 800905a:	f300 80fb 	bgt.w	8009254 <put_fat+0x22a>
 800905e:	2b01      	cmp	r3, #1
 8009060:	d003      	beq.n	800906a <put_fat+0x40>
 8009062:	2b02      	cmp	r3, #2
 8009064:	f000 8083 	beq.w	800916e <put_fat+0x144>
 8009068:	e0f4      	b.n	8009254 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	61bb      	str	r3, [r7, #24]
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	085b      	lsrs	r3, r3, #1
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	4413      	add	r3, r2
 8009076:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	899b      	ldrh	r3, [r3, #12]
 8009080:	4619      	mov	r1, r3
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	fbb3 f3f1 	udiv	r3, r3, r1
 8009088:	4413      	add	r3, r2
 800908a:	4619      	mov	r1, r3
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f7ff fe3b 	bl	8008d08 <move_window>
 8009092:	4603      	mov	r3, r0
 8009094:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009096:	7ffb      	ldrb	r3, [r7, #31]
 8009098:	2b00      	cmp	r3, #0
 800909a:	f040 80d4 	bne.w	8009246 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	1c5a      	adds	r2, r3, #1
 80090a8:	61ba      	str	r2, [r7, #24]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	8992      	ldrh	r2, [r2, #12]
 80090ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80090b2:	fb00 f202 	mul.w	r2, r0, r2
 80090b6:	1a9b      	subs	r3, r3, r2
 80090b8:	440b      	add	r3, r1
 80090ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00d      	beq.n	80090e2 <put_fat+0xb8>
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	b25b      	sxtb	r3, r3
 80090cc:	f003 030f 	and.w	r3, r3, #15
 80090d0:	b25a      	sxtb	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	011b      	lsls	r3, r3, #4
 80090d8:	b25b      	sxtb	r3, r3
 80090da:	4313      	orrs	r3, r2
 80090dc:	b25b      	sxtb	r3, r3
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	e001      	b.n	80090e6 <put_fat+0xbc>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2201      	movs	r2, #1
 80090ee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	899b      	ldrh	r3, [r3, #12]
 80090f8:	4619      	mov	r1, r3
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8009100:	4413      	add	r3, r2
 8009102:	4619      	mov	r1, r3
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f7ff fdff 	bl	8008d08 <move_window>
 800910a:	4603      	mov	r3, r0
 800910c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800910e:	7ffb      	ldrb	r3, [r7, #31]
 8009110:	2b00      	cmp	r3, #0
 8009112:	f040 809a 	bne.w	800924a <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	899b      	ldrh	r3, [r3, #12]
 8009120:	461a      	mov	r2, r3
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	fbb3 f0f2 	udiv	r0, r3, r2
 8009128:	fb00 f202 	mul.w	r2, r0, r2
 800912c:	1a9b      	subs	r3, r3, r2
 800912e:	440b      	add	r3, r1
 8009130:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <put_fat+0x11a>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	091b      	lsrs	r3, r3, #4
 8009140:	b2db      	uxtb	r3, r3
 8009142:	e00e      	b.n	8009162 <put_fat+0x138>
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	b25b      	sxtb	r3, r3
 800914a:	f023 030f 	bic.w	r3, r3, #15
 800914e:	b25a      	sxtb	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	0a1b      	lsrs	r3, r3, #8
 8009154:	b25b      	sxtb	r3, r3
 8009156:	f003 030f 	and.w	r3, r3, #15
 800915a:	b25b      	sxtb	r3, r3
 800915c:	4313      	orrs	r3, r2
 800915e:	b25b      	sxtb	r3, r3
 8009160:	b2db      	uxtb	r3, r3
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2201      	movs	r2, #1
 800916a:	70da      	strb	r2, [r3, #3]
			break;
 800916c:	e072      	b.n	8009254 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	899b      	ldrh	r3, [r3, #12]
 8009176:	085b      	lsrs	r3, r3, #1
 8009178:	b29b      	uxth	r3, r3
 800917a:	4619      	mov	r1, r3
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009182:	4413      	add	r3, r2
 8009184:	4619      	mov	r1, r3
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f7ff fdbe 	bl	8008d08 <move_window>
 800918c:	4603      	mov	r3, r0
 800918e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009190:	7ffb      	ldrb	r3, [r7, #31]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d15b      	bne.n	800924e <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	005b      	lsls	r3, r3, #1
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	8992      	ldrh	r2, [r2, #12]
 80091a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80091a8:	fb00 f202 	mul.w	r2, r0, r2
 80091ac:	1a9b      	subs	r3, r3, r2
 80091ae:	440b      	add	r3, r1
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	b292      	uxth	r2, r2
 80091b4:	4611      	mov	r1, r2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7ff fb31 	bl	800881e <st_word>
			fs->wflag = 1;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2201      	movs	r2, #1
 80091c0:	70da      	strb	r2, [r3, #3]
			break;
 80091c2:	e047      	b.n	8009254 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	899b      	ldrh	r3, [r3, #12]
 80091cc:	089b      	lsrs	r3, r3, #2
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	4619      	mov	r1, r3
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80091d8:	4413      	add	r3, r2
 80091da:	4619      	mov	r1, r3
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f7ff fd93 	bl	8008d08 <move_window>
 80091e2:	4603      	mov	r3, r0
 80091e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80091e6:	7ffb      	ldrb	r3, [r7, #31]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d132      	bne.n	8009252 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	8992      	ldrh	r2, [r2, #12]
 8009200:	fbb3 f0f2 	udiv	r0, r3, r2
 8009204:	fb00 f202 	mul.w	r2, r0, r2
 8009208:	1a9b      	subs	r3, r3, r2
 800920a:	440b      	add	r3, r1
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff fae3 	bl	80087d8 <ld_dword>
 8009212:	4603      	mov	r3, r0
 8009214:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009218:	4323      	orrs	r3, r4
 800921a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	8992      	ldrh	r2, [r2, #12]
 800922a:	fbb3 f0f2 	udiv	r0, r3, r2
 800922e:	fb00 f202 	mul.w	r2, r0, r2
 8009232:	1a9b      	subs	r3, r3, r2
 8009234:	440b      	add	r3, r1
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff fb0b 	bl	8008854 <st_dword>
			fs->wflag = 1;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2201      	movs	r2, #1
 8009242:	70da      	strb	r2, [r3, #3]
			break;
 8009244:	e006      	b.n	8009254 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009246:	bf00      	nop
 8009248:	e004      	b.n	8009254 <put_fat+0x22a>
			if (res != FR_OK) break;
 800924a:	bf00      	nop
 800924c:	e002      	b.n	8009254 <put_fat+0x22a>
			if (res != FR_OK) break;
 800924e:	bf00      	nop
 8009250:	e000      	b.n	8009254 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009252:	bf00      	nop
		}
	}
	return res;
 8009254:	7ffb      	ldrb	r3, [r7, #31]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3724      	adds	r7, #36	; 0x24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd90      	pop	{r4, r7, pc}

0800925e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b088      	sub	sp, #32
 8009262:	af00      	add	r7, sp, #0
 8009264:	60f8      	str	r0, [r7, #12]
 8009266:	60b9      	str	r1, [r7, #8]
 8009268:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d904      	bls.n	8009284 <remove_chain+0x26>
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	429a      	cmp	r2, r3
 8009282:	d301      	bcc.n	8009288 <remove_chain+0x2a>
 8009284:	2302      	movs	r3, #2
 8009286:	e04b      	b.n	8009320 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00c      	beq.n	80092a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800928e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009292:	6879      	ldr	r1, [r7, #4]
 8009294:	69b8      	ldr	r0, [r7, #24]
 8009296:	f7ff fec8 	bl	800902a <put_fat>
 800929a:	4603      	mov	r3, r0
 800929c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800929e:	7ffb      	ldrb	r3, [r7, #31]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <remove_chain+0x4a>
 80092a4:	7ffb      	ldrb	r3, [r7, #31]
 80092a6:	e03b      	b.n	8009320 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f7ff fde9 	bl	8008e82 <get_fat>
 80092b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d031      	beq.n	800931c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d101      	bne.n	80092c2 <remove_chain+0x64>
 80092be:	2302      	movs	r3, #2
 80092c0:	e02e      	b.n	8009320 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092c8:	d101      	bne.n	80092ce <remove_chain+0x70>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e028      	b.n	8009320 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80092ce:	2200      	movs	r2, #0
 80092d0:	68b9      	ldr	r1, [r7, #8]
 80092d2:	69b8      	ldr	r0, [r7, #24]
 80092d4:	f7ff fea9 	bl	800902a <put_fat>
 80092d8:	4603      	mov	r3, r0
 80092da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80092dc:	7ffb      	ldrb	r3, [r7, #31]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <remove_chain+0x88>
 80092e2:	7ffb      	ldrb	r3, [r7, #31]
 80092e4:	e01c      	b.n	8009320 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	699a      	ldr	r2, [r3, #24]
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	3b02      	subs	r3, #2
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d20b      	bcs.n	800930c <remove_chain+0xae>
			fs->free_clst++;
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	791b      	ldrb	r3, [r3, #4]
 8009302:	f043 0301 	orr.w	r3, r3, #1
 8009306:	b2da      	uxtb	r2, r3
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	429a      	cmp	r2, r3
 8009318:	d3c6      	bcc.n	80092a8 <remove_chain+0x4a>
 800931a:	e000      	b.n	800931e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800931c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3720      	adds	r7, #32
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10d      	bne.n	800935a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d004      	beq.n	8009354 <create_chain+0x2c>
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	69ba      	ldr	r2, [r7, #24]
 8009350:	429a      	cmp	r2, r3
 8009352:	d31b      	bcc.n	800938c <create_chain+0x64>
 8009354:	2301      	movs	r3, #1
 8009356:	61bb      	str	r3, [r7, #24]
 8009358:	e018      	b.n	800938c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7ff fd90 	bl	8008e82 <get_fat>
 8009362:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d801      	bhi.n	800936e <create_chain+0x46>
 800936a:	2301      	movs	r3, #1
 800936c:	e070      	b.n	8009450 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009374:	d101      	bne.n	800937a <create_chain+0x52>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	e06a      	b.n	8009450 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	429a      	cmp	r2, r3
 8009382:	d201      	bcs.n	8009388 <create_chain+0x60>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	e063      	b.n	8009450 <create_chain+0x128>
		scl = clst;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	3301      	adds	r3, #1
 8009394:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	69fa      	ldr	r2, [r7, #28]
 800939c:	429a      	cmp	r2, r3
 800939e:	d307      	bcc.n	80093b0 <create_chain+0x88>
				ncl = 2;
 80093a0:	2302      	movs	r3, #2
 80093a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80093a4:	69fa      	ldr	r2, [r7, #28]
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d901      	bls.n	80093b0 <create_chain+0x88>
 80093ac:	2300      	movs	r3, #0
 80093ae:	e04f      	b.n	8009450 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80093b0:	69f9      	ldr	r1, [r7, #28]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7ff fd65 	bl	8008e82 <get_fat>
 80093b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00e      	beq.n	80093de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d003      	beq.n	80093ce <create_chain+0xa6>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093cc:	d101      	bne.n	80093d2 <create_chain+0xaa>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	e03e      	b.n	8009450 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80093d2:	69fa      	ldr	r2, [r7, #28]
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d1da      	bne.n	8009390 <create_chain+0x68>
 80093da:	2300      	movs	r3, #0
 80093dc:	e038      	b.n	8009450 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80093de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093e4:	69f9      	ldr	r1, [r7, #28]
 80093e6:	6938      	ldr	r0, [r7, #16]
 80093e8:	f7ff fe1f 	bl	800902a <put_fat>
 80093ec:	4603      	mov	r3, r0
 80093ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d109      	bne.n	800940a <create_chain+0xe2>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d006      	beq.n	800940a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80093fc:	69fa      	ldr	r2, [r7, #28]
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6938      	ldr	r0, [r7, #16]
 8009402:	f7ff fe12 	bl	800902a <put_fat>
 8009406:	4603      	mov	r3, r0
 8009408:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800940a:	7dfb      	ldrb	r3, [r7, #23]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d116      	bne.n	800943e <create_chain+0x116>
		fs->last_clst = ncl;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	69fa      	ldr	r2, [r7, #28]
 8009414:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	699a      	ldr	r2, [r3, #24]
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	3b02      	subs	r3, #2
 8009420:	429a      	cmp	r2, r3
 8009422:	d804      	bhi.n	800942e <create_chain+0x106>
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	1e5a      	subs	r2, r3, #1
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	791b      	ldrb	r3, [r3, #4]
 8009432:	f043 0301 	orr.w	r3, r3, #1
 8009436:	b2da      	uxtb	r2, r3
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	711a      	strb	r2, [r3, #4]
 800943c:	e007      	b.n	800944e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800943e:	7dfb      	ldrb	r3, [r7, #23]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d102      	bne.n	800944a <create_chain+0x122>
 8009444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009448:	e000      	b.n	800944c <create_chain+0x124>
 800944a:	2301      	movs	r3, #1
 800944c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800944e:	69fb      	ldr	r3, [r7, #28]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3720      	adds	r7, #32
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946c:	3304      	adds	r3, #4
 800946e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	899b      	ldrh	r3, [r3, #12]
 8009474:	461a      	mov	r2, r3
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	fbb3 f3f2 	udiv	r3, r3, r2
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	8952      	ldrh	r2, [r2, #10]
 8009480:	fbb3 f3f2 	udiv	r3, r3, r2
 8009484:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	1d1a      	adds	r2, r3, #4
 800948a:	613a      	str	r2, [r7, #16]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <clmt_clust+0x42>
 8009496:	2300      	movs	r3, #0
 8009498:	e010      	b.n	80094bc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d307      	bcc.n	80094b2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	617b      	str	r3, [r7, #20]
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	3304      	adds	r3, #4
 80094ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80094b0:	e7e9      	b.n	8009486 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80094b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	4413      	add	r3, r2
}
 80094bc:	4618      	mov	r0, r3
 80094be:	371c      	adds	r7, #28
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094de:	d204      	bcs.n	80094ea <dir_sdi+0x22>
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	f003 031f 	and.w	r3, r3, #31
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <dir_sdi+0x26>
		return FR_INT_ERR;
 80094ea:	2302      	movs	r3, #2
 80094ec:	e071      	b.n	80095d2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d106      	bne.n	800950e <dir_sdi+0x46>
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d902      	bls.n	800950e <dir_sdi+0x46>
		clst = fs->dirbase;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10c      	bne.n	800952e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	095b      	lsrs	r3, r3, #5
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	8912      	ldrh	r2, [r2, #8]
 800951c:	4293      	cmp	r3, r2
 800951e:	d301      	bcc.n	8009524 <dir_sdi+0x5c>
 8009520:	2302      	movs	r3, #2
 8009522:	e056      	b.n	80095d2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	61da      	str	r2, [r3, #28]
 800952c:	e02d      	b.n	800958a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	895b      	ldrh	r3, [r3, #10]
 8009532:	461a      	mov	r2, r3
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	899b      	ldrh	r3, [r3, #12]
 8009538:	fb02 f303 	mul.w	r3, r2, r3
 800953c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800953e:	e019      	b.n	8009574 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6979      	ldr	r1, [r7, #20]
 8009544:	4618      	mov	r0, r3
 8009546:	f7ff fc9c 	bl	8008e82 <get_fat>
 800954a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009552:	d101      	bne.n	8009558 <dir_sdi+0x90>
 8009554:	2301      	movs	r3, #1
 8009556:	e03c      	b.n	80095d2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d904      	bls.n	8009568 <dir_sdi+0xa0>
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	429a      	cmp	r2, r3
 8009566:	d301      	bcc.n	800956c <dir_sdi+0xa4>
 8009568:	2302      	movs	r3, #2
 800956a:	e032      	b.n	80095d2 <dir_sdi+0x10a>
			ofs -= csz;
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	429a      	cmp	r2, r3
 800957a:	d2e1      	bcs.n	8009540 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800957c:	6979      	ldr	r1, [r7, #20]
 800957e:	6938      	ldr	r0, [r7, #16]
 8009580:	f7ff fc60 	bl	8008e44 <clust2sect>
 8009584:	4602      	mov	r2, r0
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d101      	bne.n	800959c <dir_sdi+0xd4>
 8009598:	2302      	movs	r3, #2
 800959a:	e01a      	b.n	80095d2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	69da      	ldr	r2, [r3, #28]
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	899b      	ldrh	r3, [r3, #12]
 80095a4:	4619      	mov	r1, r3
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80095ac:	441a      	add	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	899b      	ldrh	r3, [r3, #12]
 80095bc:	461a      	mov	r2, r3
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80095c4:	fb00 f202 	mul.w	r2, r0, r2
 80095c8:	1a9b      	subs	r3, r3, r2
 80095ca:	18ca      	adds	r2, r1, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3718      	adds	r7, #24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b086      	sub	sp, #24
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	3320      	adds	r3, #32
 80095f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <dir_next+0x28>
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009600:	d301      	bcc.n	8009606 <dir_next+0x2c>
 8009602:	2304      	movs	r3, #4
 8009604:	e0bb      	b.n	800977e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	899b      	ldrh	r3, [r3, #12]
 800960a:	461a      	mov	r2, r3
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009612:	fb01 f202 	mul.w	r2, r1, r2
 8009616:	1a9b      	subs	r3, r3, r2
 8009618:	2b00      	cmp	r3, #0
 800961a:	f040 809d 	bne.w	8009758 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10b      	bne.n	8009648 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	095b      	lsrs	r3, r3, #5
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	8912      	ldrh	r2, [r2, #8]
 8009638:	4293      	cmp	r3, r2
 800963a:	f0c0 808d 	bcc.w	8009758 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	61da      	str	r2, [r3, #28]
 8009644:	2304      	movs	r3, #4
 8009646:	e09a      	b.n	800977e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	899b      	ldrh	r3, [r3, #12]
 800964c:	461a      	mov	r2, r3
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	fbb3 f3f2 	udiv	r3, r3, r2
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	8952      	ldrh	r2, [r2, #10]
 8009658:	3a01      	subs	r2, #1
 800965a:	4013      	ands	r3, r2
 800965c:	2b00      	cmp	r3, #0
 800965e:	d17b      	bne.n	8009758 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	4619      	mov	r1, r3
 8009668:	4610      	mov	r0, r2
 800966a:	f7ff fc0a 	bl	8008e82 <get_fat>
 800966e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	2b01      	cmp	r3, #1
 8009674:	d801      	bhi.n	800967a <dir_next+0xa0>
 8009676:	2302      	movs	r3, #2
 8009678:	e081      	b.n	800977e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009680:	d101      	bne.n	8009686 <dir_next+0xac>
 8009682:	2301      	movs	r3, #1
 8009684:	e07b      	b.n	800977e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	429a      	cmp	r2, r3
 800968e:	d359      	bcc.n	8009744 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d104      	bne.n	80096a0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	61da      	str	r2, [r3, #28]
 800969c:	2304      	movs	r3, #4
 800969e:	e06e      	b.n	800977e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	4619      	mov	r1, r3
 80096a8:	4610      	mov	r0, r2
 80096aa:	f7ff fe3d 	bl	8009328 <create_chain>
 80096ae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <dir_next+0xe0>
 80096b6:	2307      	movs	r3, #7
 80096b8:	e061      	b.n	800977e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d101      	bne.n	80096c4 <dir_next+0xea>
 80096c0:	2302      	movs	r3, #2
 80096c2:	e05c      	b.n	800977e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096ca:	d101      	bne.n	80096d0 <dir_next+0xf6>
 80096cc:	2301      	movs	r3, #1
 80096ce:	e056      	b.n	800977e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f7ff fad5 	bl	8008c80 <sync_window>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <dir_next+0x106>
 80096dc:	2301      	movs	r3, #1
 80096de:	e04e      	b.n	800977e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	899b      	ldrh	r3, [r3, #12]
 80096ea:	461a      	mov	r2, r3
 80096ec:	2100      	movs	r1, #0
 80096ee:	f7ff f8fe 	bl	80088ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80096f2:	2300      	movs	r3, #0
 80096f4:	613b      	str	r3, [r7, #16]
 80096f6:	6979      	ldr	r1, [r7, #20]
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7ff fba3 	bl	8008e44 <clust2sect>
 80096fe:	4602      	mov	r2, r0
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	635a      	str	r2, [r3, #52]	; 0x34
 8009704:	e012      	b.n	800972c <dir_next+0x152>
						fs->wflag = 1;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2201      	movs	r2, #1
 800970a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f7ff fab7 	bl	8008c80 <sync_window>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <dir_next+0x142>
 8009718:	2301      	movs	r3, #1
 800971a:	e030      	b.n	800977e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	3301      	adds	r3, #1
 8009720:	613b      	str	r3, [r7, #16]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	635a      	str	r2, [r3, #52]	; 0x34
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	895b      	ldrh	r3, [r3, #10]
 8009730:	461a      	mov	r2, r3
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	4293      	cmp	r3, r2
 8009736:	d3e6      	bcc.n	8009706 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	1ad2      	subs	r2, r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800974a:	6979      	ldr	r1, [r7, #20]
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f7ff fb79 	bl	8008e44 <clust2sect>
 8009752:	4602      	mov	r2, r0
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	899b      	ldrh	r3, [r3, #12]
 8009768:	461a      	mov	r2, r3
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009770:	fb00 f202 	mul.w	r2, r0, r2
 8009774:	1a9b      	subs	r3, r3, r2
 8009776:	18ca      	adds	r2, r1, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b086      	sub	sp, #24
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009796:	2100      	movs	r1, #0
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7ff fe95 	bl	80094c8 <dir_sdi>
 800979e:	4603      	mov	r3, r0
 80097a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d12b      	bne.n	8009800 <dir_alloc+0x7a>
		n = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	4619      	mov	r1, r3
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f7ff faa8 	bl	8008d08 <move_window>
 80097b8:	4603      	mov	r3, r0
 80097ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d11d      	bne.n	80097fe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	2be5      	cmp	r3, #229	; 0xe5
 80097ca:	d004      	beq.n	80097d6 <dir_alloc+0x50>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a1b      	ldr	r3, [r3, #32]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d107      	bne.n	80097e6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	3301      	adds	r3, #1
 80097da:	613b      	str	r3, [r7, #16]
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d102      	bne.n	80097ea <dir_alloc+0x64>
 80097e4:	e00c      	b.n	8009800 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80097e6:	2300      	movs	r3, #0
 80097e8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80097ea:	2101      	movs	r1, #1
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff fef4 	bl	80095da <dir_next>
 80097f2:	4603      	mov	r3, r0
 80097f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d0d7      	beq.n	80097ac <dir_alloc+0x26>
 80097fc:	e000      	b.n	8009800 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80097fe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009800:	7dfb      	ldrb	r3, [r7, #23]
 8009802:	2b04      	cmp	r3, #4
 8009804:	d101      	bne.n	800980a <dir_alloc+0x84>
 8009806:	2307      	movs	r3, #7
 8009808:	75fb      	strb	r3, [r7, #23]
	return res;
 800980a:	7dfb      	ldrb	r3, [r7, #23]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	331a      	adds	r3, #26
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe ffc0 	bl	80087a8 <ld_word>
 8009828:	4603      	mov	r3, r0
 800982a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	2b03      	cmp	r3, #3
 8009832:	d109      	bne.n	8009848 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	3314      	adds	r3, #20
 8009838:	4618      	mov	r0, r3
 800983a:	f7fe ffb5 	bl	80087a8 <ld_word>
 800983e:	4603      	mov	r3, r0
 8009840:	041b      	lsls	r3, r3, #16
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	4313      	orrs	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009848:	68fb      	ldr	r3, [r7, #12]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	331a      	adds	r3, #26
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	b292      	uxth	r2, r2
 8009866:	4611      	mov	r1, r2
 8009868:	4618      	mov	r0, r3
 800986a:	f7fe ffd8 	bl	800881e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	2b03      	cmp	r3, #3
 8009874:	d109      	bne.n	800988a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f103 0214 	add.w	r2, r3, #20
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	0c1b      	lsrs	r3, r3, #16
 8009880:	b29b      	uxth	r3, r3
 8009882:	4619      	mov	r1, r3
 8009884:	4610      	mov	r0, r2
 8009886:	f7fe ffca 	bl	800881e <st_word>
	}
}
 800988a:	bf00      	nop
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009894:	b590      	push	{r4, r7, lr}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	331a      	adds	r3, #26
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe ff80 	bl	80087a8 <ld_word>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <cmp_lfn+0x1e>
 80098ae:	2300      	movs	r3, #0
 80098b0:	e059      	b.n	8009966 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098ba:	1e5a      	subs	r2, r3, #1
 80098bc:	4613      	mov	r3, r2
 80098be:	005b      	lsls	r3, r3, #1
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80098c8:	2301      	movs	r3, #1
 80098ca:	81fb      	strh	r3, [r7, #14]
 80098cc:	2300      	movs	r3, #0
 80098ce:	613b      	str	r3, [r7, #16]
 80098d0:	e033      	b.n	800993a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80098d2:	4a27      	ldr	r2, [pc, #156]	; (8009970 <cmp_lfn+0xdc>)
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	4413      	add	r3, r2
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	4413      	add	r3, r2
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe ff61 	bl	80087a8 <ld_word>
 80098e6:	4603      	mov	r3, r0
 80098e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80098ea:	89fb      	ldrh	r3, [r7, #14]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d01a      	beq.n	8009926 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	2bfe      	cmp	r3, #254	; 0xfe
 80098f4:	d812      	bhi.n	800991c <cmp_lfn+0x88>
 80098f6:	89bb      	ldrh	r3, [r7, #12]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f002 f8a1 	bl	800ba40 <ff_wtoupper>
 80098fe:	4603      	mov	r3, r0
 8009900:	461c      	mov	r4, r3
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	617a      	str	r2, [r7, #20]
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	4413      	add	r3, r2
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	4618      	mov	r0, r3
 8009912:	f002 f895 	bl	800ba40 <ff_wtoupper>
 8009916:	4603      	mov	r3, r0
 8009918:	429c      	cmp	r4, r3
 800991a:	d001      	beq.n	8009920 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800991c:	2300      	movs	r3, #0
 800991e:	e022      	b.n	8009966 <cmp_lfn+0xd2>
			}
			wc = uc;
 8009920:	89bb      	ldrh	r3, [r7, #12]
 8009922:	81fb      	strh	r3, [r7, #14]
 8009924:	e006      	b.n	8009934 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009926:	89bb      	ldrh	r3, [r7, #12]
 8009928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800992c:	4293      	cmp	r3, r2
 800992e:	d001      	beq.n	8009934 <cmp_lfn+0xa0>
 8009930:	2300      	movs	r3, #0
 8009932:	e018      	b.n	8009966 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	3301      	adds	r3, #1
 8009938:	613b      	str	r3, [r7, #16]
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	2b0c      	cmp	r3, #12
 800993e:	d9c8      	bls.n	80098d2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00b      	beq.n	8009964 <cmp_lfn+0xd0>
 800994c:	89fb      	ldrh	r3, [r7, #14]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d008      	beq.n	8009964 <cmp_lfn+0xd0>
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	005b      	lsls	r3, r3, #1
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	4413      	add	r3, r2
 800995a:	881b      	ldrh	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d001      	beq.n	8009964 <cmp_lfn+0xd0>
 8009960:	2300      	movs	r3, #0
 8009962:	e000      	b.n	8009966 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009964:	2301      	movs	r3, #1
}
 8009966:	4618      	mov	r0, r3
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	bd90      	pop	{r4, r7, pc}
 800996e:	bf00      	nop
 8009970:	0800cd70 	.word	0x0800cd70

08009974 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b088      	sub	sp, #32
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	4611      	mov	r1, r2
 8009980:	461a      	mov	r2, r3
 8009982:	460b      	mov	r3, r1
 8009984:	71fb      	strb	r3, [r7, #7]
 8009986:	4613      	mov	r3, r2
 8009988:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	330d      	adds	r3, #13
 800998e:	79ba      	ldrb	r2, [r7, #6]
 8009990:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	330b      	adds	r3, #11
 8009996:	220f      	movs	r2, #15
 8009998:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	330c      	adds	r3, #12
 800999e:	2200      	movs	r2, #0
 80099a0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	331a      	adds	r3, #26
 80099a6:	2100      	movs	r1, #0
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fe ff38 	bl	800881e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	1e5a      	subs	r2, r3, #1
 80099b2:	4613      	mov	r3, r2
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	4413      	add	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	82fb      	strh	r3, [r7, #22]
 80099c2:	2300      	movs	r3, #0
 80099c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80099c6:	8afb      	ldrh	r3, [r7, #22]
 80099c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d007      	beq.n	80099e0 <put_lfn+0x6c>
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	1c5a      	adds	r2, r3, #1
 80099d4:	61fa      	str	r2, [r7, #28]
 80099d6:	005b      	lsls	r3, r3, #1
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	4413      	add	r3, r2
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80099e0:	4a17      	ldr	r2, [pc, #92]	; (8009a40 <put_lfn+0xcc>)
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	4413      	add	r3, r2
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	461a      	mov	r2, r3
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	4413      	add	r3, r2
 80099ee:	8afa      	ldrh	r2, [r7, #22]
 80099f0:	4611      	mov	r1, r2
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe ff13 	bl	800881e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80099f8:	8afb      	ldrh	r3, [r7, #22]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d102      	bne.n	8009a04 <put_lfn+0x90>
 80099fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a02:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	3301      	adds	r3, #1
 8009a08:	61bb      	str	r3, [r7, #24]
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	2b0c      	cmp	r3, #12
 8009a0e:	d9da      	bls.n	80099c6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009a10:	8afb      	ldrh	r3, [r7, #22]
 8009a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d006      	beq.n	8009a28 <put_lfn+0xb4>
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	005b      	lsls	r3, r3, #1
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	4413      	add	r3, r2
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d103      	bne.n	8009a30 <put_lfn+0xbc>
 8009a28:	79fb      	ldrb	r3, [r7, #7]
 8009a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a2e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	79fa      	ldrb	r2, [r7, #7]
 8009a34:	701a      	strb	r2, [r3, #0]
}
 8009a36:	bf00      	nop
 8009a38:	3720      	adds	r7, #32
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	0800cd70 	.word	0x0800cd70

08009a44 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08c      	sub	sp, #48	; 0x30
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
 8009a50:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009a52:	220b      	movs	r2, #11
 8009a54:	68b9      	ldr	r1, [r7, #8]
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7fe ff28 	bl	80088ac <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b05      	cmp	r3, #5
 8009a60:	d92b      	bls.n	8009aba <gen_numname+0x76>
		sr = seq;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009a66:	e022      	b.n	8009aae <gen_numname+0x6a>
			wc = *lfn++;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	1c9a      	adds	r2, r3, #2
 8009a6c:	607a      	str	r2, [r7, #4]
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009a72:	2300      	movs	r3, #0
 8009a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a76:	e017      	b.n	8009aa8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	005a      	lsls	r2, r3, #1
 8009a7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	4413      	add	r3, r2
 8009a84:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009a86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a88:	085b      	lsrs	r3, r3, #1
 8009a8a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d005      	beq.n	8009aa2 <gen_numname+0x5e>
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009a9c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009aa0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	2b0f      	cmp	r3, #15
 8009aac:	d9e4      	bls.n	8009a78 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	881b      	ldrh	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1d8      	bne.n	8009a68 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009aba:	2307      	movs	r3, #7
 8009abc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	f003 030f 	and.w	r3, r3, #15
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	3330      	adds	r3, #48	; 0x30
 8009aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ad2:	2b39      	cmp	r3, #57	; 0x39
 8009ad4:	d904      	bls.n	8009ae0 <gen_numname+0x9c>
 8009ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ada:	3307      	adds	r3, #7
 8009adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae2:	1e5a      	subs	r2, r3, #1
 8009ae4:	62ba      	str	r2, [r7, #40]	; 0x28
 8009ae6:	3330      	adds	r3, #48	; 0x30
 8009ae8:	443b      	add	r3, r7
 8009aea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009aee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	091b      	lsrs	r3, r3, #4
 8009af6:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1df      	bne.n	8009abe <gen_numname+0x7a>
	ns[i] = '~';
 8009afe:	f107 0214 	add.w	r2, r7, #20
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	4413      	add	r3, r2
 8009b06:	227e      	movs	r2, #126	; 0x7e
 8009b08:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b0e:	e002      	b.n	8009b16 <gen_numname+0xd2>
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	3301      	adds	r3, #1
 8009b14:	627b      	str	r3, [r7, #36]	; 0x24
 8009b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d205      	bcs.n	8009b2a <gen_numname+0xe6>
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	4413      	add	r3, r2
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	2b20      	cmp	r3, #32
 8009b28:	d1f2      	bne.n	8009b10 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	2b07      	cmp	r3, #7
 8009b2e:	d807      	bhi.n	8009b40 <gen_numname+0xfc>
 8009b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	62ba      	str	r2, [r7, #40]	; 0x28
 8009b36:	3330      	adds	r3, #48	; 0x30
 8009b38:	443b      	add	r3, r7
 8009b3a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009b3e:	e000      	b.n	8009b42 <gen_numname+0xfe>
 8009b40:	2120      	movs	r1, #32
 8009b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	627a      	str	r2, [r7, #36]	; 0x24
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	460a      	mov	r2, r1
 8009b4e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	2b07      	cmp	r3, #7
 8009b54:	d9e9      	bls.n	8009b2a <gen_numname+0xe6>
}
 8009b56:	bf00      	nop
 8009b58:	bf00      	nop
 8009b5a:	3730      	adds	r7, #48	; 0x30
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009b6c:	230b      	movs	r3, #11
 8009b6e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	0852      	lsrs	r2, r2, #1
 8009b76:	01db      	lsls	r3, r3, #7
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	1c59      	adds	r1, r3, #1
 8009b80:	6079      	str	r1, [r7, #4]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	4413      	add	r3, r2
 8009b86:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	60bb      	str	r3, [r7, #8]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1ed      	bne.n	8009b70 <sum_sfn+0x10>
	return sum;
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b086      	sub	sp, #24
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7ff fc88 	bl	80094c8 <dir_sdi>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <dir_find+0x24>
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
 8009bc4:	e0a9      	b.n	8009d1a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009bc6:	23ff      	movs	r3, #255	; 0xff
 8009bc8:	753b      	strb	r3, [r7, #20]
 8009bca:	7d3b      	ldrb	r3, [r7, #20]
 8009bcc:	757b      	strb	r3, [r7, #21]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bd4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6938      	ldr	r0, [r7, #16]
 8009bde:	f7ff f893 	bl	8008d08 <move_window>
 8009be2:	4603      	mov	r3, r0
 8009be4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f040 8090 	bne.w	8009d0e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009bf6:	7dbb      	ldrb	r3, [r7, #22]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d102      	bne.n	8009c02 <dir_find+0x60>
 8009bfc:	2304      	movs	r3, #4
 8009bfe:	75fb      	strb	r3, [r7, #23]
 8009c00:	e08a      	b.n	8009d18 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	330b      	adds	r3, #11
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c0e:	73fb      	strb	r3, [r7, #15]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	7bfa      	ldrb	r2, [r7, #15]
 8009c14:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009c16:	7dbb      	ldrb	r3, [r7, #22]
 8009c18:	2be5      	cmp	r3, #229	; 0xe5
 8009c1a:	d007      	beq.n	8009c2c <dir_find+0x8a>
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
 8009c1e:	f003 0308 	and.w	r3, r3, #8
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d009      	beq.n	8009c3a <dir_find+0x98>
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
 8009c28:	2b0f      	cmp	r3, #15
 8009c2a:	d006      	beq.n	8009c3a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009c2c:	23ff      	movs	r3, #255	; 0xff
 8009c2e:	757b      	strb	r3, [r7, #21]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c36:	631a      	str	r2, [r3, #48]	; 0x30
 8009c38:	e05e      	b.n	8009cf8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
 8009c3c:	2b0f      	cmp	r3, #15
 8009c3e:	d136      	bne.n	8009cae <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d154      	bne.n	8009cf8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009c4e:	7dbb      	ldrb	r3, [r7, #22]
 8009c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00d      	beq.n	8009c74 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a1b      	ldr	r3, [r3, #32]
 8009c5c:	7b5b      	ldrb	r3, [r3, #13]
 8009c5e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009c60:	7dbb      	ldrb	r3, [r7, #22]
 8009c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c66:	75bb      	strb	r3, [r7, #22]
 8009c68:	7dbb      	ldrb	r3, [r7, #22]
 8009c6a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	695a      	ldr	r2, [r3, #20]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009c74:	7dba      	ldrb	r2, [r7, #22]
 8009c76:	7d7b      	ldrb	r3, [r7, #21]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d115      	bne.n	8009ca8 <dir_find+0x106>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
 8009c80:	330d      	adds	r3, #13
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	7d3a      	ldrb	r2, [r7, #20]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d10e      	bne.n	8009ca8 <dir_find+0x106>
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	691a      	ldr	r2, [r3, #16]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	4619      	mov	r1, r3
 8009c94:	4610      	mov	r0, r2
 8009c96:	f7ff fdfd 	bl	8009894 <cmp_lfn>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <dir_find+0x106>
 8009ca0:	7d7b      	ldrb	r3, [r7, #21]
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	e000      	b.n	8009caa <dir_find+0x108>
 8009ca8:	23ff      	movs	r3, #255	; 0xff
 8009caa:	757b      	strb	r3, [r7, #21]
 8009cac:	e024      	b.n	8009cf8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009cae:	7d7b      	ldrb	r3, [r7, #21]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <dir_find+0x126>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a1b      	ldr	r3, [r3, #32]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7ff ff51 	bl	8009b60 <sum_sfn>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	7d3b      	ldrb	r3, [r7, #20]
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d024      	beq.n	8009d12 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d10a      	bne.n	8009cec <dir_find+0x14a>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a18      	ldr	r0, [r3, #32]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3324      	adds	r3, #36	; 0x24
 8009cde:	220b      	movs	r2, #11
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	f7fe fe1f 	bl	8008924 <mem_cmp>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d014      	beq.n	8009d16 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009cec:	23ff      	movs	r3, #255	; 0xff
 8009cee:	757b      	strb	r3, [r7, #21]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cf6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7ff fc6d 	bl	80095da <dir_next>
 8009d00:	4603      	mov	r3, r0
 8009d02:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009d04:	7dfb      	ldrb	r3, [r7, #23]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f43f af65 	beq.w	8009bd6 <dir_find+0x34>
 8009d0c:	e004      	b.n	8009d18 <dir_find+0x176>
		if (res != FR_OK) break;
 8009d0e:	bf00      	nop
 8009d10:	e002      	b.n	8009d18 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009d12:	bf00      	nop
 8009d14:	e000      	b.n	8009d18 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009d16:	bf00      	nop

	return res;
 8009d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
	...

08009d24 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b08c      	sub	sp, #48	; 0x30
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009d38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <dir_register+0x20>
 8009d40:	2306      	movs	r3, #6
 8009d42:	e0e0      	b.n	8009f06 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009d44:	2300      	movs	r3, #0
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24
 8009d48:	e002      	b.n	8009d50 <dir_register+0x2c>
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	691a      	ldr	r2, [r3, #16]
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	4413      	add	r3, r2
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1f4      	bne.n	8009d4a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009d66:	f107 030c 	add.w	r3, r7, #12
 8009d6a:	220c      	movs	r2, #12
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fe fd9d 	bl	80088ac <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d032      	beq.n	8009de2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2240      	movs	r2, #64	; 0x40
 8009d80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009d84:	2301      	movs	r3, #1
 8009d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d88:	e016      	b.n	8009db8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	691a      	ldr	r2, [r3, #16]
 8009d94:	f107 010c 	add.w	r1, r7, #12
 8009d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9a:	f7ff fe53 	bl	8009a44 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7ff feff 	bl	8009ba2 <dir_find>
 8009da4:	4603      	mov	r3, r0
 8009da6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d106      	bne.n	8009dc0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db4:	3301      	adds	r3, #1
 8009db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	2b63      	cmp	r3, #99	; 0x63
 8009dbc:	d9e5      	bls.n	8009d8a <dir_register+0x66>
 8009dbe:	e000      	b.n	8009dc2 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009dc0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc4:	2b64      	cmp	r3, #100	; 0x64
 8009dc6:	d101      	bne.n	8009dcc <dir_register+0xa8>
 8009dc8:	2307      	movs	r3, #7
 8009dca:	e09c      	b.n	8009f06 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	d002      	beq.n	8009dda <dir_register+0xb6>
 8009dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dd8:	e095      	b.n	8009f06 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009dda:	7dfa      	ldrb	r2, [r7, #23]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d007      	beq.n	8009dfc <dir_register+0xd8>
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	330c      	adds	r3, #12
 8009df0:	4a47      	ldr	r2, [pc, #284]	; (8009f10 <dir_register+0x1ec>)
 8009df2:	fba2 2303 	umull	r2, r3, r2, r3
 8009df6:	089b      	lsrs	r3, r3, #2
 8009df8:	3301      	adds	r3, #1
 8009dfa:	e000      	b.n	8009dfe <dir_register+0xda>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009e00:	6a39      	ldr	r1, [r7, #32]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff fcbf 	bl	8009786 <dir_alloc>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d148      	bne.n	8009ea8 <dir_register+0x184>
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	623b      	str	r3, [r7, #32]
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d042      	beq.n	8009ea8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	695a      	ldr	r2, [r3, #20]
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	015b      	lsls	r3, r3, #5
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7ff fb4a 	bl	80094c8 <dir_sdi>
 8009e34:	4603      	mov	r3, r0
 8009e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d132      	bne.n	8009ea8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	3324      	adds	r3, #36	; 0x24
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7ff fe8a 	bl	8009b60 <sum_sfn>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	69db      	ldr	r3, [r3, #28]
 8009e54:	4619      	mov	r1, r3
 8009e56:	69f8      	ldr	r0, [r7, #28]
 8009e58:	f7fe ff56 	bl	8008d08 <move_window>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009e62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d11d      	bne.n	8009ea6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	6918      	ldr	r0, [r3, #16]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a19      	ldr	r1, [r3, #32]
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	7efb      	ldrb	r3, [r7, #27]
 8009e78:	f7ff fd7c 	bl	8009974 <put_lfn>
				fs->wflag = 1;
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009e82:	2100      	movs	r1, #0
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f7ff fba8 	bl	80095da <dir_next>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009e90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d107      	bne.n	8009ea8 <dir_register+0x184>
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	623b      	str	r3, [r7, #32]
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1d5      	bne.n	8009e50 <dir_register+0x12c>
 8009ea4:	e000      	b.n	8009ea8 <dir_register+0x184>
				if (res != FR_OK) break;
 8009ea6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d128      	bne.n	8009f02 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	69f8      	ldr	r0, [r7, #28]
 8009eb8:	f7fe ff26 	bl	8008d08 <move_window>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d11b      	bne.n	8009f02 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe fd0b 	bl	80088ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a18      	ldr	r0, [r3, #32]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	3324      	adds	r3, #36	; 0x24
 8009ee0:	220b      	movs	r2, #11
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	f7fe fce2 	bl	80088ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	330c      	adds	r3, #12
 8009ef4:	f002 0218 	and.w	r2, r2, #24
 8009ef8:	b2d2      	uxtb	r2, r2
 8009efa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	2201      	movs	r2, #1
 8009f00:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009f02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3730      	adds	r7, #48	; 0x30
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	4ec4ec4f 	.word	0x4ec4ec4f

08009f14 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2200      	movs	r2, #0
 8009f28:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 80c9 	beq.w	800a0c6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f3c:	d032      	beq.n	8009fa4 <get_fileinfo+0x90>
			i = j = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	61bb      	str	r3, [r7, #24]
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009f46:	e01b      	b.n	8009f80 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8009f48:	89fb      	ldrh	r3, [r7, #14]
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 fd3b 	bl	800b9c8 <ff_convert>
 8009f52:	4603      	mov	r3, r0
 8009f54:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8009f56:	89fb      	ldrh	r3, [r7, #14]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d102      	bne.n	8009f62 <get_fileinfo+0x4e>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	61fb      	str	r3, [r7, #28]
 8009f60:	e01a      	b.n	8009f98 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	2bfe      	cmp	r3, #254	; 0xfe
 8009f66:	d902      	bls.n	8009f6e <get_fileinfo+0x5a>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	61fb      	str	r3, [r7, #28]
 8009f6c:	e014      	b.n	8009f98 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	61fa      	str	r2, [r7, #28]
 8009f74:	89fa      	ldrh	r2, [r7, #14]
 8009f76:	b2d1      	uxtb	r1, r2
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	460a      	mov	r2, r1
 8009f7e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	691a      	ldr	r2, [r3, #16]
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	1c59      	adds	r1, r3, #1
 8009f88:	61b9      	str	r1, [r7, #24]
 8009f8a:	005b      	lsls	r3, r3, #1
 8009f8c:	4413      	add	r3, r2
 8009f8e:	881b      	ldrh	r3, [r3, #0]
 8009f90:	81fb      	strh	r3, [r7, #14]
 8009f92:	89fb      	ldrh	r3, [r7, #14]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1d7      	bne.n	8009f48 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	3316      	adds	r3, #22
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	61bb      	str	r3, [r7, #24]
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	3316      	adds	r3, #22
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8009fb8:	e04c      	b.n	800a054 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a1a      	ldr	r2, [r3, #32]
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	1c59      	adds	r1, r3, #1
 8009fc2:	61f9      	str	r1, [r7, #28]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	2b20      	cmp	r3, #32
 8009fce:	d100      	bne.n	8009fd2 <get_fileinfo+0xbe>
 8009fd0:	e040      	b.n	800a054 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009fd2:	7dfb      	ldrb	r3, [r7, #23]
 8009fd4:	2b05      	cmp	r3, #5
 8009fd6:	d101      	bne.n	8009fdc <get_fileinfo+0xc8>
 8009fd8:	23e5      	movs	r3, #229	; 0xe5
 8009fda:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	2b09      	cmp	r3, #9
 8009fe0:	d10f      	bne.n	800a002 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8009fe2:	89bb      	ldrh	r3, [r7, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d105      	bne.n	8009ff4 <get_fileinfo+0xe0>
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	4413      	add	r3, r2
 8009fee:	3316      	adds	r3, #22
 8009ff0:	222e      	movs	r2, #46	; 0x2e
 8009ff2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	1c5a      	adds	r2, r3, #1
 8009ff8:	61ba      	str	r2, [r7, #24]
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	222e      	movs	r2, #46	; 0x2e
 800a000:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	4413      	add	r3, r2
 800a008:	3309      	adds	r3, #9
 800a00a:	7dfa      	ldrb	r2, [r7, #23]
 800a00c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800a00e:	89bb      	ldrh	r3, [r7, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d11c      	bne.n	800a04e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800a014:	7dfb      	ldrb	r3, [r7, #23]
 800a016:	2b40      	cmp	r3, #64	; 0x40
 800a018:	d913      	bls.n	800a042 <get_fileinfo+0x12e>
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	2b5a      	cmp	r3, #90	; 0x5a
 800a01e:	d810      	bhi.n	800a042 <get_fileinfo+0x12e>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a1b      	ldr	r3, [r3, #32]
 800a024:	330c      	adds	r3, #12
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	461a      	mov	r2, r3
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	2b08      	cmp	r3, #8
 800a02e:	d901      	bls.n	800a034 <get_fileinfo+0x120>
 800a030:	2310      	movs	r3, #16
 800a032:	e000      	b.n	800a036 <get_fileinfo+0x122>
 800a034:	2308      	movs	r3, #8
 800a036:	4013      	ands	r3, r2
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
 800a03e:	3320      	adds	r3, #32
 800a040:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	4413      	add	r3, r2
 800a048:	3316      	adds	r3, #22
 800a04a:	7dfa      	ldrb	r2, [r7, #23]
 800a04c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	3301      	adds	r3, #1
 800a052:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	2b0a      	cmp	r3, #10
 800a058:	d9af      	bls.n	8009fba <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800a05a:	89bb      	ldrh	r3, [r7, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10d      	bne.n	800a07c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	4413      	add	r3, r2
 800a066:	3316      	adds	r3, #22
 800a068:	2200      	movs	r2, #0
 800a06a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	330c      	adds	r3, #12
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d101      	bne.n	800a07c <get_fileinfo+0x168>
 800a078:	2300      	movs	r3, #0
 800a07a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	4413      	add	r3, r2
 800a082:	3309      	adds	r3, #9
 800a084:	2200      	movs	r2, #0
 800a086:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a1b      	ldr	r3, [r3, #32]
 800a08c:	7ada      	ldrb	r2, [r3, #11]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	331c      	adds	r3, #28
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fe fb9d 	bl	80087d8 <ld_dword>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	3316      	adds	r3, #22
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fb94 	bl	80087d8 <ld_dword>
 800a0b0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	80da      	strh	r2, [r3, #6]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	0c1b      	lsrs	r3, r3, #16
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	809a      	strh	r2, [r3, #4]
 800a0c4:	e000      	b.n	800a0c8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a0c6:	bf00      	nop
}
 800a0c8:	3720      	adds	r7, #32
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
	...

0800a0d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b08a      	sub	sp, #40	; 0x28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	613b      	str	r3, [r7, #16]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	60fb      	str	r3, [r7, #12]
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	617b      	str	r3, [r7, #20]
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	1c5a      	adds	r2, r3, #1
 800a0f4:	61ba      	str	r2, [r7, #24]
 800a0f6:	693a      	ldr	r2, [r7, #16]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a0fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a100:	2b1f      	cmp	r3, #31
 800a102:	d940      	bls.n	800a186 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a104:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a106:	2b2f      	cmp	r3, #47	; 0x2f
 800a108:	d006      	beq.n	800a118 <create_name+0x48>
 800a10a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a10c:	2b5c      	cmp	r3, #92	; 0x5c
 800a10e:	d110      	bne.n	800a132 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a110:	e002      	b.n	800a118 <create_name+0x48>
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	3301      	adds	r3, #1
 800a116:	61bb      	str	r3, [r7, #24]
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	4413      	add	r3, r2
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2b2f      	cmp	r3, #47	; 0x2f
 800a122:	d0f6      	beq.n	800a112 <create_name+0x42>
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	4413      	add	r3, r2
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b5c      	cmp	r3, #92	; 0x5c
 800a12e:	d0f0      	beq.n	800a112 <create_name+0x42>
			break;
 800a130:	e02a      	b.n	800a188 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2bfe      	cmp	r3, #254	; 0xfe
 800a136:	d901      	bls.n	800a13c <create_name+0x6c>
 800a138:	2306      	movs	r3, #6
 800a13a:	e17d      	b.n	800a438 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a13c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a144:	2101      	movs	r1, #1
 800a146:	4618      	mov	r0, r3
 800a148:	f001 fc3e 	bl	800b9c8 <ff_convert>
 800a14c:	4603      	mov	r3, r0
 800a14e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <create_name+0x8a>
 800a156:	2306      	movs	r3, #6
 800a158:	e16e      	b.n	800a438 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a15a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a15c:	2b7f      	cmp	r3, #127	; 0x7f
 800a15e:	d809      	bhi.n	800a174 <create_name+0xa4>
 800a160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a162:	4619      	mov	r1, r3
 800a164:	488d      	ldr	r0, [pc, #564]	; (800a39c <create_name+0x2cc>)
 800a166:	f7fe fc04 	bl	8008972 <chk_chr>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <create_name+0xa4>
 800a170:	2306      	movs	r3, #6
 800a172:	e161      	b.n	800a438 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	617a      	str	r2, [r7, #20]
 800a17a:	005b      	lsls	r3, r3, #1
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a182:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a184:	e7b4      	b.n	800a0f0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a186:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a188:	693a      	ldr	r2, [r7, #16]
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	441a      	add	r2, r3
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a194:	2b1f      	cmp	r3, #31
 800a196:	d801      	bhi.n	800a19c <create_name+0xcc>
 800a198:	2304      	movs	r3, #4
 800a19a:	e000      	b.n	800a19e <create_name+0xce>
 800a19c:	2300      	movs	r3, #0
 800a19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a1a2:	e011      	b.n	800a1c8 <create_name+0xf8>
		w = lfn[di - 1];
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a1b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1b8:	2b20      	cmp	r3, #32
 800a1ba:	d002      	beq.n	800a1c2 <create_name+0xf2>
 800a1bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1be:	2b2e      	cmp	r3, #46	; 0x2e
 800a1c0:	d106      	bne.n	800a1d0 <create_name+0x100>
		di--;
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1ea      	bne.n	800a1a4 <create_name+0xd4>
 800a1ce:	e000      	b.n	800a1d2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a1d0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	4413      	add	r3, r2
 800a1da:	2200      	movs	r2, #0
 800a1dc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <create_name+0x118>
 800a1e4:	2306      	movs	r3, #6
 800a1e6:	e127      	b.n	800a438 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	3324      	adds	r3, #36	; 0x24
 800a1ec:	220b      	movs	r2, #11
 800a1ee:	2120      	movs	r1, #32
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe fb7c 	bl	80088ee <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	61bb      	str	r3, [r7, #24]
 800a1fa:	e002      	b.n	800a202 <create_name+0x132>
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	3301      	adds	r3, #1
 800a200:	61bb      	str	r3, [r7, #24]
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	4413      	add	r3, r2
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	2b20      	cmp	r3, #32
 800a20e:	d0f5      	beq.n	800a1fc <create_name+0x12c>
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	4413      	add	r3, r2
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	2b2e      	cmp	r3, #46	; 0x2e
 800a21c:	d0ee      	beq.n	800a1fc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d009      	beq.n	800a238 <create_name+0x168>
 800a224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a228:	f043 0303 	orr.w	r3, r3, #3
 800a22c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a230:	e002      	b.n	800a238 <create_name+0x168>
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	3b01      	subs	r3, #1
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d009      	beq.n	800a252 <create_name+0x182>
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a244:	3b01      	subs	r3, #1
 800a246:	005b      	lsls	r3, r3, #1
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	4413      	add	r3, r2
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	2b2e      	cmp	r3, #46	; 0x2e
 800a250:	d1ef      	bne.n	800a232 <create_name+0x162>

	i = b = 0; ni = 8;
 800a252:	2300      	movs	r3, #0
 800a254:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a258:	2300      	movs	r3, #0
 800a25a:	623b      	str	r3, [r7, #32]
 800a25c:	2308      	movs	r3, #8
 800a25e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	61ba      	str	r2, [r7, #24]
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	4413      	add	r3, r2
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 8090 	beq.w	800a398 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a27a:	2b20      	cmp	r3, #32
 800a27c:	d006      	beq.n	800a28c <create_name+0x1bc>
 800a27e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a280:	2b2e      	cmp	r3, #46	; 0x2e
 800a282:	d10a      	bne.n	800a29a <create_name+0x1ca>
 800a284:	69ba      	ldr	r2, [r7, #24]
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d006      	beq.n	800a29a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a290:	f043 0303 	orr.w	r3, r3, #3
 800a294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a298:	e07d      	b.n	800a396 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a29a:	6a3a      	ldr	r2, [r7, #32]
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d203      	bcs.n	800a2aa <create_name+0x1da>
 800a2a2:	69ba      	ldr	r2, [r7, #24]
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d123      	bne.n	800a2f2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	2b0b      	cmp	r3, #11
 800a2ae:	d106      	bne.n	800a2be <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2b4:	f043 0303 	orr.w	r3, r3, #3
 800a2b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2bc:	e075      	b.n	800a3aa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a2be:	69ba      	ldr	r2, [r7, #24]
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d005      	beq.n	800a2d2 <create_name+0x202>
 800a2c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2ca:	f043 0303 	orr.w	r3, r3, #3
 800a2ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a2d2:	69ba      	ldr	r2, [r7, #24]
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d866      	bhi.n	800a3a8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	61bb      	str	r3, [r7, #24]
 800a2de:	2308      	movs	r3, #8
 800a2e0:	623b      	str	r3, [r7, #32]
 800a2e2:	230b      	movs	r3, #11
 800a2e4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a2e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a2f0:	e051      	b.n	800a396 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a2f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2f4:	2b7f      	cmp	r3, #127	; 0x7f
 800a2f6:	d914      	bls.n	800a322 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a2f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f001 fb63 	bl	800b9c8 <ff_convert>
 800a302:	4603      	mov	r3, r0
 800a304:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d004      	beq.n	800a316 <create_name+0x246>
 800a30c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a30e:	3b80      	subs	r3, #128	; 0x80
 800a310:	4a23      	ldr	r2, [pc, #140]	; (800a3a0 <create_name+0x2d0>)
 800a312:	5cd3      	ldrb	r3, [r2, r3]
 800a314:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a31a:	f043 0302 	orr.w	r3, r3, #2
 800a31e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a324:	2b00      	cmp	r3, #0
 800a326:	d007      	beq.n	800a338 <create_name+0x268>
 800a328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a32a:	4619      	mov	r1, r3
 800a32c:	481d      	ldr	r0, [pc, #116]	; (800a3a4 <create_name+0x2d4>)
 800a32e:	f7fe fb20 	bl	8008972 <chk_chr>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d008      	beq.n	800a34a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a338:	235f      	movs	r3, #95	; 0x5f
 800a33a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a340:	f043 0303 	orr.w	r3, r3, #3
 800a344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a348:	e01b      	b.n	800a382 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a34a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a34c:	2b40      	cmp	r3, #64	; 0x40
 800a34e:	d909      	bls.n	800a364 <create_name+0x294>
 800a350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a352:	2b5a      	cmp	r3, #90	; 0x5a
 800a354:	d806      	bhi.n	800a364 <create_name+0x294>
					b |= 2;
 800a356:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a35a:	f043 0302 	orr.w	r3, r3, #2
 800a35e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a362:	e00e      	b.n	800a382 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a366:	2b60      	cmp	r3, #96	; 0x60
 800a368:	d90b      	bls.n	800a382 <create_name+0x2b2>
 800a36a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a36c:	2b7a      	cmp	r3, #122	; 0x7a
 800a36e:	d808      	bhi.n	800a382 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a370:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a374:	f043 0301 	orr.w	r3, r3, #1
 800a378:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a37c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a37e:	3b20      	subs	r3, #32
 800a380:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	1c5a      	adds	r2, r3, #1
 800a386:	623a      	str	r2, [r7, #32]
 800a388:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a38a:	b2d1      	uxtb	r1, r2
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	4413      	add	r3, r2
 800a390:	460a      	mov	r2, r1
 800a392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a396:	e763      	b.n	800a260 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a398:	bf00      	nop
 800a39a:	e006      	b.n	800a3aa <create_name+0x2da>
 800a39c:	0800cc60 	.word	0x0800cc60
 800a3a0:	0800ccf0 	.word	0x0800ccf0
 800a3a4:	0800cc6c 	.word	0x0800cc6c
			if (si > di) break;			/* No extension */
 800a3a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a3b0:	2be5      	cmp	r3, #229	; 0xe5
 800a3b2:	d103      	bne.n	800a3bc <create_name+0x2ec>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2205      	movs	r2, #5
 800a3b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	2b08      	cmp	r3, #8
 800a3c0:	d104      	bne.n	800a3cc <create_name+0x2fc>
 800a3c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a3cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a3d0:	f003 030c 	and.w	r3, r3, #12
 800a3d4:	2b0c      	cmp	r3, #12
 800a3d6:	d005      	beq.n	800a3e4 <create_name+0x314>
 800a3d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a3dc:	f003 0303 	and.w	r3, r3, #3
 800a3e0:	2b03      	cmp	r3, #3
 800a3e2:	d105      	bne.n	800a3f0 <create_name+0x320>
 800a3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3e8:	f043 0302 	orr.w	r3, r3, #2
 800a3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3f4:	f003 0302 	and.w	r3, r3, #2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d117      	bne.n	800a42c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a3fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a400:	f003 0303 	and.w	r3, r3, #3
 800a404:	2b01      	cmp	r3, #1
 800a406:	d105      	bne.n	800a414 <create_name+0x344>
 800a408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a40c:	f043 0310 	orr.w	r3, r3, #16
 800a410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a418:	f003 030c 	and.w	r3, r3, #12
 800a41c:	2b04      	cmp	r3, #4
 800a41e:	d105      	bne.n	800a42c <create_name+0x35c>
 800a420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a424:	f043 0308 	orr.w	r3, r3, #8
 800a428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a432:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a436:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3728      	adds	r7, #40	; 0x28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a454:	e002      	b.n	800a45c <follow_path+0x1c>
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	3301      	adds	r3, #1
 800a45a:	603b      	str	r3, [r7, #0]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	2b2f      	cmp	r3, #47	; 0x2f
 800a462:	d0f8      	beq.n	800a456 <follow_path+0x16>
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	2b5c      	cmp	r3, #92	; 0x5c
 800a46a:	d0f4      	beq.n	800a456 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	2200      	movs	r2, #0
 800a470:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	2b1f      	cmp	r3, #31
 800a478:	d80a      	bhi.n	800a490 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2280      	movs	r2, #128	; 0x80
 800a47e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a482:	2100      	movs	r1, #0
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff f81f 	bl	80094c8 <dir_sdi>
 800a48a:	4603      	mov	r3, r0
 800a48c:	75fb      	strb	r3, [r7, #23]
 800a48e:	e048      	b.n	800a522 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a490:	463b      	mov	r3, r7
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7ff fe1b 	bl	800a0d0 <create_name>
 800a49a:	4603      	mov	r3, r0
 800a49c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a49e:	7dfb      	ldrb	r3, [r7, #23]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d139      	bne.n	800a518 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f7ff fb7c 	bl	8009ba2 <dir_find>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a4b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00a      	beq.n	800a4d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a4bc:	7dfb      	ldrb	r3, [r7, #23]
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	d12c      	bne.n	800a51c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a4c2:	7afb      	ldrb	r3, [r7, #11]
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d127      	bne.n	800a51c <follow_path+0xdc>
 800a4cc:	2305      	movs	r3, #5
 800a4ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a4d0:	e024      	b.n	800a51c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a4d2:	7afb      	ldrb	r3, [r7, #11]
 800a4d4:	f003 0304 	and.w	r3, r3, #4
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d121      	bne.n	800a520 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	799b      	ldrb	r3, [r3, #6]
 800a4e0:	f003 0310 	and.w	r3, r3, #16
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a4e8:	2305      	movs	r3, #5
 800a4ea:	75fb      	strb	r3, [r7, #23]
 800a4ec:	e019      	b.n	800a522 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	695b      	ldr	r3, [r3, #20]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	8992      	ldrh	r2, [r2, #12]
 800a4fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a500:	fb00 f202 	mul.w	r2, r0, r2
 800a504:	1a9b      	subs	r3, r3, r2
 800a506:	440b      	add	r3, r1
 800a508:	4619      	mov	r1, r3
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f7ff f982 	bl	8009814 <ld_clust>
 800a510:	4602      	mov	r2, r0
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a516:	e7bb      	b.n	800a490 <follow_path+0x50>
			if (res != FR_OK) break;
 800a518:	bf00      	nop
 800a51a:	e002      	b.n	800a522 <follow_path+0xe2>
				break;
 800a51c:	bf00      	nop
 800a51e:	e000      	b.n	800a522 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a520:	bf00      	nop
			}
		}
	}

	return res;
 800a522:	7dfb      	ldrb	r3, [r7, #23]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3718      	adds	r7, #24
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b087      	sub	sp, #28
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a538:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d031      	beq.n	800a5a6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	617b      	str	r3, [r7, #20]
 800a548:	e002      	b.n	800a550 <get_ldnumber+0x24>
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	3301      	adds	r3, #1
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	2b1f      	cmp	r3, #31
 800a556:	d903      	bls.n	800a560 <get_ldnumber+0x34>
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	2b3a      	cmp	r3, #58	; 0x3a
 800a55e:	d1f4      	bne.n	800a54a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	2b3a      	cmp	r3, #58	; 0x3a
 800a566:	d11c      	bne.n	800a5a2 <get_ldnumber+0x76>
			tp = *path;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	1c5a      	adds	r2, r3, #1
 800a572:	60fa      	str	r2, [r7, #12]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	3b30      	subs	r3, #48	; 0x30
 800a578:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	2b09      	cmp	r3, #9
 800a57e:	d80e      	bhi.n	800a59e <get_ldnumber+0x72>
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	429a      	cmp	r2, r3
 800a586:	d10a      	bne.n	800a59e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d107      	bne.n	800a59e <get_ldnumber+0x72>
					vol = (int)i;
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	3301      	adds	r3, #1
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	e002      	b.n	800a5a8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a5a6:	693b      	ldr	r3, [r7, #16]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	371c      	adds	r7, #28
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	70da      	strb	r2, [r3, #3]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5ca:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7fe fb9a 	bl	8008d08 <move_window>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d001      	beq.n	800a5de <check_fs+0x2a>
 800a5da:	2304      	movs	r3, #4
 800a5dc:	e038      	b.n	800a650 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	3338      	adds	r3, #56	; 0x38
 800a5e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fe f8de 	bl	80087a8 <ld_word>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d001      	beq.n	800a5fc <check_fs+0x48>
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e029      	b.n	800a650 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a602:	2be9      	cmp	r3, #233	; 0xe9
 800a604:	d009      	beq.n	800a61a <check_fs+0x66>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a60c:	2beb      	cmp	r3, #235	; 0xeb
 800a60e:	d11e      	bne.n	800a64e <check_fs+0x9a>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a616:	2b90      	cmp	r3, #144	; 0x90
 800a618:	d119      	bne.n	800a64e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	3338      	adds	r3, #56	; 0x38
 800a61e:	3336      	adds	r3, #54	; 0x36
 800a620:	4618      	mov	r0, r3
 800a622:	f7fe f8d9 	bl	80087d8 <ld_dword>
 800a626:	4603      	mov	r3, r0
 800a628:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a62c:	4a0a      	ldr	r2, [pc, #40]	; (800a658 <check_fs+0xa4>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d101      	bne.n	800a636 <check_fs+0x82>
 800a632:	2300      	movs	r3, #0
 800a634:	e00c      	b.n	800a650 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	3338      	adds	r3, #56	; 0x38
 800a63a:	3352      	adds	r3, #82	; 0x52
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fe f8cb 	bl	80087d8 <ld_dword>
 800a642:	4603      	mov	r3, r0
 800a644:	4a05      	ldr	r2, [pc, #20]	; (800a65c <check_fs+0xa8>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d101      	bne.n	800a64e <check_fs+0x9a>
 800a64a:	2300      	movs	r3, #0
 800a64c:	e000      	b.n	800a650 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a64e:	2302      	movs	r3, #2
}
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	00544146 	.word	0x00544146
 800a65c:	33544146 	.word	0x33544146

0800a660 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b096      	sub	sp, #88	; 0x58
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	4613      	mov	r3, r2
 800a66c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2200      	movs	r2, #0
 800a672:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f7ff ff59 	bl	800a52c <get_ldnumber>
 800a67a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a67e:	2b00      	cmp	r3, #0
 800a680:	da01      	bge.n	800a686 <find_volume+0x26>
 800a682:	230b      	movs	r3, #11
 800a684:	e265      	b.n	800ab52 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a686:	4a9f      	ldr	r2, [pc, #636]	; (800a904 <find_volume+0x2a4>)
 800a688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a68a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a68e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a692:	2b00      	cmp	r3, #0
 800a694:	d101      	bne.n	800a69a <find_volume+0x3a>
 800a696:	230c      	movs	r3, #12
 800a698:	e25b      	b.n	800ab52 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a69e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a6a0:	79fb      	ldrb	r3, [r7, #7]
 800a6a2:	f023 0301 	bic.w	r3, r3, #1
 800a6a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d01a      	beq.n	800a6e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b2:	785b      	ldrb	r3, [r3, #1]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fd ffd9 	bl	800866c <disk_status>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a6c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6c4:	f003 0301 	and.w	r3, r3, #1
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10c      	bne.n	800a6e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a6cc:	79fb      	ldrb	r3, [r7, #7]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d007      	beq.n	800a6e2 <find_volume+0x82>
 800a6d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6d6:	f003 0304 	and.w	r3, r3, #4
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a6de:	230a      	movs	r3, #10
 800a6e0:	e237      	b.n	800ab52 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	e235      	b.n	800ab52 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f6:	785b      	ldrb	r3, [r3, #1]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fd ffd1 	bl	80086a0 <disk_initialize>
 800a6fe:	4603      	mov	r3, r0
 800a700:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a710:	2303      	movs	r3, #3
 800a712:	e21e      	b.n	800ab52 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d007      	beq.n	800a72a <find_volume+0xca>
 800a71a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a71e:	f003 0304 	and.w	r3, r3, #4
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a726:	230a      	movs	r3, #10
 800a728:	e213      	b.n	800ab52 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72c:	7858      	ldrb	r0, [r3, #1]
 800a72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a730:	330c      	adds	r3, #12
 800a732:	461a      	mov	r2, r3
 800a734:	2102      	movs	r1, #2
 800a736:	f7fe f819 	bl	800876c <disk_ioctl>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <find_volume+0xe4>
 800a740:	2301      	movs	r3, #1
 800a742:	e206      	b.n	800ab52 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a746:	899b      	ldrh	r3, [r3, #12]
 800a748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a74c:	d80d      	bhi.n	800a76a <find_volume+0x10a>
 800a74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a750:	899b      	ldrh	r3, [r3, #12]
 800a752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a756:	d308      	bcc.n	800a76a <find_volume+0x10a>
 800a758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75a:	899b      	ldrh	r3, [r3, #12]
 800a75c:	461a      	mov	r2, r3
 800a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a760:	899b      	ldrh	r3, [r3, #12]
 800a762:	3b01      	subs	r3, #1
 800a764:	4013      	ands	r3, r2
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <find_volume+0x10e>
 800a76a:	2301      	movs	r3, #1
 800a76c:	e1f1      	b.n	800ab52 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a772:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a774:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a776:	f7ff ff1d 	bl	800a5b4 <check_fs>
 800a77a:	4603      	mov	r3, r0
 800a77c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a780:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a784:	2b02      	cmp	r3, #2
 800a786:	d149      	bne.n	800a81c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a788:	2300      	movs	r3, #0
 800a78a:	643b      	str	r3, [r7, #64]	; 0x40
 800a78c:	e01e      	b.n	800a7cc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a790:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a796:	011b      	lsls	r3, r3, #4
 800a798:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a79c:	4413      	add	r3, r2
 800a79e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d006      	beq.n	800a7b8 <find_volume+0x158>
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe f812 	bl	80087d8 <ld_dword>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	e000      	b.n	800a7ba <find_volume+0x15a>
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	3358      	adds	r3, #88	; 0x58
 800a7c0:	443b      	add	r3, r7
 800a7c2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	643b      	str	r3, [r7, #64]	; 0x40
 800a7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d9dd      	bls.n	800a78e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a7d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <find_volume+0x182>
 800a7dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a7e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	3358      	adds	r3, #88	; 0x58
 800a7e8:	443b      	add	r3, r7
 800a7ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a7ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a7f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d005      	beq.n	800a802 <find_volume+0x1a2>
 800a7f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a7f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7fa:	f7ff fedb 	bl	800a5b4 <check_fs>
 800a7fe:	4603      	mov	r3, r0
 800a800:	e000      	b.n	800a804 <find_volume+0x1a4>
 800a802:	2303      	movs	r3, #3
 800a804:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a808:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d905      	bls.n	800a81c <find_volume+0x1bc>
 800a810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a812:	3301      	adds	r3, #1
 800a814:	643b      	str	r3, [r7, #64]	; 0x40
 800a816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d9e2      	bls.n	800a7e2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a81c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a820:	2b04      	cmp	r3, #4
 800a822:	d101      	bne.n	800a828 <find_volume+0x1c8>
 800a824:	2301      	movs	r3, #1
 800a826:	e194      	b.n	800ab52 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d901      	bls.n	800a834 <find_volume+0x1d4>
 800a830:	230d      	movs	r3, #13
 800a832:	e18e      	b.n	800ab52 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	3338      	adds	r3, #56	; 0x38
 800a838:	330b      	adds	r3, #11
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fd ffb4 	bl	80087a8 <ld_word>
 800a840:	4603      	mov	r3, r0
 800a842:	461a      	mov	r2, r3
 800a844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a846:	899b      	ldrh	r3, [r3, #12]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d001      	beq.n	800a850 <find_volume+0x1f0>
 800a84c:	230d      	movs	r3, #13
 800a84e:	e180      	b.n	800ab52 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a852:	3338      	adds	r3, #56	; 0x38
 800a854:	3316      	adds	r3, #22
 800a856:	4618      	mov	r0, r3
 800a858:	f7fd ffa6 	bl	80087a8 <ld_word>
 800a85c:	4603      	mov	r3, r0
 800a85e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a862:	2b00      	cmp	r3, #0
 800a864:	d106      	bne.n	800a874 <find_volume+0x214>
 800a866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a868:	3338      	adds	r3, #56	; 0x38
 800a86a:	3324      	adds	r3, #36	; 0x24
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fd ffb3 	bl	80087d8 <ld_dword>
 800a872:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a878:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a882:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a886:	789b      	ldrb	r3, [r3, #2]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d005      	beq.n	800a898 <find_volume+0x238>
 800a88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88e:	789b      	ldrb	r3, [r3, #2]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d001      	beq.n	800a898 <find_volume+0x238>
 800a894:	230d      	movs	r3, #13
 800a896:	e15c      	b.n	800ab52 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89a:	789b      	ldrb	r3, [r3, #2]
 800a89c:	461a      	mov	r2, r3
 800a89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8a0:	fb02 f303 	mul.w	r3, r2, r3
 800a8a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b4:	895b      	ldrh	r3, [r3, #10]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d008      	beq.n	800a8cc <find_volume+0x26c>
 800a8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8bc:	895b      	ldrh	r3, [r3, #10]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c2:	895b      	ldrh	r3, [r3, #10]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <find_volume+0x270>
 800a8cc:	230d      	movs	r3, #13
 800a8ce:	e140      	b.n	800ab52 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d2:	3338      	adds	r3, #56	; 0x38
 800a8d4:	3311      	adds	r3, #17
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fd ff66 	bl	80087a8 <ld_word>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	461a      	mov	r2, r3
 800a8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	891b      	ldrh	r3, [r3, #8]
 800a8e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8ea:	8992      	ldrh	r2, [r2, #12]
 800a8ec:	0952      	lsrs	r2, r2, #5
 800a8ee:	b292      	uxth	r2, r2
 800a8f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8f4:	fb01 f202 	mul.w	r2, r1, r2
 800a8f8:	1a9b      	subs	r3, r3, r2
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d003      	beq.n	800a908 <find_volume+0x2a8>
 800a900:	230d      	movs	r3, #13
 800a902:	e126      	b.n	800ab52 <find_volume+0x4f2>
 800a904:	20005c44 	.word	0x20005c44

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90a:	3338      	adds	r3, #56	; 0x38
 800a90c:	3313      	adds	r3, #19
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fd ff4a 	bl	80087a8 <ld_word>
 800a914:	4603      	mov	r3, r0
 800a916:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d106      	bne.n	800a92c <find_volume+0x2cc>
 800a91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a920:	3338      	adds	r3, #56	; 0x38
 800a922:	3320      	adds	r3, #32
 800a924:	4618      	mov	r0, r3
 800a926:	f7fd ff57 	bl	80087d8 <ld_dword>
 800a92a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	3338      	adds	r3, #56	; 0x38
 800a930:	330e      	adds	r3, #14
 800a932:	4618      	mov	r0, r3
 800a934:	f7fd ff38 	bl	80087a8 <ld_word>
 800a938:	4603      	mov	r3, r0
 800a93a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a93c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <find_volume+0x2e6>
 800a942:	230d      	movs	r3, #13
 800a944:	e105      	b.n	800ab52 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a946:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a94a:	4413      	add	r3, r2
 800a94c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a94e:	8911      	ldrh	r1, [r2, #8]
 800a950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a952:	8992      	ldrh	r2, [r2, #12]
 800a954:	0952      	lsrs	r2, r2, #5
 800a956:	b292      	uxth	r2, r2
 800a958:	fbb1 f2f2 	udiv	r2, r1, r2
 800a95c:	b292      	uxth	r2, r2
 800a95e:	4413      	add	r3, r2
 800a960:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a962:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a966:	429a      	cmp	r2, r3
 800a968:	d201      	bcs.n	800a96e <find_volume+0x30e>
 800a96a:	230d      	movs	r3, #13
 800a96c:	e0f1      	b.n	800ab52 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a96e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a976:	8952      	ldrh	r2, [r2, #10]
 800a978:	fbb3 f3f2 	udiv	r3, r3, r2
 800a97c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <find_volume+0x328>
 800a984:	230d      	movs	r3, #13
 800a986:	e0e4      	b.n	800ab52 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a988:	2303      	movs	r3, #3
 800a98a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a990:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a994:	4293      	cmp	r3, r2
 800a996:	d802      	bhi.n	800a99e <find_volume+0x33e>
 800a998:	2302      	movs	r3, #2
 800a99a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d802      	bhi.n	800a9ae <find_volume+0x34e>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b0:	1c9a      	adds	r2, r3, #2
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9ba:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a9bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a9be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9c0:	441a      	add	r2, r3
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a9c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	441a      	add	r2, r3
 800a9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ce:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a9d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d11e      	bne.n	800aa16 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9da:	3338      	adds	r3, #56	; 0x38
 800a9dc:	332a      	adds	r3, #42	; 0x2a
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fd fee2 	bl	80087a8 <ld_word>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <find_volume+0x38e>
 800a9ea:	230d      	movs	r3, #13
 800a9ec:	e0b1      	b.n	800ab52 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f0:	891b      	ldrh	r3, [r3, #8]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d001      	beq.n	800a9fa <find_volume+0x39a>
 800a9f6:	230d      	movs	r3, #13
 800a9f8:	e0ab      	b.n	800ab52 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fc:	3338      	adds	r3, #56	; 0x38
 800a9fe:	332c      	adds	r3, #44	; 0x2c
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7fd fee9 	bl	80087d8 <ld_dword>
 800aa06:	4602      	mov	r2, r0
 800aa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	647b      	str	r3, [r7, #68]	; 0x44
 800aa14:	e01f      	b.n	800aa56 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800aa16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa18:	891b      	ldrh	r3, [r3, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d101      	bne.n	800aa22 <find_volume+0x3c2>
 800aa1e:	230d      	movs	r3, #13
 800aa20:	e097      	b.n	800ab52 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800aa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa28:	441a      	add	r2, r3
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aa2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d103      	bne.n	800aa3e <find_volume+0x3de>
 800aa36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	005b      	lsls	r3, r3, #1
 800aa3c:	e00a      	b.n	800aa54 <find_volume+0x3f4>
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa40:	69da      	ldr	r2, [r3, #28]
 800aa42:	4613      	mov	r3, r2
 800aa44:	005b      	lsls	r3, r3, #1
 800aa46:	4413      	add	r3, r2
 800aa48:	085a      	lsrs	r2, r3, #1
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4c:	69db      	ldr	r3, [r3, #28]
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800aa54:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800aa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa58:	6a1a      	ldr	r2, [r3, #32]
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5c:	899b      	ldrh	r3, [r3, #12]
 800aa5e:	4619      	mov	r1, r3
 800aa60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa62:	440b      	add	r3, r1
 800aa64:	3b01      	subs	r3, #1
 800aa66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa68:	8989      	ldrh	r1, [r1, #12]
 800aa6a:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d201      	bcs.n	800aa76 <find_volume+0x416>
 800aa72:	230d      	movs	r3, #13
 800aa74:	e06d      	b.n	800ab52 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800aa76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa7c:	619a      	str	r2, [r3, #24]
 800aa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa80:	699a      	ldr	r2, [r3, #24]
 800aa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa84:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800aa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa88:	2280      	movs	r2, #128	; 0x80
 800aa8a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800aa8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa90:	2b03      	cmp	r3, #3
 800aa92:	d149      	bne.n	800ab28 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800aa94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa96:	3338      	adds	r3, #56	; 0x38
 800aa98:	3330      	adds	r3, #48	; 0x30
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fd fe84 	bl	80087a8 <ld_word>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d140      	bne.n	800ab28 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800aaa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aaae:	f7fe f92b 	bl	8008d08 <move_window>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d137      	bne.n	800ab28 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800aab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaba:	2200      	movs	r2, #0
 800aabc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac0:	3338      	adds	r3, #56	; 0x38
 800aac2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fd fe6e 	bl	80087a8 <ld_word>
 800aacc:	4603      	mov	r3, r0
 800aace:	461a      	mov	r2, r3
 800aad0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d127      	bne.n	800ab28 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aada:	3338      	adds	r3, #56	; 0x38
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fd fe7b 	bl	80087d8 <ld_dword>
 800aae2:	4603      	mov	r3, r0
 800aae4:	4a1d      	ldr	r2, [pc, #116]	; (800ab5c <find_volume+0x4fc>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d11e      	bne.n	800ab28 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	3338      	adds	r3, #56	; 0x38
 800aaee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fd fe70 	bl	80087d8 <ld_dword>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	4a19      	ldr	r2, [pc, #100]	; (800ab60 <find_volume+0x500>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d113      	bne.n	800ab28 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ab00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab02:	3338      	adds	r3, #56	; 0x38
 800ab04:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fd fe65 	bl	80087d8 <ld_dword>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab12:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ab14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab16:	3338      	adds	r3, #56	; 0x38
 800ab18:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fd fe5b 	bl	80087d8 <ld_dword>
 800ab22:	4602      	mov	r2, r0
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ab28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ab2e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ab30:	4b0c      	ldr	r3, [pc, #48]	; (800ab64 <find_volume+0x504>)
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	3301      	adds	r3, #1
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	4b0a      	ldr	r3, [pc, #40]	; (800ab64 <find_volume+0x504>)
 800ab3a:	801a      	strh	r2, [r3, #0]
 800ab3c:	4b09      	ldr	r3, [pc, #36]	; (800ab64 <find_volume+0x504>)
 800ab3e:	881a      	ldrh	r2, [r3, #0]
 800ab40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab42:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ab44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab46:	4a08      	ldr	r2, [pc, #32]	; (800ab68 <find_volume+0x508>)
 800ab48:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ab4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab4c:	f7fe f874 	bl	8008c38 <clear_lock>
#endif
	return FR_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3758      	adds	r7, #88	; 0x58
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	41615252 	.word	0x41615252
 800ab60:	61417272 	.word	0x61417272
 800ab64:	20005c48 	.word	0x20005c48
 800ab68:	20005c6c 	.word	0x20005c6c

0800ab6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ab76:	2309      	movs	r3, #9
 800ab78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d01c      	beq.n	800abba <validate+0x4e>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d018      	beq.n	800abba <validate+0x4e>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d013      	beq.n	800abba <validate+0x4e>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	889a      	ldrh	r2, [r3, #4]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	88db      	ldrh	r3, [r3, #6]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d10c      	bne.n	800abba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	785b      	ldrb	r3, [r3, #1]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fd fd60 	bl	800866c <disk_status>
 800abac:	4603      	mov	r3, r0
 800abae:	f003 0301 	and.w	r3, r3, #1
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <validate+0x4e>
			res = FR_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800abba:	7bfb      	ldrb	r3, [r7, #15]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d102      	bne.n	800abc6 <validate+0x5a>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	e000      	b.n	800abc8 <validate+0x5c>
 800abc6:	2300      	movs	r3, #0
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	6013      	str	r3, [r2, #0]
	return res;
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b088      	sub	sp, #32
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	4613      	mov	r3, r2
 800abe4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800abea:	f107 0310 	add.w	r3, r7, #16
 800abee:	4618      	mov	r0, r3
 800abf0:	f7ff fc9c 	bl	800a52c <get_ldnumber>
 800abf4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	da01      	bge.n	800ac00 <f_mount+0x28>
 800abfc:	230b      	movs	r3, #11
 800abfe:	e02b      	b.n	800ac58 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ac00:	4a17      	ldr	r2, [pc, #92]	; (800ac60 <f_mount+0x88>)
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac08:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d005      	beq.n	800ac1c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ac10:	69b8      	ldr	r0, [r7, #24]
 800ac12:	f7fe f811 	bl	8008c38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2200      	movs	r2, #0
 800ac26:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	490d      	ldr	r1, [pc, #52]	; (800ac60 <f_mount+0x88>)
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d002      	beq.n	800ac3e <f_mount+0x66>
 800ac38:	79fb      	ldrb	r3, [r7, #7]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d001      	beq.n	800ac42 <f_mount+0x6a>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e00a      	b.n	800ac58 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ac42:	f107 010c 	add.w	r1, r7, #12
 800ac46:	f107 0308 	add.w	r3, r7, #8
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff fd07 	bl	800a660 <find_volume>
 800ac52:	4603      	mov	r3, r0
 800ac54:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3720      	adds	r7, #32
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	20005c44 	.word	0x20005c44

0800ac64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b09a      	sub	sp, #104	; 0x68
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d101      	bne.n	800ac7c <f_open+0x18>
 800ac78:	2309      	movs	r3, #9
 800ac7a:	e1bb      	b.n	800aff4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ac7c:	79fb      	ldrb	r3, [r7, #7]
 800ac7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac82:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ac84:	79fa      	ldrb	r2, [r7, #7]
 800ac86:	f107 0114 	add.w	r1, r7, #20
 800ac8a:	f107 0308 	add.w	r3, r7, #8
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7ff fce6 	bl	800a660 <find_volume>
 800ac94:	4603      	mov	r3, r0
 800ac96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ac9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f040 819f 	bne.w	800afe2 <f_open+0x37e>
		dj.obj.fs = fs;
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	f107 0318 	add.w	r3, r7, #24
 800acae:	4611      	mov	r1, r2
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7ff fbc5 	bl	800a440 <follow_path>
 800acb6:	4603      	mov	r3, r0
 800acb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800acbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d11a      	bne.n	800acfa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800acc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800acc8:	b25b      	sxtb	r3, r3
 800acca:	2b00      	cmp	r3, #0
 800accc:	da03      	bge.n	800acd6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800acce:	2306      	movs	r3, #6
 800acd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800acd4:	e011      	b.n	800acfa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	f023 0301 	bic.w	r3, r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	bf14      	ite	ne
 800ace0:	2301      	movne	r3, #1
 800ace2:	2300      	moveq	r3, #0
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	461a      	mov	r2, r3
 800ace8:	f107 0318 	add.w	r3, r7, #24
 800acec:	4611      	mov	r1, r2
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fd fe5a 	bl	80089a8 <chk_lock>
 800acf4:	4603      	mov	r3, r0
 800acf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800acfa:	79fb      	ldrb	r3, [r7, #7]
 800acfc:	f003 031c 	and.w	r3, r3, #28
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d07f      	beq.n	800ae04 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ad04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d017      	beq.n	800ad3c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ad0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad10:	2b04      	cmp	r3, #4
 800ad12:	d10e      	bne.n	800ad32 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ad14:	f7fd fea4 	bl	8008a60 <enq_lock>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d006      	beq.n	800ad2c <f_open+0xc8>
 800ad1e:	f107 0318 	add.w	r3, r7, #24
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fe fffe 	bl	8009d24 <dir_register>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	e000      	b.n	800ad2e <f_open+0xca>
 800ad2c:	2312      	movs	r3, #18
 800ad2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ad32:	79fb      	ldrb	r3, [r7, #7]
 800ad34:	f043 0308 	orr.w	r3, r3, #8
 800ad38:	71fb      	strb	r3, [r7, #7]
 800ad3a:	e010      	b.n	800ad5e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ad3c:	7fbb      	ldrb	r3, [r7, #30]
 800ad3e:	f003 0311 	and.w	r3, r3, #17
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d003      	beq.n	800ad4e <f_open+0xea>
					res = FR_DENIED;
 800ad46:	2307      	movs	r3, #7
 800ad48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ad4c:	e007      	b.n	800ad5e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ad4e:	79fb      	ldrb	r3, [r7, #7]
 800ad50:	f003 0304 	and.w	r3, r3, #4
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d002      	beq.n	800ad5e <f_open+0xfa>
 800ad58:	2308      	movs	r3, #8
 800ad5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ad5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d168      	bne.n	800ae38 <f_open+0x1d4>
 800ad66:	79fb      	ldrb	r3, [r7, #7]
 800ad68:	f003 0308 	and.w	r3, r3, #8
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d063      	beq.n	800ae38 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ad70:	f7fc ff50 	bl	8007c14 <get_fattime>
 800ad74:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ad76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad78:	330e      	adds	r3, #14
 800ad7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fd fd69 	bl	8008854 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ad82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad84:	3316      	adds	r3, #22
 800ad86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fd fd63 	bl	8008854 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad90:	330b      	adds	r3, #11
 800ad92:	2220      	movs	r2, #32
 800ad94:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7fe fd39 	bl	8009814 <ld_clust>
 800ada2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ada8:	2200      	movs	r2, #0
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fe fd51 	bl	8009852 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800adb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb2:	331c      	adds	r3, #28
 800adb4:	2100      	movs	r1, #0
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fd fd4c 	bl	8008854 <st_dword>
					fs->wflag = 1;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	2201      	movs	r2, #1
 800adc0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800adc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d037      	beq.n	800ae38 <f_open+0x1d4>
						dw = fs->winsect;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adcc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800adce:	f107 0318 	add.w	r3, r7, #24
 800add2:	2200      	movs	r2, #0
 800add4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe fa41 	bl	800925e <remove_chain>
 800addc:	4603      	mov	r3, r0
 800adde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ade2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d126      	bne.n	800ae38 <f_open+0x1d4>
							res = move_window(fs, dw);
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fd ff8a 	bl	8008d08 <move_window>
 800adf4:	4603      	mov	r3, r0
 800adf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800adfe:	3a01      	subs	r2, #1
 800ae00:	615a      	str	r2, [r3, #20]
 800ae02:	e019      	b.n	800ae38 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ae04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d115      	bne.n	800ae38 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ae0c:	7fbb      	ldrb	r3, [r7, #30]
 800ae0e:	f003 0310 	and.w	r3, r3, #16
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d003      	beq.n	800ae1e <f_open+0x1ba>
					res = FR_NO_FILE;
 800ae16:	2304      	movs	r3, #4
 800ae18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ae1c:	e00c      	b.n	800ae38 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ae1e:	79fb      	ldrb	r3, [r7, #7]
 800ae20:	f003 0302 	and.w	r3, r3, #2
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d007      	beq.n	800ae38 <f_open+0x1d4>
 800ae28:	7fbb      	ldrb	r3, [r7, #30]
 800ae2a:	f003 0301 	and.w	r3, r3, #1
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d002      	beq.n	800ae38 <f_open+0x1d4>
						res = FR_DENIED;
 800ae32:	2307      	movs	r3, #7
 800ae34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ae38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d128      	bne.n	800ae92 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ae40:	79fb      	ldrb	r3, [r7, #7]
 800ae42:	f003 0308 	and.w	r3, r3, #8
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ae4a:	79fb      	ldrb	r3, [r7, #7]
 800ae4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae50:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ae5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ae60:	79fb      	ldrb	r3, [r7, #7]
 800ae62:	f023 0301 	bic.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	bf14      	ite	ne
 800ae6a:	2301      	movne	r3, #1
 800ae6c:	2300      	moveq	r3, #0
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	461a      	mov	r2, r3
 800ae72:	f107 0318 	add.w	r3, r7, #24
 800ae76:	4611      	mov	r1, r2
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fd fe13 	bl	8008aa4 <inc_lock>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	691b      	ldr	r3, [r3, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d102      	bne.n	800ae92 <f_open+0x22e>
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ae92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f040 80a3 	bne.w	800afe2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aea0:	4611      	mov	r1, r2
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fe fcb6 	bl	8009814 <ld_clust>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb0:	331c      	adds	r3, #28
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fd fc90 	bl	80087d8 <ld_dword>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	88da      	ldrh	r2, [r3, #6]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	79fa      	ldrb	r2, [r7, #7]
 800aed6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	3330      	adds	r3, #48	; 0x30
 800aeee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aef2:	2100      	movs	r1, #0
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fd fcfa 	bl	80088ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aefa:	79fb      	ldrb	r3, [r7, #7]
 800aefc:	f003 0320 	and.w	r3, r3, #32
 800af00:	2b00      	cmp	r3, #0
 800af02:	d06e      	beq.n	800afe2 <f_open+0x37e>
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d06a      	beq.n	800afe2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	68da      	ldr	r2, [r3, #12]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	895b      	ldrh	r3, [r3, #10]
 800af18:	461a      	mov	r2, r3
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	899b      	ldrh	r3, [r3, #12]
 800af1e:	fb02 f303 	mul.w	r3, r2, r3
 800af22:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af30:	e016      	b.n	800af60 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800af36:	4618      	mov	r0, r3
 800af38:	f7fd ffa3 	bl	8008e82 <get_fat>
 800af3c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800af3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af40:	2b01      	cmp	r3, #1
 800af42:	d802      	bhi.n	800af4a <f_open+0x2e6>
 800af44:	2302      	movs	r3, #2
 800af46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800af4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af50:	d102      	bne.n	800af58 <f_open+0x2f4>
 800af52:	2301      	movs	r3, #1
 800af54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800af58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800af64:	2b00      	cmp	r3, #0
 800af66:	d103      	bne.n	800af70 <f_open+0x30c>
 800af68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d8e0      	bhi.n	800af32 <f_open+0x2ce>
				}
				fp->clust = clst;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af74:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800af76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d131      	bne.n	800afe2 <f_open+0x37e>
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	899b      	ldrh	r3, [r3, #12]
 800af82:	461a      	mov	r2, r3
 800af84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af86:	fbb3 f1f2 	udiv	r1, r3, r2
 800af8a:	fb01 f202 	mul.w	r2, r1, r2
 800af8e:	1a9b      	subs	r3, r3, r2
 800af90:	2b00      	cmp	r3, #0
 800af92:	d026      	beq.n	800afe2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fd ff53 	bl	8008e44 <clust2sect>
 800af9e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800afa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d103      	bne.n	800afae <f_open+0x34a>
						res = FR_INT_ERR;
 800afa6:	2302      	movs	r3, #2
 800afa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800afac:	e019      	b.n	800afe2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	899b      	ldrh	r3, [r3, #12]
 800afb2:	461a      	mov	r2, r3
 800afb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afb6:	fbb3 f2f2 	udiv	r2, r3, r2
 800afba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afbc:	441a      	add	r2, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	7858      	ldrb	r0, [r3, #1]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6a1a      	ldr	r2, [r3, #32]
 800afd0:	2301      	movs	r3, #1
 800afd2:	f7fd fb8b 	bl	80086ec <disk_read>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <f_open+0x37e>
 800afdc:	2301      	movs	r3, #1
 800afde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800afe2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d002      	beq.n	800aff0 <f_open+0x38c>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aff0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3768      	adds	r7, #104	; 0x68
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b08e      	sub	sp, #56	; 0x38
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2200      	movs	r2, #0
 800b012:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f107 0214 	add.w	r2, r7, #20
 800b01a:	4611      	mov	r1, r2
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7ff fda5 	bl	800ab6c <validate>
 800b022:	4603      	mov	r3, r0
 800b024:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b028:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d107      	bne.n	800b040 <f_read+0x44>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	7d5b      	ldrb	r3, [r3, #21]
 800b034:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b038:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <f_read+0x4a>
 800b040:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b044:	e135      	b.n	800b2b2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	7d1b      	ldrb	r3, [r3, #20]
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <f_read+0x5a>
 800b052:	2307      	movs	r3, #7
 800b054:	e12d      	b.n	800b2b2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	68da      	ldr	r2, [r3, #12]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	6a3b      	ldr	r3, [r7, #32]
 800b066:	429a      	cmp	r2, r3
 800b068:	f240 811e 	bls.w	800b2a8 <f_read+0x2ac>
 800b06c:	6a3b      	ldr	r3, [r7, #32]
 800b06e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b070:	e11a      	b.n	800b2a8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	8992      	ldrh	r2, [r2, #12]
 800b07a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b07e:	fb01 f202 	mul.w	r2, r1, r2
 800b082:	1a9b      	subs	r3, r3, r2
 800b084:	2b00      	cmp	r3, #0
 800b086:	f040 80d5 	bne.w	800b234 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	697a      	ldr	r2, [r7, #20]
 800b090:	8992      	ldrh	r2, [r2, #12]
 800b092:	fbb3 f3f2 	udiv	r3, r3, r2
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	8952      	ldrh	r2, [r2, #10]
 800b09a:	3a01      	subs	r2, #1
 800b09c:	4013      	ands	r3, r2
 800b09e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d12f      	bne.n	800b106 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d103      	bne.n	800b0b6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	633b      	str	r3, [r7, #48]	; 0x30
 800b0b4:	e013      	b.n	800b0de <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d007      	beq.n	800b0ce <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	699b      	ldr	r3, [r3, #24]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7fe f9c7 	bl	8009458 <clmt_clust>
 800b0ca:	6338      	str	r0, [r7, #48]	; 0x30
 800b0cc:	e007      	b.n	800b0de <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	69db      	ldr	r3, [r3, #28]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	f7fd fed3 	bl	8008e82 <get_fat>
 800b0dc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d804      	bhi.n	800b0ee <f_read+0xf2>
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2202      	movs	r2, #2
 800b0e8:	755a      	strb	r2, [r3, #21]
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	e0e1      	b.n	800b2b2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0f4:	d104      	bne.n	800b100 <f_read+0x104>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	755a      	strb	r2, [r3, #21]
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e0d8      	b.n	800b2b2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b104:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	69db      	ldr	r3, [r3, #28]
 800b10c:	4619      	mov	r1, r3
 800b10e:	4610      	mov	r0, r2
 800b110:	f7fd fe98 	bl	8008e44 <clust2sect>
 800b114:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d104      	bne.n	800b126 <f_read+0x12a>
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2202      	movs	r2, #2
 800b120:	755a      	strb	r2, [r3, #21]
 800b122:	2302      	movs	r3, #2
 800b124:	e0c5      	b.n	800b2b2 <f_read+0x2b6>
			sect += csect;
 800b126:	69ba      	ldr	r2, [r7, #24]
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	4413      	add	r3, r2
 800b12c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	899b      	ldrh	r3, [r3, #12]
 800b132:	461a      	mov	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	fbb3 f3f2 	udiv	r3, r3, r2
 800b13a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d041      	beq.n	800b1c6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b142:	69fa      	ldr	r2, [r7, #28]
 800b144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b146:	4413      	add	r3, r2
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	8952      	ldrh	r2, [r2, #10]
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d905      	bls.n	800b15c <f_read+0x160>
					cc = fs->csize - csect;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	895b      	ldrh	r3, [r3, #10]
 800b154:	461a      	mov	r2, r3
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	7858      	ldrb	r0, [r3, #1]
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	69ba      	ldr	r2, [r7, #24]
 800b164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b166:	f7fd fac1 	bl	80086ec <disk_read>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d004      	beq.n	800b17a <f_read+0x17e>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2201      	movs	r2, #1
 800b174:	755a      	strb	r2, [r3, #21]
 800b176:	2301      	movs	r3, #1
 800b178:	e09b      	b.n	800b2b2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	7d1b      	ldrb	r3, [r3, #20]
 800b17e:	b25b      	sxtb	r3, r3
 800b180:	2b00      	cmp	r3, #0
 800b182:	da18      	bge.n	800b1b6 <f_read+0x1ba>
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6a1a      	ldr	r2, [r3, #32]
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	1ad3      	subs	r3, r2, r3
 800b18c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b18e:	429a      	cmp	r2, r3
 800b190:	d911      	bls.n	800b1b6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6a1a      	ldr	r2, [r3, #32]
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	8992      	ldrh	r2, [r2, #12]
 800b19e:	fb02 f303 	mul.w	r3, r2, r3
 800b1a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1a4:	18d0      	adds	r0, r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	899b      	ldrh	r3, [r3, #12]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	f7fd fb7b 	bl	80088ac <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	899b      	ldrh	r3, [r3, #12]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1be:	fb02 f303 	mul.w	r3, r2, r3
 800b1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b1c4:	e05c      	b.n	800b280 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
 800b1ca:	69ba      	ldr	r2, [r7, #24]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d02e      	beq.n	800b22e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	7d1b      	ldrb	r3, [r3, #20]
 800b1d4:	b25b      	sxtb	r3, r3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	da18      	bge.n	800b20c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	7858      	ldrb	r0, [r3, #1]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6a1a      	ldr	r2, [r3, #32]
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	f7fd fa9f 	bl	800872c <disk_write>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d004      	beq.n	800b1fe <f_read+0x202>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	755a      	strb	r2, [r3, #21]
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e059      	b.n	800b2b2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	7d1b      	ldrb	r3, [r3, #20]
 800b202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b206:	b2da      	uxtb	r2, r3
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	7858      	ldrb	r0, [r3, #1]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b216:	2301      	movs	r3, #1
 800b218:	69ba      	ldr	r2, [r7, #24]
 800b21a:	f7fd fa67 	bl	80086ec <disk_read>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d004      	beq.n	800b22e <f_read+0x232>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2201      	movs	r2, #1
 800b228:	755a      	strb	r2, [r3, #21]
 800b22a:	2301      	movs	r3, #1
 800b22c:	e041      	b.n	800b2b2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	69ba      	ldr	r2, [r7, #24]
 800b232:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	899b      	ldrh	r3, [r3, #12]
 800b238:	4618      	mov	r0, r3
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	697a      	ldr	r2, [r7, #20]
 800b240:	8992      	ldrh	r2, [r2, #12]
 800b242:	fbb3 f1f2 	udiv	r1, r3, r2
 800b246:	fb01 f202 	mul.w	r2, r1, r2
 800b24a:	1a9b      	subs	r3, r3, r2
 800b24c:	1ac3      	subs	r3, r0, r3
 800b24e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d901      	bls.n	800b25c <f_read+0x260>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	699b      	ldr	r3, [r3, #24]
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	8992      	ldrh	r2, [r2, #12]
 800b26a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b26e:	fb00 f202 	mul.w	r2, r0, r2
 800b272:	1a9b      	subs	r3, r3, r2
 800b274:	440b      	add	r3, r1
 800b276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b278:	4619      	mov	r1, r3
 800b27a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b27c:	f7fd fb16 	bl	80088ac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b284:	4413      	add	r3, r2
 800b286:	627b      	str	r3, [r7, #36]	; 0x24
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	699a      	ldr	r2, [r3, #24]
 800b28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28e:	441a      	add	r2, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	619a      	str	r2, [r3, #24]
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	441a      	add	r2, r3
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f47f aee1 	bne.w	800b072 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3738      	adds	r7, #56	; 0x38
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b08c      	sub	sp, #48	; 0x30
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	60b9      	str	r1, [r7, #8]
 800b2c4:	607a      	str	r2, [r7, #4]
 800b2c6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f107 0210 	add.w	r2, r7, #16
 800b2d8:	4611      	mov	r1, r2
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7ff fc46 	bl	800ab6c <validate>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b2e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d107      	bne.n	800b2fe <f_write+0x44>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	7d5b      	ldrb	r3, [r3, #21]
 800b2f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b2f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d002      	beq.n	800b304 <f_write+0x4a>
 800b2fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b302:	e16a      	b.n	800b5da <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	7d1b      	ldrb	r3, [r3, #20]
 800b308:	f003 0302 	and.w	r3, r3, #2
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <f_write+0x5a>
 800b310:	2307      	movs	r3, #7
 800b312:	e162      	b.n	800b5da <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	699a      	ldr	r2, [r3, #24]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	441a      	add	r2, r3
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	429a      	cmp	r2, r3
 800b322:	f080 814c 	bcs.w	800b5be <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	43db      	mvns	r3, r3
 800b32c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b32e:	e146      	b.n	800b5be <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	693a      	ldr	r2, [r7, #16]
 800b336:	8992      	ldrh	r2, [r2, #12]
 800b338:	fbb3 f1f2 	udiv	r1, r3, r2
 800b33c:	fb01 f202 	mul.w	r2, r1, r2
 800b340:	1a9b      	subs	r3, r3, r2
 800b342:	2b00      	cmp	r3, #0
 800b344:	f040 80f1 	bne.w	800b52a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	8992      	ldrh	r2, [r2, #12]
 800b350:	fbb3 f3f2 	udiv	r3, r3, r2
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	8952      	ldrh	r2, [r2, #10]
 800b358:	3a01      	subs	r2, #1
 800b35a:	4013      	ands	r3, r2
 800b35c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d143      	bne.n	800b3ec <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d10c      	bne.n	800b386 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b374:	2b00      	cmp	r3, #0
 800b376:	d11a      	bne.n	800b3ae <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2100      	movs	r1, #0
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7fd ffd3 	bl	8009328 <create_chain>
 800b382:	62b8      	str	r0, [r7, #40]	; 0x28
 800b384:	e013      	b.n	800b3ae <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d007      	beq.n	800b39e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	4619      	mov	r1, r3
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f7fe f85f 	bl	8009458 <clmt_clust>
 800b39a:	62b8      	str	r0, [r7, #40]	; 0x28
 800b39c:	e007      	b.n	800b3ae <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	69db      	ldr	r3, [r3, #28]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4610      	mov	r0, r2
 800b3a8:	f7fd ffbe 	bl	8009328 <create_chain>
 800b3ac:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f000 8109 	beq.w	800b5c8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d104      	bne.n	800b3c6 <f_write+0x10c>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2202      	movs	r2, #2
 800b3c0:	755a      	strb	r2, [r3, #21]
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	e109      	b.n	800b5da <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3cc:	d104      	bne.n	800b3d8 <f_write+0x11e>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	755a      	strb	r2, [r3, #21]
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e100      	b.n	800b5da <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3dc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d102      	bne.n	800b3ec <f_write+0x132>
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3ea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	7d1b      	ldrb	r3, [r3, #20]
 800b3f0:	b25b      	sxtb	r3, r3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	da18      	bge.n	800b428 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	7858      	ldrb	r0, [r3, #1]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6a1a      	ldr	r2, [r3, #32]
 800b404:	2301      	movs	r3, #1
 800b406:	f7fd f991 	bl	800872c <disk_write>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d004      	beq.n	800b41a <f_write+0x160>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2201      	movs	r2, #1
 800b414:	755a      	strb	r2, [r3, #21]
 800b416:	2301      	movs	r3, #1
 800b418:	e0df      	b.n	800b5da <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	7d1b      	ldrb	r3, [r3, #20]
 800b41e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b422:	b2da      	uxtb	r2, r3
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b428:	693a      	ldr	r2, [r7, #16]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	69db      	ldr	r3, [r3, #28]
 800b42e:	4619      	mov	r1, r3
 800b430:	4610      	mov	r0, r2
 800b432:	f7fd fd07 	bl	8008e44 <clust2sect>
 800b436:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d104      	bne.n	800b448 <f_write+0x18e>
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2202      	movs	r2, #2
 800b442:	755a      	strb	r2, [r3, #21]
 800b444:	2302      	movs	r3, #2
 800b446:	e0c8      	b.n	800b5da <f_write+0x320>
			sect += csect;
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	69bb      	ldr	r3, [r7, #24]
 800b44c:	4413      	add	r3, r2
 800b44e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	899b      	ldrh	r3, [r3, #12]
 800b454:	461a      	mov	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	fbb3 f3f2 	udiv	r3, r3, r2
 800b45c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d043      	beq.n	800b4ec <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b464:	69ba      	ldr	r2, [r7, #24]
 800b466:	6a3b      	ldr	r3, [r7, #32]
 800b468:	4413      	add	r3, r2
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	8952      	ldrh	r2, [r2, #10]
 800b46e:	4293      	cmp	r3, r2
 800b470:	d905      	bls.n	800b47e <f_write+0x1c4>
					cc = fs->csize - csect;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	895b      	ldrh	r3, [r3, #10]
 800b476:	461a      	mov	r2, r3
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	7858      	ldrb	r0, [r3, #1]
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	69f9      	ldr	r1, [r7, #28]
 800b488:	f7fd f950 	bl	800872c <disk_write>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d004      	beq.n	800b49c <f_write+0x1e2>
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2201      	movs	r2, #1
 800b496:	755a      	strb	r2, [r3, #21]
 800b498:	2301      	movs	r3, #1
 800b49a:	e09e      	b.n	800b5da <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6a1a      	ldr	r2, [r3, #32]
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	6a3a      	ldr	r2, [r7, #32]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d918      	bls.n	800b4dc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6a1a      	ldr	r2, [r3, #32]
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	8992      	ldrh	r2, [r2, #12]
 800b4bc:	fb02 f303 	mul.w	r3, r2, r3
 800b4c0:	69fa      	ldr	r2, [r7, #28]
 800b4c2:	18d1      	adds	r1, r2, r3
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	899b      	ldrh	r3, [r3, #12]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	f7fd f9ef 	bl	80088ac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	7d1b      	ldrb	r3, [r3, #20]
 800b4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	899b      	ldrh	r3, [r3, #12]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	6a3b      	ldr	r3, [r7, #32]
 800b4e4:	fb02 f303 	mul.w	r3, r2, r3
 800b4e8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b4ea:	e04b      	b.n	800b584 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6a1b      	ldr	r3, [r3, #32]
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d016      	beq.n	800b524 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	699a      	ldr	r2, [r3, #24]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d210      	bcs.n	800b524 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	7858      	ldrb	r0, [r3, #1]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b50c:	2301      	movs	r3, #1
 800b50e:	697a      	ldr	r2, [r7, #20]
 800b510:	f7fd f8ec 	bl	80086ec <disk_read>
 800b514:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b516:	2b00      	cmp	r3, #0
 800b518:	d004      	beq.n	800b524 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2201      	movs	r2, #1
 800b51e:	755a      	strb	r2, [r3, #21]
 800b520:	2301      	movs	r3, #1
 800b522:	e05a      	b.n	800b5da <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	899b      	ldrh	r3, [r3, #12]
 800b52e:	4618      	mov	r0, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	8992      	ldrh	r2, [r2, #12]
 800b538:	fbb3 f1f2 	udiv	r1, r3, r2
 800b53c:	fb01 f202 	mul.w	r2, r1, r2
 800b540:	1a9b      	subs	r3, r3, r2
 800b542:	1ac3      	subs	r3, r0, r3
 800b544:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d901      	bls.n	800b552 <f_write+0x298>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	693a      	ldr	r2, [r7, #16]
 800b55e:	8992      	ldrh	r2, [r2, #12]
 800b560:	fbb3 f0f2 	udiv	r0, r3, r2
 800b564:	fb00 f202 	mul.w	r2, r0, r2
 800b568:	1a9b      	subs	r3, r3, r2
 800b56a:	440b      	add	r3, r1
 800b56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56e:	69f9      	ldr	r1, [r7, #28]
 800b570:	4618      	mov	r0, r3
 800b572:	f7fd f99b 	bl	80088ac <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	7d1b      	ldrb	r3, [r3, #20]
 800b57a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b57e:	b2da      	uxtb	r2, r3
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b584:	69fa      	ldr	r2, [r7, #28]
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	4413      	add	r3, r2
 800b58a:	61fb      	str	r3, [r7, #28]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	699a      	ldr	r2, [r3, #24]
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	441a      	add	r2, r3
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	619a      	str	r2, [r3, #24]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	68da      	ldr	r2, [r3, #12]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	bf38      	it	cc
 800b5a4:	461a      	movcc	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	60da      	str	r2, [r3, #12]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b0:	441a      	add	r2, r3
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	601a      	str	r2, [r3, #0]
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f47f aeb5 	bne.w	800b330 <f_write+0x76>
 800b5c6:	e000      	b.n	800b5ca <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b5c8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	7d1b      	ldrb	r3, [r3, #20]
 800b5ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3730      	adds	r7, #48	; 0x30
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b086      	sub	sp, #24
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f107 0208 	add.w	r2, r7, #8
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7ff faba 	bl	800ab6c <validate>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d168      	bne.n	800b6d4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	7d1b      	ldrb	r3, [r3, #20]
 800b606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d062      	beq.n	800b6d4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	7d1b      	ldrb	r3, [r3, #20]
 800b612:	b25b      	sxtb	r3, r3
 800b614:	2b00      	cmp	r3, #0
 800b616:	da15      	bge.n	800b644 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	7858      	ldrb	r0, [r3, #1]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a1a      	ldr	r2, [r3, #32]
 800b626:	2301      	movs	r3, #1
 800b628:	f7fd f880 	bl	800872c <disk_write>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <f_sync+0x54>
 800b632:	2301      	movs	r3, #1
 800b634:	e04f      	b.n	800b6d6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	7d1b      	ldrb	r3, [r3, #20]
 800b63a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b644:	f7fc fae6 	bl	8007c14 <get_fattime>
 800b648:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b650:	4619      	mov	r1, r3
 800b652:	4610      	mov	r0, r2
 800b654:	f7fd fb58 	bl	8008d08 <move_window>
 800b658:	4603      	mov	r3, r0
 800b65a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b65c:	7dfb      	ldrb	r3, [r7, #23]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d138      	bne.n	800b6d4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b666:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	330b      	adds	r3, #11
 800b66c:	781a      	ldrb	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	330b      	adds	r3, #11
 800b672:	f042 0220 	orr.w	r2, r2, #32
 800b676:	b2d2      	uxtb	r2, r2
 800b678:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6818      	ldr	r0, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	461a      	mov	r2, r3
 800b684:	68f9      	ldr	r1, [r7, #12]
 800b686:	f7fe f8e4 	bl	8009852 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f103 021c 	add.w	r2, r3, #28
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	4619      	mov	r1, r3
 800b696:	4610      	mov	r0, r2
 800b698:	f7fd f8dc 	bl	8008854 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	3316      	adds	r3, #22
 800b6a0:	6939      	ldr	r1, [r7, #16]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fd f8d6 	bl	8008854 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	3312      	adds	r3, #18
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fd f8b5 	bl	800881e <st_word>
					fs->wflag = 1;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fd fb51 	bl	8008d64 <sync_fs>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	7d1b      	ldrb	r3, [r3, #20]
 800b6ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f7ff ff7b 	bl	800b5e2 <f_sync>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d118      	bne.n	800b728 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f107 0208 	add.w	r2, r7, #8
 800b6fc:	4611      	mov	r1, r2
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7ff fa34 	bl	800ab6c <validate>
 800b704:	4603      	mov	r3, r0
 800b706:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b708:	7bfb      	ldrb	r3, [r7, #15]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10c      	bne.n	800b728 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	691b      	ldr	r3, [r3, #16]
 800b712:	4618      	mov	r0, r3
 800b714:	f7fd fa54 	bl	8008bc0 <dec_lock>
 800b718:	4603      	mov	r3, r0
 800b71a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d102      	bne.n	800b728 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b728:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b732:	b580      	push	{r7, lr}
 800b734:	b090      	sub	sp, #64	; 0x40
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b73c:	f107 0108 	add.w	r1, r7, #8
 800b740:	1d3b      	adds	r3, r7, #4
 800b742:	2200      	movs	r2, #0
 800b744:	4618      	mov	r0, r3
 800b746:	f7fe ff8b 	bl	800a660 <find_volume>
 800b74a:	4603      	mov	r3, r0
 800b74c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b750:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b754:	2b00      	cmp	r3, #0
 800b756:	d11f      	bne.n	800b798 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	f107 0308 	add.w	r3, r7, #8
 800b75e:	4611      	mov	r1, r2
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fe6d 	bl	800a440 <follow_path>
 800b766:	4603      	mov	r3, r0
 800b768:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b76c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b770:	2b00      	cmp	r3, #0
 800b772:	d111      	bne.n	800b798 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b774:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b778:	b25b      	sxtb	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	da03      	bge.n	800b786 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b77e:	2306      	movs	r3, #6
 800b780:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b784:	e008      	b.n	800b798 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d005      	beq.n	800b798 <f_stat+0x66>
 800b78c:	f107 0308 	add.w	r3, r7, #8
 800b790:	6839      	ldr	r1, [r7, #0]
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe fbbe 	bl	8009f14 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b798:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3740      	adds	r7, #64	; 0x40
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b092      	sub	sp, #72	; 0x48
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b7b0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b7b4:	f107 030c 	add.w	r3, r7, #12
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe ff50 	bl	800a660 <find_volume>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b7c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f040 8099 	bne.w	800b902 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b7d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d8:	699a      	ldr	r2, [r3, #24]
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	3b02      	subs	r3, #2
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d804      	bhi.n	800b7ee <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e6:	699a      	ldr	r2, [r3, #24]
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	601a      	str	r2, [r3, #0]
 800b7ec:	e089      	b.n	800b902 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d128      	bne.n	800b84c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b7fa:	2302      	movs	r3, #2
 800b7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b800:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b802:	f107 0314 	add.w	r3, r7, #20
 800b806:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fd fb3a 	bl	8008e82 <get_fat>
 800b80e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b816:	d103      	bne.n	800b820 <f_getfree+0x7c>
 800b818:	2301      	movs	r3, #1
 800b81a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b81e:	e063      	b.n	800b8e8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b822:	2b01      	cmp	r3, #1
 800b824:	d103      	bne.n	800b82e <f_getfree+0x8a>
 800b826:	2302      	movs	r3, #2
 800b828:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b82c:	e05c      	b.n	800b8e8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b830:	2b00      	cmp	r3, #0
 800b832:	d102      	bne.n	800b83a <f_getfree+0x96>
 800b834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b836:	3301      	adds	r3, #1
 800b838:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b83c:	3301      	adds	r3, #1
 800b83e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b842:	69db      	ldr	r3, [r3, #28]
 800b844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b846:	429a      	cmp	r2, r3
 800b848:	d3db      	bcc.n	800b802 <f_getfree+0x5e>
 800b84a:	e04d      	b.n	800b8e8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b856:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b858:	2300      	movs	r3, #0
 800b85a:	637b      	str	r3, [r7, #52]	; 0x34
 800b85c:	2300      	movs	r3, #0
 800b85e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b862:	2b00      	cmp	r3, #0
 800b864:	d113      	bne.n	800b88e <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86a:	1c5a      	adds	r2, r3, #1
 800b86c:	63ba      	str	r2, [r7, #56]	; 0x38
 800b86e:	4619      	mov	r1, r3
 800b870:	f7fd fa4a 	bl	8008d08 <move_window>
 800b874:	4603      	mov	r3, r0
 800b876:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b87a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d131      	bne.n	800b8e6 <f_getfree+0x142>
							p = fs->win;
 800b882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b884:	3338      	adds	r3, #56	; 0x38
 800b886:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88a:	899b      	ldrh	r3, [r3, #12]
 800b88c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	2b02      	cmp	r3, #2
 800b894:	d10f      	bne.n	800b8b6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b898:	f7fc ff86 	bl	80087a8 <ld_word>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d102      	bne.n	800b8a8 <f_getfree+0x104>
 800b8a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8aa:	3302      	adds	r3, #2
 800b8ac:	633b      	str	r3, [r7, #48]	; 0x30
 800b8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b0:	3b02      	subs	r3, #2
 800b8b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b8b4:	e010      	b.n	800b8d8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b8b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8b8:	f7fc ff8e 	bl	80087d8 <ld_dword>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d102      	bne.n	800b8cc <f_getfree+0x128>
 800b8c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	633b      	str	r3, [r7, #48]	; 0x30
 800b8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d4:	3b04      	subs	r3, #4
 800b8d6:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8da:	3b01      	subs	r3, #1
 800b8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1bd      	bne.n	800b860 <f_getfree+0xbc>
 800b8e4:	e000      	b.n	800b8e8 <f_getfree+0x144>
							if (res != FR_OK) break;
 800b8e6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8ec:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8f2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f6:	791a      	ldrb	r2, [r3, #4]
 800b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fa:	f042 0201 	orr.w	r2, r2, #1
 800b8fe:	b2d2      	uxtb	r2, r2
 800b900:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b902:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b906:	4618      	mov	r0, r3
 800b908:	3748      	adds	r7, #72	; 0x48
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
	...

0800b910 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b910:	b480      	push	{r7}
 800b912:	b087      	sub	sp, #28
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	4613      	mov	r3, r2
 800b91c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b91e:	2301      	movs	r3, #1
 800b920:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b926:	4b1f      	ldr	r3, [pc, #124]	; (800b9a4 <FATFS_LinkDriverEx+0x94>)
 800b928:	7a5b      	ldrb	r3, [r3, #9]
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d131      	bne.n	800b994 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b930:	4b1c      	ldr	r3, [pc, #112]	; (800b9a4 <FATFS_LinkDriverEx+0x94>)
 800b932:	7a5b      	ldrb	r3, [r3, #9]
 800b934:	b2db      	uxtb	r3, r3
 800b936:	461a      	mov	r2, r3
 800b938:	4b1a      	ldr	r3, [pc, #104]	; (800b9a4 <FATFS_LinkDriverEx+0x94>)
 800b93a:	2100      	movs	r1, #0
 800b93c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b93e:	4b19      	ldr	r3, [pc, #100]	; (800b9a4 <FATFS_LinkDriverEx+0x94>)
 800b940:	7a5b      	ldrb	r3, [r3, #9]
 800b942:	b2db      	uxtb	r3, r3
 800b944:	4a17      	ldr	r2, [pc, #92]	; (800b9a4 <FATFS_LinkDriverEx+0x94>)
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	4413      	add	r3, r2
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b94e:	4b15      	ldr	r3, [pc, #84]	; (800b9a4 <FATFS_LinkDriverEx+0x94>)
 800b950:	7a5b      	ldrb	r3, [r3, #9]
 800b952:	b2db      	uxtb	r3, r3
 800b954:	461a      	mov	r2, r3
 800b956:	4b13      	ldr	r3, [pc, #76]	; (800b9a4 <FATFS_LinkDriverEx+0x94>)
 800b958:	4413      	add	r3, r2
 800b95a:	79fa      	ldrb	r2, [r7, #7]
 800b95c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b95e:	4b11      	ldr	r3, [pc, #68]	; (800b9a4 <FATFS_LinkDriverEx+0x94>)
 800b960:	7a5b      	ldrb	r3, [r3, #9]
 800b962:	b2db      	uxtb	r3, r3
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	b2d1      	uxtb	r1, r2
 800b968:	4a0e      	ldr	r2, [pc, #56]	; (800b9a4 <FATFS_LinkDriverEx+0x94>)
 800b96a:	7251      	strb	r1, [r2, #9]
 800b96c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b96e:	7dbb      	ldrb	r3, [r7, #22]
 800b970:	3330      	adds	r3, #48	; 0x30
 800b972:	b2da      	uxtb	r2, r3
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	3301      	adds	r3, #1
 800b97c:	223a      	movs	r2, #58	; 0x3a
 800b97e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	3302      	adds	r3, #2
 800b984:	222f      	movs	r2, #47	; 0x2f
 800b986:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	3303      	adds	r3, #3
 800b98c:	2200      	movs	r2, #0
 800b98e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b990:	2300      	movs	r3, #0
 800b992:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b994:	7dfb      	ldrb	r3, [r7, #23]
}
 800b996:	4618      	mov	r0, r3
 800b998:	371c      	adds	r7, #28
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	20005e6c 	.word	0x20005e6c

0800b9a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7ff ffaa 	bl	800b910 <FATFS_LinkDriverEx>
 800b9bc:	4603      	mov	r3, r0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
	...

0800b9c8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	6039      	str	r1, [r7, #0]
 800b9d2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b9d4:	88fb      	ldrh	r3, [r7, #6]
 800b9d6:	2b7f      	cmp	r3, #127	; 0x7f
 800b9d8:	d802      	bhi.n	800b9e0 <ff_convert+0x18>
		c = chr;
 800b9da:	88fb      	ldrh	r3, [r7, #6]
 800b9dc:	81fb      	strh	r3, [r7, #14]
 800b9de:	e025      	b.n	800ba2c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00b      	beq.n	800b9fe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b9e6:	88fb      	ldrh	r3, [r7, #6]
 800b9e8:	2bff      	cmp	r3, #255	; 0xff
 800b9ea:	d805      	bhi.n	800b9f8 <ff_convert+0x30>
 800b9ec:	88fb      	ldrh	r3, [r7, #6]
 800b9ee:	3b80      	subs	r3, #128	; 0x80
 800b9f0:	4a12      	ldr	r2, [pc, #72]	; (800ba3c <ff_convert+0x74>)
 800b9f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9f6:	e000      	b.n	800b9fa <ff_convert+0x32>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	81fb      	strh	r3, [r7, #14]
 800b9fc:	e016      	b.n	800ba2c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b9fe:	2300      	movs	r3, #0
 800ba00:	81fb      	strh	r3, [r7, #14]
 800ba02:	e009      	b.n	800ba18 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ba04:	89fb      	ldrh	r3, [r7, #14]
 800ba06:	4a0d      	ldr	r2, [pc, #52]	; (800ba3c <ff_convert+0x74>)
 800ba08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba0c:	88fa      	ldrh	r2, [r7, #6]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d006      	beq.n	800ba20 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ba12:	89fb      	ldrh	r3, [r7, #14]
 800ba14:	3301      	adds	r3, #1
 800ba16:	81fb      	strh	r3, [r7, #14]
 800ba18:	89fb      	ldrh	r3, [r7, #14]
 800ba1a:	2b7f      	cmp	r3, #127	; 0x7f
 800ba1c:	d9f2      	bls.n	800ba04 <ff_convert+0x3c>
 800ba1e:	e000      	b.n	800ba22 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ba20:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ba22:	89fb      	ldrh	r3, [r7, #14]
 800ba24:	3380      	adds	r3, #128	; 0x80
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ba2c:	89fb      	ldrh	r3, [r7, #14]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	0800cd80 	.word	0x0800cd80

0800ba40 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	4603      	mov	r3, r0
 800ba48:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ba4a:	88fb      	ldrh	r3, [r7, #6]
 800ba4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba50:	d201      	bcs.n	800ba56 <ff_wtoupper+0x16>
 800ba52:	4b3e      	ldr	r3, [pc, #248]	; (800bb4c <ff_wtoupper+0x10c>)
 800ba54:	e000      	b.n	800ba58 <ff_wtoupper+0x18>
 800ba56:	4b3e      	ldr	r3, [pc, #248]	; (800bb50 <ff_wtoupper+0x110>)
 800ba58:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	1c9a      	adds	r2, r3, #2
 800ba5e:	617a      	str	r2, [r7, #20]
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ba64:	8a7b      	ldrh	r3, [r7, #18]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d068      	beq.n	800bb3c <ff_wtoupper+0xfc>
 800ba6a:	88fa      	ldrh	r2, [r7, #6]
 800ba6c:	8a7b      	ldrh	r3, [r7, #18]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d364      	bcc.n	800bb3c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	1c9a      	adds	r2, r3, #2
 800ba76:	617a      	str	r2, [r7, #20]
 800ba78:	881b      	ldrh	r3, [r3, #0]
 800ba7a:	823b      	strh	r3, [r7, #16]
 800ba7c:	8a3b      	ldrh	r3, [r7, #16]
 800ba7e:	0a1b      	lsrs	r3, r3, #8
 800ba80:	81fb      	strh	r3, [r7, #14]
 800ba82:	8a3b      	ldrh	r3, [r7, #16]
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ba88:	88fa      	ldrh	r2, [r7, #6]
 800ba8a:	8a79      	ldrh	r1, [r7, #18]
 800ba8c:	8a3b      	ldrh	r3, [r7, #16]
 800ba8e:	440b      	add	r3, r1
 800ba90:	429a      	cmp	r2, r3
 800ba92:	da49      	bge.n	800bb28 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ba94:	89fb      	ldrh	r3, [r7, #14]
 800ba96:	2b08      	cmp	r3, #8
 800ba98:	d84f      	bhi.n	800bb3a <ff_wtoupper+0xfa>
 800ba9a:	a201      	add	r2, pc, #4	; (adr r2, 800baa0 <ff_wtoupper+0x60>)
 800ba9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa0:	0800bac5 	.word	0x0800bac5
 800baa4:	0800bad7 	.word	0x0800bad7
 800baa8:	0800baed 	.word	0x0800baed
 800baac:	0800baf5 	.word	0x0800baf5
 800bab0:	0800bafd 	.word	0x0800bafd
 800bab4:	0800bb05 	.word	0x0800bb05
 800bab8:	0800bb0d 	.word	0x0800bb0d
 800babc:	0800bb15 	.word	0x0800bb15
 800bac0:	0800bb1d 	.word	0x0800bb1d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bac4:	88fa      	ldrh	r2, [r7, #6]
 800bac6:	8a7b      	ldrh	r3, [r7, #18]
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	005b      	lsls	r3, r3, #1
 800bacc:	697a      	ldr	r2, [r7, #20]
 800bace:	4413      	add	r3, r2
 800bad0:	881b      	ldrh	r3, [r3, #0]
 800bad2:	80fb      	strh	r3, [r7, #6]
 800bad4:	e027      	b.n	800bb26 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800bad6:	88fa      	ldrh	r2, [r7, #6]
 800bad8:	8a7b      	ldrh	r3, [r7, #18]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	b29b      	uxth	r3, r3
 800bade:	f003 0301 	and.w	r3, r3, #1
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	88fa      	ldrh	r2, [r7, #6]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	80fb      	strh	r3, [r7, #6]
 800baea:	e01c      	b.n	800bb26 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800baec:	88fb      	ldrh	r3, [r7, #6]
 800baee:	3b10      	subs	r3, #16
 800baf0:	80fb      	strh	r3, [r7, #6]
 800baf2:	e018      	b.n	800bb26 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800baf4:	88fb      	ldrh	r3, [r7, #6]
 800baf6:	3b20      	subs	r3, #32
 800baf8:	80fb      	strh	r3, [r7, #6]
 800bafa:	e014      	b.n	800bb26 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bafc:	88fb      	ldrh	r3, [r7, #6]
 800bafe:	3b30      	subs	r3, #48	; 0x30
 800bb00:	80fb      	strh	r3, [r7, #6]
 800bb02:	e010      	b.n	800bb26 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bb04:	88fb      	ldrh	r3, [r7, #6]
 800bb06:	3b1a      	subs	r3, #26
 800bb08:	80fb      	strh	r3, [r7, #6]
 800bb0a:	e00c      	b.n	800bb26 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bb0c:	88fb      	ldrh	r3, [r7, #6]
 800bb0e:	3308      	adds	r3, #8
 800bb10:	80fb      	strh	r3, [r7, #6]
 800bb12:	e008      	b.n	800bb26 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800bb14:	88fb      	ldrh	r3, [r7, #6]
 800bb16:	3b50      	subs	r3, #80	; 0x50
 800bb18:	80fb      	strh	r3, [r7, #6]
 800bb1a:	e004      	b.n	800bb26 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bb1c:	88fb      	ldrh	r3, [r7, #6]
 800bb1e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800bb22:	80fb      	strh	r3, [r7, #6]
 800bb24:	bf00      	nop
			}
			break;
 800bb26:	e008      	b.n	800bb3a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800bb28:	89fb      	ldrh	r3, [r7, #14]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d195      	bne.n	800ba5a <ff_wtoupper+0x1a>
 800bb2e:	8a3b      	ldrh	r3, [r7, #16]
 800bb30:	005b      	lsls	r3, r3, #1
 800bb32:	697a      	ldr	r2, [r7, #20]
 800bb34:	4413      	add	r3, r2
 800bb36:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800bb38:	e78f      	b.n	800ba5a <ff_wtoupper+0x1a>
			break;
 800bb3a:	bf00      	nop
	}

	return chr;
 800bb3c:	88fb      	ldrh	r3, [r7, #6]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	371c      	adds	r7, #28
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	0800ce80 	.word	0x0800ce80
 800bb50:	0800d074 	.word	0x0800d074

0800bb54 <std>:
 800bb54:	2300      	movs	r3, #0
 800bb56:	b510      	push	{r4, lr}
 800bb58:	4604      	mov	r4, r0
 800bb5a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb62:	6083      	str	r3, [r0, #8]
 800bb64:	8181      	strh	r1, [r0, #12]
 800bb66:	6643      	str	r3, [r0, #100]	; 0x64
 800bb68:	81c2      	strh	r2, [r0, #14]
 800bb6a:	6183      	str	r3, [r0, #24]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	2208      	movs	r2, #8
 800bb70:	305c      	adds	r0, #92	; 0x5c
 800bb72:	f000 f931 	bl	800bdd8 <memset>
 800bb76:	4b0d      	ldr	r3, [pc, #52]	; (800bbac <std+0x58>)
 800bb78:	6263      	str	r3, [r4, #36]	; 0x24
 800bb7a:	4b0d      	ldr	r3, [pc, #52]	; (800bbb0 <std+0x5c>)
 800bb7c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb7e:	4b0d      	ldr	r3, [pc, #52]	; (800bbb4 <std+0x60>)
 800bb80:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb82:	4b0d      	ldr	r3, [pc, #52]	; (800bbb8 <std+0x64>)
 800bb84:	6323      	str	r3, [r4, #48]	; 0x30
 800bb86:	4b0d      	ldr	r3, [pc, #52]	; (800bbbc <std+0x68>)
 800bb88:	6224      	str	r4, [r4, #32]
 800bb8a:	429c      	cmp	r4, r3
 800bb8c:	d006      	beq.n	800bb9c <std+0x48>
 800bb8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bb92:	4294      	cmp	r4, r2
 800bb94:	d002      	beq.n	800bb9c <std+0x48>
 800bb96:	33d0      	adds	r3, #208	; 0xd0
 800bb98:	429c      	cmp	r4, r3
 800bb9a:	d105      	bne.n	800bba8 <std+0x54>
 800bb9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bba4:	f000 b94a 	b.w	800be3c <__retarget_lock_init_recursive>
 800bba8:	bd10      	pop	{r4, pc}
 800bbaa:	bf00      	nop
 800bbac:	0800c69d 	.word	0x0800c69d
 800bbb0:	0800c6bf 	.word	0x0800c6bf
 800bbb4:	0800c6f7 	.word	0x0800c6f7
 800bbb8:	0800c71b 	.word	0x0800c71b
 800bbbc:	20005e78 	.word	0x20005e78

0800bbc0 <stdio_exit_handler>:
 800bbc0:	4a02      	ldr	r2, [pc, #8]	; (800bbcc <stdio_exit_handler+0xc>)
 800bbc2:	4903      	ldr	r1, [pc, #12]	; (800bbd0 <stdio_exit_handler+0x10>)
 800bbc4:	4803      	ldr	r0, [pc, #12]	; (800bbd4 <stdio_exit_handler+0x14>)
 800bbc6:	f000 b869 	b.w	800bc9c <_fwalk_sglue>
 800bbca:	bf00      	nop
 800bbcc:	20000038 	.word	0x20000038
 800bbd0:	0800c635 	.word	0x0800c635
 800bbd4:	20000044 	.word	0x20000044

0800bbd8 <cleanup_stdio>:
 800bbd8:	6841      	ldr	r1, [r0, #4]
 800bbda:	4b0c      	ldr	r3, [pc, #48]	; (800bc0c <cleanup_stdio+0x34>)
 800bbdc:	4299      	cmp	r1, r3
 800bbde:	b510      	push	{r4, lr}
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	d001      	beq.n	800bbe8 <cleanup_stdio+0x10>
 800bbe4:	f000 fd26 	bl	800c634 <_fflush_r>
 800bbe8:	68a1      	ldr	r1, [r4, #8]
 800bbea:	4b09      	ldr	r3, [pc, #36]	; (800bc10 <cleanup_stdio+0x38>)
 800bbec:	4299      	cmp	r1, r3
 800bbee:	d002      	beq.n	800bbf6 <cleanup_stdio+0x1e>
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 fd1f 	bl	800c634 <_fflush_r>
 800bbf6:	68e1      	ldr	r1, [r4, #12]
 800bbf8:	4b06      	ldr	r3, [pc, #24]	; (800bc14 <cleanup_stdio+0x3c>)
 800bbfa:	4299      	cmp	r1, r3
 800bbfc:	d004      	beq.n	800bc08 <cleanup_stdio+0x30>
 800bbfe:	4620      	mov	r0, r4
 800bc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc04:	f000 bd16 	b.w	800c634 <_fflush_r>
 800bc08:	bd10      	pop	{r4, pc}
 800bc0a:	bf00      	nop
 800bc0c:	20005e78 	.word	0x20005e78
 800bc10:	20005ee0 	.word	0x20005ee0
 800bc14:	20005f48 	.word	0x20005f48

0800bc18 <global_stdio_init.part.0>:
 800bc18:	b510      	push	{r4, lr}
 800bc1a:	4b0b      	ldr	r3, [pc, #44]	; (800bc48 <global_stdio_init.part.0+0x30>)
 800bc1c:	4c0b      	ldr	r4, [pc, #44]	; (800bc4c <global_stdio_init.part.0+0x34>)
 800bc1e:	4a0c      	ldr	r2, [pc, #48]	; (800bc50 <global_stdio_init.part.0+0x38>)
 800bc20:	601a      	str	r2, [r3, #0]
 800bc22:	4620      	mov	r0, r4
 800bc24:	2200      	movs	r2, #0
 800bc26:	2104      	movs	r1, #4
 800bc28:	f7ff ff94 	bl	800bb54 <std>
 800bc2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bc30:	2201      	movs	r2, #1
 800bc32:	2109      	movs	r1, #9
 800bc34:	f7ff ff8e 	bl	800bb54 <std>
 800bc38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bc3c:	2202      	movs	r2, #2
 800bc3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc42:	2112      	movs	r1, #18
 800bc44:	f7ff bf86 	b.w	800bb54 <std>
 800bc48:	20005fb0 	.word	0x20005fb0
 800bc4c:	20005e78 	.word	0x20005e78
 800bc50:	0800bbc1 	.word	0x0800bbc1

0800bc54 <__sfp_lock_acquire>:
 800bc54:	4801      	ldr	r0, [pc, #4]	; (800bc5c <__sfp_lock_acquire+0x8>)
 800bc56:	f000 b8f2 	b.w	800be3e <__retarget_lock_acquire_recursive>
 800bc5a:	bf00      	nop
 800bc5c:	20005fb5 	.word	0x20005fb5

0800bc60 <__sfp_lock_release>:
 800bc60:	4801      	ldr	r0, [pc, #4]	; (800bc68 <__sfp_lock_release+0x8>)
 800bc62:	f000 b8ed 	b.w	800be40 <__retarget_lock_release_recursive>
 800bc66:	bf00      	nop
 800bc68:	20005fb5 	.word	0x20005fb5

0800bc6c <__sinit>:
 800bc6c:	b510      	push	{r4, lr}
 800bc6e:	4604      	mov	r4, r0
 800bc70:	f7ff fff0 	bl	800bc54 <__sfp_lock_acquire>
 800bc74:	6a23      	ldr	r3, [r4, #32]
 800bc76:	b11b      	cbz	r3, 800bc80 <__sinit+0x14>
 800bc78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc7c:	f7ff bff0 	b.w	800bc60 <__sfp_lock_release>
 800bc80:	4b04      	ldr	r3, [pc, #16]	; (800bc94 <__sinit+0x28>)
 800bc82:	6223      	str	r3, [r4, #32]
 800bc84:	4b04      	ldr	r3, [pc, #16]	; (800bc98 <__sinit+0x2c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1f5      	bne.n	800bc78 <__sinit+0xc>
 800bc8c:	f7ff ffc4 	bl	800bc18 <global_stdio_init.part.0>
 800bc90:	e7f2      	b.n	800bc78 <__sinit+0xc>
 800bc92:	bf00      	nop
 800bc94:	0800bbd9 	.word	0x0800bbd9
 800bc98:	20005fb0 	.word	0x20005fb0

0800bc9c <_fwalk_sglue>:
 800bc9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca0:	4607      	mov	r7, r0
 800bca2:	4688      	mov	r8, r1
 800bca4:	4614      	mov	r4, r2
 800bca6:	2600      	movs	r6, #0
 800bca8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcac:	f1b9 0901 	subs.w	r9, r9, #1
 800bcb0:	d505      	bpl.n	800bcbe <_fwalk_sglue+0x22>
 800bcb2:	6824      	ldr	r4, [r4, #0]
 800bcb4:	2c00      	cmp	r4, #0
 800bcb6:	d1f7      	bne.n	800bca8 <_fwalk_sglue+0xc>
 800bcb8:	4630      	mov	r0, r6
 800bcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcbe:	89ab      	ldrh	r3, [r5, #12]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d907      	bls.n	800bcd4 <_fwalk_sglue+0x38>
 800bcc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	d003      	beq.n	800bcd4 <_fwalk_sglue+0x38>
 800bccc:	4629      	mov	r1, r5
 800bcce:	4638      	mov	r0, r7
 800bcd0:	47c0      	blx	r8
 800bcd2:	4306      	orrs	r6, r0
 800bcd4:	3568      	adds	r5, #104	; 0x68
 800bcd6:	e7e9      	b.n	800bcac <_fwalk_sglue+0x10>

0800bcd8 <iprintf>:
 800bcd8:	b40f      	push	{r0, r1, r2, r3}
 800bcda:	b507      	push	{r0, r1, r2, lr}
 800bcdc:	4906      	ldr	r1, [pc, #24]	; (800bcf8 <iprintf+0x20>)
 800bcde:	ab04      	add	r3, sp, #16
 800bce0:	6808      	ldr	r0, [r1, #0]
 800bce2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bce6:	6881      	ldr	r1, [r0, #8]
 800bce8:	9301      	str	r3, [sp, #4]
 800bcea:	f000 f8d3 	bl	800be94 <_vfiprintf_r>
 800bcee:	b003      	add	sp, #12
 800bcf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcf4:	b004      	add	sp, #16
 800bcf6:	4770      	bx	lr
 800bcf8:	20000090 	.word	0x20000090

0800bcfc <_puts_r>:
 800bcfc:	6a03      	ldr	r3, [r0, #32]
 800bcfe:	b570      	push	{r4, r5, r6, lr}
 800bd00:	6884      	ldr	r4, [r0, #8]
 800bd02:	4605      	mov	r5, r0
 800bd04:	460e      	mov	r6, r1
 800bd06:	b90b      	cbnz	r3, 800bd0c <_puts_r+0x10>
 800bd08:	f7ff ffb0 	bl	800bc6c <__sinit>
 800bd0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd0e:	07db      	lsls	r3, r3, #31
 800bd10:	d405      	bmi.n	800bd1e <_puts_r+0x22>
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	0598      	lsls	r0, r3, #22
 800bd16:	d402      	bmi.n	800bd1e <_puts_r+0x22>
 800bd18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd1a:	f000 f890 	bl	800be3e <__retarget_lock_acquire_recursive>
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	0719      	lsls	r1, r3, #28
 800bd22:	d513      	bpl.n	800bd4c <_puts_r+0x50>
 800bd24:	6923      	ldr	r3, [r4, #16]
 800bd26:	b18b      	cbz	r3, 800bd4c <_puts_r+0x50>
 800bd28:	3e01      	subs	r6, #1
 800bd2a:	68a3      	ldr	r3, [r4, #8]
 800bd2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd30:	3b01      	subs	r3, #1
 800bd32:	60a3      	str	r3, [r4, #8]
 800bd34:	b9e9      	cbnz	r1, 800bd72 <_puts_r+0x76>
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	da2e      	bge.n	800bd98 <_puts_r+0x9c>
 800bd3a:	4622      	mov	r2, r4
 800bd3c:	210a      	movs	r1, #10
 800bd3e:	4628      	mov	r0, r5
 800bd40:	f000 fcef 	bl	800c722 <__swbuf_r>
 800bd44:	3001      	adds	r0, #1
 800bd46:	d007      	beq.n	800bd58 <_puts_r+0x5c>
 800bd48:	250a      	movs	r5, #10
 800bd4a:	e007      	b.n	800bd5c <_puts_r+0x60>
 800bd4c:	4621      	mov	r1, r4
 800bd4e:	4628      	mov	r0, r5
 800bd50:	f000 fd24 	bl	800c79c <__swsetup_r>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d0e7      	beq.n	800bd28 <_puts_r+0x2c>
 800bd58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bd5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd5e:	07da      	lsls	r2, r3, #31
 800bd60:	d405      	bmi.n	800bd6e <_puts_r+0x72>
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	059b      	lsls	r3, r3, #22
 800bd66:	d402      	bmi.n	800bd6e <_puts_r+0x72>
 800bd68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd6a:	f000 f869 	bl	800be40 <__retarget_lock_release_recursive>
 800bd6e:	4628      	mov	r0, r5
 800bd70:	bd70      	pop	{r4, r5, r6, pc}
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	da04      	bge.n	800bd80 <_puts_r+0x84>
 800bd76:	69a2      	ldr	r2, [r4, #24]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	dc06      	bgt.n	800bd8a <_puts_r+0x8e>
 800bd7c:	290a      	cmp	r1, #10
 800bd7e:	d004      	beq.n	800bd8a <_puts_r+0x8e>
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	1c5a      	adds	r2, r3, #1
 800bd84:	6022      	str	r2, [r4, #0]
 800bd86:	7019      	strb	r1, [r3, #0]
 800bd88:	e7cf      	b.n	800bd2a <_puts_r+0x2e>
 800bd8a:	4622      	mov	r2, r4
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	f000 fcc8 	bl	800c722 <__swbuf_r>
 800bd92:	3001      	adds	r0, #1
 800bd94:	d1c9      	bne.n	800bd2a <_puts_r+0x2e>
 800bd96:	e7df      	b.n	800bd58 <_puts_r+0x5c>
 800bd98:	6823      	ldr	r3, [r4, #0]
 800bd9a:	250a      	movs	r5, #10
 800bd9c:	1c5a      	adds	r2, r3, #1
 800bd9e:	6022      	str	r2, [r4, #0]
 800bda0:	701d      	strb	r5, [r3, #0]
 800bda2:	e7db      	b.n	800bd5c <_puts_r+0x60>

0800bda4 <puts>:
 800bda4:	4b02      	ldr	r3, [pc, #8]	; (800bdb0 <puts+0xc>)
 800bda6:	4601      	mov	r1, r0
 800bda8:	6818      	ldr	r0, [r3, #0]
 800bdaa:	f7ff bfa7 	b.w	800bcfc <_puts_r>
 800bdae:	bf00      	nop
 800bdb0:	20000090 	.word	0x20000090

0800bdb4 <strncmp>:
 800bdb4:	b510      	push	{r4, lr}
 800bdb6:	b16a      	cbz	r2, 800bdd4 <strncmp+0x20>
 800bdb8:	3901      	subs	r1, #1
 800bdba:	1884      	adds	r4, r0, r2
 800bdbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdc0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d103      	bne.n	800bdd0 <strncmp+0x1c>
 800bdc8:	42a0      	cmp	r0, r4
 800bdca:	d001      	beq.n	800bdd0 <strncmp+0x1c>
 800bdcc:	2a00      	cmp	r2, #0
 800bdce:	d1f5      	bne.n	800bdbc <strncmp+0x8>
 800bdd0:	1ad0      	subs	r0, r2, r3
 800bdd2:	bd10      	pop	{r4, pc}
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	e7fc      	b.n	800bdd2 <strncmp+0x1e>

0800bdd8 <memset>:
 800bdd8:	4402      	add	r2, r0
 800bdda:	4603      	mov	r3, r0
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d100      	bne.n	800bde2 <memset+0xa>
 800bde0:	4770      	bx	lr
 800bde2:	f803 1b01 	strb.w	r1, [r3], #1
 800bde6:	e7f9      	b.n	800bddc <memset+0x4>

0800bde8 <__errno>:
 800bde8:	4b01      	ldr	r3, [pc, #4]	; (800bdf0 <__errno+0x8>)
 800bdea:	6818      	ldr	r0, [r3, #0]
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	20000090 	.word	0x20000090

0800bdf4 <__libc_init_array>:
 800bdf4:	b570      	push	{r4, r5, r6, lr}
 800bdf6:	4d0d      	ldr	r5, [pc, #52]	; (800be2c <__libc_init_array+0x38>)
 800bdf8:	4c0d      	ldr	r4, [pc, #52]	; (800be30 <__libc_init_array+0x3c>)
 800bdfa:	1b64      	subs	r4, r4, r5
 800bdfc:	10a4      	asrs	r4, r4, #2
 800bdfe:	2600      	movs	r6, #0
 800be00:	42a6      	cmp	r6, r4
 800be02:	d109      	bne.n	800be18 <__libc_init_array+0x24>
 800be04:	4d0b      	ldr	r5, [pc, #44]	; (800be34 <__libc_init_array+0x40>)
 800be06:	4c0c      	ldr	r4, [pc, #48]	; (800be38 <__libc_init_array+0x44>)
 800be08:	f000 fe46 	bl	800ca98 <_init>
 800be0c:	1b64      	subs	r4, r4, r5
 800be0e:	10a4      	asrs	r4, r4, #2
 800be10:	2600      	movs	r6, #0
 800be12:	42a6      	cmp	r6, r4
 800be14:	d105      	bne.n	800be22 <__libc_init_array+0x2e>
 800be16:	bd70      	pop	{r4, r5, r6, pc}
 800be18:	f855 3b04 	ldr.w	r3, [r5], #4
 800be1c:	4798      	blx	r3
 800be1e:	3601      	adds	r6, #1
 800be20:	e7ee      	b.n	800be00 <__libc_init_array+0xc>
 800be22:	f855 3b04 	ldr.w	r3, [r5], #4
 800be26:	4798      	blx	r3
 800be28:	3601      	adds	r6, #1
 800be2a:	e7f2      	b.n	800be12 <__libc_init_array+0x1e>
 800be2c:	0800d16c 	.word	0x0800d16c
 800be30:	0800d16c 	.word	0x0800d16c
 800be34:	0800d16c 	.word	0x0800d16c
 800be38:	0800d170 	.word	0x0800d170

0800be3c <__retarget_lock_init_recursive>:
 800be3c:	4770      	bx	lr

0800be3e <__retarget_lock_acquire_recursive>:
 800be3e:	4770      	bx	lr

0800be40 <__retarget_lock_release_recursive>:
 800be40:	4770      	bx	lr

0800be42 <__sfputc_r>:
 800be42:	6893      	ldr	r3, [r2, #8]
 800be44:	3b01      	subs	r3, #1
 800be46:	2b00      	cmp	r3, #0
 800be48:	b410      	push	{r4}
 800be4a:	6093      	str	r3, [r2, #8]
 800be4c:	da08      	bge.n	800be60 <__sfputc_r+0x1e>
 800be4e:	6994      	ldr	r4, [r2, #24]
 800be50:	42a3      	cmp	r3, r4
 800be52:	db01      	blt.n	800be58 <__sfputc_r+0x16>
 800be54:	290a      	cmp	r1, #10
 800be56:	d103      	bne.n	800be60 <__sfputc_r+0x1e>
 800be58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be5c:	f000 bc61 	b.w	800c722 <__swbuf_r>
 800be60:	6813      	ldr	r3, [r2, #0]
 800be62:	1c58      	adds	r0, r3, #1
 800be64:	6010      	str	r0, [r2, #0]
 800be66:	7019      	strb	r1, [r3, #0]
 800be68:	4608      	mov	r0, r1
 800be6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <__sfputs_r>:
 800be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be72:	4606      	mov	r6, r0
 800be74:	460f      	mov	r7, r1
 800be76:	4614      	mov	r4, r2
 800be78:	18d5      	adds	r5, r2, r3
 800be7a:	42ac      	cmp	r4, r5
 800be7c:	d101      	bne.n	800be82 <__sfputs_r+0x12>
 800be7e:	2000      	movs	r0, #0
 800be80:	e007      	b.n	800be92 <__sfputs_r+0x22>
 800be82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be86:	463a      	mov	r2, r7
 800be88:	4630      	mov	r0, r6
 800be8a:	f7ff ffda 	bl	800be42 <__sfputc_r>
 800be8e:	1c43      	adds	r3, r0, #1
 800be90:	d1f3      	bne.n	800be7a <__sfputs_r+0xa>
 800be92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be94 <_vfiprintf_r>:
 800be94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be98:	460d      	mov	r5, r1
 800be9a:	b09d      	sub	sp, #116	; 0x74
 800be9c:	4614      	mov	r4, r2
 800be9e:	4698      	mov	r8, r3
 800bea0:	4606      	mov	r6, r0
 800bea2:	b118      	cbz	r0, 800beac <_vfiprintf_r+0x18>
 800bea4:	6a03      	ldr	r3, [r0, #32]
 800bea6:	b90b      	cbnz	r3, 800beac <_vfiprintf_r+0x18>
 800bea8:	f7ff fee0 	bl	800bc6c <__sinit>
 800beac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beae:	07d9      	lsls	r1, r3, #31
 800beb0:	d405      	bmi.n	800bebe <_vfiprintf_r+0x2a>
 800beb2:	89ab      	ldrh	r3, [r5, #12]
 800beb4:	059a      	lsls	r2, r3, #22
 800beb6:	d402      	bmi.n	800bebe <_vfiprintf_r+0x2a>
 800beb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beba:	f7ff ffc0 	bl	800be3e <__retarget_lock_acquire_recursive>
 800bebe:	89ab      	ldrh	r3, [r5, #12]
 800bec0:	071b      	lsls	r3, r3, #28
 800bec2:	d501      	bpl.n	800bec8 <_vfiprintf_r+0x34>
 800bec4:	692b      	ldr	r3, [r5, #16]
 800bec6:	b99b      	cbnz	r3, 800bef0 <_vfiprintf_r+0x5c>
 800bec8:	4629      	mov	r1, r5
 800beca:	4630      	mov	r0, r6
 800becc:	f000 fc66 	bl	800c79c <__swsetup_r>
 800bed0:	b170      	cbz	r0, 800bef0 <_vfiprintf_r+0x5c>
 800bed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bed4:	07dc      	lsls	r4, r3, #31
 800bed6:	d504      	bpl.n	800bee2 <_vfiprintf_r+0x4e>
 800bed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bedc:	b01d      	add	sp, #116	; 0x74
 800bede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee2:	89ab      	ldrh	r3, [r5, #12]
 800bee4:	0598      	lsls	r0, r3, #22
 800bee6:	d4f7      	bmi.n	800bed8 <_vfiprintf_r+0x44>
 800bee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beea:	f7ff ffa9 	bl	800be40 <__retarget_lock_release_recursive>
 800beee:	e7f3      	b.n	800bed8 <_vfiprintf_r+0x44>
 800bef0:	2300      	movs	r3, #0
 800bef2:	9309      	str	r3, [sp, #36]	; 0x24
 800bef4:	2320      	movs	r3, #32
 800bef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800befa:	f8cd 800c 	str.w	r8, [sp, #12]
 800befe:	2330      	movs	r3, #48	; 0x30
 800bf00:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c0b4 <_vfiprintf_r+0x220>
 800bf04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf08:	f04f 0901 	mov.w	r9, #1
 800bf0c:	4623      	mov	r3, r4
 800bf0e:	469a      	mov	sl, r3
 800bf10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf14:	b10a      	cbz	r2, 800bf1a <_vfiprintf_r+0x86>
 800bf16:	2a25      	cmp	r2, #37	; 0x25
 800bf18:	d1f9      	bne.n	800bf0e <_vfiprintf_r+0x7a>
 800bf1a:	ebba 0b04 	subs.w	fp, sl, r4
 800bf1e:	d00b      	beq.n	800bf38 <_vfiprintf_r+0xa4>
 800bf20:	465b      	mov	r3, fp
 800bf22:	4622      	mov	r2, r4
 800bf24:	4629      	mov	r1, r5
 800bf26:	4630      	mov	r0, r6
 800bf28:	f7ff ffa2 	bl	800be70 <__sfputs_r>
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	f000 80a9 	beq.w	800c084 <_vfiprintf_r+0x1f0>
 800bf32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf34:	445a      	add	r2, fp
 800bf36:	9209      	str	r2, [sp, #36]	; 0x24
 800bf38:	f89a 3000 	ldrb.w	r3, [sl]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f000 80a1 	beq.w	800c084 <_vfiprintf_r+0x1f0>
 800bf42:	2300      	movs	r3, #0
 800bf44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf4c:	f10a 0a01 	add.w	sl, sl, #1
 800bf50:	9304      	str	r3, [sp, #16]
 800bf52:	9307      	str	r3, [sp, #28]
 800bf54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf58:	931a      	str	r3, [sp, #104]	; 0x68
 800bf5a:	4654      	mov	r4, sl
 800bf5c:	2205      	movs	r2, #5
 800bf5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf62:	4854      	ldr	r0, [pc, #336]	; (800c0b4 <_vfiprintf_r+0x220>)
 800bf64:	f7f4 f934 	bl	80001d0 <memchr>
 800bf68:	9a04      	ldr	r2, [sp, #16]
 800bf6a:	b9d8      	cbnz	r0, 800bfa4 <_vfiprintf_r+0x110>
 800bf6c:	06d1      	lsls	r1, r2, #27
 800bf6e:	bf44      	itt	mi
 800bf70:	2320      	movmi	r3, #32
 800bf72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf76:	0713      	lsls	r3, r2, #28
 800bf78:	bf44      	itt	mi
 800bf7a:	232b      	movmi	r3, #43	; 0x2b
 800bf7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf80:	f89a 3000 	ldrb.w	r3, [sl]
 800bf84:	2b2a      	cmp	r3, #42	; 0x2a
 800bf86:	d015      	beq.n	800bfb4 <_vfiprintf_r+0x120>
 800bf88:	9a07      	ldr	r2, [sp, #28]
 800bf8a:	4654      	mov	r4, sl
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	f04f 0c0a 	mov.w	ip, #10
 800bf92:	4621      	mov	r1, r4
 800bf94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf98:	3b30      	subs	r3, #48	; 0x30
 800bf9a:	2b09      	cmp	r3, #9
 800bf9c:	d94d      	bls.n	800c03a <_vfiprintf_r+0x1a6>
 800bf9e:	b1b0      	cbz	r0, 800bfce <_vfiprintf_r+0x13a>
 800bfa0:	9207      	str	r2, [sp, #28]
 800bfa2:	e014      	b.n	800bfce <_vfiprintf_r+0x13a>
 800bfa4:	eba0 0308 	sub.w	r3, r0, r8
 800bfa8:	fa09 f303 	lsl.w	r3, r9, r3
 800bfac:	4313      	orrs	r3, r2
 800bfae:	9304      	str	r3, [sp, #16]
 800bfb0:	46a2      	mov	sl, r4
 800bfb2:	e7d2      	b.n	800bf5a <_vfiprintf_r+0xc6>
 800bfb4:	9b03      	ldr	r3, [sp, #12]
 800bfb6:	1d19      	adds	r1, r3, #4
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	9103      	str	r1, [sp, #12]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	bfbb      	ittet	lt
 800bfc0:	425b      	neglt	r3, r3
 800bfc2:	f042 0202 	orrlt.w	r2, r2, #2
 800bfc6:	9307      	strge	r3, [sp, #28]
 800bfc8:	9307      	strlt	r3, [sp, #28]
 800bfca:	bfb8      	it	lt
 800bfcc:	9204      	strlt	r2, [sp, #16]
 800bfce:	7823      	ldrb	r3, [r4, #0]
 800bfd0:	2b2e      	cmp	r3, #46	; 0x2e
 800bfd2:	d10c      	bne.n	800bfee <_vfiprintf_r+0x15a>
 800bfd4:	7863      	ldrb	r3, [r4, #1]
 800bfd6:	2b2a      	cmp	r3, #42	; 0x2a
 800bfd8:	d134      	bne.n	800c044 <_vfiprintf_r+0x1b0>
 800bfda:	9b03      	ldr	r3, [sp, #12]
 800bfdc:	1d1a      	adds	r2, r3, #4
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	9203      	str	r2, [sp, #12]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	bfb8      	it	lt
 800bfe6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bfea:	3402      	adds	r4, #2
 800bfec:	9305      	str	r3, [sp, #20]
 800bfee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c0c4 <_vfiprintf_r+0x230>
 800bff2:	7821      	ldrb	r1, [r4, #0]
 800bff4:	2203      	movs	r2, #3
 800bff6:	4650      	mov	r0, sl
 800bff8:	f7f4 f8ea 	bl	80001d0 <memchr>
 800bffc:	b138      	cbz	r0, 800c00e <_vfiprintf_r+0x17a>
 800bffe:	9b04      	ldr	r3, [sp, #16]
 800c000:	eba0 000a 	sub.w	r0, r0, sl
 800c004:	2240      	movs	r2, #64	; 0x40
 800c006:	4082      	lsls	r2, r0
 800c008:	4313      	orrs	r3, r2
 800c00a:	3401      	adds	r4, #1
 800c00c:	9304      	str	r3, [sp, #16]
 800c00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c012:	4829      	ldr	r0, [pc, #164]	; (800c0b8 <_vfiprintf_r+0x224>)
 800c014:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c018:	2206      	movs	r2, #6
 800c01a:	f7f4 f8d9 	bl	80001d0 <memchr>
 800c01e:	2800      	cmp	r0, #0
 800c020:	d03f      	beq.n	800c0a2 <_vfiprintf_r+0x20e>
 800c022:	4b26      	ldr	r3, [pc, #152]	; (800c0bc <_vfiprintf_r+0x228>)
 800c024:	bb1b      	cbnz	r3, 800c06e <_vfiprintf_r+0x1da>
 800c026:	9b03      	ldr	r3, [sp, #12]
 800c028:	3307      	adds	r3, #7
 800c02a:	f023 0307 	bic.w	r3, r3, #7
 800c02e:	3308      	adds	r3, #8
 800c030:	9303      	str	r3, [sp, #12]
 800c032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c034:	443b      	add	r3, r7
 800c036:	9309      	str	r3, [sp, #36]	; 0x24
 800c038:	e768      	b.n	800bf0c <_vfiprintf_r+0x78>
 800c03a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c03e:	460c      	mov	r4, r1
 800c040:	2001      	movs	r0, #1
 800c042:	e7a6      	b.n	800bf92 <_vfiprintf_r+0xfe>
 800c044:	2300      	movs	r3, #0
 800c046:	3401      	adds	r4, #1
 800c048:	9305      	str	r3, [sp, #20]
 800c04a:	4619      	mov	r1, r3
 800c04c:	f04f 0c0a 	mov.w	ip, #10
 800c050:	4620      	mov	r0, r4
 800c052:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c056:	3a30      	subs	r2, #48	; 0x30
 800c058:	2a09      	cmp	r2, #9
 800c05a:	d903      	bls.n	800c064 <_vfiprintf_r+0x1d0>
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d0c6      	beq.n	800bfee <_vfiprintf_r+0x15a>
 800c060:	9105      	str	r1, [sp, #20]
 800c062:	e7c4      	b.n	800bfee <_vfiprintf_r+0x15a>
 800c064:	fb0c 2101 	mla	r1, ip, r1, r2
 800c068:	4604      	mov	r4, r0
 800c06a:	2301      	movs	r3, #1
 800c06c:	e7f0      	b.n	800c050 <_vfiprintf_r+0x1bc>
 800c06e:	ab03      	add	r3, sp, #12
 800c070:	9300      	str	r3, [sp, #0]
 800c072:	462a      	mov	r2, r5
 800c074:	4b12      	ldr	r3, [pc, #72]	; (800c0c0 <_vfiprintf_r+0x22c>)
 800c076:	a904      	add	r1, sp, #16
 800c078:	4630      	mov	r0, r6
 800c07a:	f3af 8000 	nop.w
 800c07e:	4607      	mov	r7, r0
 800c080:	1c78      	adds	r0, r7, #1
 800c082:	d1d6      	bne.n	800c032 <_vfiprintf_r+0x19e>
 800c084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c086:	07d9      	lsls	r1, r3, #31
 800c088:	d405      	bmi.n	800c096 <_vfiprintf_r+0x202>
 800c08a:	89ab      	ldrh	r3, [r5, #12]
 800c08c:	059a      	lsls	r2, r3, #22
 800c08e:	d402      	bmi.n	800c096 <_vfiprintf_r+0x202>
 800c090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c092:	f7ff fed5 	bl	800be40 <__retarget_lock_release_recursive>
 800c096:	89ab      	ldrh	r3, [r5, #12]
 800c098:	065b      	lsls	r3, r3, #25
 800c09a:	f53f af1d 	bmi.w	800bed8 <_vfiprintf_r+0x44>
 800c09e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0a0:	e71c      	b.n	800bedc <_vfiprintf_r+0x48>
 800c0a2:	ab03      	add	r3, sp, #12
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	462a      	mov	r2, r5
 800c0a8:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <_vfiprintf_r+0x22c>)
 800c0aa:	a904      	add	r1, sp, #16
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	f000 f919 	bl	800c2e4 <_printf_i>
 800c0b2:	e7e4      	b.n	800c07e <_vfiprintf_r+0x1ea>
 800c0b4:	0800d130 	.word	0x0800d130
 800c0b8:	0800d13a 	.word	0x0800d13a
 800c0bc:	00000000 	.word	0x00000000
 800c0c0:	0800be71 	.word	0x0800be71
 800c0c4:	0800d136 	.word	0x0800d136

0800c0c8 <sbrk_aligned>:
 800c0c8:	b570      	push	{r4, r5, r6, lr}
 800c0ca:	4e0e      	ldr	r6, [pc, #56]	; (800c104 <sbrk_aligned+0x3c>)
 800c0cc:	460c      	mov	r4, r1
 800c0ce:	6831      	ldr	r1, [r6, #0]
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	b911      	cbnz	r1, 800c0da <sbrk_aligned+0x12>
 800c0d4:	f000 fc72 	bl	800c9bc <_sbrk_r>
 800c0d8:	6030      	str	r0, [r6, #0]
 800c0da:	4621      	mov	r1, r4
 800c0dc:	4628      	mov	r0, r5
 800c0de:	f000 fc6d 	bl	800c9bc <_sbrk_r>
 800c0e2:	1c43      	adds	r3, r0, #1
 800c0e4:	d00a      	beq.n	800c0fc <sbrk_aligned+0x34>
 800c0e6:	1cc4      	adds	r4, r0, #3
 800c0e8:	f024 0403 	bic.w	r4, r4, #3
 800c0ec:	42a0      	cmp	r0, r4
 800c0ee:	d007      	beq.n	800c100 <sbrk_aligned+0x38>
 800c0f0:	1a21      	subs	r1, r4, r0
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f000 fc62 	bl	800c9bc <_sbrk_r>
 800c0f8:	3001      	adds	r0, #1
 800c0fa:	d101      	bne.n	800c100 <sbrk_aligned+0x38>
 800c0fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c100:	4620      	mov	r0, r4
 800c102:	bd70      	pop	{r4, r5, r6, pc}
 800c104:	20005fbc 	.word	0x20005fbc

0800c108 <_malloc_r>:
 800c108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c10c:	1ccd      	adds	r5, r1, #3
 800c10e:	f025 0503 	bic.w	r5, r5, #3
 800c112:	3508      	adds	r5, #8
 800c114:	2d0c      	cmp	r5, #12
 800c116:	bf38      	it	cc
 800c118:	250c      	movcc	r5, #12
 800c11a:	2d00      	cmp	r5, #0
 800c11c:	4607      	mov	r7, r0
 800c11e:	db01      	blt.n	800c124 <_malloc_r+0x1c>
 800c120:	42a9      	cmp	r1, r5
 800c122:	d905      	bls.n	800c130 <_malloc_r+0x28>
 800c124:	230c      	movs	r3, #12
 800c126:	603b      	str	r3, [r7, #0]
 800c128:	2600      	movs	r6, #0
 800c12a:	4630      	mov	r0, r6
 800c12c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c130:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c204 <_malloc_r+0xfc>
 800c134:	f000 faa6 	bl	800c684 <__malloc_lock>
 800c138:	f8d8 3000 	ldr.w	r3, [r8]
 800c13c:	461c      	mov	r4, r3
 800c13e:	bb5c      	cbnz	r4, 800c198 <_malloc_r+0x90>
 800c140:	4629      	mov	r1, r5
 800c142:	4638      	mov	r0, r7
 800c144:	f7ff ffc0 	bl	800c0c8 <sbrk_aligned>
 800c148:	1c43      	adds	r3, r0, #1
 800c14a:	4604      	mov	r4, r0
 800c14c:	d155      	bne.n	800c1fa <_malloc_r+0xf2>
 800c14e:	f8d8 4000 	ldr.w	r4, [r8]
 800c152:	4626      	mov	r6, r4
 800c154:	2e00      	cmp	r6, #0
 800c156:	d145      	bne.n	800c1e4 <_malloc_r+0xdc>
 800c158:	2c00      	cmp	r4, #0
 800c15a:	d048      	beq.n	800c1ee <_malloc_r+0xe6>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	4631      	mov	r1, r6
 800c160:	4638      	mov	r0, r7
 800c162:	eb04 0903 	add.w	r9, r4, r3
 800c166:	f000 fc29 	bl	800c9bc <_sbrk_r>
 800c16a:	4581      	cmp	r9, r0
 800c16c:	d13f      	bne.n	800c1ee <_malloc_r+0xe6>
 800c16e:	6821      	ldr	r1, [r4, #0]
 800c170:	1a6d      	subs	r5, r5, r1
 800c172:	4629      	mov	r1, r5
 800c174:	4638      	mov	r0, r7
 800c176:	f7ff ffa7 	bl	800c0c8 <sbrk_aligned>
 800c17a:	3001      	adds	r0, #1
 800c17c:	d037      	beq.n	800c1ee <_malloc_r+0xe6>
 800c17e:	6823      	ldr	r3, [r4, #0]
 800c180:	442b      	add	r3, r5
 800c182:	6023      	str	r3, [r4, #0]
 800c184:	f8d8 3000 	ldr.w	r3, [r8]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d038      	beq.n	800c1fe <_malloc_r+0xf6>
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	42a2      	cmp	r2, r4
 800c190:	d12b      	bne.n	800c1ea <_malloc_r+0xe2>
 800c192:	2200      	movs	r2, #0
 800c194:	605a      	str	r2, [r3, #4]
 800c196:	e00f      	b.n	800c1b8 <_malloc_r+0xb0>
 800c198:	6822      	ldr	r2, [r4, #0]
 800c19a:	1b52      	subs	r2, r2, r5
 800c19c:	d41f      	bmi.n	800c1de <_malloc_r+0xd6>
 800c19e:	2a0b      	cmp	r2, #11
 800c1a0:	d917      	bls.n	800c1d2 <_malloc_r+0xca>
 800c1a2:	1961      	adds	r1, r4, r5
 800c1a4:	42a3      	cmp	r3, r4
 800c1a6:	6025      	str	r5, [r4, #0]
 800c1a8:	bf18      	it	ne
 800c1aa:	6059      	strne	r1, [r3, #4]
 800c1ac:	6863      	ldr	r3, [r4, #4]
 800c1ae:	bf08      	it	eq
 800c1b0:	f8c8 1000 	streq.w	r1, [r8]
 800c1b4:	5162      	str	r2, [r4, r5]
 800c1b6:	604b      	str	r3, [r1, #4]
 800c1b8:	4638      	mov	r0, r7
 800c1ba:	f104 060b 	add.w	r6, r4, #11
 800c1be:	f000 fa67 	bl	800c690 <__malloc_unlock>
 800c1c2:	f026 0607 	bic.w	r6, r6, #7
 800c1c6:	1d23      	adds	r3, r4, #4
 800c1c8:	1af2      	subs	r2, r6, r3
 800c1ca:	d0ae      	beq.n	800c12a <_malloc_r+0x22>
 800c1cc:	1b9b      	subs	r3, r3, r6
 800c1ce:	50a3      	str	r3, [r4, r2]
 800c1d0:	e7ab      	b.n	800c12a <_malloc_r+0x22>
 800c1d2:	42a3      	cmp	r3, r4
 800c1d4:	6862      	ldr	r2, [r4, #4]
 800c1d6:	d1dd      	bne.n	800c194 <_malloc_r+0x8c>
 800c1d8:	f8c8 2000 	str.w	r2, [r8]
 800c1dc:	e7ec      	b.n	800c1b8 <_malloc_r+0xb0>
 800c1de:	4623      	mov	r3, r4
 800c1e0:	6864      	ldr	r4, [r4, #4]
 800c1e2:	e7ac      	b.n	800c13e <_malloc_r+0x36>
 800c1e4:	4634      	mov	r4, r6
 800c1e6:	6876      	ldr	r6, [r6, #4]
 800c1e8:	e7b4      	b.n	800c154 <_malloc_r+0x4c>
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	e7cc      	b.n	800c188 <_malloc_r+0x80>
 800c1ee:	230c      	movs	r3, #12
 800c1f0:	603b      	str	r3, [r7, #0]
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	f000 fa4c 	bl	800c690 <__malloc_unlock>
 800c1f8:	e797      	b.n	800c12a <_malloc_r+0x22>
 800c1fa:	6025      	str	r5, [r4, #0]
 800c1fc:	e7dc      	b.n	800c1b8 <_malloc_r+0xb0>
 800c1fe:	605b      	str	r3, [r3, #4]
 800c200:	deff      	udf	#255	; 0xff
 800c202:	bf00      	nop
 800c204:	20005fb8 	.word	0x20005fb8

0800c208 <_printf_common>:
 800c208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c20c:	4616      	mov	r6, r2
 800c20e:	4699      	mov	r9, r3
 800c210:	688a      	ldr	r2, [r1, #8]
 800c212:	690b      	ldr	r3, [r1, #16]
 800c214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c218:	4293      	cmp	r3, r2
 800c21a:	bfb8      	it	lt
 800c21c:	4613      	movlt	r3, r2
 800c21e:	6033      	str	r3, [r6, #0]
 800c220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c224:	4607      	mov	r7, r0
 800c226:	460c      	mov	r4, r1
 800c228:	b10a      	cbz	r2, 800c22e <_printf_common+0x26>
 800c22a:	3301      	adds	r3, #1
 800c22c:	6033      	str	r3, [r6, #0]
 800c22e:	6823      	ldr	r3, [r4, #0]
 800c230:	0699      	lsls	r1, r3, #26
 800c232:	bf42      	ittt	mi
 800c234:	6833      	ldrmi	r3, [r6, #0]
 800c236:	3302      	addmi	r3, #2
 800c238:	6033      	strmi	r3, [r6, #0]
 800c23a:	6825      	ldr	r5, [r4, #0]
 800c23c:	f015 0506 	ands.w	r5, r5, #6
 800c240:	d106      	bne.n	800c250 <_printf_common+0x48>
 800c242:	f104 0a19 	add.w	sl, r4, #25
 800c246:	68e3      	ldr	r3, [r4, #12]
 800c248:	6832      	ldr	r2, [r6, #0]
 800c24a:	1a9b      	subs	r3, r3, r2
 800c24c:	42ab      	cmp	r3, r5
 800c24e:	dc26      	bgt.n	800c29e <_printf_common+0x96>
 800c250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c254:	1e13      	subs	r3, r2, #0
 800c256:	6822      	ldr	r2, [r4, #0]
 800c258:	bf18      	it	ne
 800c25a:	2301      	movne	r3, #1
 800c25c:	0692      	lsls	r2, r2, #26
 800c25e:	d42b      	bmi.n	800c2b8 <_printf_common+0xb0>
 800c260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c264:	4649      	mov	r1, r9
 800c266:	4638      	mov	r0, r7
 800c268:	47c0      	blx	r8
 800c26a:	3001      	adds	r0, #1
 800c26c:	d01e      	beq.n	800c2ac <_printf_common+0xa4>
 800c26e:	6823      	ldr	r3, [r4, #0]
 800c270:	6922      	ldr	r2, [r4, #16]
 800c272:	f003 0306 	and.w	r3, r3, #6
 800c276:	2b04      	cmp	r3, #4
 800c278:	bf02      	ittt	eq
 800c27a:	68e5      	ldreq	r5, [r4, #12]
 800c27c:	6833      	ldreq	r3, [r6, #0]
 800c27e:	1aed      	subeq	r5, r5, r3
 800c280:	68a3      	ldr	r3, [r4, #8]
 800c282:	bf0c      	ite	eq
 800c284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c288:	2500      	movne	r5, #0
 800c28a:	4293      	cmp	r3, r2
 800c28c:	bfc4      	itt	gt
 800c28e:	1a9b      	subgt	r3, r3, r2
 800c290:	18ed      	addgt	r5, r5, r3
 800c292:	2600      	movs	r6, #0
 800c294:	341a      	adds	r4, #26
 800c296:	42b5      	cmp	r5, r6
 800c298:	d11a      	bne.n	800c2d0 <_printf_common+0xc8>
 800c29a:	2000      	movs	r0, #0
 800c29c:	e008      	b.n	800c2b0 <_printf_common+0xa8>
 800c29e:	2301      	movs	r3, #1
 800c2a0:	4652      	mov	r2, sl
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	4638      	mov	r0, r7
 800c2a6:	47c0      	blx	r8
 800c2a8:	3001      	adds	r0, #1
 800c2aa:	d103      	bne.n	800c2b4 <_printf_common+0xac>
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b4:	3501      	adds	r5, #1
 800c2b6:	e7c6      	b.n	800c246 <_printf_common+0x3e>
 800c2b8:	18e1      	adds	r1, r4, r3
 800c2ba:	1c5a      	adds	r2, r3, #1
 800c2bc:	2030      	movs	r0, #48	; 0x30
 800c2be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2c2:	4422      	add	r2, r4
 800c2c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2cc:	3302      	adds	r3, #2
 800c2ce:	e7c7      	b.n	800c260 <_printf_common+0x58>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	4622      	mov	r2, r4
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	47c0      	blx	r8
 800c2da:	3001      	adds	r0, #1
 800c2dc:	d0e6      	beq.n	800c2ac <_printf_common+0xa4>
 800c2de:	3601      	adds	r6, #1
 800c2e0:	e7d9      	b.n	800c296 <_printf_common+0x8e>
	...

0800c2e4 <_printf_i>:
 800c2e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e8:	7e0f      	ldrb	r7, [r1, #24]
 800c2ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c2ec:	2f78      	cmp	r7, #120	; 0x78
 800c2ee:	4691      	mov	r9, r2
 800c2f0:	4680      	mov	r8, r0
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	469a      	mov	sl, r3
 800c2f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c2fa:	d807      	bhi.n	800c30c <_printf_i+0x28>
 800c2fc:	2f62      	cmp	r7, #98	; 0x62
 800c2fe:	d80a      	bhi.n	800c316 <_printf_i+0x32>
 800c300:	2f00      	cmp	r7, #0
 800c302:	f000 80d4 	beq.w	800c4ae <_printf_i+0x1ca>
 800c306:	2f58      	cmp	r7, #88	; 0x58
 800c308:	f000 80c0 	beq.w	800c48c <_printf_i+0x1a8>
 800c30c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c314:	e03a      	b.n	800c38c <_printf_i+0xa8>
 800c316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c31a:	2b15      	cmp	r3, #21
 800c31c:	d8f6      	bhi.n	800c30c <_printf_i+0x28>
 800c31e:	a101      	add	r1, pc, #4	; (adr r1, 800c324 <_printf_i+0x40>)
 800c320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c324:	0800c37d 	.word	0x0800c37d
 800c328:	0800c391 	.word	0x0800c391
 800c32c:	0800c30d 	.word	0x0800c30d
 800c330:	0800c30d 	.word	0x0800c30d
 800c334:	0800c30d 	.word	0x0800c30d
 800c338:	0800c30d 	.word	0x0800c30d
 800c33c:	0800c391 	.word	0x0800c391
 800c340:	0800c30d 	.word	0x0800c30d
 800c344:	0800c30d 	.word	0x0800c30d
 800c348:	0800c30d 	.word	0x0800c30d
 800c34c:	0800c30d 	.word	0x0800c30d
 800c350:	0800c495 	.word	0x0800c495
 800c354:	0800c3bd 	.word	0x0800c3bd
 800c358:	0800c44f 	.word	0x0800c44f
 800c35c:	0800c30d 	.word	0x0800c30d
 800c360:	0800c30d 	.word	0x0800c30d
 800c364:	0800c4b7 	.word	0x0800c4b7
 800c368:	0800c30d 	.word	0x0800c30d
 800c36c:	0800c3bd 	.word	0x0800c3bd
 800c370:	0800c30d 	.word	0x0800c30d
 800c374:	0800c30d 	.word	0x0800c30d
 800c378:	0800c457 	.word	0x0800c457
 800c37c:	682b      	ldr	r3, [r5, #0]
 800c37e:	1d1a      	adds	r2, r3, #4
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	602a      	str	r2, [r5, #0]
 800c384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c38c:	2301      	movs	r3, #1
 800c38e:	e09f      	b.n	800c4d0 <_printf_i+0x1ec>
 800c390:	6820      	ldr	r0, [r4, #0]
 800c392:	682b      	ldr	r3, [r5, #0]
 800c394:	0607      	lsls	r7, r0, #24
 800c396:	f103 0104 	add.w	r1, r3, #4
 800c39a:	6029      	str	r1, [r5, #0]
 800c39c:	d501      	bpl.n	800c3a2 <_printf_i+0xbe>
 800c39e:	681e      	ldr	r6, [r3, #0]
 800c3a0:	e003      	b.n	800c3aa <_printf_i+0xc6>
 800c3a2:	0646      	lsls	r6, r0, #25
 800c3a4:	d5fb      	bpl.n	800c39e <_printf_i+0xba>
 800c3a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c3aa:	2e00      	cmp	r6, #0
 800c3ac:	da03      	bge.n	800c3b6 <_printf_i+0xd2>
 800c3ae:	232d      	movs	r3, #45	; 0x2d
 800c3b0:	4276      	negs	r6, r6
 800c3b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3b6:	485a      	ldr	r0, [pc, #360]	; (800c520 <_printf_i+0x23c>)
 800c3b8:	230a      	movs	r3, #10
 800c3ba:	e012      	b.n	800c3e2 <_printf_i+0xfe>
 800c3bc:	682b      	ldr	r3, [r5, #0]
 800c3be:	6820      	ldr	r0, [r4, #0]
 800c3c0:	1d19      	adds	r1, r3, #4
 800c3c2:	6029      	str	r1, [r5, #0]
 800c3c4:	0605      	lsls	r5, r0, #24
 800c3c6:	d501      	bpl.n	800c3cc <_printf_i+0xe8>
 800c3c8:	681e      	ldr	r6, [r3, #0]
 800c3ca:	e002      	b.n	800c3d2 <_printf_i+0xee>
 800c3cc:	0641      	lsls	r1, r0, #25
 800c3ce:	d5fb      	bpl.n	800c3c8 <_printf_i+0xe4>
 800c3d0:	881e      	ldrh	r6, [r3, #0]
 800c3d2:	4853      	ldr	r0, [pc, #332]	; (800c520 <_printf_i+0x23c>)
 800c3d4:	2f6f      	cmp	r7, #111	; 0x6f
 800c3d6:	bf0c      	ite	eq
 800c3d8:	2308      	moveq	r3, #8
 800c3da:	230a      	movne	r3, #10
 800c3dc:	2100      	movs	r1, #0
 800c3de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c3e2:	6865      	ldr	r5, [r4, #4]
 800c3e4:	60a5      	str	r5, [r4, #8]
 800c3e6:	2d00      	cmp	r5, #0
 800c3e8:	bfa2      	ittt	ge
 800c3ea:	6821      	ldrge	r1, [r4, #0]
 800c3ec:	f021 0104 	bicge.w	r1, r1, #4
 800c3f0:	6021      	strge	r1, [r4, #0]
 800c3f2:	b90e      	cbnz	r6, 800c3f8 <_printf_i+0x114>
 800c3f4:	2d00      	cmp	r5, #0
 800c3f6:	d04b      	beq.n	800c490 <_printf_i+0x1ac>
 800c3f8:	4615      	mov	r5, r2
 800c3fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800c3fe:	fb03 6711 	mls	r7, r3, r1, r6
 800c402:	5dc7      	ldrb	r7, [r0, r7]
 800c404:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c408:	4637      	mov	r7, r6
 800c40a:	42bb      	cmp	r3, r7
 800c40c:	460e      	mov	r6, r1
 800c40e:	d9f4      	bls.n	800c3fa <_printf_i+0x116>
 800c410:	2b08      	cmp	r3, #8
 800c412:	d10b      	bne.n	800c42c <_printf_i+0x148>
 800c414:	6823      	ldr	r3, [r4, #0]
 800c416:	07de      	lsls	r6, r3, #31
 800c418:	d508      	bpl.n	800c42c <_printf_i+0x148>
 800c41a:	6923      	ldr	r3, [r4, #16]
 800c41c:	6861      	ldr	r1, [r4, #4]
 800c41e:	4299      	cmp	r1, r3
 800c420:	bfde      	ittt	le
 800c422:	2330      	movle	r3, #48	; 0x30
 800c424:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c428:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c42c:	1b52      	subs	r2, r2, r5
 800c42e:	6122      	str	r2, [r4, #16]
 800c430:	f8cd a000 	str.w	sl, [sp]
 800c434:	464b      	mov	r3, r9
 800c436:	aa03      	add	r2, sp, #12
 800c438:	4621      	mov	r1, r4
 800c43a:	4640      	mov	r0, r8
 800c43c:	f7ff fee4 	bl	800c208 <_printf_common>
 800c440:	3001      	adds	r0, #1
 800c442:	d14a      	bne.n	800c4da <_printf_i+0x1f6>
 800c444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c448:	b004      	add	sp, #16
 800c44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c44e:	6823      	ldr	r3, [r4, #0]
 800c450:	f043 0320 	orr.w	r3, r3, #32
 800c454:	6023      	str	r3, [r4, #0]
 800c456:	4833      	ldr	r0, [pc, #204]	; (800c524 <_printf_i+0x240>)
 800c458:	2778      	movs	r7, #120	; 0x78
 800c45a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	6829      	ldr	r1, [r5, #0]
 800c462:	061f      	lsls	r7, r3, #24
 800c464:	f851 6b04 	ldr.w	r6, [r1], #4
 800c468:	d402      	bmi.n	800c470 <_printf_i+0x18c>
 800c46a:	065f      	lsls	r7, r3, #25
 800c46c:	bf48      	it	mi
 800c46e:	b2b6      	uxthmi	r6, r6
 800c470:	07df      	lsls	r7, r3, #31
 800c472:	bf48      	it	mi
 800c474:	f043 0320 	orrmi.w	r3, r3, #32
 800c478:	6029      	str	r1, [r5, #0]
 800c47a:	bf48      	it	mi
 800c47c:	6023      	strmi	r3, [r4, #0]
 800c47e:	b91e      	cbnz	r6, 800c488 <_printf_i+0x1a4>
 800c480:	6823      	ldr	r3, [r4, #0]
 800c482:	f023 0320 	bic.w	r3, r3, #32
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	2310      	movs	r3, #16
 800c48a:	e7a7      	b.n	800c3dc <_printf_i+0xf8>
 800c48c:	4824      	ldr	r0, [pc, #144]	; (800c520 <_printf_i+0x23c>)
 800c48e:	e7e4      	b.n	800c45a <_printf_i+0x176>
 800c490:	4615      	mov	r5, r2
 800c492:	e7bd      	b.n	800c410 <_printf_i+0x12c>
 800c494:	682b      	ldr	r3, [r5, #0]
 800c496:	6826      	ldr	r6, [r4, #0]
 800c498:	6961      	ldr	r1, [r4, #20]
 800c49a:	1d18      	adds	r0, r3, #4
 800c49c:	6028      	str	r0, [r5, #0]
 800c49e:	0635      	lsls	r5, r6, #24
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	d501      	bpl.n	800c4a8 <_printf_i+0x1c4>
 800c4a4:	6019      	str	r1, [r3, #0]
 800c4a6:	e002      	b.n	800c4ae <_printf_i+0x1ca>
 800c4a8:	0670      	lsls	r0, r6, #25
 800c4aa:	d5fb      	bpl.n	800c4a4 <_printf_i+0x1c0>
 800c4ac:	8019      	strh	r1, [r3, #0]
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	6123      	str	r3, [r4, #16]
 800c4b2:	4615      	mov	r5, r2
 800c4b4:	e7bc      	b.n	800c430 <_printf_i+0x14c>
 800c4b6:	682b      	ldr	r3, [r5, #0]
 800c4b8:	1d1a      	adds	r2, r3, #4
 800c4ba:	602a      	str	r2, [r5, #0]
 800c4bc:	681d      	ldr	r5, [r3, #0]
 800c4be:	6862      	ldr	r2, [r4, #4]
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	f7f3 fe84 	bl	80001d0 <memchr>
 800c4c8:	b108      	cbz	r0, 800c4ce <_printf_i+0x1ea>
 800c4ca:	1b40      	subs	r0, r0, r5
 800c4cc:	6060      	str	r0, [r4, #4]
 800c4ce:	6863      	ldr	r3, [r4, #4]
 800c4d0:	6123      	str	r3, [r4, #16]
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4d8:	e7aa      	b.n	800c430 <_printf_i+0x14c>
 800c4da:	6923      	ldr	r3, [r4, #16]
 800c4dc:	462a      	mov	r2, r5
 800c4de:	4649      	mov	r1, r9
 800c4e0:	4640      	mov	r0, r8
 800c4e2:	47d0      	blx	sl
 800c4e4:	3001      	adds	r0, #1
 800c4e6:	d0ad      	beq.n	800c444 <_printf_i+0x160>
 800c4e8:	6823      	ldr	r3, [r4, #0]
 800c4ea:	079b      	lsls	r3, r3, #30
 800c4ec:	d413      	bmi.n	800c516 <_printf_i+0x232>
 800c4ee:	68e0      	ldr	r0, [r4, #12]
 800c4f0:	9b03      	ldr	r3, [sp, #12]
 800c4f2:	4298      	cmp	r0, r3
 800c4f4:	bfb8      	it	lt
 800c4f6:	4618      	movlt	r0, r3
 800c4f8:	e7a6      	b.n	800c448 <_printf_i+0x164>
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	4632      	mov	r2, r6
 800c4fe:	4649      	mov	r1, r9
 800c500:	4640      	mov	r0, r8
 800c502:	47d0      	blx	sl
 800c504:	3001      	adds	r0, #1
 800c506:	d09d      	beq.n	800c444 <_printf_i+0x160>
 800c508:	3501      	adds	r5, #1
 800c50a:	68e3      	ldr	r3, [r4, #12]
 800c50c:	9903      	ldr	r1, [sp, #12]
 800c50e:	1a5b      	subs	r3, r3, r1
 800c510:	42ab      	cmp	r3, r5
 800c512:	dcf2      	bgt.n	800c4fa <_printf_i+0x216>
 800c514:	e7eb      	b.n	800c4ee <_printf_i+0x20a>
 800c516:	2500      	movs	r5, #0
 800c518:	f104 0619 	add.w	r6, r4, #25
 800c51c:	e7f5      	b.n	800c50a <_printf_i+0x226>
 800c51e:	bf00      	nop
 800c520:	0800d141 	.word	0x0800d141
 800c524:	0800d152 	.word	0x0800d152

0800c528 <__sflush_r>:
 800c528:	898a      	ldrh	r2, [r1, #12]
 800c52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c52e:	4605      	mov	r5, r0
 800c530:	0710      	lsls	r0, r2, #28
 800c532:	460c      	mov	r4, r1
 800c534:	d458      	bmi.n	800c5e8 <__sflush_r+0xc0>
 800c536:	684b      	ldr	r3, [r1, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	dc05      	bgt.n	800c548 <__sflush_r+0x20>
 800c53c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c53e:	2b00      	cmp	r3, #0
 800c540:	dc02      	bgt.n	800c548 <__sflush_r+0x20>
 800c542:	2000      	movs	r0, #0
 800c544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c54a:	2e00      	cmp	r6, #0
 800c54c:	d0f9      	beq.n	800c542 <__sflush_r+0x1a>
 800c54e:	2300      	movs	r3, #0
 800c550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c554:	682f      	ldr	r7, [r5, #0]
 800c556:	6a21      	ldr	r1, [r4, #32]
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	d032      	beq.n	800c5c2 <__sflush_r+0x9a>
 800c55c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c55e:	89a3      	ldrh	r3, [r4, #12]
 800c560:	075a      	lsls	r2, r3, #29
 800c562:	d505      	bpl.n	800c570 <__sflush_r+0x48>
 800c564:	6863      	ldr	r3, [r4, #4]
 800c566:	1ac0      	subs	r0, r0, r3
 800c568:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c56a:	b10b      	cbz	r3, 800c570 <__sflush_r+0x48>
 800c56c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c56e:	1ac0      	subs	r0, r0, r3
 800c570:	2300      	movs	r3, #0
 800c572:	4602      	mov	r2, r0
 800c574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c576:	6a21      	ldr	r1, [r4, #32]
 800c578:	4628      	mov	r0, r5
 800c57a:	47b0      	blx	r6
 800c57c:	1c43      	adds	r3, r0, #1
 800c57e:	89a3      	ldrh	r3, [r4, #12]
 800c580:	d106      	bne.n	800c590 <__sflush_r+0x68>
 800c582:	6829      	ldr	r1, [r5, #0]
 800c584:	291d      	cmp	r1, #29
 800c586:	d82b      	bhi.n	800c5e0 <__sflush_r+0xb8>
 800c588:	4a29      	ldr	r2, [pc, #164]	; (800c630 <__sflush_r+0x108>)
 800c58a:	410a      	asrs	r2, r1
 800c58c:	07d6      	lsls	r6, r2, #31
 800c58e:	d427      	bmi.n	800c5e0 <__sflush_r+0xb8>
 800c590:	2200      	movs	r2, #0
 800c592:	6062      	str	r2, [r4, #4]
 800c594:	04d9      	lsls	r1, r3, #19
 800c596:	6922      	ldr	r2, [r4, #16]
 800c598:	6022      	str	r2, [r4, #0]
 800c59a:	d504      	bpl.n	800c5a6 <__sflush_r+0x7e>
 800c59c:	1c42      	adds	r2, r0, #1
 800c59e:	d101      	bne.n	800c5a4 <__sflush_r+0x7c>
 800c5a0:	682b      	ldr	r3, [r5, #0]
 800c5a2:	b903      	cbnz	r3, 800c5a6 <__sflush_r+0x7e>
 800c5a4:	6560      	str	r0, [r4, #84]	; 0x54
 800c5a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5a8:	602f      	str	r7, [r5, #0]
 800c5aa:	2900      	cmp	r1, #0
 800c5ac:	d0c9      	beq.n	800c542 <__sflush_r+0x1a>
 800c5ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5b2:	4299      	cmp	r1, r3
 800c5b4:	d002      	beq.n	800c5bc <__sflush_r+0x94>
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	f000 fa22 	bl	800ca00 <_free_r>
 800c5bc:	2000      	movs	r0, #0
 800c5be:	6360      	str	r0, [r4, #52]	; 0x34
 800c5c0:	e7c0      	b.n	800c544 <__sflush_r+0x1c>
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	4628      	mov	r0, r5
 800c5c6:	47b0      	blx	r6
 800c5c8:	1c41      	adds	r1, r0, #1
 800c5ca:	d1c8      	bne.n	800c55e <__sflush_r+0x36>
 800c5cc:	682b      	ldr	r3, [r5, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d0c5      	beq.n	800c55e <__sflush_r+0x36>
 800c5d2:	2b1d      	cmp	r3, #29
 800c5d4:	d001      	beq.n	800c5da <__sflush_r+0xb2>
 800c5d6:	2b16      	cmp	r3, #22
 800c5d8:	d101      	bne.n	800c5de <__sflush_r+0xb6>
 800c5da:	602f      	str	r7, [r5, #0]
 800c5dc:	e7b1      	b.n	800c542 <__sflush_r+0x1a>
 800c5de:	89a3      	ldrh	r3, [r4, #12]
 800c5e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5e4:	81a3      	strh	r3, [r4, #12]
 800c5e6:	e7ad      	b.n	800c544 <__sflush_r+0x1c>
 800c5e8:	690f      	ldr	r7, [r1, #16]
 800c5ea:	2f00      	cmp	r7, #0
 800c5ec:	d0a9      	beq.n	800c542 <__sflush_r+0x1a>
 800c5ee:	0793      	lsls	r3, r2, #30
 800c5f0:	680e      	ldr	r6, [r1, #0]
 800c5f2:	bf08      	it	eq
 800c5f4:	694b      	ldreq	r3, [r1, #20]
 800c5f6:	600f      	str	r7, [r1, #0]
 800c5f8:	bf18      	it	ne
 800c5fa:	2300      	movne	r3, #0
 800c5fc:	eba6 0807 	sub.w	r8, r6, r7
 800c600:	608b      	str	r3, [r1, #8]
 800c602:	f1b8 0f00 	cmp.w	r8, #0
 800c606:	dd9c      	ble.n	800c542 <__sflush_r+0x1a>
 800c608:	6a21      	ldr	r1, [r4, #32]
 800c60a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c60c:	4643      	mov	r3, r8
 800c60e:	463a      	mov	r2, r7
 800c610:	4628      	mov	r0, r5
 800c612:	47b0      	blx	r6
 800c614:	2800      	cmp	r0, #0
 800c616:	dc06      	bgt.n	800c626 <__sflush_r+0xfe>
 800c618:	89a3      	ldrh	r3, [r4, #12]
 800c61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c61e:	81a3      	strh	r3, [r4, #12]
 800c620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c624:	e78e      	b.n	800c544 <__sflush_r+0x1c>
 800c626:	4407      	add	r7, r0
 800c628:	eba8 0800 	sub.w	r8, r8, r0
 800c62c:	e7e9      	b.n	800c602 <__sflush_r+0xda>
 800c62e:	bf00      	nop
 800c630:	dfbffffe 	.word	0xdfbffffe

0800c634 <_fflush_r>:
 800c634:	b538      	push	{r3, r4, r5, lr}
 800c636:	690b      	ldr	r3, [r1, #16]
 800c638:	4605      	mov	r5, r0
 800c63a:	460c      	mov	r4, r1
 800c63c:	b913      	cbnz	r3, 800c644 <_fflush_r+0x10>
 800c63e:	2500      	movs	r5, #0
 800c640:	4628      	mov	r0, r5
 800c642:	bd38      	pop	{r3, r4, r5, pc}
 800c644:	b118      	cbz	r0, 800c64e <_fflush_r+0x1a>
 800c646:	6a03      	ldr	r3, [r0, #32]
 800c648:	b90b      	cbnz	r3, 800c64e <_fflush_r+0x1a>
 800c64a:	f7ff fb0f 	bl	800bc6c <__sinit>
 800c64e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d0f3      	beq.n	800c63e <_fflush_r+0xa>
 800c656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c658:	07d0      	lsls	r0, r2, #31
 800c65a:	d404      	bmi.n	800c666 <_fflush_r+0x32>
 800c65c:	0599      	lsls	r1, r3, #22
 800c65e:	d402      	bmi.n	800c666 <_fflush_r+0x32>
 800c660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c662:	f7ff fbec 	bl	800be3e <__retarget_lock_acquire_recursive>
 800c666:	4628      	mov	r0, r5
 800c668:	4621      	mov	r1, r4
 800c66a:	f7ff ff5d 	bl	800c528 <__sflush_r>
 800c66e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c670:	07da      	lsls	r2, r3, #31
 800c672:	4605      	mov	r5, r0
 800c674:	d4e4      	bmi.n	800c640 <_fflush_r+0xc>
 800c676:	89a3      	ldrh	r3, [r4, #12]
 800c678:	059b      	lsls	r3, r3, #22
 800c67a:	d4e1      	bmi.n	800c640 <_fflush_r+0xc>
 800c67c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c67e:	f7ff fbdf 	bl	800be40 <__retarget_lock_release_recursive>
 800c682:	e7dd      	b.n	800c640 <_fflush_r+0xc>

0800c684 <__malloc_lock>:
 800c684:	4801      	ldr	r0, [pc, #4]	; (800c68c <__malloc_lock+0x8>)
 800c686:	f7ff bbda 	b.w	800be3e <__retarget_lock_acquire_recursive>
 800c68a:	bf00      	nop
 800c68c:	20005fb4 	.word	0x20005fb4

0800c690 <__malloc_unlock>:
 800c690:	4801      	ldr	r0, [pc, #4]	; (800c698 <__malloc_unlock+0x8>)
 800c692:	f7ff bbd5 	b.w	800be40 <__retarget_lock_release_recursive>
 800c696:	bf00      	nop
 800c698:	20005fb4 	.word	0x20005fb4

0800c69c <__sread>:
 800c69c:	b510      	push	{r4, lr}
 800c69e:	460c      	mov	r4, r1
 800c6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a4:	f000 f978 	bl	800c998 <_read_r>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	bfab      	itete	ge
 800c6ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6ae:	89a3      	ldrhlt	r3, [r4, #12]
 800c6b0:	181b      	addge	r3, r3, r0
 800c6b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6b6:	bfac      	ite	ge
 800c6b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6ba:	81a3      	strhlt	r3, [r4, #12]
 800c6bc:	bd10      	pop	{r4, pc}

0800c6be <__swrite>:
 800c6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c2:	461f      	mov	r7, r3
 800c6c4:	898b      	ldrh	r3, [r1, #12]
 800c6c6:	05db      	lsls	r3, r3, #23
 800c6c8:	4605      	mov	r5, r0
 800c6ca:	460c      	mov	r4, r1
 800c6cc:	4616      	mov	r6, r2
 800c6ce:	d505      	bpl.n	800c6dc <__swrite+0x1e>
 800c6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d4:	2302      	movs	r3, #2
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f000 f94c 	bl	800c974 <_lseek_r>
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6e6:	81a3      	strh	r3, [r4, #12]
 800c6e8:	4632      	mov	r2, r6
 800c6ea:	463b      	mov	r3, r7
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f2:	f000 b973 	b.w	800c9dc <_write_r>

0800c6f6 <__sseek>:
 800c6f6:	b510      	push	{r4, lr}
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6fe:	f000 f939 	bl	800c974 <_lseek_r>
 800c702:	1c43      	adds	r3, r0, #1
 800c704:	89a3      	ldrh	r3, [r4, #12]
 800c706:	bf15      	itete	ne
 800c708:	6560      	strne	r0, [r4, #84]	; 0x54
 800c70a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c70e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c712:	81a3      	strheq	r3, [r4, #12]
 800c714:	bf18      	it	ne
 800c716:	81a3      	strhne	r3, [r4, #12]
 800c718:	bd10      	pop	{r4, pc}

0800c71a <__sclose>:
 800c71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c71e:	f000 b8f7 	b.w	800c910 <_close_r>

0800c722 <__swbuf_r>:
 800c722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c724:	460e      	mov	r6, r1
 800c726:	4614      	mov	r4, r2
 800c728:	4605      	mov	r5, r0
 800c72a:	b118      	cbz	r0, 800c734 <__swbuf_r+0x12>
 800c72c:	6a03      	ldr	r3, [r0, #32]
 800c72e:	b90b      	cbnz	r3, 800c734 <__swbuf_r+0x12>
 800c730:	f7ff fa9c 	bl	800bc6c <__sinit>
 800c734:	69a3      	ldr	r3, [r4, #24]
 800c736:	60a3      	str	r3, [r4, #8]
 800c738:	89a3      	ldrh	r3, [r4, #12]
 800c73a:	071a      	lsls	r2, r3, #28
 800c73c:	d525      	bpl.n	800c78a <__swbuf_r+0x68>
 800c73e:	6923      	ldr	r3, [r4, #16]
 800c740:	b31b      	cbz	r3, 800c78a <__swbuf_r+0x68>
 800c742:	6823      	ldr	r3, [r4, #0]
 800c744:	6922      	ldr	r2, [r4, #16]
 800c746:	1a98      	subs	r0, r3, r2
 800c748:	6963      	ldr	r3, [r4, #20]
 800c74a:	b2f6      	uxtb	r6, r6
 800c74c:	4283      	cmp	r3, r0
 800c74e:	4637      	mov	r7, r6
 800c750:	dc04      	bgt.n	800c75c <__swbuf_r+0x3a>
 800c752:	4621      	mov	r1, r4
 800c754:	4628      	mov	r0, r5
 800c756:	f7ff ff6d 	bl	800c634 <_fflush_r>
 800c75a:	b9e0      	cbnz	r0, 800c796 <__swbuf_r+0x74>
 800c75c:	68a3      	ldr	r3, [r4, #8]
 800c75e:	3b01      	subs	r3, #1
 800c760:	60a3      	str	r3, [r4, #8]
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	1c5a      	adds	r2, r3, #1
 800c766:	6022      	str	r2, [r4, #0]
 800c768:	701e      	strb	r6, [r3, #0]
 800c76a:	6962      	ldr	r2, [r4, #20]
 800c76c:	1c43      	adds	r3, r0, #1
 800c76e:	429a      	cmp	r2, r3
 800c770:	d004      	beq.n	800c77c <__swbuf_r+0x5a>
 800c772:	89a3      	ldrh	r3, [r4, #12]
 800c774:	07db      	lsls	r3, r3, #31
 800c776:	d506      	bpl.n	800c786 <__swbuf_r+0x64>
 800c778:	2e0a      	cmp	r6, #10
 800c77a:	d104      	bne.n	800c786 <__swbuf_r+0x64>
 800c77c:	4621      	mov	r1, r4
 800c77e:	4628      	mov	r0, r5
 800c780:	f7ff ff58 	bl	800c634 <_fflush_r>
 800c784:	b938      	cbnz	r0, 800c796 <__swbuf_r+0x74>
 800c786:	4638      	mov	r0, r7
 800c788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c78a:	4621      	mov	r1, r4
 800c78c:	4628      	mov	r0, r5
 800c78e:	f000 f805 	bl	800c79c <__swsetup_r>
 800c792:	2800      	cmp	r0, #0
 800c794:	d0d5      	beq.n	800c742 <__swbuf_r+0x20>
 800c796:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c79a:	e7f4      	b.n	800c786 <__swbuf_r+0x64>

0800c79c <__swsetup_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	4b2a      	ldr	r3, [pc, #168]	; (800c848 <__swsetup_r+0xac>)
 800c7a0:	4605      	mov	r5, r0
 800c7a2:	6818      	ldr	r0, [r3, #0]
 800c7a4:	460c      	mov	r4, r1
 800c7a6:	b118      	cbz	r0, 800c7b0 <__swsetup_r+0x14>
 800c7a8:	6a03      	ldr	r3, [r0, #32]
 800c7aa:	b90b      	cbnz	r3, 800c7b0 <__swsetup_r+0x14>
 800c7ac:	f7ff fa5e 	bl	800bc6c <__sinit>
 800c7b0:	89a3      	ldrh	r3, [r4, #12]
 800c7b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7b6:	0718      	lsls	r0, r3, #28
 800c7b8:	d422      	bmi.n	800c800 <__swsetup_r+0x64>
 800c7ba:	06d9      	lsls	r1, r3, #27
 800c7bc:	d407      	bmi.n	800c7ce <__swsetup_r+0x32>
 800c7be:	2309      	movs	r3, #9
 800c7c0:	602b      	str	r3, [r5, #0]
 800c7c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c7c6:	81a3      	strh	r3, [r4, #12]
 800c7c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7cc:	e034      	b.n	800c838 <__swsetup_r+0x9c>
 800c7ce:	0758      	lsls	r0, r3, #29
 800c7d0:	d512      	bpl.n	800c7f8 <__swsetup_r+0x5c>
 800c7d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7d4:	b141      	cbz	r1, 800c7e8 <__swsetup_r+0x4c>
 800c7d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7da:	4299      	cmp	r1, r3
 800c7dc:	d002      	beq.n	800c7e4 <__swsetup_r+0x48>
 800c7de:	4628      	mov	r0, r5
 800c7e0:	f000 f90e 	bl	800ca00 <_free_r>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	6363      	str	r3, [r4, #52]	; 0x34
 800c7e8:	89a3      	ldrh	r3, [r4, #12]
 800c7ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7ee:	81a3      	strh	r3, [r4, #12]
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	6063      	str	r3, [r4, #4]
 800c7f4:	6923      	ldr	r3, [r4, #16]
 800c7f6:	6023      	str	r3, [r4, #0]
 800c7f8:	89a3      	ldrh	r3, [r4, #12]
 800c7fa:	f043 0308 	orr.w	r3, r3, #8
 800c7fe:	81a3      	strh	r3, [r4, #12]
 800c800:	6923      	ldr	r3, [r4, #16]
 800c802:	b94b      	cbnz	r3, 800c818 <__swsetup_r+0x7c>
 800c804:	89a3      	ldrh	r3, [r4, #12]
 800c806:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c80a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c80e:	d003      	beq.n	800c818 <__swsetup_r+0x7c>
 800c810:	4621      	mov	r1, r4
 800c812:	4628      	mov	r0, r5
 800c814:	f000 f840 	bl	800c898 <__smakebuf_r>
 800c818:	89a0      	ldrh	r0, [r4, #12]
 800c81a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c81e:	f010 0301 	ands.w	r3, r0, #1
 800c822:	d00a      	beq.n	800c83a <__swsetup_r+0x9e>
 800c824:	2300      	movs	r3, #0
 800c826:	60a3      	str	r3, [r4, #8]
 800c828:	6963      	ldr	r3, [r4, #20]
 800c82a:	425b      	negs	r3, r3
 800c82c:	61a3      	str	r3, [r4, #24]
 800c82e:	6923      	ldr	r3, [r4, #16]
 800c830:	b943      	cbnz	r3, 800c844 <__swsetup_r+0xa8>
 800c832:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c836:	d1c4      	bne.n	800c7c2 <__swsetup_r+0x26>
 800c838:	bd38      	pop	{r3, r4, r5, pc}
 800c83a:	0781      	lsls	r1, r0, #30
 800c83c:	bf58      	it	pl
 800c83e:	6963      	ldrpl	r3, [r4, #20]
 800c840:	60a3      	str	r3, [r4, #8]
 800c842:	e7f4      	b.n	800c82e <__swsetup_r+0x92>
 800c844:	2000      	movs	r0, #0
 800c846:	e7f7      	b.n	800c838 <__swsetup_r+0x9c>
 800c848:	20000090 	.word	0x20000090

0800c84c <__swhatbuf_r>:
 800c84c:	b570      	push	{r4, r5, r6, lr}
 800c84e:	460c      	mov	r4, r1
 800c850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c854:	2900      	cmp	r1, #0
 800c856:	b096      	sub	sp, #88	; 0x58
 800c858:	4615      	mov	r5, r2
 800c85a:	461e      	mov	r6, r3
 800c85c:	da0d      	bge.n	800c87a <__swhatbuf_r+0x2e>
 800c85e:	89a3      	ldrh	r3, [r4, #12]
 800c860:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c864:	f04f 0100 	mov.w	r1, #0
 800c868:	bf0c      	ite	eq
 800c86a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c86e:	2340      	movne	r3, #64	; 0x40
 800c870:	2000      	movs	r0, #0
 800c872:	6031      	str	r1, [r6, #0]
 800c874:	602b      	str	r3, [r5, #0]
 800c876:	b016      	add	sp, #88	; 0x58
 800c878:	bd70      	pop	{r4, r5, r6, pc}
 800c87a:	466a      	mov	r2, sp
 800c87c:	f000 f858 	bl	800c930 <_fstat_r>
 800c880:	2800      	cmp	r0, #0
 800c882:	dbec      	blt.n	800c85e <__swhatbuf_r+0x12>
 800c884:	9901      	ldr	r1, [sp, #4]
 800c886:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c88a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c88e:	4259      	negs	r1, r3
 800c890:	4159      	adcs	r1, r3
 800c892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c896:	e7eb      	b.n	800c870 <__swhatbuf_r+0x24>

0800c898 <__smakebuf_r>:
 800c898:	898b      	ldrh	r3, [r1, #12]
 800c89a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c89c:	079d      	lsls	r5, r3, #30
 800c89e:	4606      	mov	r6, r0
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	d507      	bpl.n	800c8b4 <__smakebuf_r+0x1c>
 800c8a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	6123      	str	r3, [r4, #16]
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	6163      	str	r3, [r4, #20]
 800c8b0:	b002      	add	sp, #8
 800c8b2:	bd70      	pop	{r4, r5, r6, pc}
 800c8b4:	ab01      	add	r3, sp, #4
 800c8b6:	466a      	mov	r2, sp
 800c8b8:	f7ff ffc8 	bl	800c84c <__swhatbuf_r>
 800c8bc:	9900      	ldr	r1, [sp, #0]
 800c8be:	4605      	mov	r5, r0
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	f7ff fc21 	bl	800c108 <_malloc_r>
 800c8c6:	b948      	cbnz	r0, 800c8dc <__smakebuf_r+0x44>
 800c8c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8cc:	059a      	lsls	r2, r3, #22
 800c8ce:	d4ef      	bmi.n	800c8b0 <__smakebuf_r+0x18>
 800c8d0:	f023 0303 	bic.w	r3, r3, #3
 800c8d4:	f043 0302 	orr.w	r3, r3, #2
 800c8d8:	81a3      	strh	r3, [r4, #12]
 800c8da:	e7e3      	b.n	800c8a4 <__smakebuf_r+0xc>
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	6020      	str	r0, [r4, #0]
 800c8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8e4:	81a3      	strh	r3, [r4, #12]
 800c8e6:	9b00      	ldr	r3, [sp, #0]
 800c8e8:	6163      	str	r3, [r4, #20]
 800c8ea:	9b01      	ldr	r3, [sp, #4]
 800c8ec:	6120      	str	r0, [r4, #16]
 800c8ee:	b15b      	cbz	r3, 800c908 <__smakebuf_r+0x70>
 800c8f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f000 f82d 	bl	800c954 <_isatty_r>
 800c8fa:	b128      	cbz	r0, 800c908 <__smakebuf_r+0x70>
 800c8fc:	89a3      	ldrh	r3, [r4, #12]
 800c8fe:	f023 0303 	bic.w	r3, r3, #3
 800c902:	f043 0301 	orr.w	r3, r3, #1
 800c906:	81a3      	strh	r3, [r4, #12]
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	431d      	orrs	r5, r3
 800c90c:	81a5      	strh	r5, [r4, #12]
 800c90e:	e7cf      	b.n	800c8b0 <__smakebuf_r+0x18>

0800c910 <_close_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	4d06      	ldr	r5, [pc, #24]	; (800c92c <_close_r+0x1c>)
 800c914:	2300      	movs	r3, #0
 800c916:	4604      	mov	r4, r0
 800c918:	4608      	mov	r0, r1
 800c91a:	602b      	str	r3, [r5, #0]
 800c91c:	f7f5 fd4f 	bl	80023be <_close>
 800c920:	1c43      	adds	r3, r0, #1
 800c922:	d102      	bne.n	800c92a <_close_r+0x1a>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	b103      	cbz	r3, 800c92a <_close_r+0x1a>
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	bd38      	pop	{r3, r4, r5, pc}
 800c92c:	20005fc0 	.word	0x20005fc0

0800c930 <_fstat_r>:
 800c930:	b538      	push	{r3, r4, r5, lr}
 800c932:	4d07      	ldr	r5, [pc, #28]	; (800c950 <_fstat_r+0x20>)
 800c934:	2300      	movs	r3, #0
 800c936:	4604      	mov	r4, r0
 800c938:	4608      	mov	r0, r1
 800c93a:	4611      	mov	r1, r2
 800c93c:	602b      	str	r3, [r5, #0]
 800c93e:	f7f5 fd4a 	bl	80023d6 <_fstat>
 800c942:	1c43      	adds	r3, r0, #1
 800c944:	d102      	bne.n	800c94c <_fstat_r+0x1c>
 800c946:	682b      	ldr	r3, [r5, #0]
 800c948:	b103      	cbz	r3, 800c94c <_fstat_r+0x1c>
 800c94a:	6023      	str	r3, [r4, #0]
 800c94c:	bd38      	pop	{r3, r4, r5, pc}
 800c94e:	bf00      	nop
 800c950:	20005fc0 	.word	0x20005fc0

0800c954 <_isatty_r>:
 800c954:	b538      	push	{r3, r4, r5, lr}
 800c956:	4d06      	ldr	r5, [pc, #24]	; (800c970 <_isatty_r+0x1c>)
 800c958:	2300      	movs	r3, #0
 800c95a:	4604      	mov	r4, r0
 800c95c:	4608      	mov	r0, r1
 800c95e:	602b      	str	r3, [r5, #0]
 800c960:	f7f5 fd49 	bl	80023f6 <_isatty>
 800c964:	1c43      	adds	r3, r0, #1
 800c966:	d102      	bne.n	800c96e <_isatty_r+0x1a>
 800c968:	682b      	ldr	r3, [r5, #0]
 800c96a:	b103      	cbz	r3, 800c96e <_isatty_r+0x1a>
 800c96c:	6023      	str	r3, [r4, #0]
 800c96e:	bd38      	pop	{r3, r4, r5, pc}
 800c970:	20005fc0 	.word	0x20005fc0

0800c974 <_lseek_r>:
 800c974:	b538      	push	{r3, r4, r5, lr}
 800c976:	4d07      	ldr	r5, [pc, #28]	; (800c994 <_lseek_r+0x20>)
 800c978:	4604      	mov	r4, r0
 800c97a:	4608      	mov	r0, r1
 800c97c:	4611      	mov	r1, r2
 800c97e:	2200      	movs	r2, #0
 800c980:	602a      	str	r2, [r5, #0]
 800c982:	461a      	mov	r2, r3
 800c984:	f7f5 fd42 	bl	800240c <_lseek>
 800c988:	1c43      	adds	r3, r0, #1
 800c98a:	d102      	bne.n	800c992 <_lseek_r+0x1e>
 800c98c:	682b      	ldr	r3, [r5, #0]
 800c98e:	b103      	cbz	r3, 800c992 <_lseek_r+0x1e>
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	bd38      	pop	{r3, r4, r5, pc}
 800c994:	20005fc0 	.word	0x20005fc0

0800c998 <_read_r>:
 800c998:	b538      	push	{r3, r4, r5, lr}
 800c99a:	4d07      	ldr	r5, [pc, #28]	; (800c9b8 <_read_r+0x20>)
 800c99c:	4604      	mov	r4, r0
 800c99e:	4608      	mov	r0, r1
 800c9a0:	4611      	mov	r1, r2
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	602a      	str	r2, [r5, #0]
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	f7f5 fcd0 	bl	800234c <_read>
 800c9ac:	1c43      	adds	r3, r0, #1
 800c9ae:	d102      	bne.n	800c9b6 <_read_r+0x1e>
 800c9b0:	682b      	ldr	r3, [r5, #0]
 800c9b2:	b103      	cbz	r3, 800c9b6 <_read_r+0x1e>
 800c9b4:	6023      	str	r3, [r4, #0]
 800c9b6:	bd38      	pop	{r3, r4, r5, pc}
 800c9b8:	20005fc0 	.word	0x20005fc0

0800c9bc <_sbrk_r>:
 800c9bc:	b538      	push	{r3, r4, r5, lr}
 800c9be:	4d06      	ldr	r5, [pc, #24]	; (800c9d8 <_sbrk_r+0x1c>)
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	4604      	mov	r4, r0
 800c9c4:	4608      	mov	r0, r1
 800c9c6:	602b      	str	r3, [r5, #0]
 800c9c8:	f7f5 fd2e 	bl	8002428 <_sbrk>
 800c9cc:	1c43      	adds	r3, r0, #1
 800c9ce:	d102      	bne.n	800c9d6 <_sbrk_r+0x1a>
 800c9d0:	682b      	ldr	r3, [r5, #0]
 800c9d2:	b103      	cbz	r3, 800c9d6 <_sbrk_r+0x1a>
 800c9d4:	6023      	str	r3, [r4, #0]
 800c9d6:	bd38      	pop	{r3, r4, r5, pc}
 800c9d8:	20005fc0 	.word	0x20005fc0

0800c9dc <_write_r>:
 800c9dc:	b538      	push	{r3, r4, r5, lr}
 800c9de:	4d07      	ldr	r5, [pc, #28]	; (800c9fc <_write_r+0x20>)
 800c9e0:	4604      	mov	r4, r0
 800c9e2:	4608      	mov	r0, r1
 800c9e4:	4611      	mov	r1, r2
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	602a      	str	r2, [r5, #0]
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	f7f5 fccb 	bl	8002386 <_write>
 800c9f0:	1c43      	adds	r3, r0, #1
 800c9f2:	d102      	bne.n	800c9fa <_write_r+0x1e>
 800c9f4:	682b      	ldr	r3, [r5, #0]
 800c9f6:	b103      	cbz	r3, 800c9fa <_write_r+0x1e>
 800c9f8:	6023      	str	r3, [r4, #0]
 800c9fa:	bd38      	pop	{r3, r4, r5, pc}
 800c9fc:	20005fc0 	.word	0x20005fc0

0800ca00 <_free_r>:
 800ca00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca02:	2900      	cmp	r1, #0
 800ca04:	d044      	beq.n	800ca90 <_free_r+0x90>
 800ca06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca0a:	9001      	str	r0, [sp, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f1a1 0404 	sub.w	r4, r1, #4
 800ca12:	bfb8      	it	lt
 800ca14:	18e4      	addlt	r4, r4, r3
 800ca16:	f7ff fe35 	bl	800c684 <__malloc_lock>
 800ca1a:	4a1e      	ldr	r2, [pc, #120]	; (800ca94 <_free_r+0x94>)
 800ca1c:	9801      	ldr	r0, [sp, #4]
 800ca1e:	6813      	ldr	r3, [r2, #0]
 800ca20:	b933      	cbnz	r3, 800ca30 <_free_r+0x30>
 800ca22:	6063      	str	r3, [r4, #4]
 800ca24:	6014      	str	r4, [r2, #0]
 800ca26:	b003      	add	sp, #12
 800ca28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca2c:	f7ff be30 	b.w	800c690 <__malloc_unlock>
 800ca30:	42a3      	cmp	r3, r4
 800ca32:	d908      	bls.n	800ca46 <_free_r+0x46>
 800ca34:	6825      	ldr	r5, [r4, #0]
 800ca36:	1961      	adds	r1, r4, r5
 800ca38:	428b      	cmp	r3, r1
 800ca3a:	bf01      	itttt	eq
 800ca3c:	6819      	ldreq	r1, [r3, #0]
 800ca3e:	685b      	ldreq	r3, [r3, #4]
 800ca40:	1949      	addeq	r1, r1, r5
 800ca42:	6021      	streq	r1, [r4, #0]
 800ca44:	e7ed      	b.n	800ca22 <_free_r+0x22>
 800ca46:	461a      	mov	r2, r3
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	b10b      	cbz	r3, 800ca50 <_free_r+0x50>
 800ca4c:	42a3      	cmp	r3, r4
 800ca4e:	d9fa      	bls.n	800ca46 <_free_r+0x46>
 800ca50:	6811      	ldr	r1, [r2, #0]
 800ca52:	1855      	adds	r5, r2, r1
 800ca54:	42a5      	cmp	r5, r4
 800ca56:	d10b      	bne.n	800ca70 <_free_r+0x70>
 800ca58:	6824      	ldr	r4, [r4, #0]
 800ca5a:	4421      	add	r1, r4
 800ca5c:	1854      	adds	r4, r2, r1
 800ca5e:	42a3      	cmp	r3, r4
 800ca60:	6011      	str	r1, [r2, #0]
 800ca62:	d1e0      	bne.n	800ca26 <_free_r+0x26>
 800ca64:	681c      	ldr	r4, [r3, #0]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	6053      	str	r3, [r2, #4]
 800ca6a:	440c      	add	r4, r1
 800ca6c:	6014      	str	r4, [r2, #0]
 800ca6e:	e7da      	b.n	800ca26 <_free_r+0x26>
 800ca70:	d902      	bls.n	800ca78 <_free_r+0x78>
 800ca72:	230c      	movs	r3, #12
 800ca74:	6003      	str	r3, [r0, #0]
 800ca76:	e7d6      	b.n	800ca26 <_free_r+0x26>
 800ca78:	6825      	ldr	r5, [r4, #0]
 800ca7a:	1961      	adds	r1, r4, r5
 800ca7c:	428b      	cmp	r3, r1
 800ca7e:	bf04      	itt	eq
 800ca80:	6819      	ldreq	r1, [r3, #0]
 800ca82:	685b      	ldreq	r3, [r3, #4]
 800ca84:	6063      	str	r3, [r4, #4]
 800ca86:	bf04      	itt	eq
 800ca88:	1949      	addeq	r1, r1, r5
 800ca8a:	6021      	streq	r1, [r4, #0]
 800ca8c:	6054      	str	r4, [r2, #4]
 800ca8e:	e7ca      	b.n	800ca26 <_free_r+0x26>
 800ca90:	b003      	add	sp, #12
 800ca92:	bd30      	pop	{r4, r5, pc}
 800ca94:	20005fb8 	.word	0x20005fb8

0800ca98 <_init>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	bf00      	nop
 800ca9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9e:	bc08      	pop	{r3}
 800caa0:	469e      	mov	lr, r3
 800caa2:	4770      	bx	lr

0800caa4 <_fini>:
 800caa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa6:	bf00      	nop
 800caa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caaa:	bc08      	pop	{r3}
 800caac:	469e      	mov	lr, r3
 800caae:	4770      	bx	lr
