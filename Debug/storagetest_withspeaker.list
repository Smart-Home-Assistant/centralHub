
storagetest_withspeaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800cbac  0800cbac  0001cbac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2b8  0800d2b8  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2b8  0800d2b8  0001d2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2c0  0800d2c0  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2c0  0800d2c0  0001d2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2c4  0800d2c4  0001d2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800d2c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f94  200000bc  0800d384  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00005200  20006050  0800d384  00026050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e26f  00000000  00000000  0002012f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f36  00000000  00000000  0003e39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c00  00000000  00000000  000422d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015bb  00000000  00000000  00043ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ddd2  00000000  00000000  00045493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002244e  00000000  00000000  00073265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010c2a7  00000000  00000000  000956b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007fc0  00000000  00000000  001a195c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a991c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000bc 	.word	0x200000bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb94 	.word	0x0800cb94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	0800cb94 	.word	0x0800cb94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800088c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000890:	f000 b970 	b.w	8000b74 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9e08      	ldr	r6, [sp, #32]
 80008b2:	460d      	mov	r5, r1
 80008b4:	4604      	mov	r4, r0
 80008b6:	460f      	mov	r7, r1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d14a      	bne.n	8000952 <__udivmoddi4+0xa6>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4694      	mov	ip, r2
 80008c0:	d965      	bls.n	800098e <__udivmoddi4+0xe2>
 80008c2:	fab2 f382 	clz	r3, r2
 80008c6:	b143      	cbz	r3, 80008da <__udivmoddi4+0x2e>
 80008c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008cc:	f1c3 0220 	rsb	r2, r3, #32
 80008d0:	409f      	lsls	r7, r3
 80008d2:	fa20 f202 	lsr.w	r2, r0, r2
 80008d6:	4317      	orrs	r7, r2
 80008d8:	409c      	lsls	r4, r3
 80008da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008de:	fa1f f58c 	uxth.w	r5, ip
 80008e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008e6:	0c22      	lsrs	r2, r4, #16
 80008e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008f0:	fb01 f005 	mul.w	r0, r1, r5
 80008f4:	4290      	cmp	r0, r2
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x62>
 80008f8:	eb1c 0202 	adds.w	r2, ip, r2
 80008fc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000900:	f080 811c 	bcs.w	8000b3c <__udivmoddi4+0x290>
 8000904:	4290      	cmp	r0, r2
 8000906:	f240 8119 	bls.w	8000b3c <__udivmoddi4+0x290>
 800090a:	3902      	subs	r1, #2
 800090c:	4462      	add	r2, ip
 800090e:	1a12      	subs	r2, r2, r0
 8000910:	b2a4      	uxth	r4, r4
 8000912:	fbb2 f0fe 	udiv	r0, r2, lr
 8000916:	fb0e 2210 	mls	r2, lr, r0, r2
 800091a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800091e:	fb00 f505 	mul.w	r5, r0, r5
 8000922:	42a5      	cmp	r5, r4
 8000924:	d90a      	bls.n	800093c <__udivmoddi4+0x90>
 8000926:	eb1c 0404 	adds.w	r4, ip, r4
 800092a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800092e:	f080 8107 	bcs.w	8000b40 <__udivmoddi4+0x294>
 8000932:	42a5      	cmp	r5, r4
 8000934:	f240 8104 	bls.w	8000b40 <__udivmoddi4+0x294>
 8000938:	4464      	add	r4, ip
 800093a:	3802      	subs	r0, #2
 800093c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000940:	1b64      	subs	r4, r4, r5
 8000942:	2100      	movs	r1, #0
 8000944:	b11e      	cbz	r6, 800094e <__udivmoddi4+0xa2>
 8000946:	40dc      	lsrs	r4, r3
 8000948:	2300      	movs	r3, #0
 800094a:	e9c6 4300 	strd	r4, r3, [r6]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	428b      	cmp	r3, r1
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0xbc>
 8000956:	2e00      	cmp	r6, #0
 8000958:	f000 80ed 	beq.w	8000b36 <__udivmoddi4+0x28a>
 800095c:	2100      	movs	r1, #0
 800095e:	e9c6 0500 	strd	r0, r5, [r6]
 8000962:	4608      	mov	r0, r1
 8000964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000968:	fab3 f183 	clz	r1, r3
 800096c:	2900      	cmp	r1, #0
 800096e:	d149      	bne.n	8000a04 <__udivmoddi4+0x158>
 8000970:	42ab      	cmp	r3, r5
 8000972:	d302      	bcc.n	800097a <__udivmoddi4+0xce>
 8000974:	4282      	cmp	r2, r0
 8000976:	f200 80f8 	bhi.w	8000b6a <__udivmoddi4+0x2be>
 800097a:	1a84      	subs	r4, r0, r2
 800097c:	eb65 0203 	sbc.w	r2, r5, r3
 8000980:	2001      	movs	r0, #1
 8000982:	4617      	mov	r7, r2
 8000984:	2e00      	cmp	r6, #0
 8000986:	d0e2      	beq.n	800094e <__udivmoddi4+0xa2>
 8000988:	e9c6 4700 	strd	r4, r7, [r6]
 800098c:	e7df      	b.n	800094e <__udivmoddi4+0xa2>
 800098e:	b902      	cbnz	r2, 8000992 <__udivmoddi4+0xe6>
 8000990:	deff      	udf	#255	; 0xff
 8000992:	fab2 f382 	clz	r3, r2
 8000996:	2b00      	cmp	r3, #0
 8000998:	f040 8090 	bne.w	8000abc <__udivmoddi4+0x210>
 800099c:	1a8a      	subs	r2, r1, r2
 800099e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a2:	fa1f fe8c 	uxth.w	lr, ip
 80009a6:	2101      	movs	r1, #1
 80009a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009ac:	fb07 2015 	mls	r0, r7, r5, r2
 80009b0:	0c22      	lsrs	r2, r4, #16
 80009b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009b6:	fb0e f005 	mul.w	r0, lr, r5
 80009ba:	4290      	cmp	r0, r2
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x124>
 80009be:	eb1c 0202 	adds.w	r2, ip, r2
 80009c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x122>
 80009c8:	4290      	cmp	r0, r2
 80009ca:	f200 80cb 	bhi.w	8000b64 <__udivmoddi4+0x2b8>
 80009ce:	4645      	mov	r5, r8
 80009d0:	1a12      	subs	r2, r2, r0
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d8:	fb07 2210 	mls	r2, r7, r0, r2
 80009dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e0:	fb0e fe00 	mul.w	lr, lr, r0
 80009e4:	45a6      	cmp	lr, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x14e>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80009f0:	d202      	bcs.n	80009f8 <__udivmoddi4+0x14c>
 80009f2:	45a6      	cmp	lr, r4
 80009f4:	f200 80bb 	bhi.w	8000b6e <__udivmoddi4+0x2c2>
 80009f8:	4610      	mov	r0, r2
 80009fa:	eba4 040e 	sub.w	r4, r4, lr
 80009fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a02:	e79f      	b.n	8000944 <__udivmoddi4+0x98>
 8000a04:	f1c1 0720 	rsb	r7, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a12:	fa05 f401 	lsl.w	r4, r5, r1
 8000a16:	fa20 f307 	lsr.w	r3, r0, r7
 8000a1a:	40fd      	lsrs	r5, r7
 8000a1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a20:	4323      	orrs	r3, r4
 8000a22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a26:	fa1f fe8c 	uxth.w	lr, ip
 8000a2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a2e:	0c1c      	lsrs	r4, r3, #16
 8000a30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a34:	fb08 f50e 	mul.w	r5, r8, lr
 8000a38:	42a5      	cmp	r5, r4
 8000a3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b0>
 8000a44:	eb1c 0404 	adds.w	r4, ip, r4
 8000a48:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a4c:	f080 8088 	bcs.w	8000b60 <__udivmoddi4+0x2b4>
 8000a50:	42a5      	cmp	r5, r4
 8000a52:	f240 8085 	bls.w	8000b60 <__udivmoddi4+0x2b4>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	4464      	add	r4, ip
 8000a5c:	1b64      	subs	r4, r4, r5
 8000a5e:	b29d      	uxth	r5, r3
 8000a60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a64:	fb09 4413 	mls	r4, r9, r3, r4
 8000a68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a70:	45a6      	cmp	lr, r4
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1da>
 8000a74:	eb1c 0404 	adds.w	r4, ip, r4
 8000a78:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000a7c:	d26c      	bcs.n	8000b58 <__udivmoddi4+0x2ac>
 8000a7e:	45a6      	cmp	lr, r4
 8000a80:	d96a      	bls.n	8000b58 <__udivmoddi4+0x2ac>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	4464      	add	r4, ip
 8000a86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a8e:	eba4 040e 	sub.w	r4, r4, lr
 8000a92:	42ac      	cmp	r4, r5
 8000a94:	46c8      	mov	r8, r9
 8000a96:	46ae      	mov	lr, r5
 8000a98:	d356      	bcc.n	8000b48 <__udivmoddi4+0x29c>
 8000a9a:	d053      	beq.n	8000b44 <__udivmoddi4+0x298>
 8000a9c:	b156      	cbz	r6, 8000ab4 <__udivmoddi4+0x208>
 8000a9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000aa2:	eb64 040e 	sbc.w	r4, r4, lr
 8000aa6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aaa:	40ca      	lsrs	r2, r1
 8000aac:	40cc      	lsrs	r4, r1
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abc:	f1c3 0120 	rsb	r1, r3, #32
 8000ac0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ac4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac8:	fa25 f101 	lsr.w	r1, r5, r1
 8000acc:	409d      	lsls	r5, r3
 8000ace:	432a      	orrs	r2, r5
 8000ad0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000adc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ae0:	0c11      	lsrs	r1, r2, #16
 8000ae2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ae6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aea:	428d      	cmp	r5, r1
 8000aec:	fa04 f403 	lsl.w	r4, r4, r3
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x258>
 8000af2:	eb1c 0101 	adds.w	r1, ip, r1
 8000af6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000afa:	d22f      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000afc:	428d      	cmp	r5, r1
 8000afe:	d92d      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b00:	3802      	subs	r0, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	1b49      	subs	r1, r1, r5
 8000b06:	b292      	uxth	r2, r2
 8000b08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b14:	fb05 f10e 	mul.w	r1, r5, lr
 8000b18:	4291      	cmp	r1, r2
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x282>
 8000b1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b20:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b24:	d216      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000b26:	4291      	cmp	r1, r2
 8000b28:	d914      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000b2a:	3d02      	subs	r5, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a52      	subs	r2, r2, r1
 8000b30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b34:	e738      	b.n	80009a8 <__udivmoddi4+0xfc>
 8000b36:	4631      	mov	r1, r6
 8000b38:	4630      	mov	r0, r6
 8000b3a:	e708      	b.n	800094e <__udivmoddi4+0xa2>
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e6e6      	b.n	800090e <__udivmoddi4+0x62>
 8000b40:	4610      	mov	r0, r2
 8000b42:	e6fb      	b.n	800093c <__udivmoddi4+0x90>
 8000b44:	4548      	cmp	r0, r9
 8000b46:	d2a9      	bcs.n	8000a9c <__udivmoddi4+0x1f0>
 8000b48:	ebb9 0802 	subs.w	r8, r9, r2
 8000b4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b50:	3b01      	subs	r3, #1
 8000b52:	e7a3      	b.n	8000a9c <__udivmoddi4+0x1f0>
 8000b54:	4645      	mov	r5, r8
 8000b56:	e7ea      	b.n	8000b2e <__udivmoddi4+0x282>
 8000b58:	462b      	mov	r3, r5
 8000b5a:	e794      	b.n	8000a86 <__udivmoddi4+0x1da>
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	e7d1      	b.n	8000b04 <__udivmoddi4+0x258>
 8000b60:	46d0      	mov	r8, sl
 8000b62:	e77b      	b.n	8000a5c <__udivmoddi4+0x1b0>
 8000b64:	3d02      	subs	r5, #2
 8000b66:	4462      	add	r2, ip
 8000b68:	e732      	b.n	80009d0 <__udivmoddi4+0x124>
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e70a      	b.n	8000984 <__udivmoddi4+0xd8>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	e742      	b.n	80009fa <__udivmoddi4+0x14e>

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <__NVIC_EnableIRQ+0x38>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db12      	blt.n	8000c08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	490a      	ldr	r1, [pc, #40]	; (8000c14 <__NVIC_DisableIRQ+0x44>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	3320      	adds	r3, #32
 8000bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bfc:	f3bf 8f4f 	dsb	sy
}
 8000c00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c02:	f3bf 8f6f 	isb	sy
}
 8000c06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f023 0201 	bic.w	r2, r3, #1
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	605a      	str	r2, [r3, #4]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	609a      	str	r2, [r3, #8]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40021000 	.word	0x40021000

08000db4 <mount_SD_card>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void mount_SD_card(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

    //Mount the SD Card
	fres = f_mount(&FatFs, "", 1);    //1=mount now
 8000dba:	2201      	movs	r2, #1
 8000dbc:	492a      	ldr	r1, [pc, #168]	; (8000e68 <mount_SD_card+0xb4>)
 8000dbe:	482b      	ldr	r0, [pc, #172]	; (8000e6c <mount_SD_card+0xb8>)
 8000dc0:	f009 ffc2 	bl	800ad48 <f_mount>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <mount_SD_card+0xbc>)
 8000dca:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <mount_SD_card+0xbc>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d006      	beq.n	8000de2 <mount_SD_card+0x2e>
		printf("No SD Card found : (%i)\r\n", fres);
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <mount_SD_card+0xbc>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4826      	ldr	r0, [pc, #152]	; (8000e74 <mount_SD_card+0xc0>)
 8000ddc:	f00a fffa 	bl	800bdd4 <iprintf>
 8000de0:	e03f      	b.n	8000e62 <mount_SD_card+0xae>
        return;
	}
	printf("SD Card Mounted Successfully\r\n");
 8000de2:	4825      	ldr	r0, [pc, #148]	; (8000e78 <mount_SD_card+0xc4>)
 8000de4:	f00b f85c 	bl	800bea0 <puts>

    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;

    f_getfree("", &fre_clust, &pfs);
 8000de8:	1d3a      	adds	r2, r7, #4
 8000dea:	463b      	mov	r3, r7
 8000dec:	4619      	mov	r1, r3
 8000dee:	481e      	ldr	r0, [pc, #120]	; (8000e68 <mount_SD_card+0xb4>)
 8000df0:	f00a fd57 	bl	800b8a2 <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	3b02      	subs	r3, #2
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	8952      	ldrh	r2, [r2, #10]
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fca0 	bl	8000748 <__aeabi_ui2d>
 8000e08:	f04f 0200 	mov.w	r2, #0
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <mount_SD_card+0xc8>)
 8000e0e:	f7ff fa2f 	bl	8000270 <__aeabi_dmul>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	4610      	mov	r0, r2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f7ff fd0f 	bl	800083c <__aeabi_d2uiz>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <mount_SD_card+0xcc>)
 8000e22:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	895b      	ldrh	r3, [r3, #10]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	fb02 f303 	mul.w	r3, r2, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fc89 	bl	8000748 <__aeabi_ui2d>
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <mount_SD_card+0xc8>)
 8000e3c:	f7ff fa18 	bl	8000270 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff fcf8 	bl	800083c <__aeabi_d2uiz>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <mount_SD_card+0xd0>)
 8000e50:	6013      	str	r3, [r2, #0]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\r\n", totalSpace, freeSpace);
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <mount_SD_card+0xcc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <mount_SD_card+0xd0>)
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480a      	ldr	r0, [pc, #40]	; (8000e88 <mount_SD_card+0xd4>)
 8000e5e:	f00a ffb9 	bl	800bdd4 <iprintf>

}
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	0800cbc0 	.word	0x0800cbc0
 8000e6c:	20003bd4 	.word	0x20003bd4
 8000e70:	20004c0c 	.word	0x20004c0c
 8000e74:	0800cbc4 	.word	0x0800cbc4
 8000e78:	0800cbe0 	.word	0x0800cbe0
 8000e7c:	3fe00000 	.word	0x3fe00000
 8000e80:	20005c40 	.word	0x20005c40
 8000e84:	20005c44 	.word	0x20005c44
 8000e88:	0800cc00 	.word	0x0800cc00

08000e8c <unmount_SD_card>:

void unmount_SD_card(void){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	4904      	ldr	r1, [pc, #16]	; (8000ea4 <unmount_SD_card+0x18>)
 8000e94:	2000      	movs	r0, #0
 8000e96:	f009 ff57 	bl	800ad48 <f_mount>
	printf("SD Card Unmounted Successfully\r\n");
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <unmount_SD_card+0x1c>)
 8000e9c:	f00b f800 	bl	800bea0 <puts>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	0800cbc0 	.word	0x0800cbc0
 8000ea8:	0800cc30 	.word	0x0800cc30

08000eac <read_SD_card_song_at_position>:
    	}
	}

}

void read_SD_card_song_at_position(int buffer_position){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	if ( audio_position + AUDIO_BUFFER_SIZE * 2 <= song_length_total){
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <read_SD_card_song_at_position+0x50>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f203 72cf 	addw	r2, r3, #1999	; 0x7cf
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <read_SD_card_song_at_position+0x54>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	da17      	bge.n	8000ef4 <read_SD_card_song_at_position+0x48>
		if (f_read(&file, &playback_buffer[buffer_position], bytes_to_read, &bytesRead) == FR_OK) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <read_SD_card_song_at_position+0x58>)
 8000eca:	1899      	adds	r1, r3, r2
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <read_SD_card_song_at_position+0x5c>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <read_SD_card_song_at_position+0x60>)
 8000ed2:	480f      	ldr	r0, [pc, #60]	; (8000f10 <read_SD_card_song_at_position+0x64>)
 8000ed4:	f00a f94a 	bl	800b16c <f_read>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10a      	bne.n	8000ef4 <read_SD_card_song_at_position+0x48>
						// Check if the expected number of bytes were read
			if (bytesRead == AUDIO_BUFFER_SIZE * 2) {
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <read_SD_card_song_at_position+0x60>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ee6:	d105      	bne.n	8000ef4 <read_SD_card_song_at_position+0x48>
				audio_position += AUDIO_BUFFER_SIZE*2;
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <read_SD_card_song_at_position+0x50>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000ef0:	4a02      	ldr	r2, [pc, #8]	; (8000efc <read_SD_card_song_at_position+0x50>)
 8000ef2:	6013      	str	r3, [r2, #0]
			} else {
							// Handle the case where not all bytes were read
			}
		}
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20002c1c 	.word	0x20002c1c
 8000f00:	20002c20 	.word	0x20002c20
 8000f04:	20002c2c 	.word	0x20002c2c
 8000f08:	20000030 	.word	0x20000030
 8000f0c:	20003bcc 	.word	0x20003bcc
 8000f10:	20004c10 	.word	0x20004c10

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1a:	f001 faec 	bl	80024f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1e:	f000 f957 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f22:	f000 fc29 	bl	8001778 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f26:	f000 fc09 	bl	800173c <MX_DMA_Init>
  MX_SPI2_Init();
 8000f2a:	f000 fa77 	bl	800141c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000f2e:	f000 fba5 	bl	800167c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000f32:	f006 fff3 	bl	8007f1c <MX_FATFS_Init>
  MX_DAC1_Init();
 8000f36:	f000 f99d 	bl	8001274 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000f3a:	f000 faad 	bl	8001498 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f3e:	f000 faed 	bl	800151c <MX_TIM3_Init>
  MX_UART4_Init();
 8000f42:	f000 fb3b 	bl	80015bc <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000f46:	f000 fbc9 	bl	80016dc <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000f4a:	f000 fb67 	bl	800161c <MX_USART1_UART_Init>
  MX_DFSDM1_Init();
 8000f4e:	f000 f9c3 	bl	80012d8 <MX_DFSDM1_Init>
  MX_SPI1_Init();
 8000f52:	f000 fa25 	bl	80013a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  // UART Interrupt Init
  // LIGHT
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, data, 64);
 8000f56:	2240      	movs	r2, #64	; 0x40
 8000f58:	4981      	ldr	r1, [pc, #516]	; (8001160 <main+0x24c>)
 8000f5a:	4882      	ldr	r0, [pc, #520]	; (8001164 <main+0x250>)
 8000f5c:	f006 fec0 	bl	8007ce0 <HAL_UARTEx_ReceiveToIdle_IT>

  // DOOR
  HAL_UARTEx_ReceiveToIdle_IT(&huart3, data, 64);
 8000f60:	2240      	movs	r2, #64	; 0x40
 8000f62:	497f      	ldr	r1, [pc, #508]	; (8001160 <main+0x24c>)
 8000f64:	4880      	ldr	r0, [pc, #512]	; (8001168 <main+0x254>)
 8000f66:	f006 febb 	bl	8007ce0 <HAL_UARTEx_ReceiveToIdle_IT>


  HAL_UARTEx_ReceiveToIdle_IT(&huart1, data, 64);
 8000f6a:	2240      	movs	r2, #64	; 0x40
 8000f6c:	497c      	ldr	r1, [pc, #496]	; (8001160 <main+0x24c>)
 8000f6e:	487f      	ldr	r0, [pc, #508]	; (800116c <main+0x258>)
 8000f70:	f006 feb6 	bl	8007ce0 <HAL_UARTEx_ReceiveToIdle_IT>

  // set status of light to off on start (Opposite than LED due to relay)
  HAL_GPIO_WritePin(lightStatus_GPIO_Port, lightStatus_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2102      	movs	r1, #2
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f002 fdea 	bl	8003b54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(doorStatus_GPIO_Port, doorStatus_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2101      	movs	r1, #1
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f002 fde4 	bl	8003b54 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Initilize SD Card and Play start up Sound*/

  mount_SD_card();
 8000f8c:	f7ff ff12 	bl	8000db4 <mount_SD_card>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000f90:	2100      	movs	r1, #0
 8000f92:	4877      	ldr	r0, [pc, #476]	; (8001170 <main+0x25c>)
 8000f94:	f001 fc7b 	bl	800288e <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x7FF);
 8000f98:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4873      	ldr	r0, [pc, #460]	; (8001170 <main+0x25c>)
 8000fa2:	f001 fd1b 	bl	80029dc <HAL_DAC_SetValue>

  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (recording_audio){
 8000fa6:	4b73      	ldr	r3, [pc, #460]	; (8001174 <main+0x260>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 8094 	beq.w	80010d8 <main+0x1c4>
			  printf("\r\n\n");

			  return 1;
		  }
		  */
		  if (finished_recording){
 8000fb0:	4b71      	ldr	r3, [pc, #452]	; (8001178 <main+0x264>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d013      	beq.n	8000fe0 <main+0xcc>
			  __HAL_DMA_DISABLE(&hdma_dfsdm1_flt1);
 8000fb8:	4b70      	ldr	r3, [pc, #448]	; (800117c <main+0x268>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b6f      	ldr	r3, [pc, #444]	; (800117c <main+0x268>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]
			  printf("Finished Recording Audio\r\n");
 8000fc8:	486d      	ldr	r0, [pc, #436]	; (8001180 <main+0x26c>)
 8000fca:	f00a ff69 	bl	800bea0 <puts>
			  recording_audio = 0;
 8000fce:	4b69      	ldr	r3, [pc, #420]	; (8001174 <main+0x260>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
			  finished_recording = 0;
 8000fd4:	4b68      	ldr	r3, [pc, #416]	; (8001178 <main+0x264>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
			  f_close(&file);
 8000fda:	486a      	ldr	r0, [pc, #424]	; (8001184 <main+0x270>)
 8000fdc:	f00a fc37 	bl	800b84e <f_close>
		  }
		  if(mic_half_transfer){
 8000fe0:	4b69      	ldr	r3, [pc, #420]	; (8001188 <main+0x274>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d038      	beq.n	800105a <main+0x146>
			  for (int i = 0; i < DFSDM_BUFFER_SIZE; i++){
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	e01b      	b.n	8001026 <main+0x112>
				  recording[i] = SaturaLH((dfsdm_buffer[i] >> 8), -32768, 32767);
 8000fee:	4a67      	ldr	r2, [pc, #412]	; (800118c <main+0x278>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	121b      	asrs	r3, r3, #8
 8000ff8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000ffc:	db0b      	blt.n	8001016 <main+0x102>
 8000ffe:	4a63      	ldr	r2, [pc, #396]	; (800118c <main+0x278>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	121b      	asrs	r3, r3, #8
 8001008:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800100c:	4293      	cmp	r3, r2
 800100e:	bfa8      	it	ge
 8001010:	4613      	movge	r3, r2
 8001012:	b21a      	sxth	r2, r3
 8001014:	e000      	b.n	8001018 <main+0x104>
 8001016:	4a5e      	ldr	r2, [pc, #376]	; (8001190 <main+0x27c>)
 8001018:	495e      	ldr	r1, [pc, #376]	; (8001194 <main+0x280>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			  for (int i = 0; i < DFSDM_BUFFER_SIZE; i++){
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3301      	adds	r3, #1
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800102c:	dbdf      	blt.n	8000fee <main+0xda>
				  //transfer_position ++;
			  }
			  if (f_write(&file, recording, bytes_to_record, &bytesWritten) != FR_OK) {
 800102e:	4b5a      	ldr	r3, [pc, #360]	; (8001198 <main+0x284>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b5a      	ldr	r3, [pc, #360]	; (800119c <main+0x288>)
 8001034:	4957      	ldr	r1, [pc, #348]	; (8001194 <main+0x280>)
 8001036:	4853      	ldr	r0, [pc, #332]	; (8001184 <main+0x270>)
 8001038:	f00a f9f7 	bl	800b42a <f_write>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <main+0x13e>
				  printf("Error Writing To File 1.\n");
 8001042:	4857      	ldr	r0, [pc, #348]	; (80011a0 <main+0x28c>)
 8001044:	f00a ff2c 	bl	800bea0 <puts>
				  f_close(&file);
 8001048:	484e      	ldr	r0, [pc, #312]	; (8001184 <main+0x270>)
 800104a:	f00a fc00 	bl	800b84e <f_close>
				  return 1;
 800104e:	2301      	movs	r3, #1
 8001050:	e081      	b.n	8001156 <main+0x242>
			  }
			  mic_half_transfer = 0;
 8001052:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <main+0x274>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	e03e      	b.n	80010d8 <main+0x1c4>
		  }
		  else if (mic_transfer_complete){
 800105a:	4b52      	ldr	r3, [pc, #328]	; (80011a4 <main+0x290>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d03a      	beq.n	80010d8 <main+0x1c4>
			  for (int i = DFSDM_BUFFER_SIZE; i < DFSDM_BUFFER_SIZE * 2; i++){
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	e01d      	b.n	80010a6 <main+0x192>
				  recording[i - DFSDM_BUFFER_SIZE] = SaturaLH((dfsdm_buffer[i] >> 8), -32768, 32767);
 800106a:	4a48      	ldr	r2, [pc, #288]	; (800118c <main+0x278>)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	121b      	asrs	r3, r3, #8
 8001074:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001078:	db0b      	blt.n	8001092 <main+0x17e>
 800107a:	4a44      	ldr	r2, [pc, #272]	; (800118c <main+0x278>)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	121b      	asrs	r3, r3, #8
 8001084:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001088:	4293      	cmp	r3, r2
 800108a:	bfa8      	it	ge
 800108c:	4613      	movge	r3, r2
 800108e:	b21a      	sxth	r2, r3
 8001090:	e000      	b.n	8001094 <main+0x180>
 8001092:	4a3f      	ldr	r2, [pc, #252]	; (8001190 <main+0x27c>)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800109a:	493e      	ldr	r1, [pc, #248]	; (8001194 <main+0x280>)
 800109c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			  for (int i = DFSDM_BUFFER_SIZE; i < DFSDM_BUFFER_SIZE * 2; i++){
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010ac:	dbdd      	blt.n	800106a <main+0x156>
				  //transfer_position ++;
			  }
			  if (f_write(&file, recording, bytes_to_record, &bytesWritten) != FR_OK) {
 80010ae:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <main+0x284>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4b3a      	ldr	r3, [pc, #232]	; (800119c <main+0x288>)
 80010b4:	4937      	ldr	r1, [pc, #220]	; (8001194 <main+0x280>)
 80010b6:	4833      	ldr	r0, [pc, #204]	; (8001184 <main+0x270>)
 80010b8:	f00a f9b7 	bl	800b42a <f_write>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <main+0x1be>
				  printf("Error Writing to File 2.\n");
 80010c2:	4839      	ldr	r0, [pc, #228]	; (80011a8 <main+0x294>)
 80010c4:	f00a feec 	bl	800bea0 <puts>
				  f_close(&file);
 80010c8:	482e      	ldr	r0, [pc, #184]	; (8001184 <main+0x270>)
 80010ca:	f00a fbc0 	bl	800b84e <f_close>
				  return 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e041      	b.n	8001156 <main+0x242>
			  }
			  mic_transfer_complete = 0;
 80010d2:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <main+0x290>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if (audio_playing){
 80010d8:	4b34      	ldr	r3, [pc, #208]	; (80011ac <main+0x298>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d02e      	beq.n	800113e <main+0x22a>
		  if (samples_played >= song_length_total/2){
 80010e0:	4b33      	ldr	r3, [pc, #204]	; (80011b0 <main+0x29c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0fda      	lsrs	r2, r3, #31
 80010e6:	4413      	add	r3, r2
 80010e8:	105b      	asrs	r3, r3, #1
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <main+0x2a0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dc0f      	bgt.n	8001114 <main+0x200>
			  NVIC_DisableIRQ(TIM2_IRQn);
 80010f4:	201c      	movs	r0, #28
 80010f6:	f7ff fd6b 	bl	8000bd0 <__NVIC_DisableIRQ>
			  LL_TIM_DisableCounter(TIM2);
 80010fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010fe:	f7ff fde8 	bl	8000cd2 <LL_TIM_DisableCounter>
			  printf("Song Finished at %d\r\n", audio_position);
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <main+0x2a4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	482c      	ldr	r0, [pc, #176]	; (80011bc <main+0x2a8>)
 800110a:	f00a fe63 	bl	800bdd4 <iprintf>
			  audio_playing = 0;
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <main+0x298>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
		  }
		  if (buffer_half){
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <main+0x2ac>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <main+0x214>
			  read_SD_card_song_at_position(0);
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff fec5 	bl	8000eac <read_SD_card_song_at_position>
			  buffer_half = 0;
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <main+0x2ac>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
		  }
		  if (buffer_complete){
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <main+0x2b0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <main+0x22a>
			  read_SD_card_song_at_position(AUDIO_BUFFER_SIZE);
 8001130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001134:	f7ff feba 	bl	8000eac <read_SD_card_song_at_position>
			  buffer_complete = 0;
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <main+0x2b0>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if (error){
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <main+0x2b4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f43f af2f 	beq.w	8000fa6 <main+0x92>
		  printf("There has been an error\r\n Terminating Program\r\n");
 8001148:	4820      	ldr	r0, [pc, #128]	; (80011cc <main+0x2b8>)
 800114a:	f00a fea9 	bl	800bea0 <puts>
		  unmount_SD_card();
 800114e:	f7ff fe9d 	bl	8000e8c <unmount_SD_card>
		  return -1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	  }

  }
  unmount_SD_card();
  /* USER CODE END 3 */
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20005c48 	.word	0x20005c48
 8001164:	200002d4 	.word	0x200002d4
 8001168:	2000046c 	.word	0x2000046c
 800116c:	2000035c 	.word	0x2000035c
 8001170:	200000d8 	.word	0x200000d8
 8001174:	200004f8 	.word	0x200004f8
 8001178:	200004fc 	.word	0x200004fc
 800117c:	20000178 	.word	0x20000178
 8001180:	0800cc90 	.word	0x0800cc90
 8001184:	20004c10 	.word	0x20004c10
 8001188:	20002c14 	.word	0x20002c14
 800118c:	20000cd0 	.word	0x20000cd0
 8001190:	ffff8000 	.word	0xffff8000
 8001194:	20000500 	.word	0x20000500
 8001198:	20000034 	.word	0x20000034
 800119c:	20003bd0 	.word	0x20003bd0
 80011a0:	0800ccac 	.word	0x0800ccac
 80011a4:	20002c10 	.word	0x20002c10
 80011a8:	0800ccc8 	.word	0x0800ccc8
 80011ac:	20002c18 	.word	0x20002c18
 80011b0:	20002c20 	.word	0x20002c20
 80011b4:	2000002c 	.word	0x2000002c
 80011b8:	20002c1c 	.word	0x20002c1c
 80011bc:	0800cce4 	.word	0x0800cce4
 80011c0:	20002c24 	.word	0x20002c24
 80011c4:	20002c28 	.word	0x20002c28
 80011c8:	200004f4 	.word	0x200004f4
 80011cc:	0800ccfc 	.word	0x0800ccfc

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b096      	sub	sp, #88	; 0x58
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	2244      	movs	r2, #68	; 0x44
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f00a fe78 	bl	800bed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011f6:	f002 fceb 	bl	8003bd0 <HAL_PWREx_ControlVoltageScaling>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001200:	f000 fbe4 	bl	80019cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001204:	2310      	movs	r3, #16
 8001206:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001210:	2360      	movs	r3, #96	; 0x60
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001214:	2302      	movs	r3, #2
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001218:	2301      	movs	r3, #1
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001220:	2320      	movs	r3, #32
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001224:	2307      	movs	r3, #7
 8001226:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001228:	2302      	movs	r3, #2
 800122a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800122c:	2302      	movs	r3, #2
 800122e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4618      	mov	r0, r3
 8001236:	f002 fd21 	bl	8003c7c <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001240:	f000 fbc4 	bl	80019cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	230f      	movs	r3, #15
 8001246:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001248:	2303      	movs	r3, #3
 800124a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	2103      	movs	r1, #3
 800125c:	4618      	mov	r0, r3
 800125e:	f003 f8e9 	bl	8004434 <HAL_RCC_ClockConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001268:	f000 fbb0 	bl	80019cc <Error_Handler>
  }
}
 800126c:	bf00      	nop
 800126e:	3758      	adds	r7, #88	; 0x58
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2224      	movs	r2, #36	; 0x24
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f00a fe27 	bl	800bed4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <MX_DAC1_Init+0x5c>)
 8001288:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <MX_DAC1_Init+0x60>)
 800128a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800128c:	4810      	ldr	r0, [pc, #64]	; (80012d0 <MX_DAC1_Init+0x5c>)
 800128e:	f001 fadc 	bl	800284a <HAL_DAC_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001298:	f000 fb98 	bl	80019cc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2200      	movs	r2, #0
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_DAC1_Init+0x5c>)
 80012b8:	f001 fbbf 	bl	8002a3a <HAL_DAC_ConfigChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80012c2:	f000 fb83 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000d8 	.word	0x200000d8
 80012d4:	40007400 	.word	0x40007400

080012d8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80012dc:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <MX_DFSDM1_Init+0xb8>)
 80012de:	4a2d      	ldr	r2, [pc, #180]	; (8001394 <MX_DFSDM1_Init+0xbc>)
 80012e0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80012e2:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <MX_DFSDM1_Init+0xb8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <MX_DFSDM1_Init+0xb8>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <MX_DFSDM1_Init+0xb8>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <MX_DFSDM1_Init+0xb8>)
 80012f6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80012fa:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 125;
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <MX_DFSDM1_Init+0xb8>)
 80012fe:	227d      	movs	r2, #125	; 0x7d
 8001300:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <MX_DFSDM1_Init+0xb8>)
 8001304:	2201      	movs	r2, #1
 8001306:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8001308:	4821      	ldr	r0, [pc, #132]	; (8001390 <MX_DFSDM1_Init+0xb8>)
 800130a:	f001 fd87 	bl	8002e1c <HAL_DFSDM_FilterInit>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8001314:	f000 fb5a 	bl	80019cc <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 800131a:	4a20      	ldr	r2, [pc, #128]	; (800139c <MX_DFSDM1_Init+0xc4>)
 800131c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 800131e:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 8001320:	2201      	movs	r2, #1
 8001322:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 31;
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 800132c:	221f      	movs	r2, #31
 800132e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 800134a:	2204      	movs	r2, #4
 800134c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 8001350:	2200      	movs	r2, #0
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 8001356:	2201      	movs	r2, #1
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 800135c:	2200      	movs	r2, #0
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x02;
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 8001362:	2202      	movs	r2, #2
 8001364:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <MX_DFSDM1_Init+0xc0>)
 8001368:	f001 fc98 	bl	8002c9c <HAL_DFSDM_ChannelInit>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8001372:	f000 fb2b 	bl	80019cc <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001376:	2201      	movs	r2, #1
 8001378:	2101      	movs	r1, #1
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_DFSDM1_Init+0xb8>)
 800137c:	f001 fe28 	bl	8002fd0 <HAL_DFSDM_FilterConfigRegChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8001386:	f000 fb21 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200000ec 	.word	0x200000ec
 8001394:	40016180 	.word	0x40016180
 8001398:	20000140 	.word	0x20000140
 800139c:	40016000 	.word	0x40016000

080013a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_SPI1_Init+0x74>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <MX_SPI1_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_SPI1_Init+0x74>)
 80013ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_SPI1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_SPI1_Init+0x74>)
 80013ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_SPI1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_SPI1_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_SPI1_Init+0x74>)
 80013ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_SPI1_Init+0x74>)
 80013d6:	2208      	movs	r2, #8
 80013d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_SPI1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_SPI1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_SPI1_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_SPI1_Init+0x74>)
 80013ee:	2207      	movs	r2, #7
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_SPI1_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_SPI1_Init+0x74>)
 80013fa:	2208      	movs	r2, #8
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_SPI1_Init+0x74>)
 8001400:	f003 fef8 	bl	80051f4 <HAL_SPI_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800140a:	f000 fadf 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200001c0 	.word	0x200001c0
 8001418:	40013000 	.word	0x40013000

0800141c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MX_SPI2_Init+0x74>)
 8001422:	4a1c      	ldr	r2, [pc, #112]	; (8001494 <MX_SPI2_Init+0x78>)
 8001424:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <MX_SPI2_Init+0x74>)
 8001428:	f44f 7282 	mov.w	r2, #260	; 0x104
 800142c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_SPI2_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MX_SPI2_Init+0x74>)
 8001436:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800143a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_SPI2_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_SPI2_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_SPI2_Init+0x74>)
 800144a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_SPI2_Init+0x74>)
 8001452:	2208      	movs	r2, #8
 8001454:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_SPI2_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_SPI2_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_SPI2_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_SPI2_Init+0x74>)
 800146a:	2207      	movs	r2, #7
 800146c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_SPI2_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_SPI2_Init+0x74>)
 8001476:	2208      	movs	r2, #8
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_SPI2_Init+0x74>)
 800147c:	f003 feba 	bl	80051f4 <HAL_SPI_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001486:	f000 faa1 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000224 	.word	0x20000224
 8001494:	40003800 	.word	0x40003800

08001498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80014ac:	2001      	movs	r0, #1
 80014ae:	f7ff fc69 	bl	8000d84 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014b2:	f7ff fb61 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fbd5 	bl	8000c6c <NVIC_EncodePriority>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4619      	mov	r1, r3
 80014c6:	201c      	movs	r0, #28
 80014c8:	f7ff fba6 	bl	8000c18 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80014cc:	201c      	movs	r0, #28
 80014ce:	f7ff fb61 	bl	8000b94 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 2000;
 80014da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80014de:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014ec:	f006 fc82 	bl	8007df4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80014f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014f4:	f7ff fbfd 	bl	8000cf2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80014f8:	2100      	movs	r1, #0
 80014fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014fe:	f7ff fc08 	bl	8000d12 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001502:	2100      	movs	r1, #0
 8001504:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001508:	f7ff fc18 	bl	8000d3c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800150c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001510:	f7ff fc27 	bl	8000d62 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <MX_TIM3_Init+0x98>)
 800153c:	4a1e      	ldr	r2, [pc, #120]	; (80015b8 <MX_TIM3_Init+0x9c>)
 800153e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_TIM3_Init+0x98>)
 8001542:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001546:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_TIM3_Init+0x98>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_TIM3_Init+0x98>)
 8001550:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001554:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_TIM3_Init+0x98>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_TIM3_Init+0x98>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001562:	4814      	ldr	r0, [pc, #80]	; (80015b4 <MX_TIM3_Init+0x98>)
 8001564:	f004 fbe4 	bl	8005d30 <HAL_TIM_Base_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800156e:	f000 fa2d 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	4619      	mov	r1, r3
 800157e:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_TIM3_Init+0x98>)
 8001580:	f004 fd5e 	bl	8006040 <HAL_TIM_ConfigClockSource>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800158a:	f000 fa1f 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_TIM3_Init+0x98>)
 800159c:	f004 ff80 	bl	80064a0 <HAL_TIMEx_MasterConfigSynchronization>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80015a6:	f000 fa11 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000288 	.word	0x20000288
 80015b8:	40000400 	.word	0x40000400

080015bc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_UART4_Init+0x58>)
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_UART4_Init+0x5c>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_UART4_Init+0x58>)
 80015c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_UART4_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_UART4_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_UART4_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_UART4_Init+0x58>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_UART4_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_UART4_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_UART4_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_UART4_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_UART4_Init+0x58>)
 8001600:	f004 fff4 	bl	80065ec <HAL_UART_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800160a:	f000 f9df 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200002d4 	.word	0x200002d4
 8001618:	40004c00 	.word	0x40004c00

0800161c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <MX_USART1_UART_Init+0x5c>)
 8001624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_USART1_UART_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_USART1_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_USART1_UART_Init+0x58>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001660:	f004 ffc4 	bl	80065ec <HAL_UART_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800166a:	f000 f9af 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000035c 	.word	0x2000035c
 8001678:	40013800 	.word	0x40013800

0800167c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 8001682:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <MX_USART2_UART_Init+0x5c>)
 8001684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_USART2_UART_Init+0x58>)
 80016c0:	f004 ff94 	bl	80065ec <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016ca:	f000 f97f 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200003e4 	.word	0x200003e4
 80016d8:	40004400 	.word	0x40004400

080016dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <MX_USART3_UART_Init+0x58>)
 80016e2:	4a15      	ldr	r2, [pc, #84]	; (8001738 <MX_USART3_UART_Init+0x5c>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <MX_USART3_UART_Init+0x58>)
 80016e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_USART3_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_USART3_UART_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_USART3_UART_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_USART3_UART_Init+0x58>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <MX_USART3_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_USART3_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <MX_USART3_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_USART3_UART_Init+0x58>)
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_USART3_UART_Init+0x58>)
 8001720:	f004 ff64 	bl	80065ec <HAL_UART_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800172a:	f000 f94f 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000046c 	.word	0x2000046c
 8001738:	40004800 	.word	0x40004800

0800173c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_DMA_Init+0x38>)
 8001744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <MX_DMA_Init+0x38>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6493      	str	r3, [r2, #72]	; 0x48
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_DMA_Init+0x38>)
 8001750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	200f      	movs	r0, #15
 8001760:	f001 f83d 	bl	80027de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001764:	200f      	movs	r0, #15
 8001766:	f001 f856 	bl	8002816 <HAL_NVIC_EnableIRQ>

}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000

08001778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <MX_GPIO_Init+0x100>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	4a39      	ldr	r2, [pc, #228]	; (8001878 <MX_GPIO_Init+0x100>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179a:	4b37      	ldr	r3, [pc, #220]	; (8001878 <MX_GPIO_Init+0x100>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a6:	4b34      	ldr	r3, [pc, #208]	; (8001878 <MX_GPIO_Init+0x100>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	4a33      	ldr	r2, [pc, #204]	; (8001878 <MX_GPIO_Init+0x100>)
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b2:	4b31      	ldr	r3, [pc, #196]	; (8001878 <MX_GPIO_Init+0x100>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <MX_GPIO_Init+0x100>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	4a2d      	ldr	r2, [pc, #180]	; (8001878 <MX_GPIO_Init+0x100>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ca:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <MX_GPIO_Init+0x100>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	4b28      	ldr	r3, [pc, #160]	; (8001878 <MX_GPIO_Init+0x100>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	4a27      	ldr	r2, [pc, #156]	; (8001878 <MX_GPIO_Init+0x100>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <MX_GPIO_Init+0x100>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, doorStatus_Pin|lightStatus_Pin|NANOcsPIn_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2143      	movs	r1, #67	; 0x43
 80017f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f6:	f002 f9ad 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ChipSelectSD_GPIO_Port, ChipSelectSD_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001800:	481e      	ldr	r0, [pc, #120]	; (800187c <MX_GPIO_Init+0x104>)
 8001802:	f002 f9a7 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userControl_Pin */
  GPIO_InitStruct.Pin = userControl_Pin;
 8001806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800180c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(userControl_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4818      	ldr	r0, [pc, #96]	; (8001880 <MX_GPIO_Init+0x108>)
 800181e:	f001 ffef 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pins : doorStatus_Pin lightStatus_Pin NANOcsPIn_Pin */
  GPIO_InitStruct.Pin = doorStatus_Pin|lightStatus_Pin|NANOcsPIn_Pin;
 8001822:	2343      	movs	r3, #67	; 0x43
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183c:	f001 ffe0 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : ChipSelectSD_Pin */
  GPIO_InitStruct.Pin = ChipSelectSD_Pin;
 8001840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ChipSelectSD_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	4808      	ldr	r0, [pc, #32]	; (800187c <MX_GPIO_Init+0x104>)
 800185a:	f001 ffd1 	bl	8003800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2102      	movs	r1, #2
 8001862:	2028      	movs	r0, #40	; 0x28
 8001864:	f000 ffbb 	bl	80027de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001868:	2028      	movs	r0, #40	; 0x28
 800186a:	f000 ffd4 	bl	8002816 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800186e:	bf00      	nop
 8001870:	3728      	adds	r7, #40	; 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	48000400 	.word	0x48000400
 8001880:	48000800 	.word	0x48000800

08001884 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800188c:	1d39      	adds	r1, r7, #4
 800188e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001892:	2201      	movs	r2, #1
 8001894:	4803      	ldr	r0, [pc, #12]	; (80018a4 <__io_putchar+0x20>)
 8001896:	f004 fef7 	bl	8006688 <HAL_UART_Transmit>
  return ch;
 800189a:	687b      	ldr	r3, [r7, #4]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200003e4 	.word	0x200003e4

080018a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
	  song_length_total = song_length;
	  LL_TIM_EnableIT_UPDATE(TIM2);
	  LL_TIM_EnableCounter(TIM2);
*/

	if (recording_audio == 0){
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_GPIO_EXTI_Callback+0x78>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d126      	bne.n	8001908 <HAL_GPIO_EXTI_Callback+0x60>
	    if (f_open(&file, "recording1.wav", FA_WRITE | FA_CREATE_ALWAYS) != FR_OK) {
 80018ba:	220a      	movs	r2, #10
 80018bc:	4919      	ldr	r1, [pc, #100]	; (8001924 <HAL_GPIO_EXTI_Callback+0x7c>)
 80018be:	481a      	ldr	r0, [pc, #104]	; (8001928 <HAL_GPIO_EXTI_Callback+0x80>)
 80018c0:	f009 fa88 	bl	800add4 <f_open>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <HAL_GPIO_EXTI_Callback+0x28>
	        printf("Error opening file for writing.\n\r");
 80018ca:	4818      	ldr	r0, [pc, #96]	; (800192c <HAL_GPIO_EXTI_Callback+0x84>)
 80018cc:	f00a fa82 	bl	800bdd4 <iprintf>
	    }
	    if (f_write(&file, header_data, sizeof(header_data), &bytesWritten) != FR_OK) {
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_GPIO_EXTI_Callback+0x88>)
 80018d2:	222c      	movs	r2, #44	; 0x2c
 80018d4:	4917      	ldr	r1, [pc, #92]	; (8001934 <HAL_GPIO_EXTI_Callback+0x8c>)
 80018d6:	4814      	ldr	r0, [pc, #80]	; (8001928 <HAL_GPIO_EXTI_Callback+0x80>)
 80018d8:	f009 fda7 	bl	800b42a <f_write>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <HAL_GPIO_EXTI_Callback+0x40>
	        printf("Error writing header to file.\n");
 80018e2:	4815      	ldr	r0, [pc, #84]	; (8001938 <HAL_GPIO_EXTI_Callback+0x90>)
 80018e4:	f00a fadc 	bl	800bea0 <puts>
	    }
		if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1,dfsdm_buffer,DFSDM_BUFFER_SIZE * 2) != HAL_OK){
 80018e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018ec:	4913      	ldr	r1, [pc, #76]	; (800193c <HAL_GPIO_EXTI_Callback+0x94>)
 80018ee:	4814      	ldr	r0, [pc, #80]	; (8001940 <HAL_GPIO_EXTI_Callback+0x98>)
 80018f0:	f001 fbb4 	bl	800305c <HAL_DFSDM_FilterRegularStart_DMA>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HAL_GPIO_EXTI_Callback+0x58>
			printf("Failed to start DFSDM");
 80018fa:	4812      	ldr	r0, [pc, #72]	; (8001944 <HAL_GPIO_EXTI_Callback+0x9c>)
 80018fc:	f00a fa6a 	bl	800bdd4 <iprintf>
		}
		recording_audio = 1;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_GPIO_EXTI_Callback+0x78>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]
	} else {
		printf("Sent message\r\n");
		HAL_GPIO_WritePin(ARDUINO_CS_PORT, ARDUINO_CS_PIN, GPIO_PIN_SET);
	}
*/
}
 8001906:	e006      	b.n	8001916 <HAL_GPIO_EXTI_Callback+0x6e>
	} else if (recording_audio == 1){
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_GPIO_EXTI_Callback+0x78>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d102      	bne.n	8001916 <HAL_GPIO_EXTI_Callback+0x6e>
		finished_recording = 1;
 8001910:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200004f8 	.word	0x200004f8
 8001924:	0800cd2c 	.word	0x0800cd2c
 8001928:	20004c10 	.word	0x20004c10
 800192c:	0800cd3c 	.word	0x0800cd3c
 8001930:	20003bd0 	.word	0x20003bd0
 8001934:	20000000 	.word	0x20000000
 8001938:	0800cd60 	.word	0x0800cd60
 800193c:	20000cd0 	.word	0x20000cd0
 8001940:	200000ec 	.word	0x200000ec
 8001944:	0800cd80 	.word	0x0800cd80
 8001948:	200004fc 	.word	0x200004fc

0800194c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:


void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	mic_half_transfer = 1;
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20002c14 	.word	0x20002c14

0800196c <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	mic_transfer_complete = 1;
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20002c10 	.word	0x20002c10

0800198c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
	if (strncmp((char*)data, "ACK1\r\n", strlen("ACK1\r\n")) == 0) {
 8001998:	2206      	movs	r2, #6
 800199a:	4909      	ldr	r1, [pc, #36]	; (80019c0 <HAL_UARTEx_RxEventCallback+0x34>)
 800199c:	4809      	ldr	r0, [pc, #36]	; (80019c4 <HAL_UARTEx_RxEventCallback+0x38>)
 800199e:	f00a fa87 	bl	800beb0 <strncmp>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <HAL_UARTEx_RxEventCallback+0x22>
	        printf("alex wrote this\r\n");
 80019a8:	4807      	ldr	r0, [pc, #28]	; (80019c8 <HAL_UARTEx_RxEventCallback+0x3c>)
 80019aa:	f00a fa79 	bl	800bea0 <puts>
	}

	    HAL_UARTEx_ReceiveToIdle_IT(huart, data, 64);
 80019ae:	2240      	movs	r2, #64	; 0x40
 80019b0:	4904      	ldr	r1, [pc, #16]	; (80019c4 <HAL_UARTEx_RxEventCallback+0x38>)
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f006 f994 	bl	8007ce0 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	0800cd98 	.word	0x0800cd98
 80019c4:	20005c48 	.word	0x20005c48
 80019c8:	0800cda0 	.word	0x0800cda0

080019cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <Error_Handler+0x8>
	...

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_MspInit+0x44>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_MspInit+0x44>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_MspInit+0x44>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_MspInit+0x44>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_MspInit+0x44>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6593      	str	r3, [r2, #88]	; 0x58
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_MspInit+0x44>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a19      	ldr	r2, [pc, #100]	; (8001aa4 <HAL_DAC_MspInit+0x84>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12c      	bne.n	8001a9c <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_DAC_MspInit+0x88>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	4a18      	ldr	r2, [pc, #96]	; (8001aa8 <HAL_DAC_MspInit+0x88>)
 8001a48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_DAC_MspInit+0x88>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_DAC_MspInit+0x88>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <HAL_DAC_MspInit+0x88>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_DAC_MspInit+0x88>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a72:	2310      	movs	r3, #16
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a76:	2303      	movs	r3, #3
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a88:	f001 feba 	bl	8003800 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2036      	movs	r0, #54	; 0x36
 8001a92:	f000 fea4 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a96:	2036      	movs	r0, #54	; 0x36
 8001a98:	f000 febd 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	3728      	adds	r7, #40	; 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40007400 	.word	0x40007400
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0ac      	sub	sp, #176	; 0xb0
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2288      	movs	r2, #136	; 0x88
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f00a fa01 	bl	800bed4 <memset>
  if(DFSDM1_Init == 0)
 8001ad2:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d16b      	bne.n	8001bb2 <HAL_DFSDM_FilterMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ade:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fec6 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001af6:	f7ff ff69 	bl	80019cc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001afa:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <HAL_DFSDM_FilterMspInit+0x180>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	4a4a      	ldr	r2, [pc, #296]	; (8001c2c <HAL_DFSDM_FilterMspInit+0x180>)
 8001b02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001b04:	4b49      	ldr	r3, [pc, #292]	; (8001c2c <HAL_DFSDM_FilterMspInit+0x180>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d10b      	bne.n	8001b24 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b0c:	4b48      	ldr	r3, [pc, #288]	; (8001c30 <HAL_DFSDM_FilterMspInit+0x184>)
 8001b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b10:	4a47      	ldr	r2, [pc, #284]	; (8001c30 <HAL_DFSDM_FilterMspInit+0x184>)
 8001b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b16:	6613      	str	r3, [r2, #96]	; 0x60
 8001b18:	4b45      	ldr	r3, [pc, #276]	; (8001c30 <HAL_DFSDM_FilterMspInit+0x184>)
 8001b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b24:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <HAL_DFSDM_FilterMspInit+0x184>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	4a41      	ldr	r2, [pc, #260]	; (8001c30 <HAL_DFSDM_FilterMspInit+0x184>)
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b30:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <HAL_DFSDM_FilterMspInit+0x184>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <HAL_DFSDM_FilterMspInit+0x184>)
 8001b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b40:	4a3b      	ldr	r2, [pc, #236]	; (8001c30 <HAL_DFSDM_FilterMspInit+0x184>)
 8001b42:	f043 0302 	orr.w	r3, r3, #2
 8001b46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_DFSDM_FilterMspInit+0x184>)
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b54:	2304      	movs	r3, #4
 8001b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b6c:	2306      	movs	r3, #6
 8001b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b76:	4619      	mov	r1, r3
 8001b78:	482e      	ldr	r0, [pc, #184]	; (8001c34 <HAL_DFSDM_FilterMspInit+0x188>)
 8001b7a:	f001 fe41 	bl	8003800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b96:	2306      	movs	r3, #6
 8001b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4825      	ldr	r0, [pc, #148]	; (8001c38 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001ba4:	f001 fe2c 	bl	8003800 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001bb0:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <HAL_DFSDM_FilterMspInit+0x190>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d131      	bne.n	8001c20 <HAL_DFSDM_FilterMspInit+0x174>
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8001bbc:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001bbe:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <HAL_DFSDM_FilterMspInit+0x198>)
 8001bc0:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be0:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001be8:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001bec:	2220      	movs	r2, #32
 8001bee:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8001bf8:	4811      	ldr	r0, [pc, #68]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001bfa:	f001 fb8b 	bl	8003314 <HAL_DMA_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_DFSDM_FilterMspInit+0x15c>
    {
      Error_Handler();
 8001c04:	f7ff fee2 	bl	80019cc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_DFSDM_FilterMspInit+0x194>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001c20:	bf00      	nop
 8001c22:	37b0      	adds	r7, #176	; 0xb0
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20005c8c 	.word	0x20005c8c
 8001c2c:	20005c88 	.word	0x20005c88
 8001c30:	40021000 	.word	0x40021000
 8001c34:	48000800 	.word	0x48000800
 8001c38:	48000400 	.word	0x48000400
 8001c3c:	40016180 	.word	0x40016180
 8001c40:	20000178 	.word	0x20000178
 8001c44:	40020058 	.word	0x40020058

08001c48 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b0ac      	sub	sp, #176	; 0xb0
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2288      	movs	r2, #136	; 0x88
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00a f933 	bl	800bed4 <memset>
  if(DFSDM1_Init == 0)
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d16b      	bne.n	8001d4e <HAL_DFSDM_ChannelMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4618      	mov	r0, r3
 8001c88:	f002 fdf8 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001c92:	f7ff fe9b 	bl	80019cc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001c96:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <HAL_DFSDM_ChannelMspInit+0x114>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4a2f      	ldr	r2, [pc, #188]	; (8001d5c <HAL_DFSDM_ChannelMspInit+0x114>)
 8001c9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001ca0:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <HAL_DFSDM_ChannelMspInit+0x114>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cac:	4a2c      	ldr	r2, [pc, #176]	; (8001d60 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	6613      	str	r3, [r2, #96]	; 0x60
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd8:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cdc:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d08:	2306      	movs	r3, #6
 8001d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d12:	4619      	mov	r1, r3
 8001d14:	4813      	ldr	r0, [pc, #76]	; (8001d64 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001d16:	f001 fd73 	bl	8003800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d32:	2306      	movs	r3, #6
 8001d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	480a      	ldr	r0, [pc, #40]	; (8001d68 <HAL_DFSDM_ChannelMspInit+0x120>)
 8001d40:	f001 fd5e 	bl	8003800 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001d4c:	6013      	str	r3, [r2, #0]
  }

}
 8001d4e:	bf00      	nop
 8001d50:	37b0      	adds	r7, #176	; 0xb0
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20005c8c 	.word	0x20005c8c
 8001d5c:	20005c88 	.word	0x20005c88
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48000800 	.word	0x48000800
 8001d68:	48000400 	.word	0x48000400

08001d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	; 0x30
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a2f      	ldr	r2, [pc, #188]	; (8001e48 <HAL_SPI_MspInit+0xdc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d129      	bne.n	8001de2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d8e:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <HAL_SPI_MspInit+0xe0>)
 8001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d92:	4a2e      	ldr	r2, [pc, #184]	; (8001e4c <HAL_SPI_MspInit+0xe0>)
 8001d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d98:	6613      	str	r3, [r2, #96]	; 0x60
 8001d9a:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <HAL_SPI_MspInit+0xe0>)
 8001d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_SPI_MspInit+0xe0>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_SPI_MspInit+0xe0>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_SPI_MspInit+0xe0>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001dbe:	23a0      	movs	r3, #160	; 0xa0
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ddc:	f001 fd10 	bl	8003800 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001de0:	e02d      	b.n	8001e3e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <HAL_SPI_MspInit+0xe4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d128      	bne.n	8001e3e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_SPI_MspInit+0xe0>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <HAL_SPI_MspInit+0xe0>)
 8001df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df6:	6593      	str	r3, [r2, #88]	; 0x58
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_SPI_MspInit+0xe0>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_SPI_MspInit+0xe0>)
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_SPI_MspInit+0xe0>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_SPI_MspInit+0xe0>)
 8001e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e1c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e2e:	2305      	movs	r3, #5
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	4806      	ldr	r0, [pc, #24]	; (8001e54 <HAL_SPI_MspInit+0xe8>)
 8001e3a:	f001 fce1 	bl	8003800 <HAL_GPIO_Init>
}
 8001e3e:	bf00      	nop
 8001e40:	3730      	adds	r7, #48	; 0x30
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40013000 	.word	0x40013000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40003800 	.word	0x40003800
 8001e54:	48000400 	.word	0x48000400

08001e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <HAL_TIM_Base_MspInit+0x44>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d113      	bne.n	8001e92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <HAL_TIM_Base_MspInit+0x48>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <HAL_TIM_Base_MspInit+0x48>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6593      	str	r3, [r2, #88]	; 0x58
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_TIM_Base_MspInit+0x48>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	201d      	movs	r0, #29
 8001e88:	f000 fca9 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e8c:	201d      	movs	r0, #29
 8001e8e:	f000 fcc2 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0b2      	sub	sp, #200	; 0xc8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec0:	2288      	movs	r2, #136	; 0x88
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f00a f805 	bl	800bed4 <memset>
  if(huart->Instance==UART4)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a90      	ldr	r2, [pc, #576]	; (8002110 <HAL_UART_MspInit+0x26c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d144      	bne.n	8001f5e <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ed4:	2308      	movs	r3, #8
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fccb 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001eec:	f7ff fd6e 	bl	80019cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ef0:	4b88      	ldr	r3, [pc, #544]	; (8002114 <HAL_UART_MspInit+0x270>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	4a87      	ldr	r2, [pc, #540]	; (8002114 <HAL_UART_MspInit+0x270>)
 8001ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001efa:	6593      	str	r3, [r2, #88]	; 0x58
 8001efc:	4b85      	ldr	r3, [pc, #532]	; (8002114 <HAL_UART_MspInit+0x270>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f06:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f08:	4b82      	ldr	r3, [pc, #520]	; (8002114 <HAL_UART_MspInit+0x270>)
 8001f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0c:	4a81      	ldr	r2, [pc, #516]	; (8002114 <HAL_UART_MspInit+0x270>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f14:	4b7f      	ldr	r3, [pc, #508]	; (8002114 <HAL_UART_MspInit+0x270>)
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4874      	ldr	r0, [pc, #464]	; (8002118 <HAL_UART_MspInit+0x274>)
 8001f48:	f001 fc5a 	bl	8003800 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2034      	movs	r0, #52	; 0x34
 8001f52:	f000 fc44 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f56:	2034      	movs	r0, #52	; 0x34
 8001f58:	f000 fc5d 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f5c:	e0d4      	b.n	8002108 <HAL_UART_MspInit+0x264>
  else if(huart->Instance==USART1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a6e      	ldr	r2, [pc, #440]	; (800211c <HAL_UART_MspInit+0x278>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d145      	bne.n	8001ff4 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f74:	4618      	mov	r0, r3
 8001f76:	f002 fc81 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001f80:	f7ff fd24 	bl	80019cc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f84:	4b63      	ldr	r3, [pc, #396]	; (8002114 <HAL_UART_MspInit+0x270>)
 8001f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f88:	4a62      	ldr	r2, [pc, #392]	; (8002114 <HAL_UART_MspInit+0x270>)
 8001f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8e:	6613      	str	r3, [r2, #96]	; 0x60
 8001f90:	4b60      	ldr	r3, [pc, #384]	; (8002114 <HAL_UART_MspInit+0x270>)
 8001f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f98:	623b      	str	r3, [r7, #32]
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9c:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <HAL_UART_MspInit+0x270>)
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa0:	4a5c      	ldr	r2, [pc, #368]	; (8002114 <HAL_UART_MspInit+0x270>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa8:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <HAL_UART_MspInit+0x270>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fb4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fce:	2307      	movs	r3, #7
 8001fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fde:	f001 fc0f 	bl	8003800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2025      	movs	r0, #37	; 0x25
 8001fe8:	f000 fbf9 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fec:	2025      	movs	r0, #37	; 0x25
 8001fee:	f000 fc12 	bl	8002816 <HAL_NVIC_EnableIRQ>
}
 8001ff2:	e089      	b.n	8002108 <HAL_UART_MspInit+0x264>
  else if(huart->Instance==USART2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a49      	ldr	r2, [pc, #292]	; (8002120 <HAL_UART_MspInit+0x27c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d13c      	bne.n	8002078 <HAL_UART_MspInit+0x1d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002002:	2300      	movs	r3, #0
 8002004:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800200a:	4618      	mov	r0, r3
 800200c:	f002 fc36 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_UART_MspInit+0x176>
      Error_Handler();
 8002016:	f7ff fcd9 	bl	80019cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800201a:	4b3e      	ldr	r3, [pc, #248]	; (8002114 <HAL_UART_MspInit+0x270>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	4a3d      	ldr	r2, [pc, #244]	; (8002114 <HAL_UART_MspInit+0x270>)
 8002020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002024:	6593      	str	r3, [r2, #88]	; 0x58
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_UART_MspInit+0x270>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	4b38      	ldr	r3, [pc, #224]	; (8002114 <HAL_UART_MspInit+0x270>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	4a37      	ldr	r2, [pc, #220]	; (8002114 <HAL_UART_MspInit+0x270>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203e:	4b35      	ldr	r3, [pc, #212]	; (8002114 <HAL_UART_MspInit+0x270>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800204a:	230c      	movs	r3, #12
 800204c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002062:	2307      	movs	r3, #7
 8002064:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800206c:	4619      	mov	r1, r3
 800206e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002072:	f001 fbc5 	bl	8003800 <HAL_GPIO_Init>
}
 8002076:	e047      	b.n	8002108 <HAL_UART_MspInit+0x264>
  else if(huart->Instance==USART3)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a29      	ldr	r2, [pc, #164]	; (8002124 <HAL_UART_MspInit+0x280>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d142      	bne.n	8002108 <HAL_UART_MspInit+0x264>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002082:	2304      	movs	r3, #4
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002086:	2300      	movs	r3, #0
 8002088:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800208a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208e:	4618      	mov	r0, r3
 8002090:	f002 fbf4 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 800209a:	f7ff fc97 	bl	80019cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_UART_MspInit+0x270>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <HAL_UART_MspInit+0x270>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a8:	6593      	str	r3, [r2, #88]	; 0x58
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_UART_MspInit+0x270>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <HAL_UART_MspInit+0x270>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	4a16      	ldr	r2, [pc, #88]	; (8002114 <HAL_UART_MspInit+0x270>)
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_UART_MspInit+0x270>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020ce:	2330      	movs	r3, #48	; 0x30
 80020d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020e6:	2307      	movs	r3, #7
 80020e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4809      	ldr	r0, [pc, #36]	; (8002118 <HAL_UART_MspInit+0x274>)
 80020f4:	f001 fb84 	bl	8003800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	2027      	movs	r0, #39	; 0x27
 80020fe:	f000 fb6e 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002102:	2027      	movs	r0, #39	; 0x27
 8002104:	f000 fb87 	bl	8002816 <HAL_NVIC_EnableIRQ>
}
 8002108:	bf00      	nop
 800210a:	37c8      	adds	r7, #200	; 0xc8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40004c00 	.word	0x40004c00
 8002114:	40021000 	.word	0x40021000
 8002118:	48000800 	.word	0x48000800
 800211c:	40013800 	.word	0x40013800
 8002120:	40004400 	.word	0x40004400
 8002124:	40004800 	.word	0x40004800

08002128 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f06f 0201 	mvn.w	r2, #1
 8002136:	611a      	str	r2, [r3, #16]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216e:	e7fe      	b.n	800216e <NMI_Handler+0x4>

08002170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <HardFault_Handler+0x4>

08002176 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <MemManage_Handler+0x4>

0800217c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <BusFault_Handler+0x4>

08002182 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <UsageFault_Handler+0x4>

08002188 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <SysTick_Handler+0x34>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <SysTick_Handler+0x18>
	  Timer1--;
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <SysTick_Handler+0x34>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <SysTick_Handler+0x34>)
 80021ca:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <SysTick_Handler+0x38>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <SysTick_Handler+0x2c>
	  Timer2--;
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <SysTick_Handler+0x38>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <SysTick_Handler+0x38>)
 80021de:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e0:	f000 f9de 	bl	80025a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20005cc8 	.word	0x20005cc8
 80021ec:	20005cca 	.word	0x20005cca

080021f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <DMA1_Channel5_IRQHandler+0x10>)
 80021f6:	f001 fa24 	bl	8003642 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000178 	.word	0x20000178

08002204 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if (LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 8002208:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800220c:	f7ff ff9a 	bl	8002144 <LL_TIM_IsActiveFlag_UPDATE>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d035      	beq.n	8002282 <TIM2_IRQHandler+0x7e>
		LL_TIM_ClearFlag_UPDATE(TIM2);
 8002216:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800221a:	f7ff ff85 	bl	8002128 <LL_TIM_ClearFlag_UPDATE>
		newSample.uShort = (uint16_t)32768 + playback_buffer[sample_position];
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <TIM2_IRQHandler+0x84>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1a      	ldr	r2, [pc, #104]	; (800228c <TIM2_IRQHandler+0x88>)
 8002224:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002228:	b29b      	uxth	r3, r3
 800222a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800222e:	b29a      	uxth	r2, r3
 8002230:	4b17      	ldr	r3, [pc, #92]	; (8002290 <TIM2_IRQHandler+0x8c>)
 8002232:	801a      	strh	r2, [r3, #0]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (newSample.uShort>>4));
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <TIM2_IRQHandler+0x8c>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	b29b      	uxth	r3, r3
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	4814      	ldr	r0, [pc, #80]	; (8002294 <TIM2_IRQHandler+0x90>)
 8002242:	f000 fbcb 	bl	80029dc <HAL_DAC_SetValue>

		sample_position++;
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <TIM2_IRQHandler+0x84>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <TIM2_IRQHandler+0x84>)
 800224e:	6013      	str	r3, [r2, #0]
		samples_played++;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <TIM2_IRQHandler+0x94>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a10      	ldr	r2, [pc, #64]	; (8002298 <TIM2_IRQHandler+0x94>)
 8002258:	6013      	str	r3, [r2, #0]

		if (sample_position == AUDIO_BUFFER_SIZE){
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <TIM2_IRQHandler+0x84>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002262:	d102      	bne.n	800226a <TIM2_IRQHandler+0x66>
			buffer_half = 1;
 8002264:	4b0d      	ldr	r3, [pc, #52]	; (800229c <TIM2_IRQHandler+0x98>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]
		}
		if (sample_position == AUDIO_BUFFER_SIZE * 2){
 800226a:	4b07      	ldr	r3, [pc, #28]	; (8002288 <TIM2_IRQHandler+0x84>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002272:	d106      	bne.n	8002282 <TIM2_IRQHandler+0x7e>
			buffer_complete = 1;
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <TIM2_IRQHandler+0x9c>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]
			sample_position = 0;
 800227a:	4b03      	ldr	r3, [pc, #12]	; (8002288 <TIM2_IRQHandler+0x84>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
		}

	}
	return;
 8002280:	bf00      	nop
 8002282:	bf00      	nop
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	2000003c 	.word	0x2000003c
 800228c:	20002c2c 	.word	0x20002c2c
 8002290:	20005c90 	.word	0x20005c90
 8002294:	200000d8 	.word	0x200000d8
 8002298:	2000002c 	.word	0x2000002c
 800229c:	20002c24 	.word	0x20002c24
 80022a0:	20002c28 	.word	0x20002c28

080022a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  if(!buttonReady){
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <TIM3_IRQHandler+0x2c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <TIM3_IRQHandler+0x12>
	buttonReady = 1;
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <TIM3_IRQHandler+0x2c>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022b6:	4807      	ldr	r0, [pc, #28]	; (80022d4 <TIM3_IRQHandler+0x30>)
 80022b8:	f003 fdc0 	bl	8005e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK) {
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <TIM3_IRQHandler+0x30>)
 80022be:	f003 fd8e 	bl	8005dde <HAL_TIM_Base_Stop_IT>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <TIM3_IRQHandler+0x28>
    Error_Handler();
 80022c8:	f7ff fb80 	bl	80019cc <Error_Handler>
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000038 	.word	0x20000038
 80022d4:	20000288 	.word	0x20000288

080022d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <USART1_IRQHandler+0x10>)
 80022de:	f004 fa5d 	bl	800679c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000035c 	.word	0x2000035c

080022ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <USART3_IRQHandler+0x10>)
 80022f2:	f004 fa53 	bl	800679c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */


  /* USER CODE END USART3_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000046c 	.word	0x2000046c

08002300 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userControl_Pin);
 8002304:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002308:	f001 fc3c 	bl	8003b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}

08002310 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <UART4_IRQHandler+0x10>)
 8002316:	f004 fa41 	bl	800679c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200002d4 	.word	0x200002d4

08002324 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <TIM6_DAC_IRQHandler+0x10>)
 800232a:	f000 fafd 	bl	8002928 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200000d8 	.word	0x200000d8

08002338 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	e00a      	b.n	8002360 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800234a:	f3af 8000 	nop.w
 800234e:	4601      	mov	r1, r0
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	60ba      	str	r2, [r7, #8]
 8002356:	b2ca      	uxtb	r2, r1
 8002358:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3301      	adds	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	dbf0      	blt.n	800234a <_read+0x12>
  }

  return len;
 8002368:	687b      	ldr	r3, [r7, #4]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	e009      	b.n	8002398 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	60ba      	str	r2, [r7, #8]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fa79 	bl	8001884 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	3301      	adds	r3, #1
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	dbf1      	blt.n	8002384 <_write+0x12>
  }
  return len;
 80023a0:	687b      	ldr	r3, [r7, #4]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <_close>:

int _close(int file)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023d2:	605a      	str	r2, [r3, #4]
  return 0;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <_isatty>:

int _isatty(int file)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023ea:	2301      	movs	r3, #1
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800241c:	4a14      	ldr	r2, [pc, #80]	; (8002470 <_sbrk+0x5c>)
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <_sbrk+0x60>)
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002428:	4b13      	ldr	r3, [pc, #76]	; (8002478 <_sbrk+0x64>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <_sbrk+0x64>)
 8002432:	4a12      	ldr	r2, [pc, #72]	; (800247c <_sbrk+0x68>)
 8002434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <_sbrk+0x64>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	429a      	cmp	r2, r3
 8002442:	d207      	bcs.n	8002454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002444:	f009 fd4e 	bl	800bee4 <__errno>
 8002448:	4603      	mov	r3, r0
 800244a:	220c      	movs	r2, #12
 800244c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002452:	e009      	b.n	8002468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <_sbrk+0x64>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <_sbrk+0x64>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <_sbrk+0x64>)
 8002464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20018000 	.word	0x20018000
 8002474:	00005000 	.word	0x00005000
 8002478:	20005c94 	.word	0x20005c94
 800247c:	20006050 	.word	0x20006050

08002480 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <SystemInit+0x20>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <SystemInit+0x20>)
 800248c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a8:	f7ff ffea 	bl	8002480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024ac:	480c      	ldr	r0, [pc, #48]	; (80024e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80024ae:	490d      	ldr	r1, [pc, #52]	; (80024e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024b0:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <LoopForever+0xe>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b4:	e002      	b.n	80024bc <LoopCopyDataInit>

080024b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ba:	3304      	adds	r3, #4

080024bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c0:	d3f9      	bcc.n	80024b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80024c4:	4c0a      	ldr	r4, [pc, #40]	; (80024f0 <LoopForever+0x16>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c8:	e001      	b.n	80024ce <LoopFillZerobss>

080024ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024cc:	3204      	adds	r2, #4

080024ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d0:	d3fb      	bcc.n	80024ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024d2:	f009 fd0d 	bl	800bef0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024d6:	f7fe fd1d 	bl	8000f14 <main>

080024da <LoopForever>:

LoopForever:
    b LoopForever
 80024da:	e7fe      	b.n	80024da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e4:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80024e8:	0800d2c8 	.word	0x0800d2c8
  ldr r2, =_sbss
 80024ec:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80024f0:	20006050 	.word	0x20006050

080024f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024f4:	e7fe      	b.n	80024f4 <ADC1_2_IRQHandler>

080024f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002500:	2003      	movs	r0, #3
 8002502:	f000 f961 	bl	80027c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002506:	2001      	movs	r0, #1
 8002508:	f000 f80e 	bl	8002528 <HAL_InitTick>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	71fb      	strb	r3, [r7, #7]
 8002516:	e001      	b.n	800251c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002518:	f7ff fa5e 	bl	80019d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800251c:	79fb      	ldrb	r3, [r7, #7]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <HAL_InitTick+0x6c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d023      	beq.n	8002584 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800253c:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_InitTick+0x70>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <HAL_InitTick+0x6c>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4619      	mov	r1, r3
 8002546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254a:	fbb3 f3f1 	udiv	r3, r3, r1
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f96d 	bl	8002832 <HAL_SYSTICK_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d809      	bhi.n	8002578 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002564:	2200      	movs	r2, #0
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800256c:	f000 f937 	bl	80027de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002570:	4a0a      	ldr	r2, [pc, #40]	; (800259c <HAL_InitTick+0x74>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e007      	b.n	8002588 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e004      	b.n	8002588 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
 8002582:	e001      	b.n	8002588 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000048 	.word	0x20000048
 8002598:	20000040 	.word	0x20000040
 800259c:	20000044 	.word	0x20000044

080025a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_IncTick+0x20>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_IncTick+0x24>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <HAL_IncTick+0x24>)
 80025b2:	6013      	str	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000048 	.word	0x20000048
 80025c4:	20005c98 	.word	0x20005c98

080025c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return uwTick;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_GetTick+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20005c98 	.word	0x20005c98

080025e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e8:	f7ff ffee 	bl	80025c8 <HAL_GetTick>
 80025ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025f8:	d005      	beq.n	8002606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_Delay+0x44>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4413      	add	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002606:	bf00      	nop
 8002608:	f7ff ffde 	bl	80025c8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	429a      	cmp	r2, r3
 8002616:	d8f7      	bhi.n	8002608 <HAL_Delay+0x28>
  {
  }
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000048 	.word	0x20000048

08002628 <__NVIC_SetPriorityGrouping>:
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <__NVIC_SetPriorityGrouping+0x44>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002644:	4013      	ands	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265a:	4a04      	ldr	r2, [pc, #16]	; (800266c <__NVIC_SetPriorityGrouping+0x44>)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	60d3      	str	r3, [r2, #12]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_GetPriorityGrouping>:
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <__NVIC_GetPriorityGrouping+0x18>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	0a1b      	lsrs	r3, r3, #8
 800267a:	f003 0307 	and.w	r3, r3, #7
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_EnableIRQ>:
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	2b00      	cmp	r3, #0
 800269c:	db0b      	blt.n	80026b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	4907      	ldr	r1, [pc, #28]	; (80026c4 <__NVIC_EnableIRQ+0x38>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2001      	movs	r0, #1
 80026ae:	fa00 f202 	lsl.w	r2, r0, r2
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000e100 	.word	0xe000e100

080026c8 <__NVIC_SetPriority>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	db0a      	blt.n	80026f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	490c      	ldr	r1, [pc, #48]	; (8002714 <__NVIC_SetPriority+0x4c>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	0112      	lsls	r2, r2, #4
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	440b      	add	r3, r1
 80026ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026f0:	e00a      	b.n	8002708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4908      	ldr	r1, [pc, #32]	; (8002718 <__NVIC_SetPriority+0x50>)
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	3b04      	subs	r3, #4
 8002700:	0112      	lsls	r2, r2, #4
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	440b      	add	r3, r1
 8002706:	761a      	strb	r2, [r3, #24]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000e100 	.word	0xe000e100
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <NVIC_EncodePriority>:
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	; 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f1c3 0307 	rsb	r3, r3, #7
 8002736:	2b04      	cmp	r3, #4
 8002738:	bf28      	it	cs
 800273a:	2304      	movcs	r3, #4
 800273c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3304      	adds	r3, #4
 8002742:	2b06      	cmp	r3, #6
 8002744:	d902      	bls.n	800274c <NVIC_EncodePriority+0x30>
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3b03      	subs	r3, #3
 800274a:	e000      	b.n	800274e <NVIC_EncodePriority+0x32>
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	401a      	ands	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002764:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	43d9      	mvns	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	4313      	orrs	r3, r2
}
 8002776:	4618      	mov	r0, r3
 8002778:	3724      	adds	r7, #36	; 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002794:	d301      	bcc.n	800279a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002796:	2301      	movs	r3, #1
 8002798:	e00f      	b.n	80027ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800279a:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <SysTick_Config+0x40>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027a2:	210f      	movs	r1, #15
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027a8:	f7ff ff8e 	bl	80026c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <SysTick_Config+0x40>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <SysTick_Config+0x40>)
 80027b4:	2207      	movs	r2, #7
 80027b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	e000e010 	.word	0xe000e010

080027c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ff29 	bl	8002628 <__NVIC_SetPriorityGrouping>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027f0:	f7ff ff3e 	bl	8002670 <__NVIC_GetPriorityGrouping>
 80027f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	6978      	ldr	r0, [r7, #20]
 80027fc:	f7ff ff8e 	bl	800271c <NVIC_EncodePriority>
 8002800:	4602      	mov	r2, r0
 8002802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002806:	4611      	mov	r1, r2
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff5d 	bl	80026c8 <__NVIC_SetPriority>
}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff31 	bl	800268c <__NVIC_EnableIRQ>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ffa2 	bl	8002784 <SysTick_Config>
 8002840:	4603      	mov	r3, r0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e014      	b.n	8002886 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	791b      	ldrb	r3, [r3, #4]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d105      	bne.n	8002872 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff f8d7 	bl	8001a20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	795b      	ldrb	r3, [r3, #5]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_DAC_Start+0x16>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e03b      	b.n	800291c <HAL_DAC_Start+0x8e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6819      	ldr	r1, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2201      	movs	r2, #1
 80028be:	409a      	lsls	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10f      	bne.n	80028ee <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d118      	bne.n	800290e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	e00f      	b.n	800290e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028fc:	d107      	bne.n	800290e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0202 	orr.w	r2, r2, #2
 800290c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800293a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800293e:	d120      	bne.n	8002982 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800294a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800294e:	d118      	bne.n	8002982 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2204      	movs	r2, #4
 8002954:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800296a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800297a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f852 	bl	8002a26 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800298c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002990:	d120      	bne.n	80029d4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800299c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a0:	d118      	bne.n	80029d4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2204      	movs	r2, #4
 80029a6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f043 0202 	orr.w	r2, r3, #2
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80029cc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f95a 	bl	8002c88 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	3308      	adds	r3, #8
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	e004      	b.n	8002a10 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	461a      	mov	r2, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b088      	sub	sp, #32
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	795b      	ldrb	r3, [r3, #5]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_DAC_ConfigChannel+0x1c>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e114      	b.n	8002c80 <HAL_DAC_ConfigChannel+0x246>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	f040 8081 	bne.w	8002b6e <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002a6c:	f7ff fdac 	bl	80025c8 <HAL_GetTick>
 8002a70:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d140      	bne.n	8002afa <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a78:	e018      	b.n	8002aac <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a7a:	f7ff fda5 	bl	80025c8 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d911      	bls.n	8002aac <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f043 0208 	orr.w	r2, r3, #8
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e0e9      	b.n	8002c80 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1df      	bne.n	8002a7a <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f7ff fd90 	bl	80025e0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	6992      	ldr	r2, [r2, #24]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
 8002aca:	e023      	b.n	8002b14 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002acc:	f7ff fd7c 	bl	80025c8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d90f      	bls.n	8002afa <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	da0a      	bge.n	8002afa <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f043 0208 	orr.w	r2, r3, #8
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2203      	movs	r2, #3
 8002af4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e0c2      	b.n	8002c80 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	dbe3      	blt.n	8002acc <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002b04:	2001      	movs	r0, #1
 8002b06:	f7ff fd6b 	bl	80025e0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	6992      	ldr	r2, [r2, #24]
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	ea02 0103 	and.w	r1, r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	69da      	ldr	r2, [r3, #28]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	21ff      	movs	r1, #255	; 0xff
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	ea02 0103 	and.w	r1, r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	6a1a      	ldr	r2, [r3, #32]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	409a      	lsls	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d11d      	bne.n	8002bb2 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	221f      	movs	r2, #31
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6819      	ldr	r1, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	400a      	ands	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	22c0      	movs	r2, #192	; 0xc0
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43da      	mvns	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	400a      	ands	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e0ac      	b.n	8002e08 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fa8c 	bl	80031d0 <DFSDM_GetChannelFromInstance>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4a55      	ldr	r2, [pc, #340]	; (8002e10 <HAL_DFSDM_ChannelInit+0x174>)
 8002cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e09f      	b.n	8002e08 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7fe ffbd 	bl	8001c48 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002cce:	4b51      	ldr	r3, [pc, #324]	; (8002e14 <HAL_DFSDM_ChannelInit+0x178>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	4a4f      	ldr	r2, [pc, #316]	; (8002e14 <HAL_DFSDM_ChannelInit+0x178>)
 8002cd6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002cd8:	4b4e      	ldr	r3, [pc, #312]	; (8002e14 <HAL_DFSDM_ChannelInit+0x178>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d125      	bne.n	8002d2c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002ce0:	4b4d      	ldr	r3, [pc, #308]	; (8002e18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a4c      	ldr	r2, [pc, #304]	; (8002e18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ce6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cea:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002cec:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4948      	ldr	r1, [pc, #288]	; (8002e18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a46      	ldr	r2, [pc, #280]	; (8002e18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d00:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002d04:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	791b      	ldrb	r3, [r3, #4]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d108      	bne.n	8002d20 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002d0e:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	493f      	ldr	r1, [pc, #252]	; (8002e18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002d20:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a3c      	ldr	r2, [pc, #240]	; (8002e18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d2a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002d3a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6819      	ldr	r1, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d4a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002d50:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 020f 	bic.w	r2, r2, #15
 8002d68:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6819      	ldr	r1, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002d90:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6899      	ldr	r1, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	3b01      	subs	r3, #1
 8002da2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f002 0207 	and.w	r2, r2, #7
 8002dbc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002de8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f9ea 	bl	80031d0 <DFSDM_GetChannelFromInstance>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4904      	ldr	r1, [pc, #16]	; (8002e10 <HAL_DFSDM_ChannelInit+0x174>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20005ca0 	.word	0x20005ca0
 8002e14:	20005c9c 	.word	0x20005c9c
 8002e18:	40016000 	.word	0x40016000

08002e1c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0ca      	b.n	8002fc4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a66      	ldr	r2, [pc, #408]	; (8002fcc <HAL_DFSDM_FilterInit+0x1b0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d109      	bne.n	8002e4c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d003      	beq.n	8002e48 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0bb      	b.n	8002fc4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7fe fe21 	bl	8001aac <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002e78:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	7a1b      	ldrb	r3, [r3, #8]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d108      	bne.n	8002e94 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	e007      	b.n	8002ea4 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002ea2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7a5b      	ldrb	r3, [r3, #9]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d108      	bne.n	8002ebe <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e007      	b.n	8002ece <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8002edc:	f023 0308 	bic.w	r3, r3, #8
 8002ee0:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d108      	bne.n	8002efc <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7c1b      	ldrb	r3, [r3, #16]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d108      	bne.n	8002f16 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0210 	orr.w	r2, r2, #16
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e007      	b.n	8002f26 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0210 	bic.w	r2, r2, #16
 8002f24:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7c5b      	ldrb	r3, [r3, #17]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d108      	bne.n	8002f40 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0220 	orr.w	r2, r2, #32
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e007      	b.n	8002f50 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0220 	bic.w	r2, r2, #32
 8002f4e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002f5e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002f62:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6959      	ldr	r1, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002f76:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002f7e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699a      	ldr	r2, [r3, #24]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	7c1a      	ldrb	r2, [r3, #16]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40016100 	.word	0x40016100

08002fd0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d02e      	beq.n	8003048 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002ff0:	2bff      	cmp	r3, #255	; 0xff
 8002ff2:	d029      	beq.n	8003048 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003006:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d10d      	bne.n	800302a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800301c:	431a      	orrs	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e00a      	b.n	8003040 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
 8003046:	e001      	b.n	800304c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800304c:	7dfb      	ldrb	r3, [r7, #23]
}
 800304e:	4618      	mov	r0, r3
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	75fb      	strb	r3, [r7, #23]
 800307c:	e064      	b.n	8003148 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003088:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800308c:	d002      	beq.n	8003094 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
 8003092:	e059      	b.n	8003148 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10e      	bne.n	80030ba <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10a      	bne.n	80030ba <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d002      	beq.n	80030ba <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	75fb      	strb	r3, [r7, #23]
 80030b8:	e046      	b.n	8003148 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d107      	bne.n	80030da <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d102      	bne.n	80030da <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	75fb      	strb	r3, [r7, #23]
 80030d8:	e036      	b.n	8003148 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d004      	beq.n	80030ee <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d12a      	bne.n	8003144 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	4a18      	ldr	r2, [pc, #96]	; (8003154 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	4a17      	ldr	r2, [pc, #92]	; (8003158 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80030fc:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003104:	2b20      	cmp	r3, #32
 8003106:	d101      	bne.n	800310c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003108:	4a14      	ldr	r2, [pc, #80]	; (800315c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800310a:	e000      	b.n	800310e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 800310c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	331c      	adds	r3, #28
 800311e:	4619      	mov	r1, r3
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f000 f9ae 	bl	8003484 <HAL_DMA_Start_IT>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	22ff      	movs	r2, #255	; 0xff
 8003132:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800313a:	e005      	b.n	8003148 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f893 	bl	8003268 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003142:	e001      	b.n	8003148 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003148:	7dfb      	ldrb	r3, [r7, #23]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	08003191 	.word	0x08003191
 8003158:	080031ad 	.word	0x080031ad
 800315c:	08003175 	.word	0x08003175

08003160 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7fe fbe2 	bl	800194c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7fe fbe4 	bl	800196c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2203      	movs	r2, #3
 80031be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f7ff ffcd 	bl	8003160 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a1c      	ldr	r2, [pc, #112]	; (800324c <DFSDM_GetChannelFromInstance+0x7c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d102      	bne.n	80031e6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	e02b      	b.n	800323e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a19      	ldr	r2, [pc, #100]	; (8003250 <DFSDM_GetChannelFromInstance+0x80>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d102      	bne.n	80031f4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	e024      	b.n	800323e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a17      	ldr	r2, [pc, #92]	; (8003254 <DFSDM_GetChannelFromInstance+0x84>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d102      	bne.n	8003202 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80031fc:	2302      	movs	r3, #2
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	e01d      	b.n	800323e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a14      	ldr	r2, [pc, #80]	; (8003258 <DFSDM_GetChannelFromInstance+0x88>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d102      	bne.n	8003210 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800320a:	2304      	movs	r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	e016      	b.n	800323e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <DFSDM_GetChannelFromInstance+0x8c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d102      	bne.n	800321e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003218:	2305      	movs	r3, #5
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e00f      	b.n	800323e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a0f      	ldr	r2, [pc, #60]	; (8003260 <DFSDM_GetChannelFromInstance+0x90>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d102      	bne.n	800322c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003226:	2306      	movs	r3, #6
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e008      	b.n	800323e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <DFSDM_GetChannelFromInstance+0x94>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d102      	bne.n	800323a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003234:	2307      	movs	r3, #7
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	e001      	b.n	800323e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800323a:	2303      	movs	r3, #3
 800323c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40016000 	.word	0x40016000
 8003250:	40016020 	.word	0x40016020
 8003254:	40016040 	.word	0x40016040
 8003258:	40016080 	.word	0x40016080
 800325c:	400160a0 	.word	0x400160a0
 8003260:	400160c0 	.word	0x400160c0
 8003264:	400160e0 	.word	0x400160e0

08003268 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	2b00      	cmp	r3, #0
 8003276:	d108      	bne.n	800328a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e033      	b.n	80032f2 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80032a8:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d116      	bne.n	80032f2 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0202 	orr.w	r2, r2, #2
 80032da:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d102      	bne.n	80032ec <DFSDM_RegConvStart+0x84>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	e000      	b.n	80032ee <DFSDM_RegConvStart+0x86>
 80032ec:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <DFSDM_RegConvStart+0x98>
 80032fc:	2202      	movs	r2, #2
 80032fe:	e000      	b.n	8003302 <DFSDM_RegConvStart+0x9a>
 8003300:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e098      	b.n	8003458 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	4b4d      	ldr	r3, [pc, #308]	; (8003464 <HAL_DMA_Init+0x150>)
 800332e:	429a      	cmp	r2, r3
 8003330:	d80f      	bhi.n	8003352 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <HAL_DMA_Init+0x154>)
 800333a:	4413      	add	r3, r2
 800333c:	4a4b      	ldr	r2, [pc, #300]	; (800346c <HAL_DMA_Init+0x158>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	009a      	lsls	r2, r3, #2
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a48      	ldr	r2, [pc, #288]	; (8003470 <HAL_DMA_Init+0x15c>)
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
 8003350:	e00e      	b.n	8003370 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	4b46      	ldr	r3, [pc, #280]	; (8003474 <HAL_DMA_Init+0x160>)
 800335a:	4413      	add	r3, r2
 800335c:	4a43      	ldr	r2, [pc, #268]	; (800346c <HAL_DMA_Init+0x158>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	009a      	lsls	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a42      	ldr	r2, [pc, #264]	; (8003478 <HAL_DMA_Init+0x164>)
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003394:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ca:	d039      	beq.n	8003440 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	4a27      	ldr	r2, [pc, #156]	; (8003470 <HAL_DMA_Init+0x15c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d11a      	bne.n	800340c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033d6:	4b29      	ldr	r3, [pc, #164]	; (800347c <HAL_DMA_Init+0x168>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	f003 031c 	and.w	r3, r3, #28
 80033e2:	210f      	movs	r1, #15
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	4924      	ldr	r1, [pc, #144]	; (800347c <HAL_DMA_Init+0x168>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033f0:	4b22      	ldr	r3, [pc, #136]	; (800347c <HAL_DMA_Init+0x168>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fc:	f003 031c 	and.w	r3, r3, #28
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	491d      	ldr	r1, [pc, #116]	; (800347c <HAL_DMA_Init+0x168>)
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]
 800340a:	e019      	b.n	8003440 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800340c:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <HAL_DMA_Init+0x16c>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	f003 031c 	and.w	r3, r3, #28
 8003418:	210f      	movs	r1, #15
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	4917      	ldr	r1, [pc, #92]	; (8003480 <HAL_DMA_Init+0x16c>)
 8003422:	4013      	ands	r3, r2
 8003424:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003426:	4b16      	ldr	r3, [pc, #88]	; (8003480 <HAL_DMA_Init+0x16c>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f003 031c 	and.w	r3, r3, #28
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	4911      	ldr	r1, [pc, #68]	; (8003480 <HAL_DMA_Init+0x16c>)
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40020407 	.word	0x40020407
 8003468:	bffdfff8 	.word	0xbffdfff8
 800346c:	cccccccd 	.word	0xcccccccd
 8003470:	40020000 	.word	0x40020000
 8003474:	bffdfbf8 	.word	0xbffdfbf8
 8003478:	40020400 	.word	0x40020400
 800347c:	400200a8 	.word	0x400200a8
 8003480:	400204a8 	.word	0x400204a8

08003484 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_DMA_Start_IT+0x20>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e04b      	b.n	800353c <HAL_DMA_Start_IT+0xb8>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d13a      	bne.n	800352e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f95f 	bl	80037a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 020e 	orr.w	r2, r2, #14
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e00f      	b.n	800351c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0204 	bic.w	r2, r2, #4
 800350a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 020a 	orr.w	r2, r2, #10
 800351a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e005      	b.n	800353a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003536:	2302      	movs	r3, #2
 8003538:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800353a:	7dfb      	ldrb	r3, [r7, #23]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d008      	beq.n	800356e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2204      	movs	r2, #4
 8003560:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e022      	b.n	80035b4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 020e 	bic.w	r2, r2, #14
 800357c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f003 021c 	and.w	r2, r3, #28
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2101      	movs	r1, #1
 800359c:	fa01 f202 	lsl.w	r2, r1, r2
 80035a0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d005      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2204      	movs	r2, #4
 80035dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
 80035e2:	e029      	b.n	8003638 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 020e 	bic.w	r2, r2, #14
 80035f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	f003 021c 	and.w	r2, r3, #28
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	2101      	movs	r1, #1
 8003612:	fa01 f202 	lsl.w	r2, r1, r2
 8003616:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
    }
  }
  return status;
 8003638:	7bfb      	ldrb	r3, [r7, #15]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f003 031c 	and.w	r3, r3, #28
 8003662:	2204      	movs	r2, #4
 8003664:	409a      	lsls	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d026      	beq.n	80036bc <HAL_DMA_IRQHandler+0x7a>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d021      	beq.n	80036bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d107      	bne.n	8003696 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0204 	bic.w	r2, r2, #4
 8003694:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f003 021c 	and.w	r2, r3, #28
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2104      	movs	r1, #4
 80036a4:	fa01 f202 	lsl.w	r2, r1, r2
 80036a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d071      	beq.n	8003796 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036ba:	e06c      	b.n	8003796 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	f003 031c 	and.w	r3, r3, #28
 80036c4:	2202      	movs	r2, #2
 80036c6:	409a      	lsls	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d02e      	beq.n	800372e <HAL_DMA_IRQHandler+0xec>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d029      	beq.n	800372e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10b      	bne.n	8003700 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 020a 	bic.w	r2, r2, #10
 80036f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	f003 021c 	and.w	r2, r3, #28
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	2102      	movs	r1, #2
 800370e:	fa01 f202 	lsl.w	r2, r1, r2
 8003712:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d038      	beq.n	8003796 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800372c:	e033      	b.n	8003796 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f003 031c 	and.w	r3, r3, #28
 8003736:	2208      	movs	r2, #8
 8003738:	409a      	lsls	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d02a      	beq.n	8003798 <HAL_DMA_IRQHandler+0x156>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d025      	beq.n	8003798 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 020e 	bic.w	r2, r2, #14
 800375a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	f003 021c 	and.w	r2, r3, #28
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	2101      	movs	r1, #1
 800376a:	fa01 f202 	lsl.w	r2, r1, r2
 800376e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378a:	2b00      	cmp	r3, #0
 800378c:	d004      	beq.n	8003798 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003796:	bf00      	nop
 8003798:	bf00      	nop
}
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f003 021c 	and.w	r2, r3, #28
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2101      	movs	r1, #1
 80037bc:	fa01 f202 	lsl.w	r2, r1, r2
 80037c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b10      	cmp	r3, #16
 80037d0:	d108      	bne.n	80037e4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037e2:	e007      	b.n	80037f4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	60da      	str	r2, [r3, #12]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800380e:	e17f      	b.n	8003b10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	2101      	movs	r1, #1
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	4013      	ands	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8171 	beq.w	8003b0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d005      	beq.n	8003840 <HAL_GPIO_Init+0x40>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d130      	bne.n	80038a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	2203      	movs	r2, #3
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003876:	2201      	movs	r2, #1
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	f003 0201 	and.w	r2, r3, #1
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d118      	bne.n	80038e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038b4:	2201      	movs	r2, #1
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4013      	ands	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	08db      	lsrs	r3, r3, #3
 80038ca:	f003 0201 	and.w	r2, r3, #1
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d017      	beq.n	800391c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d123      	bne.n	8003970 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3208      	adds	r2, #8
 8003930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	6939      	ldr	r1, [r7, #16]
 800396c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0203 	and.w	r2, r3, #3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80ac 	beq.w	8003b0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	4b5f      	ldr	r3, [pc, #380]	; (8003b30 <HAL_GPIO_Init+0x330>)
 80039b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b6:	4a5e      	ldr	r2, [pc, #376]	; (8003b30 <HAL_GPIO_Init+0x330>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	6613      	str	r3, [r2, #96]	; 0x60
 80039be:	4b5c      	ldr	r3, [pc, #368]	; (8003b30 <HAL_GPIO_Init+0x330>)
 80039c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039ca:	4a5a      	ldr	r2, [pc, #360]	; (8003b34 <HAL_GPIO_Init+0x334>)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	3302      	adds	r3, #2
 80039d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	220f      	movs	r2, #15
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039f4:	d025      	beq.n	8003a42 <HAL_GPIO_Init+0x242>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4f      	ldr	r2, [pc, #316]	; (8003b38 <HAL_GPIO_Init+0x338>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01f      	beq.n	8003a3e <HAL_GPIO_Init+0x23e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a4e      	ldr	r2, [pc, #312]	; (8003b3c <HAL_GPIO_Init+0x33c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d019      	beq.n	8003a3a <HAL_GPIO_Init+0x23a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4d      	ldr	r2, [pc, #308]	; (8003b40 <HAL_GPIO_Init+0x340>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <HAL_GPIO_Init+0x236>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4c      	ldr	r2, [pc, #304]	; (8003b44 <HAL_GPIO_Init+0x344>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00d      	beq.n	8003a32 <HAL_GPIO_Init+0x232>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a4b      	ldr	r2, [pc, #300]	; (8003b48 <HAL_GPIO_Init+0x348>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <HAL_GPIO_Init+0x22e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4a      	ldr	r2, [pc, #296]	; (8003b4c <HAL_GPIO_Init+0x34c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <HAL_GPIO_Init+0x22a>
 8003a26:	2306      	movs	r3, #6
 8003a28:	e00c      	b.n	8003a44 <HAL_GPIO_Init+0x244>
 8003a2a:	2307      	movs	r3, #7
 8003a2c:	e00a      	b.n	8003a44 <HAL_GPIO_Init+0x244>
 8003a2e:	2305      	movs	r3, #5
 8003a30:	e008      	b.n	8003a44 <HAL_GPIO_Init+0x244>
 8003a32:	2304      	movs	r3, #4
 8003a34:	e006      	b.n	8003a44 <HAL_GPIO_Init+0x244>
 8003a36:	2303      	movs	r3, #3
 8003a38:	e004      	b.n	8003a44 <HAL_GPIO_Init+0x244>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e002      	b.n	8003a44 <HAL_GPIO_Init+0x244>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_GPIO_Init+0x244>
 8003a42:	2300      	movs	r3, #0
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	f002 0203 	and.w	r2, r2, #3
 8003a4a:	0092      	lsls	r2, r2, #2
 8003a4c:	4093      	lsls	r3, r2
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a54:	4937      	ldr	r1, [pc, #220]	; (8003b34 <HAL_GPIO_Init+0x334>)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a62:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <HAL_GPIO_Init+0x350>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a86:	4a32      	ldr	r2, [pc, #200]	; (8003b50 <HAL_GPIO_Init+0x350>)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a8c:	4b30      	ldr	r3, [pc, #192]	; (8003b50 <HAL_GPIO_Init+0x350>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ab0:	4a27      	ldr	r2, [pc, #156]	; (8003b50 <HAL_GPIO_Init+0x350>)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ab6:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <HAL_GPIO_Init+0x350>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ada:	4a1d      	ldr	r2, [pc, #116]	; (8003b50 <HAL_GPIO_Init+0x350>)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_GPIO_Init+0x350>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b04:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <HAL_GPIO_Init+0x350>)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f47f ae78 	bne.w	8003810 <HAL_GPIO_Init+0x10>
  }
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40010000 	.word	0x40010000
 8003b38:	48000400 	.word	0x48000400
 8003b3c:	48000800 	.word	0x48000800
 8003b40:	48000c00 	.word	0x48000c00
 8003b44:	48001000 	.word	0x48001000
 8003b48:	48001400 	.word	0x48001400
 8003b4c:	48001800 	.word	0x48001800
 8003b50:	40010400 	.word	0x40010400

08003b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	807b      	strh	r3, [r7, #2]
 8003b60:	4613      	mov	r3, r2
 8003b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b64:	787b      	ldrb	r3, [r7, #1]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b6a:	887a      	ldrh	r2, [r7, #2]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b70:	e002      	b.n	8003b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d006      	beq.n	8003ba8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b9a:	4a05      	ldr	r2, [pc, #20]	; (8003bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd fe80 	bl	80018a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40010400 	.word	0x40010400

08003bb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bb8:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <HAL_PWREx_GetVoltageRange+0x18>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40007000 	.word	0x40007000

08003bd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bde:	d130      	bne.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003be0:	4b23      	ldr	r3, [pc, #140]	; (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bec:	d038      	beq.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bee:	4b20      	ldr	r3, [pc, #128]	; (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bf6:	4a1e      	ldr	r2, [pc, #120]	; (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2232      	movs	r2, #50	; 0x32
 8003c04:	fb02 f303 	mul.w	r3, r2, r3
 8003c08:	4a1b      	ldr	r2, [pc, #108]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0c9b      	lsrs	r3, r3, #18
 8003c10:	3301      	adds	r3, #1
 8003c12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c14:	e002      	b.n	8003c1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c28:	d102      	bne.n	8003c30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f2      	bne.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c30:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3c:	d110      	bne.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e00f      	b.n	8003c62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4e:	d007      	beq.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c58:	4a05      	ldr	r2, [pc, #20]	; (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40007000 	.word	0x40007000
 8003c74:	20000040 	.word	0x20000040
 8003c78:	431bde83 	.word	0x431bde83

08003c7c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e3ca      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c8e:	4b97      	ldr	r3, [pc, #604]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c98:	4b94      	ldr	r3, [pc, #592]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80e4 	beq.w	8003e78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x4a>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b0c      	cmp	r3, #12
 8003cba:	f040 808b 	bne.w	8003dd4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f040 8087 	bne.w	8003dd4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cc6:	4b89      	ldr	r3, [pc, #548]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_RCC_OscConfig+0x62>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e3a2      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	4b82      	ldr	r3, [pc, #520]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x7c>
 8003cee:	4b7f      	ldr	r3, [pc, #508]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf6:	e005      	b.n	8003d04 <HAL_RCC_OscConfig+0x88>
 8003cf8:	4b7c      	ldr	r3, [pc, #496]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d223      	bcs.n	8003d50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fd55 	bl	80047bc <RCC_SetFlashLatencyFromMSIRange>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e383      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d1c:	4b73      	ldr	r3, [pc, #460]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a72      	ldr	r2, [pc, #456]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d22:	f043 0308 	orr.w	r3, r3, #8
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b70      	ldr	r3, [pc, #448]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	496d      	ldr	r1, [pc, #436]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d3a:	4b6c      	ldr	r3, [pc, #432]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	4968      	ldr	r1, [pc, #416]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
 8003d4e:	e025      	b.n	8003d9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d50:	4b66      	ldr	r3, [pc, #408]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a65      	ldr	r2, [pc, #404]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d56:	f043 0308 	orr.w	r3, r3, #8
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4b63      	ldr	r3, [pc, #396]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4960      	ldr	r1, [pc, #384]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d6e:	4b5f      	ldr	r3, [pc, #380]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	495b      	ldr	r1, [pc, #364]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d109      	bne.n	8003d9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fd15 	bl	80047bc <RCC_SetFlashLatencyFromMSIRange>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e343      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d9c:	f000 fc4a 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b52      	ldr	r3, [pc, #328]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	4950      	ldr	r1, [pc, #320]	; (8003ef0 <HAL_RCC_OscConfig+0x274>)
 8003dae:	5ccb      	ldrb	r3, [r1, r3]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
 8003db8:	4a4e      	ldr	r2, [pc, #312]	; (8003ef4 <HAL_RCC_OscConfig+0x278>)
 8003dba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dbc:	4b4e      	ldr	r3, [pc, #312]	; (8003ef8 <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fbb1 	bl	8002528 <HAL_InitTick>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d052      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	e327      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d032      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ddc:	4b43      	ldr	r3, [pc, #268]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a42      	ldr	r2, [pc, #264]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003de8:	f7fe fbee 	bl	80025c8 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003df0:	f7fe fbea 	bl	80025c8 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e310      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e02:	4b3a      	ldr	r3, [pc, #232]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e0e:	4b37      	ldr	r3, [pc, #220]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a36      	ldr	r2, [pc, #216]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e14:	f043 0308 	orr.w	r3, r3, #8
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	4b34      	ldr	r3, [pc, #208]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	4931      	ldr	r1, [pc, #196]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e2c:	4b2f      	ldr	r3, [pc, #188]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	492c      	ldr	r1, [pc, #176]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	604b      	str	r3, [r1, #4]
 8003e40:	e01a      	b.n	8003e78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e42:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a29      	ldr	r2, [pc, #164]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e4e:	f7fe fbbb 	bl	80025c8 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e56:	f7fe fbb7 	bl	80025c8 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e2dd      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e68:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x1da>
 8003e74:	e000      	b.n	8003e78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d074      	beq.n	8003f6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d005      	beq.n	8003e96 <HAL_RCC_OscConfig+0x21a>
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	d10e      	bne.n	8003eae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d10b      	bne.n	8003eae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e96:	4b15      	ldr	r3, [pc, #84]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d064      	beq.n	8003f6c <HAL_RCC_OscConfig+0x2f0>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d160      	bne.n	8003f6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e2ba      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb6:	d106      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x24a>
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0b      	ldr	r2, [pc, #44]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	e026      	b.n	8003f14 <HAL_RCC_OscConfig+0x298>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ece:	d115      	bne.n	8003efc <HAL_RCC_OscConfig+0x280>
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a05      	ldr	r2, [pc, #20]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ed6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a02      	ldr	r2, [pc, #8]	; (8003eec <HAL_RCC_OscConfig+0x270>)
 8003ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	e014      	b.n	8003f14 <HAL_RCC_OscConfig+0x298>
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	0800cdfc 	.word	0x0800cdfc
 8003ef4:	20000040 	.word	0x20000040
 8003ef8:	20000044 	.word	0x20000044
 8003efc:	4ba0      	ldr	r3, [pc, #640]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a9f      	ldr	r2, [pc, #636]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b9d      	ldr	r3, [pc, #628]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a9c      	ldr	r2, [pc, #624]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d013      	beq.n	8003f44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fe fb54 	bl	80025c8 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f24:	f7fe fb50 	bl	80025c8 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	; 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e276      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f36:	4b92      	ldr	r3, [pc, #584]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x2a8>
 8003f42:	e014      	b.n	8003f6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fe fb40 	bl	80025c8 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fe fb3c 	bl	80025c8 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e262      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f5e:	4b88      	ldr	r3, [pc, #544]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x2d0>
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d060      	beq.n	800403c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_OscConfig+0x310>
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d119      	bne.n	8003fba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d116      	bne.n	8003fba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f8c:	4b7c      	ldr	r3, [pc, #496]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x328>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e23f      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b76      	ldr	r3, [pc, #472]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	4973      	ldr	r1, [pc, #460]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb8:	e040      	b.n	800403c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d023      	beq.n	800400a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc2:	4b6f      	ldr	r3, [pc, #444]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6e      	ldr	r2, [pc, #440]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fce:	f7fe fafb 	bl	80025c8 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd6:	f7fe faf7 	bl	80025c8 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e21d      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fe8:	4b65      	ldr	r3, [pc, #404]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff4:	4b62      	ldr	r3, [pc, #392]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	061b      	lsls	r3, r3, #24
 8004002:	495f      	ldr	r1, [pc, #380]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8004004:	4313      	orrs	r3, r2
 8004006:	604b      	str	r3, [r1, #4]
 8004008:	e018      	b.n	800403c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400a:	4b5d      	ldr	r3, [pc, #372]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a5c      	ldr	r2, [pc, #368]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8004010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fe fad7 	bl	80025c8 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800401e:	f7fe fad3 	bl	80025c8 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e1f9      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004030:	4b53      	ldr	r3, [pc, #332]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d03c      	beq.n	80040c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01c      	beq.n	800408a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004050:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004056:	4a4a      	ldr	r2, [pc, #296]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fe fab2 	bl	80025c8 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004068:	f7fe faae 	bl	80025c8 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e1d4      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800407a:	4b41      	ldr	r3, [pc, #260]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 800407c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ef      	beq.n	8004068 <HAL_RCC_OscConfig+0x3ec>
 8004088:	e01b      	b.n	80040c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800408a:	4b3d      	ldr	r3, [pc, #244]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 800408c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004090:	4a3b      	ldr	r2, [pc, #236]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409a:	f7fe fa95 	bl	80025c8 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a2:	f7fe fa91 	bl	80025c8 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e1b7      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b4:	4b32      	ldr	r3, [pc, #200]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 80040b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1ef      	bne.n	80040a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80a6 	beq.w	800421c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d0:	2300      	movs	r3, #0
 80040d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10d      	bne.n	80040fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e0:	4b27      	ldr	r3, [pc, #156]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	4a26      	ldr	r2, [pc, #152]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 80040e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ea:	6593      	str	r3, [r2, #88]	; 0x58
 80040ec:	4b24      	ldr	r3, [pc, #144]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f8:	2301      	movs	r3, #1
 80040fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040fc:	4b21      	ldr	r3, [pc, #132]	; (8004184 <HAL_RCC_OscConfig+0x508>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d118      	bne.n	800413a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004108:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <HAL_RCC_OscConfig+0x508>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1d      	ldr	r2, [pc, #116]	; (8004184 <HAL_RCC_OscConfig+0x508>)
 800410e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004112:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004114:	f7fe fa58 	bl	80025c8 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411c:	f7fe fa54 	bl	80025c8 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e17a      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <HAL_RCC_OscConfig+0x508>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d108      	bne.n	8004154 <HAL_RCC_OscConfig+0x4d8>
 8004142:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	4a0d      	ldr	r2, [pc, #52]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004152:	e029      	b.n	80041a8 <HAL_RCC_OscConfig+0x52c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b05      	cmp	r3, #5
 800415a:	d115      	bne.n	8004188 <HAL_RCC_OscConfig+0x50c>
 800415c:	4b08      	ldr	r3, [pc, #32]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	4a07      	ldr	r2, [pc, #28]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8004164:	f043 0304 	orr.w	r3, r3, #4
 8004168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800416c:	4b04      	ldr	r3, [pc, #16]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	4a03      	ldr	r2, [pc, #12]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800417c:	e014      	b.n	80041a8 <HAL_RCC_OscConfig+0x52c>
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	40007000 	.word	0x40007000
 8004188:	4b9c      	ldr	r3, [pc, #624]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	4a9b      	ldr	r2, [pc, #620]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004198:	4b98      	ldr	r3, [pc, #608]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419e:	4a97      	ldr	r2, [pc, #604]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 80041a0:	f023 0304 	bic.w	r3, r3, #4
 80041a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d016      	beq.n	80041de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b0:	f7fe fa0a 	bl	80025c8 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b8:	f7fe fa06 	bl	80025c8 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e12a      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ce:	4b8b      	ldr	r3, [pc, #556]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ed      	beq.n	80041b8 <HAL_RCC_OscConfig+0x53c>
 80041dc:	e015      	b.n	800420a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7fe f9f3 	bl	80025c8 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fe f9ef 	bl	80025c8 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e113      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041fc:	4b7f      	ldr	r3, [pc, #508]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1ed      	bne.n	80041e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800420a:	7ffb      	ldrb	r3, [r7, #31]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004210:	4b7a      	ldr	r3, [pc, #488]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	4a79      	ldr	r2, [pc, #484]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 8004216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80fe 	beq.w	8004422 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	2b02      	cmp	r3, #2
 800422c:	f040 80d0 	bne.w	80043d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004230:	4b72      	ldr	r3, [pc, #456]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f003 0203 	and.w	r2, r3, #3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	429a      	cmp	r2, r3
 8004242:	d130      	bne.n	80042a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	3b01      	subs	r3, #1
 8004250:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	429a      	cmp	r2, r3
 8004254:	d127      	bne.n	80042a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004260:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d11f      	bne.n	80042a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004270:	2a07      	cmp	r2, #7
 8004272:	bf14      	ite	ne
 8004274:	2201      	movne	r2, #1
 8004276:	2200      	moveq	r2, #0
 8004278:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800427a:	4293      	cmp	r3, r2
 800427c:	d113      	bne.n	80042a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004288:	085b      	lsrs	r3, r3, #1
 800428a:	3b01      	subs	r3, #1
 800428c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d109      	bne.n	80042a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	3b01      	subs	r3, #1
 80042a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d06e      	beq.n	8004384 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b0c      	cmp	r3, #12
 80042aa:	d069      	beq.n	8004380 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042ac:	4b53      	ldr	r3, [pc, #332]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042b8:	4b50      	ldr	r3, [pc, #320]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0ad      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042c8:	4b4c      	ldr	r3, [pc, #304]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a4b      	ldr	r2, [pc, #300]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 80042ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042d4:	f7fe f978 	bl	80025c8 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fe f974 	bl	80025c8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e09a      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ee:	4b43      	ldr	r3, [pc, #268]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042fa:	4b40      	ldr	r3, [pc, #256]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	4b40      	ldr	r3, [pc, #256]	; (8004400 <HAL_RCC_OscConfig+0x784>)
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800430a:	3a01      	subs	r2, #1
 800430c:	0112      	lsls	r2, r2, #4
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004314:	0212      	lsls	r2, r2, #8
 8004316:	4311      	orrs	r1, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800431c:	0852      	lsrs	r2, r2, #1
 800431e:	3a01      	subs	r2, #1
 8004320:	0552      	lsls	r2, r2, #21
 8004322:	4311      	orrs	r1, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004328:	0852      	lsrs	r2, r2, #1
 800432a:	3a01      	subs	r2, #1
 800432c:	0652      	lsls	r2, r2, #25
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004334:	0912      	lsrs	r2, r2, #4
 8004336:	0452      	lsls	r2, r2, #17
 8004338:	430a      	orrs	r2, r1
 800433a:	4930      	ldr	r1, [pc, #192]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 800433c:	4313      	orrs	r3, r2
 800433e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004340:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a2d      	ldr	r2, [pc, #180]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 8004346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800434a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800434c:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4a2a      	ldr	r2, [pc, #168]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 8004352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004356:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004358:	f7fe f936 	bl	80025c8 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004360:	f7fe f932 	bl	80025c8 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e058      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004372:	4b22      	ldr	r3, [pc, #136]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0f0      	beq.n	8004360 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800437e:	e050      	b.n	8004422 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e04f      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004384:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d148      	bne.n	8004422 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004390:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a19      	ldr	r2, [pc, #100]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 8004396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800439c:	4b17      	ldr	r3, [pc, #92]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a16      	ldr	r2, [pc, #88]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 80043a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043a8:	f7fe f90e 	bl	80025c8 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fe f90a 	bl	80025c8 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e030      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c2:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x734>
 80043ce:	e028      	b.n	8004422 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b0c      	cmp	r3, #12
 80043d4:	d023      	beq.n	800441e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a08      	ldr	r2, [pc, #32]	; (80043fc <HAL_RCC_OscConfig+0x780>)
 80043dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e2:	f7fe f8f1 	bl	80025c8 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e8:	e00c      	b.n	8004404 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ea:	f7fe f8ed 	bl	80025c8 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d905      	bls.n	8004404 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e013      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
 80043fc:	40021000 	.word	0x40021000
 8004400:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004404:	4b09      	ldr	r3, [pc, #36]	; (800442c <HAL_RCC_OscConfig+0x7b0>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1ec      	bne.n	80043ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_RCC_OscConfig+0x7b0>)
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	4905      	ldr	r1, [pc, #20]	; (800442c <HAL_RCC_OscConfig+0x7b0>)
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_RCC_OscConfig+0x7b4>)
 8004418:	4013      	ands	r3, r2
 800441a:	60cb      	str	r3, [r1, #12]
 800441c:	e001      	b.n	8004422 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000
 8004430:	feeefffc 	.word	0xfeeefffc

08004434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0e7      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b75      	ldr	r3, [pc, #468]	; (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d910      	bls.n	8004478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b72      	ldr	r3, [pc, #456]	; (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 0207 	bic.w	r2, r3, #7
 800445e:	4970      	ldr	r1, [pc, #448]	; (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b6e      	ldr	r3, [pc, #440]	; (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0cf      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d010      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	4b66      	ldr	r3, [pc, #408]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004490:	429a      	cmp	r2, r3
 8004492:	d908      	bls.n	80044a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004494:	4b63      	ldr	r3, [pc, #396]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4960      	ldr	r1, [pc, #384]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d04c      	beq.n	800454c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ba:	4b5a      	ldr	r3, [pc, #360]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d121      	bne.n	800450a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e0a6      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d2:	4b54      	ldr	r3, [pc, #336]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d115      	bne.n	800450a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e09a      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044ea:	4b4e      	ldr	r3, [pc, #312]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e08e      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044fa:	4b4a      	ldr	r3, [pc, #296]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e086      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800450a:	4b46      	ldr	r3, [pc, #280]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f023 0203 	bic.w	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4943      	ldr	r1, [pc, #268]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 8004518:	4313      	orrs	r3, r2
 800451a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800451c:	f7fe f854 	bl	80025c8 <HAL_GetTick>
 8004520:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	e00a      	b.n	800453a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004524:	f7fe f850 	bl	80025c8 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e06e      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	4b3a      	ldr	r3, [pc, #232]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 020c 	and.w	r2, r3, #12
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	429a      	cmp	r2, r3
 800454a:	d1eb      	bne.n	8004524 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d010      	beq.n	800457a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	4b31      	ldr	r3, [pc, #196]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004564:	429a      	cmp	r2, r3
 8004566:	d208      	bcs.n	800457a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004568:	4b2e      	ldr	r3, [pc, #184]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	492b      	ldr	r1, [pc, #172]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800457a:	4b29      	ldr	r3, [pc, #164]	; (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d210      	bcs.n	80045aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004588:	4b25      	ldr	r3, [pc, #148]	; (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f023 0207 	bic.w	r2, r3, #7
 8004590:	4923      	ldr	r1, [pc, #140]	; (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004598:	4b21      	ldr	r3, [pc, #132]	; (8004620 <HAL_RCC_ClockConfig+0x1ec>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d001      	beq.n	80045aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e036      	b.n	8004618 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b6:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	4918      	ldr	r1, [pc, #96]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d4:	4b13      	ldr	r3, [pc, #76]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4910      	ldr	r1, [pc, #64]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045e8:	f000 f824 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <HAL_RCC_ClockConfig+0x1f0>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	091b      	lsrs	r3, r3, #4
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	490b      	ldr	r1, [pc, #44]	; (8004628 <HAL_RCC_ClockConfig+0x1f4>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	4a09      	ldr	r2, [pc, #36]	; (800462c <HAL_RCC_ClockConfig+0x1f8>)
 8004606:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004608:	4b09      	ldr	r3, [pc, #36]	; (8004630 <HAL_RCC_ClockConfig+0x1fc>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fd ff8b 	bl	8002528 <HAL_InitTick>
 8004612:	4603      	mov	r3, r0
 8004614:	72fb      	strb	r3, [r7, #11]

  return status;
 8004616:	7afb      	ldrb	r3, [r7, #11]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40022000 	.word	0x40022000
 8004624:	40021000 	.word	0x40021000
 8004628:	0800cdfc 	.word	0x0800cdfc
 800462c:	20000040 	.word	0x20000040
 8004630:	20000044 	.word	0x20000044

08004634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	; 0x24
 8004638:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
 800463e:	2300      	movs	r3, #0
 8004640:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004642:	4b3e      	ldr	r3, [pc, #248]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800464c:	4b3b      	ldr	r3, [pc, #236]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x34>
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b0c      	cmp	r3, #12
 8004660:	d121      	bne.n	80046a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d11e      	bne.n	80046a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004668:	4b34      	ldr	r3, [pc, #208]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d107      	bne.n	8004684 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004674:	4b31      	ldr	r3, [pc, #196]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	e005      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004684:	4b2d      	ldr	r3, [pc, #180]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004690:	4a2b      	ldr	r2, [pc, #172]	; (8004740 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004698:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10d      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d102      	bne.n	80046b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ac:	4b25      	ldr	r3, [pc, #148]	; (8004744 <HAL_RCC_GetSysClockFreq+0x110>)
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	e004      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046b8:	4b23      	ldr	r3, [pc, #140]	; (8004748 <HAL_RCC_GetSysClockFreq+0x114>)
 80046ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b0c      	cmp	r3, #12
 80046c0:	d134      	bne.n	800472c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046c2:	4b1e      	ldr	r3, [pc, #120]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d003      	beq.n	80046da <HAL_RCC_GetSysClockFreq+0xa6>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d003      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0xac>
 80046d8:	e005      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046da:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <HAL_RCC_GetSysClockFreq+0x110>)
 80046dc:	617b      	str	r3, [r7, #20]
      break;
 80046de:	e005      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046e0:	4b19      	ldr	r3, [pc, #100]	; (8004748 <HAL_RCC_GetSysClockFreq+0x114>)
 80046e2:	617b      	str	r3, [r7, #20]
      break;
 80046e4:	e002      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	617b      	str	r3, [r7, #20]
      break;
 80046ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046ec:	4b13      	ldr	r3, [pc, #76]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	3301      	adds	r3, #1
 80046f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	fb03 f202 	mul.w	r2, r3, r2
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <HAL_RCC_GetSysClockFreq+0x108>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	0e5b      	lsrs	r3, r3, #25
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	3301      	adds	r3, #1
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800472c:	69bb      	ldr	r3, [r7, #24]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3724      	adds	r7, #36	; 0x24
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000
 8004740:	0800ce14 	.word	0x0800ce14
 8004744:	00f42400 	.word	0x00f42400
 8004748:	007a1200 	.word	0x007a1200

0800474c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004750:	4b03      	ldr	r3, [pc, #12]	; (8004760 <HAL_RCC_GetHCLKFreq+0x14>)
 8004752:	681b      	ldr	r3, [r3, #0]
}
 8004754:	4618      	mov	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	20000040 	.word	0x20000040

08004764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004768:	f7ff fff0 	bl	800474c <HAL_RCC_GetHCLKFreq>
 800476c:	4602      	mov	r2, r0
 800476e:	4b06      	ldr	r3, [pc, #24]	; (8004788 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	4904      	ldr	r1, [pc, #16]	; (800478c <HAL_RCC_GetPCLK1Freq+0x28>)
 800477a:	5ccb      	ldrb	r3, [r1, r3]
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40021000 	.word	0x40021000
 800478c:	0800ce0c 	.word	0x0800ce0c

08004790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004794:	f7ff ffda 	bl	800474c <HAL_RCC_GetHCLKFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	0adb      	lsrs	r3, r3, #11
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	4904      	ldr	r1, [pc, #16]	; (80047b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000
 80047b8:	0800ce0c 	.word	0x0800ce0c

080047bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047c8:	4b2a      	ldr	r3, [pc, #168]	; (8004874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047d4:	f7ff f9ee 	bl	8003bb4 <HAL_PWREx_GetVoltageRange>
 80047d8:	6178      	str	r0, [r7, #20]
 80047da:	e014      	b.n	8004806 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047dc:	4b25      	ldr	r3, [pc, #148]	; (8004874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	4a24      	ldr	r2, [pc, #144]	; (8004874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e6:	6593      	str	r3, [r2, #88]	; 0x58
 80047e8:	4b22      	ldr	r3, [pc, #136]	; (8004874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047f4:	f7ff f9de 	bl	8003bb4 <HAL_PWREx_GetVoltageRange>
 80047f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047fa:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004804:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800480c:	d10b      	bne.n	8004826 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b80      	cmp	r3, #128	; 0x80
 8004812:	d919      	bls.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2ba0      	cmp	r3, #160	; 0xa0
 8004818:	d902      	bls.n	8004820 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800481a:	2302      	movs	r3, #2
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	e013      	b.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004820:	2301      	movs	r3, #1
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	e010      	b.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b80      	cmp	r3, #128	; 0x80
 800482a:	d902      	bls.n	8004832 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800482c:	2303      	movs	r3, #3
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	e00a      	b.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b80      	cmp	r3, #128	; 0x80
 8004836:	d102      	bne.n	800483e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004838:	2302      	movs	r3, #2
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e004      	b.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b70      	cmp	r3, #112	; 0x70
 8004842:	d101      	bne.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004844:	2301      	movs	r3, #1
 8004846:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f023 0207 	bic.w	r2, r3, #7
 8004850:	4909      	ldr	r1, [pc, #36]	; (8004878 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004858:	4b07      	ldr	r3, [pc, #28]	; (8004878 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	429a      	cmp	r2, r3
 8004864:	d001      	beq.n	800486a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40021000 	.word	0x40021000
 8004878:	40022000 	.word	0x40022000

0800487c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004884:	2300      	movs	r3, #0
 8004886:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004888:	2300      	movs	r3, #0
 800488a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004894:	2b00      	cmp	r3, #0
 8004896:	d041      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800489c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048a0:	d02a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048a6:	d824      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048ac:	d008      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048b2:	d81e      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80048b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048bc:	d010      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048be:	e018      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048c0:	4b86      	ldr	r3, [pc, #536]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4a85      	ldr	r2, [pc, #532]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048cc:	e015      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3304      	adds	r3, #4
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fabb 	bl	8004e50 <RCCEx_PLLSAI1_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048de:	e00c      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3320      	adds	r3, #32
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fba6 	bl	8005038 <RCCEx_PLLSAI2_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048f0:	e003      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	74fb      	strb	r3, [r7, #19]
      break;
 80048f6:	e000      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80048f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048fa:	7cfb      	ldrb	r3, [r7, #19]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004900:	4b76      	ldr	r3, [pc, #472]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800490e:	4973      	ldr	r1, [pc, #460]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004916:	e001      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004918:	7cfb      	ldrb	r3, [r7, #19]
 800491a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d041      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800492c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004930:	d02a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004932:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004936:	d824      	bhi.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004938:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800493c:	d008      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800493e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004942:	d81e      	bhi.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800494c:	d010      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800494e:	e018      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004950:	4b62      	ldr	r3, [pc, #392]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a61      	ldr	r2, [pc, #388]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800495c:	e015      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3304      	adds	r3, #4
 8004962:	2100      	movs	r1, #0
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fa73 	bl	8004e50 <RCCEx_PLLSAI1_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800496e:	e00c      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3320      	adds	r3, #32
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fb5e 	bl	8005038 <RCCEx_PLLSAI2_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004980:	e003      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	74fb      	strb	r3, [r7, #19]
      break;
 8004986:	e000      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800498a:	7cfb      	ldrb	r3, [r7, #19]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10b      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004990:	4b52      	ldr	r3, [pc, #328]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004996:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800499e:	494f      	ldr	r1, [pc, #316]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049a6:	e001      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a8:	7cfb      	ldrb	r3, [r7, #19]
 80049aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80a0 	beq.w	8004afa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ba:	2300      	movs	r3, #0
 80049bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049be:	4b47      	ldr	r3, [pc, #284]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80049ce:	2300      	movs	r3, #0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00d      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d4:	4b41      	ldr	r3, [pc, #260]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d8:	4a40      	ldr	r2, [pc, #256]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049de:	6593      	str	r3, [r2, #88]	; 0x58
 80049e0:	4b3e      	ldr	r3, [pc, #248]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ec:	2301      	movs	r3, #1
 80049ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049f0:	4b3b      	ldr	r3, [pc, #236]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a3a      	ldr	r2, [pc, #232]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049fc:	f7fd fde4 	bl	80025c8 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a02:	e009      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a04:	f7fd fde0 	bl	80025c8 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d902      	bls.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	74fb      	strb	r3, [r7, #19]
        break;
 8004a16:	e005      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a18:	4b31      	ldr	r3, [pc, #196]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0ef      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d15c      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a2a:	4b2c      	ldr	r3, [pc, #176]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01f      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d019      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a48:	4b24      	ldr	r3, [pc, #144]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a54:	4b21      	ldr	r3, [pc, #132]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	4a20      	ldr	r2, [pc, #128]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a64:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	4a1c      	ldr	r2, [pc, #112]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a74:	4a19      	ldr	r2, [pc, #100]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d016      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a86:	f7fd fd9f 	bl	80025c8 <HAL_GetTick>
 8004a8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a8c:	e00b      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8e:	f7fd fd9b 	bl	80025c8 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d902      	bls.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	74fb      	strb	r3, [r7, #19]
            break;
 8004aa4:	e006      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0ec      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ab4:	7cfb      	ldrb	r3, [r7, #19]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aba:	4b08      	ldr	r3, [pc, #32]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aca:	4904      	ldr	r1, [pc, #16]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ad2:	e009      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ad4:	7cfb      	ldrb	r3, [r7, #19]
 8004ad6:	74bb      	strb	r3, [r7, #18]
 8004ad8:	e006      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004ada:	bf00      	nop
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae4:	7cfb      	ldrb	r3, [r7, #19]
 8004ae6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ae8:	7c7b      	ldrb	r3, [r7, #17]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d105      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aee:	4b9e      	ldr	r3, [pc, #632]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af2:	4a9d      	ldr	r2, [pc, #628]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b06:	4b98      	ldr	r3, [pc, #608]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0c:	f023 0203 	bic.w	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	4994      	ldr	r1, [pc, #592]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b28:	4b8f      	ldr	r3, [pc, #572]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	f023 020c 	bic.w	r2, r3, #12
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	498c      	ldr	r1, [pc, #560]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b4a:	4b87      	ldr	r3, [pc, #540]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	4983      	ldr	r1, [pc, #524]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b6c:	4b7e      	ldr	r3, [pc, #504]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	497b      	ldr	r1, [pc, #492]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b8e:	4b76      	ldr	r3, [pc, #472]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9c:	4972      	ldr	r1, [pc, #456]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bb0:	4b6d      	ldr	r3, [pc, #436]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbe:	496a      	ldr	r1, [pc, #424]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bd2:	4b65      	ldr	r3, [pc, #404]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be0:	4961      	ldr	r1, [pc, #388]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bf4:	4b5c      	ldr	r3, [pc, #368]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c02:	4959      	ldr	r1, [pc, #356]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c16:	4b54      	ldr	r3, [pc, #336]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c24:	4950      	ldr	r1, [pc, #320]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c38:	4b4b      	ldr	r3, [pc, #300]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	4948      	ldr	r1, [pc, #288]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c5a:	4b43      	ldr	r3, [pc, #268]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	493f      	ldr	r1, [pc, #252]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d028      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c7c:	4b3a      	ldr	r3, [pc, #232]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c8a:	4937      	ldr	r1, [pc, #220]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c9a:	d106      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c9c:	4b32      	ldr	r3, [pc, #200]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4a31      	ldr	r2, [pc, #196]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca6:	60d3      	str	r3, [r2, #12]
 8004ca8:	e011      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cb2:	d10c      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	2101      	movs	r1, #1
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f8c8 	bl	8004e50 <RCCEx_PLLSAI1_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cc4:	7cfb      	ldrb	r3, [r7, #19]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004cca:	7cfb      	ldrb	r3, [r7, #19]
 8004ccc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d028      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cda:	4b23      	ldr	r3, [pc, #140]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce8:	491f      	ldr	r1, [pc, #124]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf8:	d106      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	4a1a      	ldr	r2, [pc, #104]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d04:	60d3      	str	r3, [r2, #12]
 8004d06:	e011      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3304      	adds	r3, #4
 8004d16:	2101      	movs	r1, #1
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 f899 	bl	8004e50 <RCCEx_PLLSAI1_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d22:	7cfb      	ldrb	r3, [r7, #19]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004d28:	7cfb      	ldrb	r3, [r7, #19]
 8004d2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d02b      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d46:	4908      	ldr	r1, [pc, #32]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d56:	d109      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d58:	4b03      	ldr	r3, [pc, #12]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4a02      	ldr	r2, [pc, #8]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d62:	60d3      	str	r3, [r2, #12]
 8004d64:	e014      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d66:	bf00      	nop
 8004d68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 f867 	bl	8004e50 <RCCEx_PLLSAI1_Config>
 8004d82:	4603      	mov	r3, r0
 8004d84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d86:	7cfb      	ldrb	r3, [r7, #19]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d8c:	7cfb      	ldrb	r3, [r7, #19]
 8004d8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d02f      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d9c:	4b2b      	ldr	r3, [pc, #172]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004daa:	4928      	ldr	r1, [pc, #160]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dba:	d10d      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	2102      	movs	r1, #2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f844 	bl	8004e50 <RCCEx_PLLSAI1_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d014      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004dd2:	7cfb      	ldrb	r3, [r7, #19]
 8004dd4:	74bb      	strb	r3, [r7, #18]
 8004dd6:	e011      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de0:	d10c      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3320      	adds	r3, #32
 8004de6:	2102      	movs	r1, #2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 f925 	bl	8005038 <RCCEx_PLLSAI2_Config>
 8004dee:	4603      	mov	r3, r0
 8004df0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004df2:	7cfb      	ldrb	r3, [r7, #19]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e08:	4b10      	ldr	r3, [pc, #64]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e16:	490d      	ldr	r1, [pc, #52]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00b      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e2a:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e3a:	4904      	ldr	r1, [pc, #16]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e42:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40021000 	.word	0x40021000

08004e50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e5e:	4b75      	ldr	r3, [pc, #468]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d018      	beq.n	8004e9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e6a:	4b72      	ldr	r3, [pc, #456]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 0203 	and.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d10d      	bne.n	8004e96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
       ||
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e82:	4b6c      	ldr	r3, [pc, #432]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	091b      	lsrs	r3, r3, #4
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
       ||
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d047      	beq.n	8004f26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	73fb      	strb	r3, [r7, #15]
 8004e9a:	e044      	b.n	8004f26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d018      	beq.n	8004ed6 <RCCEx_PLLSAI1_Config+0x86>
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d825      	bhi.n	8004ef4 <RCCEx_PLLSAI1_Config+0xa4>
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d002      	beq.n	8004eb2 <RCCEx_PLLSAI1_Config+0x62>
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d009      	beq.n	8004ec4 <RCCEx_PLLSAI1_Config+0x74>
 8004eb0:	e020      	b.n	8004ef4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eb2:	4b60      	ldr	r3, [pc, #384]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d11d      	bne.n	8004efa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ec2:	e01a      	b.n	8004efa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ec4:	4b5b      	ldr	r3, [pc, #364]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d116      	bne.n	8004efe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed4:	e013      	b.n	8004efe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ed6:	4b57      	ldr	r3, [pc, #348]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10f      	bne.n	8004f02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ee2:	4b54      	ldr	r3, [pc, #336]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d109      	bne.n	8004f02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ef2:	e006      	b.n	8004f02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef8:	e004      	b.n	8004f04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004efa:	bf00      	nop
 8004efc:	e002      	b.n	8004f04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f02:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10d      	bne.n	8004f26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f0a:	4b4a      	ldr	r3, [pc, #296]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6819      	ldr	r1, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	4944      	ldr	r1, [pc, #272]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d17d      	bne.n	8005028 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f2c:	4b41      	ldr	r3, [pc, #260]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a40      	ldr	r2, [pc, #256]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f38:	f7fd fb46 	bl	80025c8 <HAL_GetTick>
 8004f3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f3e:	e009      	b.n	8004f54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f40:	f7fd fb42 	bl	80025c8 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d902      	bls.n	8004f54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	73fb      	strb	r3, [r7, #15]
        break;
 8004f52:	e005      	b.n	8004f60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f54:	4b37      	ldr	r3, [pc, #220]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1ef      	bne.n	8004f40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d160      	bne.n	8005028 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d111      	bne.n	8004f90 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f6c:	4b31      	ldr	r3, [pc, #196]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6892      	ldr	r2, [r2, #8]
 8004f7c:	0211      	lsls	r1, r2, #8
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	68d2      	ldr	r2, [r2, #12]
 8004f82:	0912      	lsrs	r2, r2, #4
 8004f84:	0452      	lsls	r2, r2, #17
 8004f86:	430a      	orrs	r2, r1
 8004f88:	492a      	ldr	r1, [pc, #168]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	610b      	str	r3, [r1, #16]
 8004f8e:	e027      	b.n	8004fe0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d112      	bne.n	8004fbc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f96:	4b27      	ldr	r3, [pc, #156]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6892      	ldr	r2, [r2, #8]
 8004fa6:	0211      	lsls	r1, r2, #8
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6912      	ldr	r2, [r2, #16]
 8004fac:	0852      	lsrs	r2, r2, #1
 8004fae:	3a01      	subs	r2, #1
 8004fb0:	0552      	lsls	r2, r2, #21
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	491f      	ldr	r1, [pc, #124]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	610b      	str	r3, [r1, #16]
 8004fba:	e011      	b.n	8004fe0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fbc:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6892      	ldr	r2, [r2, #8]
 8004fcc:	0211      	lsls	r1, r2, #8
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6952      	ldr	r2, [r2, #20]
 8004fd2:	0852      	lsrs	r2, r2, #1
 8004fd4:	3a01      	subs	r2, #1
 8004fd6:	0652      	lsls	r2, r2, #25
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	4916      	ldr	r1, [pc, #88]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fe0:	4b14      	ldr	r3, [pc, #80]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a13      	ldr	r2, [pc, #76]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fec:	f7fd faec 	bl	80025c8 <HAL_GetTick>
 8004ff0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ff2:	e009      	b.n	8005008 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ff4:	f7fd fae8 	bl	80025c8 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d902      	bls.n	8005008 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	73fb      	strb	r3, [r7, #15]
          break;
 8005006:	e005      	b.n	8005014 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0ef      	beq.n	8004ff4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800501a:	4b06      	ldr	r3, [pc, #24]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	4904      	ldr	r1, [pc, #16]	; (8005034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005024:	4313      	orrs	r3, r2
 8005026:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000

08005038 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005046:	4b6a      	ldr	r3, [pc, #424]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d018      	beq.n	8005084 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005052:	4b67      	ldr	r3, [pc, #412]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0203 	and.w	r2, r3, #3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d10d      	bne.n	800507e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
       ||
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800506a:	4b61      	ldr	r3, [pc, #388]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	091b      	lsrs	r3, r3, #4
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
       ||
 800507a:	429a      	cmp	r2, r3
 800507c:	d047      	beq.n	800510e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
 8005082:	e044      	b.n	800510e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d018      	beq.n	80050be <RCCEx_PLLSAI2_Config+0x86>
 800508c:	2b03      	cmp	r3, #3
 800508e:	d825      	bhi.n	80050dc <RCCEx_PLLSAI2_Config+0xa4>
 8005090:	2b01      	cmp	r3, #1
 8005092:	d002      	beq.n	800509a <RCCEx_PLLSAI2_Config+0x62>
 8005094:	2b02      	cmp	r3, #2
 8005096:	d009      	beq.n	80050ac <RCCEx_PLLSAI2_Config+0x74>
 8005098:	e020      	b.n	80050dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800509a:	4b55      	ldr	r3, [pc, #340]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d11d      	bne.n	80050e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050aa:	e01a      	b.n	80050e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050ac:	4b50      	ldr	r3, [pc, #320]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d116      	bne.n	80050e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050bc:	e013      	b.n	80050e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050be:	4b4c      	ldr	r3, [pc, #304]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10f      	bne.n	80050ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050ca:	4b49      	ldr	r3, [pc, #292]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050da:	e006      	b.n	80050ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
      break;
 80050e0:	e004      	b.n	80050ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050e2:	bf00      	nop
 80050e4:	e002      	b.n	80050ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050e6:	bf00      	nop
 80050e8:	e000      	b.n	80050ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10d      	bne.n	800510e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050f2:	4b3f      	ldr	r3, [pc, #252]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6819      	ldr	r1, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	3b01      	subs	r3, #1
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	430b      	orrs	r3, r1
 8005108:	4939      	ldr	r1, [pc, #228]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800510a:	4313      	orrs	r3, r2
 800510c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d167      	bne.n	80051e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005114:	4b36      	ldr	r3, [pc, #216]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a35      	ldr	r2, [pc, #212]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800511a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800511e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005120:	f7fd fa52 	bl	80025c8 <HAL_GetTick>
 8005124:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005126:	e009      	b.n	800513c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005128:	f7fd fa4e 	bl	80025c8 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d902      	bls.n	800513c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	73fb      	strb	r3, [r7, #15]
        break;
 800513a:	e005      	b.n	8005148 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800513c:	4b2c      	ldr	r3, [pc, #176]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1ef      	bne.n	8005128 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d14a      	bne.n	80051e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d111      	bne.n	8005178 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005154:	4b26      	ldr	r3, [pc, #152]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800515c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6892      	ldr	r2, [r2, #8]
 8005164:	0211      	lsls	r1, r2, #8
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	68d2      	ldr	r2, [r2, #12]
 800516a:	0912      	lsrs	r2, r2, #4
 800516c:	0452      	lsls	r2, r2, #17
 800516e:	430a      	orrs	r2, r1
 8005170:	491f      	ldr	r1, [pc, #124]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005172:	4313      	orrs	r3, r2
 8005174:	614b      	str	r3, [r1, #20]
 8005176:	e011      	b.n	800519c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005180:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6892      	ldr	r2, [r2, #8]
 8005188:	0211      	lsls	r1, r2, #8
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6912      	ldr	r2, [r2, #16]
 800518e:	0852      	lsrs	r2, r2, #1
 8005190:	3a01      	subs	r2, #1
 8005192:	0652      	lsls	r2, r2, #25
 8005194:	430a      	orrs	r2, r1
 8005196:	4916      	ldr	r1, [pc, #88]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005198:	4313      	orrs	r3, r2
 800519a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800519c:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a8:	f7fd fa0e 	bl	80025c8 <HAL_GetTick>
 80051ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051ae:	e009      	b.n	80051c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051b0:	f7fd fa0a 	bl	80025c8 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d902      	bls.n	80051c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	73fb      	strb	r3, [r7, #15]
          break;
 80051c2:	e005      	b.n	80051d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051c4:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ef      	beq.n	80051b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	4904      	ldr	r1, [pc, #16]	; (80051f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000

080051f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e095      	b.n	8005332 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2b00      	cmp	r3, #0
 800520c:	d108      	bne.n	8005220 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005216:	d009      	beq.n	800522c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	61da      	str	r2, [r3, #28]
 800521e:	e005      	b.n	800522c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fc fd90 	bl	8001d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005262:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800526c:	d902      	bls.n	8005274 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	e002      	b.n	800527a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005278:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005282:	d007      	beq.n	8005294 <HAL_SPI_Init+0xa0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800528c:	d002      	beq.n	8005294 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	ea42 0103 	orr.w	r1, r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	f003 0204 	and.w	r2, r3, #4
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005310:	ea42 0103 	orr.w	r1, r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b088      	sub	sp, #32
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	4613      	mov	r3, r2
 8005348:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_SPI_Transmit+0x22>
 8005358:	2302      	movs	r3, #2
 800535a:	e15f      	b.n	800561c <HAL_SPI_Transmit+0x2e2>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005364:	f7fd f930 	bl	80025c8 <HAL_GetTick>
 8005368:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b01      	cmp	r3, #1
 8005378:	d002      	beq.n	8005380 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800537a:	2302      	movs	r3, #2
 800537c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800537e:	e148      	b.n	8005612 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_SPI_Transmit+0x52>
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005390:	e13f      	b.n	8005612 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2203      	movs	r2, #3
 8005396:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	88fa      	ldrh	r2, [r7, #6]
 80053aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053dc:	d10f      	bne.n	80053fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d007      	beq.n	800541c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800541a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005424:	d94f      	bls.n	80054c6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_SPI_Transmit+0xfa>
 800542e:	8afb      	ldrh	r3, [r7, #22]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d142      	bne.n	80054ba <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005458:	e02f      	b.n	80054ba <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b02      	cmp	r3, #2
 8005466:	d112      	bne.n	800548e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	881a      	ldrh	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	1c9a      	adds	r2, r3, #2
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800548c:	e015      	b.n	80054ba <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800548e:	f7fd f89b 	bl	80025c8 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d803      	bhi.n	80054a6 <HAL_SPI_Transmit+0x16c>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a4:	d102      	bne.n	80054ac <HAL_SPI_Transmit+0x172>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80054b8:	e0ab      	b.n	8005612 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1ca      	bne.n	800545a <HAL_SPI_Transmit+0x120>
 80054c4:	e080      	b.n	80055c8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_SPI_Transmit+0x19a>
 80054ce:	8afb      	ldrh	r3, [r7, #22]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d174      	bne.n	80055be <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d912      	bls.n	8005504 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	881a      	ldrh	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ee:	1c9a      	adds	r2, r3, #2
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	3b02      	subs	r3, #2
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005502:	e05c      	b.n	80055be <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	330c      	adds	r3, #12
 800550e:	7812      	ldrb	r2, [r2, #0]
 8005510:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	1c5a      	adds	r2, r3, #1
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800552a:	e048      	b.n	80055be <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b02      	cmp	r3, #2
 8005538:	d12b      	bne.n	8005592 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b01      	cmp	r3, #1
 8005542:	d912      	bls.n	800556a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	881a      	ldrh	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	1c9a      	adds	r2, r3, #2
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b02      	subs	r3, #2
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005568:	e029      	b.n	80055be <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	7812      	ldrb	r2, [r2, #0]
 8005576:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005590:	e015      	b.n	80055be <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005592:	f7fd f819 	bl	80025c8 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d803      	bhi.n	80055aa <HAL_SPI_Transmit+0x270>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a8:	d102      	bne.n	80055b0 <HAL_SPI_Transmit+0x276>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d106      	bne.n	80055be <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80055bc:	e029      	b.n	8005612 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1b1      	bne.n	800552c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	6839      	ldr	r1, [r7, #0]
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fb69 	bl	8005ca4 <SPI_EndRxTxTransaction>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055e6:	2300      	movs	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e003      	b.n	8005612 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800561a:	7ffb      	ldrb	r3, [r7, #31]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3720      	adds	r7, #32
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	; 0x28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005632:	2301      	movs	r3, #1
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_SPI_TransmitReceive+0x26>
 8005646:	2302      	movs	r3, #2
 8005648:	e20a      	b.n	8005a60 <HAL_SPI_TransmitReceive+0x43c>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005652:	f7fc ffb9 	bl	80025c8 <HAL_GetTick>
 8005656:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800565e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005666:	887b      	ldrh	r3, [r7, #2]
 8005668:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800566a:	887b      	ldrh	r3, [r7, #2]
 800566c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800566e:	7efb      	ldrb	r3, [r7, #27]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d00e      	beq.n	8005692 <HAL_SPI_TransmitReceive+0x6e>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800567a:	d106      	bne.n	800568a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <HAL_SPI_TransmitReceive+0x66>
 8005684:	7efb      	ldrb	r3, [r7, #27]
 8005686:	2b04      	cmp	r3, #4
 8005688:	d003      	beq.n	8005692 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800568a:	2302      	movs	r3, #2
 800568c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005690:	e1e0      	b.n	8005a54 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <HAL_SPI_TransmitReceive+0x80>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <HAL_SPI_TransmitReceive+0x80>
 800569e:	887b      	ldrh	r3, [r7, #2]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d103      	bne.n	80056ac <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80056aa:	e1d3      	b.n	8005a54 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d003      	beq.n	80056c0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2205      	movs	r2, #5
 80056bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	887a      	ldrh	r2, [r7, #2]
 80056d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	887a      	ldrh	r2, [r7, #2]
 80056d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	887a      	ldrh	r2, [r7, #2]
 80056e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	887a      	ldrh	r2, [r7, #2]
 80056ec:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005702:	d802      	bhi.n	800570a <HAL_SPI_TransmitReceive+0xe6>
 8005704:	8a3b      	ldrh	r3, [r7, #16]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d908      	bls.n	800571c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005718:	605a      	str	r2, [r3, #4]
 800571a:	e007      	b.n	800572c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800572a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005736:	2b40      	cmp	r3, #64	; 0x40
 8005738:	d007      	beq.n	800574a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005748:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005752:	f240 8081 	bls.w	8005858 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_SPI_TransmitReceive+0x140>
 800575e:	8a7b      	ldrh	r3, [r7, #18]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d16d      	bne.n	8005840 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	881a      	ldrh	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	1c9a      	adds	r2, r3, #2
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005788:	e05a      	b.n	8005840 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b02      	cmp	r3, #2
 8005796:	d11b      	bne.n	80057d0 <HAL_SPI_TransmitReceive+0x1ac>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d016      	beq.n	80057d0 <HAL_SPI_TransmitReceive+0x1ac>
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d113      	bne.n	80057d0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	881a      	ldrh	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	1c9a      	adds	r2, r3, #2
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d11c      	bne.n	8005818 <HAL_SPI_TransmitReceive+0x1f4>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d016      	beq.n	8005818 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	b292      	uxth	r2, r2
 80057f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	1c9a      	adds	r2, r3, #2
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005814:	2301      	movs	r3, #1
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005818:	f7fc fed6 	bl	80025c8 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005824:	429a      	cmp	r2, r3
 8005826:	d80b      	bhi.n	8005840 <HAL_SPI_TransmitReceive+0x21c>
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800582e:	d007      	beq.n	8005840 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800583e:	e109      	b.n	8005a54 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d19f      	bne.n	800578a <HAL_SPI_TransmitReceive+0x166>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d199      	bne.n	800578a <HAL_SPI_TransmitReceive+0x166>
 8005856:	e0e3      	b.n	8005a20 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x244>
 8005860:	8a7b      	ldrh	r3, [r7, #18]
 8005862:	2b01      	cmp	r3, #1
 8005864:	f040 80cf 	bne.w	8005a06 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	d912      	bls.n	8005898 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	881a      	ldrh	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	1c9a      	adds	r2, r3, #2
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b02      	subs	r3, #2
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005896:	e0b6      	b.n	8005a06 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	7812      	ldrb	r2, [r2, #0]
 80058a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058be:	e0a2      	b.n	8005a06 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d134      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x314>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d02f      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x314>
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d12c      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d912      	bls.n	800590e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	881a      	ldrh	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	1c9a      	adds	r2, r3, #2
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b02      	subs	r3, #2
 8005906:	b29a      	uxth	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800590c:	e012      	b.n	8005934 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	7812      	ldrb	r2, [r2, #0]
 800591a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b01      	cmp	r3, #1
 8005944:	d148      	bne.n	80059d8 <HAL_SPI_TransmitReceive+0x3b4>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d042      	beq.n	80059d8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	d923      	bls.n	80059a6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	b292      	uxth	r2, r2
 800596a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b02      	subs	r3, #2
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	d81f      	bhi.n	80059d4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059a2:	605a      	str	r2, [r3, #4]
 80059a4:	e016      	b.n	80059d4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f103 020c 	add.w	r2, r3, #12
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	7812      	ldrb	r2, [r2, #0]
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059d4:	2301      	movs	r3, #1
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059d8:	f7fc fdf6 	bl	80025c8 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d803      	bhi.n	80059f0 <HAL_SPI_TransmitReceive+0x3cc>
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ee:	d102      	bne.n	80059f6 <HAL_SPI_TransmitReceive+0x3d2>
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d107      	bne.n	8005a06 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005a04:	e026      	b.n	8005a54 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f47f af57 	bne.w	80058c0 <HAL_SPI_TransmitReceive+0x29c>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f47f af50 	bne.w	80058c0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 f93d 	bl	8005ca4 <SPI_EndRxTxTransaction>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4a:	e003      	b.n	8005a54 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3728      	adds	r7, #40	; 0x28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	4613      	mov	r3, r2
 8005a76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a78:	f7fc fda6 	bl	80025c8 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	4413      	add	r3, r2
 8005a86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a88:	f7fc fd9e 	bl	80025c8 <HAL_GetTick>
 8005a8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a8e:	4b39      	ldr	r3, [pc, #228]	; (8005b74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	015b      	lsls	r3, r3, #5
 8005a94:	0d1b      	lsrs	r3, r3, #20
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	fb02 f303 	mul.w	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a9e:	e054      	b.n	8005b4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aa6:	d050      	beq.n	8005b4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005aa8:	f7fc fd8e 	bl	80025c8 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d902      	bls.n	8005abe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d13d      	bne.n	8005b3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005acc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ad6:	d111      	bne.n	8005afc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ae0:	d004      	beq.n	8005aec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aea:	d107      	bne.n	8005afc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005afa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b04:	d10f      	bne.n	8005b26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e017      	b.n	8005b6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4013      	ands	r3, r2
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	bf0c      	ite	eq
 8005b5a:	2301      	moveq	r3, #1
 8005b5c:	2300      	movne	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	79fb      	ldrb	r3, [r7, #7]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d19b      	bne.n	8005aa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000040 	.word	0x20000040

08005b78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b8a:	f7fc fd1d 	bl	80025c8 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	4413      	add	r3, r2
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005b9a:	f7fc fd15 	bl	80025c8 <HAL_GetTick>
 8005b9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ba8:	4b3d      	ldr	r3, [pc, #244]	; (8005ca0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	00da      	lsls	r2, r3, #3
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	0d1b      	lsrs	r3, r3, #20
 8005bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005bc0:	e060      	b.n	8005c84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bc8:	d107      	bne.n	8005bda <SPI_WaitFifoStateUntilTimeout+0x62>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d104      	bne.n	8005bda <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be0:	d050      	beq.n	8005c84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005be2:	f7fc fcf1 	bl	80025c8 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d902      	bls.n	8005bf8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d13d      	bne.n	8005c74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c10:	d111      	bne.n	8005c36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1a:	d004      	beq.n	8005c26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c24:	d107      	bne.n	8005c36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3e:	d10f      	bne.n	8005c60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e010      	b.n	8005c96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	3b01      	subs	r3, #1
 8005c82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d196      	bne.n	8005bc2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3728      	adds	r7, #40	; 0x28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000040 	.word	0x20000040

08005ca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f7ff ff5b 	bl	8005b78 <SPI_WaitFifoStateUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d007      	beq.n	8005cd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ccc:	f043 0220 	orr.w	r2, r3, #32
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e027      	b.n	8005d28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2180      	movs	r1, #128	; 0x80
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff fec0 	bl	8005a68 <SPI_WaitFlagStateUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf2:	f043 0220 	orr.w	r2, r3, #32
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e014      	b.n	8005d28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff ff34 	bl	8005b78 <SPI_WaitFifoStateUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1a:	f043 0220 	orr.w	r2, r3, #32
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e000      	b.n	8005d28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e049      	b.n	8005dd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fc f87e 	bl	8001e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f000 fa62 	bl	8006238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0201 	bic.w	r2, r2, #1
 8005df4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a1a      	ldr	r2, [r3, #32]
 8005dfc:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10f      	bne.n	8005e26 <HAL_TIM_Base_Stop_IT+0x48>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6a1a      	ldr	r2, [r3, #32]
 8005e0c:	f240 4344 	movw	r3, #1092	; 0x444
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d107      	bne.n	8005e26 <HAL_TIM_Base_Stop_IT+0x48>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0201 	bic.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d020      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01b      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0202 	mvn.w	r2, #2
 8005e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f9b7 	bl	80061fa <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f9a9 	bl	80061e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f9ba 	bl	800620e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d020      	beq.n	8005eec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01b      	beq.n	8005eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0204 	mvn.w	r2, #4
 8005ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f991 	bl	80061fa <HAL_TIM_IC_CaptureCallback>
 8005ed8:	e005      	b.n	8005ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f983 	bl	80061e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f994 	bl	800620e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d020      	beq.n	8005f38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f003 0308 	and.w	r3, r3, #8
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01b      	beq.n	8005f38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f06f 0208 	mvn.w	r2, #8
 8005f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f96b 	bl	80061fa <HAL_TIM_IC_CaptureCallback>
 8005f24:	e005      	b.n	8005f32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f95d 	bl	80061e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f96e 	bl	800620e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d020      	beq.n	8005f84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01b      	beq.n	8005f84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0210 	mvn.w	r2, #16
 8005f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2208      	movs	r2, #8
 8005f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f945 	bl	80061fa <HAL_TIM_IC_CaptureCallback>
 8005f70:	e005      	b.n	8005f7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f937 	bl	80061e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f948 	bl	800620e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00c      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0201 	mvn.w	r2, #1
 8005fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f915 	bl	80061d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00c      	beq.n	8005fcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d007      	beq.n	8005fcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fafc 	bl	80065c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00c      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 faf4 	bl	80065d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00c      	beq.n	8006014 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800600c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f907 	bl	8006222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00c      	beq.n	8006038 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0220 	mvn.w	r2, #32
 8006030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fabc 	bl	80065b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006038:	bf00      	nop
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_TIM_ConfigClockSource+0x1c>
 8006058:	2302      	movs	r3, #2
 800605a:	e0b6      	b.n	80061ca <HAL_TIM_ConfigClockSource+0x18a>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800607a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800607e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006086:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006098:	d03e      	beq.n	8006118 <HAL_TIM_ConfigClockSource+0xd8>
 800609a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800609e:	f200 8087 	bhi.w	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a6:	f000 8086 	beq.w	80061b6 <HAL_TIM_ConfigClockSource+0x176>
 80060aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ae:	d87f      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060b0:	2b70      	cmp	r3, #112	; 0x70
 80060b2:	d01a      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0xaa>
 80060b4:	2b70      	cmp	r3, #112	; 0x70
 80060b6:	d87b      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060b8:	2b60      	cmp	r3, #96	; 0x60
 80060ba:	d050      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x11e>
 80060bc:	2b60      	cmp	r3, #96	; 0x60
 80060be:	d877      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060c0:	2b50      	cmp	r3, #80	; 0x50
 80060c2:	d03c      	beq.n	800613e <HAL_TIM_ConfigClockSource+0xfe>
 80060c4:	2b50      	cmp	r3, #80	; 0x50
 80060c6:	d873      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060c8:	2b40      	cmp	r3, #64	; 0x40
 80060ca:	d058      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x13e>
 80060cc:	2b40      	cmp	r3, #64	; 0x40
 80060ce:	d86f      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060d0:	2b30      	cmp	r3, #48	; 0x30
 80060d2:	d064      	beq.n	800619e <HAL_TIM_ConfigClockSource+0x15e>
 80060d4:	2b30      	cmp	r3, #48	; 0x30
 80060d6:	d86b      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d060      	beq.n	800619e <HAL_TIM_ConfigClockSource+0x15e>
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d867      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d05c      	beq.n	800619e <HAL_TIM_ConfigClockSource+0x15e>
 80060e4:	2b10      	cmp	r3, #16
 80060e6:	d05a      	beq.n	800619e <HAL_TIM_ConfigClockSource+0x15e>
 80060e8:	e062      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060fa:	f000 f9b1 	bl	8006460 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800610c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	609a      	str	r2, [r3, #8]
      break;
 8006116:	e04f      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006128:	f000 f99a 	bl	8006460 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800613a:	609a      	str	r2, [r3, #8]
      break;
 800613c:	e03c      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800614a:	461a      	mov	r2, r3
 800614c:	f000 f90e 	bl	800636c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2150      	movs	r1, #80	; 0x50
 8006156:	4618      	mov	r0, r3
 8006158:	f000 f967 	bl	800642a <TIM_ITRx_SetConfig>
      break;
 800615c:	e02c      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800616a:	461a      	mov	r2, r3
 800616c:	f000 f92d 	bl	80063ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2160      	movs	r1, #96	; 0x60
 8006176:	4618      	mov	r0, r3
 8006178:	f000 f957 	bl	800642a <TIM_ITRx_SetConfig>
      break;
 800617c:	e01c      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800618a:	461a      	mov	r2, r3
 800618c:	f000 f8ee 	bl	800636c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2140      	movs	r1, #64	; 0x40
 8006196:	4618      	mov	r0, r3
 8006198:	f000 f947 	bl	800642a <TIM_ITRx_SetConfig>
      break;
 800619c:	e00c      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4619      	mov	r1, r3
 80061a8:	4610      	mov	r0, r2
 80061aa:	f000 f93e 	bl	800642a <TIM_ITRx_SetConfig>
      break;
 80061ae:	e003      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
      break;
 80061b4:	e000      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80061b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
	...

08006238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a40      	ldr	r2, [pc, #256]	; (800634c <TIM_Base_SetConfig+0x114>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d013      	beq.n	8006278 <TIM_Base_SetConfig+0x40>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006256:	d00f      	beq.n	8006278 <TIM_Base_SetConfig+0x40>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a3d      	ldr	r2, [pc, #244]	; (8006350 <TIM_Base_SetConfig+0x118>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00b      	beq.n	8006278 <TIM_Base_SetConfig+0x40>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a3c      	ldr	r2, [pc, #240]	; (8006354 <TIM_Base_SetConfig+0x11c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d007      	beq.n	8006278 <TIM_Base_SetConfig+0x40>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a3b      	ldr	r2, [pc, #236]	; (8006358 <TIM_Base_SetConfig+0x120>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d003      	beq.n	8006278 <TIM_Base_SetConfig+0x40>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a3a      	ldr	r2, [pc, #232]	; (800635c <TIM_Base_SetConfig+0x124>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d108      	bne.n	800628a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a2f      	ldr	r2, [pc, #188]	; (800634c <TIM_Base_SetConfig+0x114>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01f      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006298:	d01b      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a2c      	ldr	r2, [pc, #176]	; (8006350 <TIM_Base_SetConfig+0x118>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d017      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a2b      	ldr	r2, [pc, #172]	; (8006354 <TIM_Base_SetConfig+0x11c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a2a      	ldr	r2, [pc, #168]	; (8006358 <TIM_Base_SetConfig+0x120>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00f      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a29      	ldr	r2, [pc, #164]	; (800635c <TIM_Base_SetConfig+0x124>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00b      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a28      	ldr	r2, [pc, #160]	; (8006360 <TIM_Base_SetConfig+0x128>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d007      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a27      	ldr	r2, [pc, #156]	; (8006364 <TIM_Base_SetConfig+0x12c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d003      	beq.n	80062d2 <TIM_Base_SetConfig+0x9a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a26      	ldr	r2, [pc, #152]	; (8006368 <TIM_Base_SetConfig+0x130>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d108      	bne.n	80062e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a10      	ldr	r2, [pc, #64]	; (800634c <TIM_Base_SetConfig+0x114>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00f      	beq.n	8006330 <TIM_Base_SetConfig+0xf8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a12      	ldr	r2, [pc, #72]	; (800635c <TIM_Base_SetConfig+0x124>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00b      	beq.n	8006330 <TIM_Base_SetConfig+0xf8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a11      	ldr	r2, [pc, #68]	; (8006360 <TIM_Base_SetConfig+0x128>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d007      	beq.n	8006330 <TIM_Base_SetConfig+0xf8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a10      	ldr	r2, [pc, #64]	; (8006364 <TIM_Base_SetConfig+0x12c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d003      	beq.n	8006330 <TIM_Base_SetConfig+0xf8>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a0f      	ldr	r2, [pc, #60]	; (8006368 <TIM_Base_SetConfig+0x130>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d103      	bne.n	8006338 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	691a      	ldr	r2, [r3, #16]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	615a      	str	r2, [r3, #20]
}
 800633e:	bf00      	nop
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40012c00 	.word	0x40012c00
 8006350:	40000400 	.word	0x40000400
 8006354:	40000800 	.word	0x40000800
 8006358:	40000c00 	.word	0x40000c00
 800635c:	40013400 	.word	0x40013400
 8006360:	40014000 	.word	0x40014000
 8006364:	40014400 	.word	0x40014400
 8006368:	40014800 	.word	0x40014800

0800636c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	f023 0201 	bic.w	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f023 030a 	bic.w	r3, r3, #10
 80063a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	621a      	str	r2, [r3, #32]
}
 80063be:	bf00      	nop
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b087      	sub	sp, #28
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	f023 0210 	bic.w	r2, r3, #16
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	031b      	lsls	r3, r3, #12
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006406:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	011b      	lsls	r3, r3, #4
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	621a      	str	r2, [r3, #32]
}
 800641e:	bf00      	nop
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4313      	orrs	r3, r2
 8006448:	f043 0307 	orr.w	r3, r3, #7
 800644c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	609a      	str	r2, [r3, #8]
}
 8006454:	bf00      	nop
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800647a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	021a      	lsls	r2, r3, #8
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	431a      	orrs	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4313      	orrs	r3, r2
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	609a      	str	r2, [r3, #8]
}
 8006494:	bf00      	nop
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e068      	b.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a2e      	ldr	r2, [pc, #184]	; (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d004      	beq.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2d      	ldr	r2, [pc, #180]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d108      	bne.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006504:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1e      	ldr	r2, [pc, #120]	; (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d01d      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652a:	d018      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a1b      	ldr	r2, [pc, #108]	; (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00e      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a18      	ldr	r2, [pc, #96]	; (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d009      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a13      	ldr	r2, [pc, #76]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d004      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a14      	ldr	r2, [pc, #80]	; (80065ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d10c      	bne.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	4313      	orrs	r3, r2
 800656e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40012c00 	.word	0x40012c00
 800659c:	40013400 	.word	0x40013400
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	40014000 	.word	0x40014000

080065b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e040      	b.n	8006680 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fb fc48 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2224      	movs	r2, #36	; 0x24
 8006618:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0201 	bic.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fe72 	bl	800731c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fbb7 	bl	8006dac <UART_SetConfig>
 800663e:	4603      	mov	r3, r0
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e01b      	b.n	8006680 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006656:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006666:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0201 	orr.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fef1 	bl	8007460 <UART_CheckIdleState>
 800667e:	4603      	mov	r3, r0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af02      	add	r7, sp, #8
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	4613      	mov	r3, r2
 8006696:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800669c:	2b20      	cmp	r3, #32
 800669e:	d178      	bne.n	8006792 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_UART_Transmit+0x24>
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e071      	b.n	8006794 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2221      	movs	r2, #33	; 0x21
 80066bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066be:	f7fb ff83 	bl	80025c8 <HAL_GetTick>
 80066c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	88fa      	ldrh	r2, [r7, #6]
 80066c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	88fa      	ldrh	r2, [r7, #6]
 80066d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066dc:	d108      	bne.n	80066f0 <HAL_UART_Transmit+0x68>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	e003      	b.n	80066f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066f8:	e030      	b.n	800675c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2200      	movs	r2, #0
 8006702:	2180      	movs	r1, #128	; 0x80
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 ff53 	bl	80075b0 <UART_WaitOnFlagUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2220      	movs	r2, #32
 8006714:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e03c      	b.n	8006794 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10b      	bne.n	8006738 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	881a      	ldrh	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800672c:	b292      	uxth	r2, r2
 800672e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	3302      	adds	r3, #2
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	e008      	b.n	800674a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	781a      	ldrb	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	b292      	uxth	r2, r2
 8006742:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	3301      	adds	r3, #1
 8006748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006762:	b29b      	uxth	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1c8      	bne.n	80066fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2200      	movs	r2, #0
 8006770:	2140      	movs	r1, #64	; 0x40
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 ff1c 	bl	80075b0 <UART_WaitOnFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d004      	beq.n	8006788 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e005      	b.n	8006794 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	e000      	b.n	8006794 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006792:	2302      	movs	r3, #2
  }
}
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b0ba      	sub	sp, #232	; 0xe8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80067c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80067ca:	4013      	ands	r3, r2
 80067cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80067d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d115      	bne.n	8006804 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80067d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067dc:	f003 0320 	and.w	r3, r3, #32
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00f      	beq.n	8006804 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d009      	beq.n	8006804 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 82ae 	beq.w	8006d56 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
      }
      return;
 8006802:	e2a8      	b.n	8006d56 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 8117 	beq.w	8006a3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800680e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800681a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800681e:	4b85      	ldr	r3, [pc, #532]	; (8006a34 <HAL_UART_IRQHandler+0x298>)
 8006820:	4013      	ands	r3, r2
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 810a 	beq.w	8006a3c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d011      	beq.n	8006858 <HAL_UART_IRQHandler+0xbc>
 8006834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00b      	beq.n	8006858 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2201      	movs	r2, #1
 8006846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800684e:	f043 0201 	orr.w	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d011      	beq.n	8006888 <HAL_UART_IRQHandler+0xec>
 8006864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2202      	movs	r2, #2
 8006876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800687e:	f043 0204 	orr.w	r2, r3, #4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	d011      	beq.n	80068b8 <HAL_UART_IRQHandler+0x11c>
 8006894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00b      	beq.n	80068b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2204      	movs	r2, #4
 80068a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ae:	f043 0202 	orr.w	r2, r3, #2
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d017      	beq.n	80068f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d105      	bne.n	80068dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80068d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2208      	movs	r2, #8
 80068e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ea:	f043 0208 	orr.w	r2, r3, #8
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d012      	beq.n	8006926 <HAL_UART_IRQHandler+0x18a>
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00c      	beq.n	8006926 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800691c:	f043 0220 	orr.w	r2, r3, #32
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 8214 	beq.w	8006d5a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00d      	beq.n	800695a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800693e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d005      	beq.n	800697e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006976:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800697a:	2b00      	cmp	r3, #0
 800697c:	d04f      	beq.n	8006a1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 ff44 	bl	800780c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698e:	2b40      	cmp	r3, #64	; 0x40
 8006990:	d141      	bne.n	8006a16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3308      	adds	r3, #8
 8006998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1d9      	bne.n	8006992 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d013      	beq.n	8006a0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ea:	4a13      	ldr	r2, [pc, #76]	; (8006a38 <HAL_UART_IRQHandler+0x29c>)
 80069ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fc fde4 	bl	80035c0 <HAL_DMA_Abort_IT>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d017      	beq.n	8006a2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a08:	4610      	mov	r0, r2
 8006a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0c:	e00f      	b.n	8006a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9c2 	bl	8006d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a14:	e00b      	b.n	8006a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f9be 	bl	8006d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a1c:	e007      	b.n	8006a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f9ba 	bl	8006d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006a2c:	e195      	b.n	8006d5a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a2e:	bf00      	nop
    return;
 8006a30:	e193      	b.n	8006d5a <HAL_UART_IRQHandler+0x5be>
 8006a32:	bf00      	nop
 8006a34:	04000120 	.word	0x04000120
 8006a38:	080078d5 	.word	0x080078d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	f040 814e 	bne.w	8006ce2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4a:	f003 0310 	and.w	r3, r3, #16
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 8147 	beq.w	8006ce2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8140 	beq.w	8006ce2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2210      	movs	r2, #16
 8006a68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a74:	2b40      	cmp	r3, #64	; 0x40
 8006a76:	f040 80b8 	bne.w	8006bea <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 8167 	beq.w	8006d5e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	f080 815f 	bcs.w	8006d5e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f040 8086 	bne.w	8006bc8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006aea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1da      	bne.n	8006abc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3308      	adds	r3, #8
 8006b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e1      	bne.n	8006b06 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3308      	adds	r3, #8
 8006b48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e3      	bne.n	8006b42 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b98:	f023 0310 	bic.w	r3, r3, #16
 8006b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006baa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e4      	bne.n	8006b88 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fc fcbe 	bl	8003544 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fa fed2 	bl	800198c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006be8:	e0b9      	b.n	8006d5e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 80ab 	beq.w	8006d62 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006c0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80a6 	beq.w	8006d62 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c38:	647b      	str	r3, [r7, #68]	; 0x44
 8006c3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e4      	bne.n	8006c16 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3308      	adds	r3, #8
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c70:	633a      	str	r2, [r7, #48]	; 0x30
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e3      	bne.n	8006c4c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f023 0310 	bic.w	r3, r3, #16
 8006cac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cba:	61fb      	str	r3, [r7, #28]
 8006cbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	69b9      	ldr	r1, [r7, #24]
 8006cc0:	69fa      	ldr	r2, [r7, #28]
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e4      	bne.n	8006c98 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7fa fe56 	bl	800198c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ce0:	e03f      	b.n	8006d62 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00e      	beq.n	8006d0c <HAL_UART_IRQHandler+0x570>
 8006cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d008      	beq.n	8006d0c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 ffe1 	bl	8007ccc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d0a:	e02d      	b.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00e      	beq.n	8006d36 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d008      	beq.n	8006d36 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01c      	beq.n	8006d66 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
    }
    return;
 8006d34:	e017      	b.n	8006d66 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d012      	beq.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00c      	beq.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fdd6 	bl	8007900 <UART_EndTransmit_IT>
    return;
 8006d54:	e008      	b.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006d56:	bf00      	nop
 8006d58:	e006      	b.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006d5a:	bf00      	nop
 8006d5c:	e004      	b.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006d5e:	bf00      	nop
 8006d60:	e002      	b.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006d62:	bf00      	nop
 8006d64:	e000      	b.n	8006d68 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006d66:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006d68:	37e8      	adds	r7, #232	; 0xe8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop

08006d70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006db0:	b08a      	sub	sp, #40	; 0x28
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	4ba4      	ldr	r3, [pc, #656]	; (800706c <UART_SetConfig+0x2c0>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	6812      	ldr	r2, [r2, #0]
 8006de2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a99      	ldr	r2, [pc, #612]	; (8007070 <UART_SetConfig+0x2c4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d004      	beq.n	8006e18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e14:	4313      	orrs	r3, r2
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a90      	ldr	r2, [pc, #576]	; (8007074 <UART_SetConfig+0x2c8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d126      	bne.n	8006e84 <UART_SetConfig+0xd8>
 8006e36:	4b90      	ldr	r3, [pc, #576]	; (8007078 <UART_SetConfig+0x2cc>)
 8006e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e3c:	f003 0303 	and.w	r3, r3, #3
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d81b      	bhi.n	8006e7c <UART_SetConfig+0xd0>
 8006e44:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <UART_SetConfig+0xa0>)
 8006e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4a:	bf00      	nop
 8006e4c:	08006e5d 	.word	0x08006e5d
 8006e50:	08006e6d 	.word	0x08006e6d
 8006e54:	08006e65 	.word	0x08006e65
 8006e58:	08006e75 	.word	0x08006e75
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e62:	e116      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006e64:	2302      	movs	r3, #2
 8006e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e6a:	e112      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e72:	e10e      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006e74:	2308      	movs	r3, #8
 8006e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e7a:	e10a      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e82:	e106      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a7c      	ldr	r2, [pc, #496]	; (800707c <UART_SetConfig+0x2d0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d138      	bne.n	8006f00 <UART_SetConfig+0x154>
 8006e8e:	4b7a      	ldr	r3, [pc, #488]	; (8007078 <UART_SetConfig+0x2cc>)
 8006e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e94:	f003 030c 	and.w	r3, r3, #12
 8006e98:	2b0c      	cmp	r3, #12
 8006e9a:	d82d      	bhi.n	8006ef8 <UART_SetConfig+0x14c>
 8006e9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <UART_SetConfig+0xf8>)
 8006e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea2:	bf00      	nop
 8006ea4:	08006ed9 	.word	0x08006ed9
 8006ea8:	08006ef9 	.word	0x08006ef9
 8006eac:	08006ef9 	.word	0x08006ef9
 8006eb0:	08006ef9 	.word	0x08006ef9
 8006eb4:	08006ee9 	.word	0x08006ee9
 8006eb8:	08006ef9 	.word	0x08006ef9
 8006ebc:	08006ef9 	.word	0x08006ef9
 8006ec0:	08006ef9 	.word	0x08006ef9
 8006ec4:	08006ee1 	.word	0x08006ee1
 8006ec8:	08006ef9 	.word	0x08006ef9
 8006ecc:	08006ef9 	.word	0x08006ef9
 8006ed0:	08006ef9 	.word	0x08006ef9
 8006ed4:	08006ef1 	.word	0x08006ef1
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ede:	e0d8      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ee6:	e0d4      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006ee8:	2304      	movs	r3, #4
 8006eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eee:	e0d0      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006ef0:	2308      	movs	r3, #8
 8006ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ef6:	e0cc      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006ef8:	2310      	movs	r3, #16
 8006efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006efe:	e0c8      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a5e      	ldr	r2, [pc, #376]	; (8007080 <UART_SetConfig+0x2d4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d125      	bne.n	8006f56 <UART_SetConfig+0x1aa>
 8006f0a:	4b5b      	ldr	r3, [pc, #364]	; (8007078 <UART_SetConfig+0x2cc>)
 8006f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f14:	2b30      	cmp	r3, #48	; 0x30
 8006f16:	d016      	beq.n	8006f46 <UART_SetConfig+0x19a>
 8006f18:	2b30      	cmp	r3, #48	; 0x30
 8006f1a:	d818      	bhi.n	8006f4e <UART_SetConfig+0x1a2>
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d00a      	beq.n	8006f36 <UART_SetConfig+0x18a>
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d814      	bhi.n	8006f4e <UART_SetConfig+0x1a2>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <UART_SetConfig+0x182>
 8006f28:	2b10      	cmp	r3, #16
 8006f2a:	d008      	beq.n	8006f3e <UART_SetConfig+0x192>
 8006f2c:	e00f      	b.n	8006f4e <UART_SetConfig+0x1a2>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f34:	e0ad      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006f36:	2302      	movs	r3, #2
 8006f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f3c:	e0a9      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006f3e:	2304      	movs	r3, #4
 8006f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f44:	e0a5      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006f46:	2308      	movs	r3, #8
 8006f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f4c:	e0a1      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006f4e:	2310      	movs	r3, #16
 8006f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f54:	e09d      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a4a      	ldr	r2, [pc, #296]	; (8007084 <UART_SetConfig+0x2d8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d125      	bne.n	8006fac <UART_SetConfig+0x200>
 8006f60:	4b45      	ldr	r3, [pc, #276]	; (8007078 <UART_SetConfig+0x2cc>)
 8006f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f6a:	2bc0      	cmp	r3, #192	; 0xc0
 8006f6c:	d016      	beq.n	8006f9c <UART_SetConfig+0x1f0>
 8006f6e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f70:	d818      	bhi.n	8006fa4 <UART_SetConfig+0x1f8>
 8006f72:	2b80      	cmp	r3, #128	; 0x80
 8006f74:	d00a      	beq.n	8006f8c <UART_SetConfig+0x1e0>
 8006f76:	2b80      	cmp	r3, #128	; 0x80
 8006f78:	d814      	bhi.n	8006fa4 <UART_SetConfig+0x1f8>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <UART_SetConfig+0x1d8>
 8006f7e:	2b40      	cmp	r3, #64	; 0x40
 8006f80:	d008      	beq.n	8006f94 <UART_SetConfig+0x1e8>
 8006f82:	e00f      	b.n	8006fa4 <UART_SetConfig+0x1f8>
 8006f84:	2300      	movs	r3, #0
 8006f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f8a:	e082      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f92:	e07e      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006f94:	2304      	movs	r3, #4
 8006f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f9a:	e07a      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006f9c:	2308      	movs	r3, #8
 8006f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fa2:	e076      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006fa4:	2310      	movs	r3, #16
 8006fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006faa:	e072      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a35      	ldr	r2, [pc, #212]	; (8007088 <UART_SetConfig+0x2dc>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d12a      	bne.n	800700c <UART_SetConfig+0x260>
 8006fb6:	4b30      	ldr	r3, [pc, #192]	; (8007078 <UART_SetConfig+0x2cc>)
 8006fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fc4:	d01a      	beq.n	8006ffc <UART_SetConfig+0x250>
 8006fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fca:	d81b      	bhi.n	8007004 <UART_SetConfig+0x258>
 8006fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fd0:	d00c      	beq.n	8006fec <UART_SetConfig+0x240>
 8006fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fd6:	d815      	bhi.n	8007004 <UART_SetConfig+0x258>
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <UART_SetConfig+0x238>
 8006fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe0:	d008      	beq.n	8006ff4 <UART_SetConfig+0x248>
 8006fe2:	e00f      	b.n	8007004 <UART_SetConfig+0x258>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fea:	e052      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006fec:	2302      	movs	r3, #2
 8006fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ff2:	e04e      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ffa:	e04a      	b.n	8007092 <UART_SetConfig+0x2e6>
 8006ffc:	2308      	movs	r3, #8
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007002:	e046      	b.n	8007092 <UART_SetConfig+0x2e6>
 8007004:	2310      	movs	r3, #16
 8007006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800700a:	e042      	b.n	8007092 <UART_SetConfig+0x2e6>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a17      	ldr	r2, [pc, #92]	; (8007070 <UART_SetConfig+0x2c4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d13a      	bne.n	800708c <UART_SetConfig+0x2e0>
 8007016:	4b18      	ldr	r3, [pc, #96]	; (8007078 <UART_SetConfig+0x2cc>)
 8007018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800701c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007020:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007024:	d01a      	beq.n	800705c <UART_SetConfig+0x2b0>
 8007026:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800702a:	d81b      	bhi.n	8007064 <UART_SetConfig+0x2b8>
 800702c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007030:	d00c      	beq.n	800704c <UART_SetConfig+0x2a0>
 8007032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007036:	d815      	bhi.n	8007064 <UART_SetConfig+0x2b8>
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <UART_SetConfig+0x298>
 800703c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007040:	d008      	beq.n	8007054 <UART_SetConfig+0x2a8>
 8007042:	e00f      	b.n	8007064 <UART_SetConfig+0x2b8>
 8007044:	2300      	movs	r3, #0
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704a:	e022      	b.n	8007092 <UART_SetConfig+0x2e6>
 800704c:	2302      	movs	r3, #2
 800704e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007052:	e01e      	b.n	8007092 <UART_SetConfig+0x2e6>
 8007054:	2304      	movs	r3, #4
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705a:	e01a      	b.n	8007092 <UART_SetConfig+0x2e6>
 800705c:	2308      	movs	r3, #8
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007062:	e016      	b.n	8007092 <UART_SetConfig+0x2e6>
 8007064:	2310      	movs	r3, #16
 8007066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800706a:	e012      	b.n	8007092 <UART_SetConfig+0x2e6>
 800706c:	efff69f3 	.word	0xefff69f3
 8007070:	40008000 	.word	0x40008000
 8007074:	40013800 	.word	0x40013800
 8007078:	40021000 	.word	0x40021000
 800707c:	40004400 	.word	0x40004400
 8007080:	40004800 	.word	0x40004800
 8007084:	40004c00 	.word	0x40004c00
 8007088:	40005000 	.word	0x40005000
 800708c:	2310      	movs	r3, #16
 800708e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a9f      	ldr	r2, [pc, #636]	; (8007314 <UART_SetConfig+0x568>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d17a      	bne.n	8007192 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800709c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d824      	bhi.n	80070ee <UART_SetConfig+0x342>
 80070a4:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <UART_SetConfig+0x300>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	080070d1 	.word	0x080070d1
 80070b0:	080070ef 	.word	0x080070ef
 80070b4:	080070d9 	.word	0x080070d9
 80070b8:	080070ef 	.word	0x080070ef
 80070bc:	080070df 	.word	0x080070df
 80070c0:	080070ef 	.word	0x080070ef
 80070c4:	080070ef 	.word	0x080070ef
 80070c8:	080070ef 	.word	0x080070ef
 80070cc:	080070e7 	.word	0x080070e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d0:	f7fd fb48 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 80070d4:	61f8      	str	r0, [r7, #28]
        break;
 80070d6:	e010      	b.n	80070fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070d8:	4b8f      	ldr	r3, [pc, #572]	; (8007318 <UART_SetConfig+0x56c>)
 80070da:	61fb      	str	r3, [r7, #28]
        break;
 80070dc:	e00d      	b.n	80070fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070de:	f7fd faa9 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 80070e2:	61f8      	str	r0, [r7, #28]
        break;
 80070e4:	e009      	b.n	80070fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ea:	61fb      	str	r3, [r7, #28]
        break;
 80070ec:	e005      	b.n	80070fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 80fb 	beq.w	80072f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	4613      	mov	r3, r2
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	4413      	add	r3, r2
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	429a      	cmp	r2, r3
 8007110:	d305      	bcc.n	800711e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007118:	69fa      	ldr	r2, [r7, #28]
 800711a:	429a      	cmp	r2, r3
 800711c:	d903      	bls.n	8007126 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007124:	e0e8      	b.n	80072f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	2200      	movs	r2, #0
 800712a:	461c      	mov	r4, r3
 800712c:	4615      	mov	r5, r2
 800712e:	f04f 0200 	mov.w	r2, #0
 8007132:	f04f 0300 	mov.w	r3, #0
 8007136:	022b      	lsls	r3, r5, #8
 8007138:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800713c:	0222      	lsls	r2, r4, #8
 800713e:	68f9      	ldr	r1, [r7, #12]
 8007140:	6849      	ldr	r1, [r1, #4]
 8007142:	0849      	lsrs	r1, r1, #1
 8007144:	2000      	movs	r0, #0
 8007146:	4688      	mov	r8, r1
 8007148:	4681      	mov	r9, r0
 800714a:	eb12 0a08 	adds.w	sl, r2, r8
 800714e:	eb43 0b09 	adc.w	fp, r3, r9
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	603b      	str	r3, [r7, #0]
 800715a:	607a      	str	r2, [r7, #4]
 800715c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007160:	4650      	mov	r0, sl
 8007162:	4659      	mov	r1, fp
 8007164:	f7f9 fb8a 	bl	800087c <__aeabi_uldivmod>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4613      	mov	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007176:	d308      	bcc.n	800718a <UART_SetConfig+0x3de>
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800717e:	d204      	bcs.n	800718a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	60da      	str	r2, [r3, #12]
 8007188:	e0b6      	b.n	80072f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007190:	e0b2      	b.n	80072f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800719a:	d15e      	bne.n	800725a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800719c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d828      	bhi.n	80071f6 <UART_SetConfig+0x44a>
 80071a4:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <UART_SetConfig+0x400>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	080071d1 	.word	0x080071d1
 80071b0:	080071d9 	.word	0x080071d9
 80071b4:	080071e1 	.word	0x080071e1
 80071b8:	080071f7 	.word	0x080071f7
 80071bc:	080071e7 	.word	0x080071e7
 80071c0:	080071f7 	.word	0x080071f7
 80071c4:	080071f7 	.word	0x080071f7
 80071c8:	080071f7 	.word	0x080071f7
 80071cc:	080071ef 	.word	0x080071ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071d0:	f7fd fac8 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 80071d4:	61f8      	str	r0, [r7, #28]
        break;
 80071d6:	e014      	b.n	8007202 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071d8:	f7fd fada 	bl	8004790 <HAL_RCC_GetPCLK2Freq>
 80071dc:	61f8      	str	r0, [r7, #28]
        break;
 80071de:	e010      	b.n	8007202 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071e0:	4b4d      	ldr	r3, [pc, #308]	; (8007318 <UART_SetConfig+0x56c>)
 80071e2:	61fb      	str	r3, [r7, #28]
        break;
 80071e4:	e00d      	b.n	8007202 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071e6:	f7fd fa25 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 80071ea:	61f8      	str	r0, [r7, #28]
        break;
 80071ec:	e009      	b.n	8007202 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071f2:	61fb      	str	r3, [r7, #28]
        break;
 80071f4:	e005      	b.n	8007202 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007200:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d077      	beq.n	80072f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	005a      	lsls	r2, r3, #1
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	085b      	lsrs	r3, r3, #1
 8007212:	441a      	add	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	fbb2 f3f3 	udiv	r3, r2, r3
 800721c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b0f      	cmp	r3, #15
 8007222:	d916      	bls.n	8007252 <UART_SetConfig+0x4a6>
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722a:	d212      	bcs.n	8007252 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	b29b      	uxth	r3, r3
 8007230:	f023 030f 	bic.w	r3, r3, #15
 8007234:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	085b      	lsrs	r3, r3, #1
 800723a:	b29b      	uxth	r3, r3
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	b29a      	uxth	r2, r3
 8007242:	8afb      	ldrh	r3, [r7, #22]
 8007244:	4313      	orrs	r3, r2
 8007246:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	8afa      	ldrh	r2, [r7, #22]
 800724e:	60da      	str	r2, [r3, #12]
 8007250:	e052      	b.n	80072f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007258:	e04e      	b.n	80072f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800725a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800725e:	2b08      	cmp	r3, #8
 8007260:	d827      	bhi.n	80072b2 <UART_SetConfig+0x506>
 8007262:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <UART_SetConfig+0x4bc>)
 8007264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007268:	0800728d 	.word	0x0800728d
 800726c:	08007295 	.word	0x08007295
 8007270:	0800729d 	.word	0x0800729d
 8007274:	080072b3 	.word	0x080072b3
 8007278:	080072a3 	.word	0x080072a3
 800727c:	080072b3 	.word	0x080072b3
 8007280:	080072b3 	.word	0x080072b3
 8007284:	080072b3 	.word	0x080072b3
 8007288:	080072ab 	.word	0x080072ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800728c:	f7fd fa6a 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 8007290:	61f8      	str	r0, [r7, #28]
        break;
 8007292:	e014      	b.n	80072be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007294:	f7fd fa7c 	bl	8004790 <HAL_RCC_GetPCLK2Freq>
 8007298:	61f8      	str	r0, [r7, #28]
        break;
 800729a:	e010      	b.n	80072be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800729c:	4b1e      	ldr	r3, [pc, #120]	; (8007318 <UART_SetConfig+0x56c>)
 800729e:	61fb      	str	r3, [r7, #28]
        break;
 80072a0:	e00d      	b.n	80072be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072a2:	f7fd f9c7 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 80072a6:	61f8      	str	r0, [r7, #28]
        break;
 80072a8:	e009      	b.n	80072be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ae:	61fb      	str	r3, [r7, #28]
        break;
 80072b0:	e005      	b.n	80072be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80072bc:	bf00      	nop
    }

    if (pclk != 0U)
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d019      	beq.n	80072f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	085a      	lsrs	r2, r3, #1
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	441a      	add	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	2b0f      	cmp	r3, #15
 80072dc:	d909      	bls.n	80072f2 <UART_SetConfig+0x546>
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e4:	d205      	bcs.n	80072f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60da      	str	r2, [r3, #12]
 80072f0:	e002      	b.n	80072f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007304:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007308:	4618      	mov	r0, r3
 800730a:	3728      	adds	r7, #40	; 0x28
 800730c:	46bd      	mov	sp, r7
 800730e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007312:	bf00      	nop
 8007314:	40008000 	.word	0x40008000
 8007318:	00f42400 	.word	0x00f42400

0800731c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	f003 0308 	and.w	r3, r3, #8
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00a      	beq.n	8007346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00a      	beq.n	80073ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	f003 0320 	and.w	r3, r3, #32
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d01a      	beq.n	8007432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800741a:	d10a      	bne.n	8007432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	605a      	str	r2, [r3, #4]
  }
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b098      	sub	sp, #96	; 0x60
 8007464:	af02      	add	r7, sp, #8
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007470:	f7fb f8aa 	bl	80025c8 <HAL_GetTick>
 8007474:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b08      	cmp	r3, #8
 8007482:	d12e      	bne.n	80074e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800748c:	2200      	movs	r2, #0
 800748e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f88c 	bl	80075b0 <UART_WaitOnFlagUntilTimeout>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d021      	beq.n	80074e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074b2:	653b      	str	r3, [r7, #80]	; 0x50
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074bc:	647b      	str	r3, [r7, #68]	; 0x44
 80074be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e6      	bne.n	800749e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e062      	b.n	80075a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0304 	and.w	r3, r3, #4
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d149      	bne.n	8007584 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074f8:	2200      	movs	r2, #0
 80074fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f856 	bl	80075b0 <UART_WaitOnFlagUntilTimeout>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d03c      	beq.n	8007584 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	623b      	str	r3, [r7, #32]
   return(result);
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800751e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007528:	633b      	str	r3, [r7, #48]	; 0x30
 800752a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800752e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e6      	bne.n	800750a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3308      	adds	r3, #8
 8007542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	60fb      	str	r3, [r7, #12]
   return(result);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0301 	bic.w	r3, r3, #1
 8007552:	64bb      	str	r3, [r7, #72]	; 0x48
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3308      	adds	r3, #8
 800755a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800755c:	61fa      	str	r2, [r7, #28]
 800755e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	69b9      	ldr	r1, [r7, #24]
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	617b      	str	r3, [r7, #20]
   return(result);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e5      	bne.n	800753c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2220      	movs	r2, #32
 8007574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e011      	b.n	80075a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3758      	adds	r7, #88	; 0x58
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	603b      	str	r3, [r7, #0]
 80075bc:	4613      	mov	r3, r2
 80075be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075c0:	e049      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075c8:	d045      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ca:	f7fa fffd 	bl	80025c8 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d302      	bcc.n	80075e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e048      	b.n	8007676 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0304 	and.w	r3, r3, #4
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d031      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b08      	cmp	r3, #8
 80075fe:	d110      	bne.n	8007622 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2208      	movs	r2, #8
 8007606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 f8ff 	bl	800780c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2208      	movs	r2, #8
 8007612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e029      	b.n	8007676 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800762c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007630:	d111      	bne.n	8007656 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800763a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f8e5 	bl	800780c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e00f      	b.n	8007676 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69da      	ldr	r2, [r3, #28]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	4013      	ands	r3, r2
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	429a      	cmp	r2, r3
 8007664:	bf0c      	ite	eq
 8007666:	2301      	moveq	r3, #1
 8007668:	2300      	movne	r3, #0
 800766a:	b2db      	uxtb	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	79fb      	ldrb	r3, [r7, #7]
 8007670:	429a      	cmp	r2, r3
 8007672:	d0a6      	beq.n	80075c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
	...

08007680 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007680:	b480      	push	{r7}
 8007682:	b097      	sub	sp, #92	; 0x5c
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	4613      	mov	r3, r2
 800768c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	88fa      	ldrh	r2, [r7, #6]
 8007698:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	88fa      	ldrh	r2, [r7, #6]
 80076a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b2:	d10e      	bne.n	80076d2 <UART_Start_Receive_IT+0x52>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d105      	bne.n	80076c8 <UART_Start_Receive_IT+0x48>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80076c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076c6:	e02d      	b.n	8007724 <UART_Start_Receive_IT+0xa4>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	22ff      	movs	r2, #255	; 0xff
 80076cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076d0:	e028      	b.n	8007724 <UART_Start_Receive_IT+0xa4>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10d      	bne.n	80076f6 <UART_Start_Receive_IT+0x76>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d104      	bne.n	80076ec <UART_Start_Receive_IT+0x6c>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	22ff      	movs	r2, #255	; 0xff
 80076e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076ea:	e01b      	b.n	8007724 <UART_Start_Receive_IT+0xa4>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	227f      	movs	r2, #127	; 0x7f
 80076f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076f4:	e016      	b.n	8007724 <UART_Start_Receive_IT+0xa4>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076fe:	d10d      	bne.n	800771c <UART_Start_Receive_IT+0x9c>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d104      	bne.n	8007712 <UART_Start_Receive_IT+0x92>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	227f      	movs	r2, #127	; 0x7f
 800770c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007710:	e008      	b.n	8007724 <UART_Start_Receive_IT+0xa4>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	223f      	movs	r2, #63	; 0x3f
 8007716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800771a:	e003      	b.n	8007724 <UART_Start_Receive_IT+0xa4>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2222      	movs	r2, #34	; 0x22
 8007730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3308      	adds	r3, #8
 800773a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800773e:	e853 3f00 	ldrex	r3, [r3]
 8007742:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007746:	f043 0301 	orr.w	r3, r3, #1
 800774a:	657b      	str	r3, [r7, #84]	; 0x54
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3308      	adds	r3, #8
 8007752:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007754:	64ba      	str	r2, [r7, #72]	; 0x48
 8007756:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007758:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800775a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800775c:	e841 2300 	strex	r3, r2, [r1]
 8007760:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e5      	bne.n	8007734 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007770:	d107      	bne.n	8007782 <UART_Start_Receive_IT+0x102>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d103      	bne.n	8007782 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4a21      	ldr	r2, [pc, #132]	; (8007804 <UART_Start_Receive_IT+0x184>)
 800777e:	669a      	str	r2, [r3, #104]	; 0x68
 8007780:	e002      	b.n	8007788 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4a20      	ldr	r2, [pc, #128]	; (8007808 <UART_Start_Receive_IT+0x188>)
 8007786:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d019      	beq.n	80077c4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80077a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	461a      	mov	r2, r3
 80077ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ae:	637b      	str	r3, [r7, #52]	; 0x34
 80077b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e6      	bne.n	8007790 <UART_Start_Receive_IT+0x110>
 80077c2:	e018      	b.n	80077f6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	613b      	str	r3, [r7, #16]
   return(result);
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f043 0320 	orr.w	r3, r3, #32
 80077d8:	653b      	str	r3, [r7, #80]	; 0x50
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e2:	623b      	str	r3, [r7, #32]
 80077e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	69f9      	ldr	r1, [r7, #28]
 80077e8:	6a3a      	ldr	r2, [r7, #32]
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e6      	bne.n	80077c4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	375c      	adds	r7, #92	; 0x5c
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	08007b11 	.word	0x08007b11
 8007808:	08007955 	.word	0x08007955

0800780c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800780c:	b480      	push	{r7}
 800780e:	b095      	sub	sp, #84	; 0x54
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007828:	64fb      	str	r3, [r7, #76]	; 0x4c
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007832:	643b      	str	r3, [r7, #64]	; 0x40
 8007834:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007838:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e6      	bne.n	8007814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	61fb      	str	r3, [r7, #28]
   return(result);
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	64bb      	str	r3, [r7, #72]	; 0x48
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007866:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007868:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800786c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e5      	bne.n	8007846 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800787e:	2b01      	cmp	r3, #1
 8007880:	d118      	bne.n	80078b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f023 0310 	bic.w	r3, r3, #16
 8007896:	647b      	str	r3, [r7, #68]	; 0x44
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078a0:	61bb      	str	r3, [r7, #24]
 80078a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	6979      	ldr	r1, [r7, #20]
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	613b      	str	r3, [r7, #16]
   return(result);
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e6      	bne.n	8007882 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078c8:	bf00      	nop
 80078ca:	3754      	adds	r7, #84	; 0x54
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f7ff fa50 	bl	8006d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f8:	bf00      	nop
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	60bb      	str	r3, [r7, #8]
   return(result);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	61bb      	str	r3, [r7, #24]
 8007928:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792a:	6979      	ldr	r1, [r7, #20]
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	e841 2300 	strex	r3, r2, [r1]
 8007932:	613b      	str	r3, [r7, #16]
   return(result);
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1e6      	bne.n	8007908 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2220      	movs	r2, #32
 800793e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff fa12 	bl	8006d70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800794c:	bf00      	nop
 800794e:	3720      	adds	r7, #32
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b09c      	sub	sp, #112	; 0x70
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007962:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800796c:	2b22      	cmp	r3, #34	; 0x22
 800796e:	f040 80be 	bne.w	8007aee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007978:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800797c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007980:	b2d9      	uxtb	r1, r3
 8007982:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007986:	b2da      	uxtb	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798c:	400a      	ands	r2, r1
 800798e:	b2d2      	uxtb	r2, r2
 8007990:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	3b01      	subs	r3, #1
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f040 80a3 	bne.w	8007b02 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079da:	65bb      	str	r3, [r7, #88]	; 0x58
 80079dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079e2:	e841 2300 	strex	r3, r2, [r1]
 80079e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e6      	bne.n	80079bc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3308      	adds	r3, #8
 80079f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a00:	f023 0301 	bic.w	r3, r3, #1
 8007a04:	667b      	str	r3, [r7, #100]	; 0x64
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a0e:	647a      	str	r2, [r7, #68]	; 0x44
 8007a10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e5      	bne.n	80079ee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a34      	ldr	r2, [pc, #208]	; (8007b0c <UART_RxISR_8BIT+0x1b8>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d01f      	beq.n	8007a80 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d018      	beq.n	8007a80 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	623b      	str	r3, [r7, #32]
   return(result);
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a62:	663b      	str	r3, [r7, #96]	; 0x60
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a74:	e841 2300 	strex	r3, r2, [r1]
 8007a78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e6      	bne.n	8007a4e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d12e      	bne.n	8007ae6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0310 	bic.w	r3, r3, #16
 8007aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aac:	61fb      	str	r3, [r7, #28]
 8007aae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	69b9      	ldr	r1, [r7, #24]
 8007ab2:	69fa      	ldr	r2, [r7, #28]
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e6      	bne.n	8007a8e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	f003 0310 	and.w	r3, r3, #16
 8007aca:	2b10      	cmp	r3, #16
 8007acc:	d103      	bne.n	8007ad6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2210      	movs	r2, #16
 8007ad4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7f9 ff54 	bl	800198c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ae4:	e00d      	b.n	8007b02 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff f94c 	bl	8006d84 <HAL_UART_RxCpltCallback>
}
 8007aec:	e009      	b.n	8007b02 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	8b1b      	ldrh	r3, [r3, #24]
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0208 	orr.w	r2, r2, #8
 8007afe:	b292      	uxth	r2, r2
 8007b00:	831a      	strh	r2, [r3, #24]
}
 8007b02:	bf00      	nop
 8007b04:	3770      	adds	r7, #112	; 0x70
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	40008000 	.word	0x40008000

08007b10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b09c      	sub	sp, #112	; 0x70
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b28:	2b22      	cmp	r3, #34	; 0x22
 8007b2a:	f040 80be 	bne.w	8007caa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b3e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007b42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007b46:	4013      	ands	r3, r2
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b52:	1c9a      	adds	r2, r3, #2
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	3b01      	subs	r3, #1
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f040 80a3 	bne.w	8007cbe <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b8c:	667b      	str	r3, [r7, #100]	; 0x64
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b96:	657b      	str	r3, [r7, #84]	; 0x54
 8007b98:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e6      	bne.n	8007b78 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3308      	adds	r3, #8
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	e853 3f00 	ldrex	r3, [r3]
 8007bb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	f023 0301 	bic.w	r3, r3, #1
 8007bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bca:	643a      	str	r2, [r7, #64]	; 0x40
 8007bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bd2:	e841 2300 	strex	r3, r2, [r1]
 8007bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1e5      	bne.n	8007baa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2220      	movs	r2, #32
 8007be2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a34      	ldr	r2, [pc, #208]	; (8007cc8 <UART_RxISR_16BIT+0x1b8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d01f      	beq.n	8007c3c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d018      	beq.n	8007c3c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	461a      	mov	r2, r3
 8007c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c2a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c30:	e841 2300 	strex	r3, r2, [r1]
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e6      	bne.n	8007c0a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d12e      	bne.n	8007ca2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f023 0310 	bic.w	r3, r3, #16
 8007c5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	461a      	mov	r2, r3
 8007c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c68:	61bb      	str	r3, [r7, #24]
 8007c6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	6979      	ldr	r1, [r7, #20]
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	613b      	str	r3, [r7, #16]
   return(result);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e6      	bne.n	8007c4a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	f003 0310 	and.w	r3, r3, #16
 8007c86:	2b10      	cmp	r3, #16
 8007c88:	d103      	bne.n	8007c92 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2210      	movs	r2, #16
 8007c90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7f9 fe76 	bl	800198c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ca0:	e00d      	b.n	8007cbe <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff f86e 	bl	8006d84 <HAL_UART_RxCpltCallback>
}
 8007ca8:	e009      	b.n	8007cbe <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	8b1b      	ldrh	r3, [r3, #24]
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f042 0208 	orr.w	r2, r2, #8
 8007cba:	b292      	uxth	r2, r2
 8007cbc:	831a      	strh	r2, [r3, #24]
}
 8007cbe:	bf00      	nop
 8007cc0:	3770      	adds	r7, #112	; 0x70
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40008000 	.word	0x40008000

08007ccc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08c      	sub	sp, #48	; 0x30
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	4613      	mov	r3, r2
 8007cec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	d13b      	bne.n	8007d76 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8007d04:	88fb      	ldrh	r3, [r7, #6]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e034      	b.n	8007d78 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2201      	movs	r2, #1
 8007d12:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	665a      	str	r2, [r3, #100]	; 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8007d1a:	88fb      	ldrh	r3, [r7, #6]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	68b9      	ldr	r1, [r7, #8]
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f7ff fcad 	bl	8007680 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d11d      	bne.n	8007d6a <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2210      	movs	r2, #16
 8007d34:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	617b      	str	r3, [r7, #20]
   return(result);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f043 0310 	orr.w	r3, r3, #16
 8007d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	461a      	mov	r2, r3
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	627b      	str	r3, [r7, #36]	; 0x24
 8007d56:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	6a39      	ldr	r1, [r7, #32]
 8007d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e6      	bne.n	8007d36 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8007d68:	e002      	b.n	8007d70 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8007d70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d74:	e000      	b.n	8007d78 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8007d76:	2302      	movs	r3, #2
  }
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3730      	adds	r7, #48	; 0x30
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <LL_TIM_SetPrescaler>:
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <LL_TIM_SetAutoReload>:
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <LL_TIM_SetRepetitionCounter>:
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	f043 0201 	orr.w	r2, r3, #1
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	615a      	str	r2, [r3, #20]
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a3d      	ldr	r2, [pc, #244]	; (8007efc <LL_TIM_Init+0x108>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d013      	beq.n	8007e34 <LL_TIM_Init+0x40>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e12:	d00f      	beq.n	8007e34 <LL_TIM_Init+0x40>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a3a      	ldr	r2, [pc, #232]	; (8007f00 <LL_TIM_Init+0x10c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d00b      	beq.n	8007e34 <LL_TIM_Init+0x40>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a39      	ldr	r2, [pc, #228]	; (8007f04 <LL_TIM_Init+0x110>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d007      	beq.n	8007e34 <LL_TIM_Init+0x40>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a38      	ldr	r2, [pc, #224]	; (8007f08 <LL_TIM_Init+0x114>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d003      	beq.n	8007e34 <LL_TIM_Init+0x40>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a37      	ldr	r2, [pc, #220]	; (8007f0c <LL_TIM_Init+0x118>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d106      	bne.n	8007e42 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a2d      	ldr	r2, [pc, #180]	; (8007efc <LL_TIM_Init+0x108>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d01f      	beq.n	8007e8a <LL_TIM_Init+0x96>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e50:	d01b      	beq.n	8007e8a <LL_TIM_Init+0x96>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a2a      	ldr	r2, [pc, #168]	; (8007f00 <LL_TIM_Init+0x10c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d017      	beq.n	8007e8a <LL_TIM_Init+0x96>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a29      	ldr	r2, [pc, #164]	; (8007f04 <LL_TIM_Init+0x110>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d013      	beq.n	8007e8a <LL_TIM_Init+0x96>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a28      	ldr	r2, [pc, #160]	; (8007f08 <LL_TIM_Init+0x114>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00f      	beq.n	8007e8a <LL_TIM_Init+0x96>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a27      	ldr	r2, [pc, #156]	; (8007f0c <LL_TIM_Init+0x118>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00b      	beq.n	8007e8a <LL_TIM_Init+0x96>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a26      	ldr	r2, [pc, #152]	; (8007f10 <LL_TIM_Init+0x11c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d007      	beq.n	8007e8a <LL_TIM_Init+0x96>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a25      	ldr	r2, [pc, #148]	; (8007f14 <LL_TIM_Init+0x120>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <LL_TIM_Init+0x96>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a24      	ldr	r2, [pc, #144]	; (8007f18 <LL_TIM_Init+0x124>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d106      	bne.n	8007e98 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff ff79 	bl	8007d9c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7ff ff65 	bl	8007d80 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a10      	ldr	r2, [pc, #64]	; (8007efc <LL_TIM_Init+0x108>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d00f      	beq.n	8007ede <LL_TIM_Init+0xea>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a12      	ldr	r2, [pc, #72]	; (8007f0c <LL_TIM_Init+0x118>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d00b      	beq.n	8007ede <LL_TIM_Init+0xea>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a11      	ldr	r2, [pc, #68]	; (8007f10 <LL_TIM_Init+0x11c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d007      	beq.n	8007ede <LL_TIM_Init+0xea>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a10      	ldr	r2, [pc, #64]	; (8007f14 <LL_TIM_Init+0x120>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d003      	beq.n	8007ede <LL_TIM_Init+0xea>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a0f      	ldr	r2, [pc, #60]	; (8007f18 <LL_TIM_Init+0x124>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d105      	bne.n	8007eea <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff ff67 	bl	8007db8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff ff72 	bl	8007dd4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	40012c00 	.word	0x40012c00
 8007f00:	40000400 	.word	0x40000400
 8007f04:	40000800 	.word	0x40000800
 8007f08:	40000c00 	.word	0x40000c00
 8007f0c:	40013400 	.word	0x40013400
 8007f10:	40014000 	.word	0x40014000
 8007f14:	40014400 	.word	0x40014400
 8007f18:	40014800 	.word	0x40014800

08007f1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007f20:	4904      	ldr	r1, [pc, #16]	; (8007f34 <MX_FATFS_Init+0x18>)
 8007f22:	4805      	ldr	r0, [pc, #20]	; (8007f38 <MX_FATFS_Init+0x1c>)
 8007f24:	f003 fdbe 	bl	800baa4 <FATFS_LinkDriver>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	4b03      	ldr	r3, [pc, #12]	; (8007f3c <MX_FATFS_Init+0x20>)
 8007f2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007f30:	bf00      	nop
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20005cc4 	.word	0x20005cc4
 8007f38:	2000004c 	.word	0x2000004c
 8007f3c:	20005cc0 	.word	0x20005cc0

08007f40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007f44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8007f54:	2200      	movs	r2, #0
 8007f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f5a:	4804      	ldr	r0, [pc, #16]	; (8007f6c <SELECT+0x1c>)
 8007f5c:	f7fb fdfa 	bl	8003b54 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8007f60:	2001      	movs	r0, #1
 8007f62:	f7fa fb3d 	bl	80025e0 <HAL_Delay>
}
 8007f66:	bf00      	nop
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	48000400 	.word	0x48000400

08007f70 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8007f74:	2201      	movs	r2, #1
 8007f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f7a:	4804      	ldr	r0, [pc, #16]	; (8007f8c <DESELECT+0x1c>)
 8007f7c:	f7fb fdea 	bl	8003b54 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8007f80:	2001      	movs	r0, #1
 8007f82:	f7fa fb2d 	bl	80025e0 <HAL_Delay>
}
 8007f86:	bf00      	nop
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	48000400 	.word	0x48000400

08007f90 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8007f9a:	bf00      	nop
 8007f9c:	4b08      	ldr	r3, [pc, #32]	; (8007fc0 <SPI_TxByte+0x30>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d1f8      	bne.n	8007f9c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8007faa:	1df9      	adds	r1, r7, #7
 8007fac:	2364      	movs	r3, #100	; 0x64
 8007fae:	2201      	movs	r2, #1
 8007fb0:	4803      	ldr	r0, [pc, #12]	; (8007fc0 <SPI_TxByte+0x30>)
 8007fb2:	f7fd f9c2 	bl	800533a <HAL_SPI_Transmit>
}
 8007fb6:	bf00      	nop
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20000224 	.word	0x20000224

08007fc4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8007fd0:	bf00      	nop
 8007fd2:	4b08      	ldr	r3, [pc, #32]	; (8007ff4 <SPI_TxBuffer+0x30>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d1f8      	bne.n	8007fd2 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8007fe0:	887a      	ldrh	r2, [r7, #2]
 8007fe2:	2364      	movs	r3, #100	; 0x64
 8007fe4:	6879      	ldr	r1, [r7, #4]
 8007fe6:	4803      	ldr	r0, [pc, #12]	; (8007ff4 <SPI_TxBuffer+0x30>)
 8007fe8:	f7fd f9a7 	bl	800533a <HAL_SPI_Transmit>
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	20000224 	.word	0x20000224

08007ff8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8007ffe:	23ff      	movs	r3, #255	; 0xff
 8008000:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8008002:	bf00      	nop
 8008004:	4b09      	ldr	r3, [pc, #36]	; (800802c <SPI_RxByte+0x34>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	2b02      	cmp	r3, #2
 8008010:	d1f8      	bne.n	8008004 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8008012:	1dba      	adds	r2, r7, #6
 8008014:	1df9      	adds	r1, r7, #7
 8008016:	2364      	movs	r3, #100	; 0x64
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	2301      	movs	r3, #1
 800801c:	4803      	ldr	r0, [pc, #12]	; (800802c <SPI_RxByte+0x34>)
 800801e:	f7fd fb01 	bl	8005624 <HAL_SPI_TransmitReceive>

  return data;
 8008022:	79bb      	ldrb	r3, [r7, #6]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	20000224 	.word	0x20000224

08008030 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8008038:	f7ff ffde 	bl	8007ff8 <SPI_RxByte>
 800803c:	4603      	mov	r3, r0
 800803e:	461a      	mov	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	701a      	strb	r2, [r3, #0]
}
 8008044:	bf00      	nop
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8008052:	4b0a      	ldr	r3, [pc, #40]	; (800807c <SD_ReadyWait+0x30>)
 8008054:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008058:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800805a:	f7ff ffcd 	bl	8007ff8 <SPI_RxByte>
 800805e:	4603      	mov	r3, r0
 8008060:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8008062:	79fb      	ldrb	r3, [r7, #7]
 8008064:	2bff      	cmp	r3, #255	; 0xff
 8008066:	d003      	beq.n	8008070 <SD_ReadyWait+0x24>
 8008068:	4b04      	ldr	r3, [pc, #16]	; (800807c <SD_ReadyWait+0x30>)
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1f4      	bne.n	800805a <SD_ReadyWait+0xe>

  return res;
 8008070:	79fb      	ldrb	r3, [r7, #7]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20005cca 	.word	0x20005cca

08008080 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8008086:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800808a:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 800808c:	f7ff ff70 	bl	8007f70 <DESELECT>
  for(int i = 0; i < 10; i++)
 8008090:	2300      	movs	r3, #0
 8008092:	60bb      	str	r3, [r7, #8]
 8008094:	e005      	b.n	80080a2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8008096:	20ff      	movs	r0, #255	; 0xff
 8008098:	f7ff ff7a 	bl	8007f90 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	3301      	adds	r3, #1
 80080a0:	60bb      	str	r3, [r7, #8]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b09      	cmp	r3, #9
 80080a6:	ddf6      	ble.n	8008096 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80080a8:	f7ff ff52 	bl	8007f50 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80080ac:	2340      	movs	r3, #64	; 0x40
 80080ae:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 80080c0:	2395      	movs	r3, #149	; 0x95
 80080c2:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 80080c4:	463b      	mov	r3, r7
 80080c6:	2106      	movs	r1, #6
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff ff7b 	bl	8007fc4 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80080ce:	e002      	b.n	80080d6 <SD_PowerOn+0x56>
  {
    cnt--;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80080d6:	f7ff ff8f 	bl	8007ff8 <SPI_RxByte>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d002      	beq.n	80080e6 <SD_PowerOn+0x66>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1f4      	bne.n	80080d0 <SD_PowerOn+0x50>
  }

  DESELECT();
 80080e6:	f7ff ff43 	bl	8007f70 <DESELECT>
  SPI_TxByte(0XFF);
 80080ea:	20ff      	movs	r0, #255	; 0xff
 80080ec:	f7ff ff50 	bl	8007f90 <SPI_TxByte>

  PowerFlag = 1;
 80080f0:	4b03      	ldr	r3, [pc, #12]	; (8008100 <SD_PowerOn+0x80>)
 80080f2:	2201      	movs	r2, #1
 80080f4:	701a      	strb	r2, [r3, #0]
}
 80080f6:	bf00      	nop
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20005ccd 	.word	0x20005ccd

08008104 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8008104:	b480      	push	{r7}
 8008106:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8008108:	4b03      	ldr	r3, [pc, #12]	; (8008118 <SD_PowerOff+0x14>)
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]
}
 800810e:	bf00      	nop
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	20005ccd 	.word	0x20005ccd

0800811c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
  return PowerFlag;
 8008120:	4b03      	ldr	r3, [pc, #12]	; (8008130 <SD_CheckPower+0x14>)
 8008122:	781b      	ldrb	r3, [r3, #0]
}
 8008124:	4618      	mov	r0, r3
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	20005ccd 	.word	0x20005ccd

08008134 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 800813e:	4b13      	ldr	r3, [pc, #76]	; (800818c <SD_RxDataBlock+0x58>)
 8008140:	22c8      	movs	r2, #200	; 0xc8
 8008142:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8008144:	f7ff ff58 	bl	8007ff8 <SPI_RxByte>
 8008148:	4603      	mov	r3, r0
 800814a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	2bff      	cmp	r3, #255	; 0xff
 8008150:	d103      	bne.n	800815a <SD_RxDataBlock+0x26>
 8008152:	4b0e      	ldr	r3, [pc, #56]	; (800818c <SD_RxDataBlock+0x58>)
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1f4      	bne.n	8008144 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	2bfe      	cmp	r3, #254	; 0xfe
 800815e:	d001      	beq.n	8008164 <SD_RxDataBlock+0x30>
 8008160:	2300      	movs	r3, #0
 8008162:	e00f      	b.n	8008184 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	607a      	str	r2, [r7, #4]
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff ff60 	bl	8008030 <SPI_RxBytePtr>
  } while(len--);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	1e5a      	subs	r2, r3, #1
 8008174:	603a      	str	r2, [r7, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1f4      	bne.n	8008164 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 800817a:	f7ff ff3d 	bl	8007ff8 <SPI_RxByte>
  SPI_RxByte();
 800817e:	f7ff ff3b 	bl	8007ff8 <SPI_RxByte>

  return TRUE;
 8008182:	2301      	movs	r3, #1
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	20005cc8 	.word	0x20005cc8

08008190 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80081a0:	f7ff ff54 	bl	800804c <SD_ReadyWait>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2bff      	cmp	r3, #255	; 0xff
 80081a8:	d001      	beq.n	80081ae <SD_TxDataBlock+0x1e>
 80081aa:	2300      	movs	r3, #0
 80081ac:	e02f      	b.n	800820e <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff feed 	bl	8007f90 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80081b6:	78fb      	ldrb	r3, [r7, #3]
 80081b8:	2bfd      	cmp	r3, #253	; 0xfd
 80081ba:	d020      	beq.n	80081fe <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80081bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff feff 	bl	8007fc4 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 80081c6:	f7ff ff17 	bl	8007ff8 <SPI_RxByte>
    SPI_RxByte();
 80081ca:	f7ff ff15 	bl	8007ff8 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 80081ce:	e00b      	b.n	80081e8 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80081d0:	f7ff ff12 	bl	8007ff8 <SPI_RxByte>
 80081d4:	4603      	mov	r3, r0
 80081d6:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
 80081da:	f003 031f 	and.w	r3, r3, #31
 80081de:	2b05      	cmp	r3, #5
 80081e0:	d006      	beq.n	80081f0 <SD_TxDataBlock+0x60>
      i++;
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	3301      	adds	r3, #1
 80081e6:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	2b40      	cmp	r3, #64	; 0x40
 80081ec:	d9f0      	bls.n	80081d0 <SD_TxDataBlock+0x40>
 80081ee:	e000      	b.n	80081f2 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80081f0:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80081f2:	bf00      	nop
 80081f4:	f7ff ff00 	bl	8007ff8 <SPI_RxByte>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0fa      	beq.n	80081f4 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	f003 031f 	and.w	r3, r3, #31
 8008204:	2b05      	cmp	r3, #5
 8008206:	d101      	bne.n	800820c <SD_TxDataBlock+0x7c>
 8008208:	2301      	movs	r3, #1
 800820a:	e000      	b.n	800820e <SD_TxDataBlock+0x7e>

  return FALSE;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	4603      	mov	r3, r0
 800821e:	6039      	str	r1, [r7, #0]
 8008220:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8008222:	f7ff ff13 	bl	800804c <SD_ReadyWait>
 8008226:	4603      	mov	r3, r0
 8008228:	2bff      	cmp	r3, #255	; 0xff
 800822a:	d001      	beq.n	8008230 <SD_SendCmd+0x1a>
 800822c:	23ff      	movs	r3, #255	; 0xff
 800822e:	e042      	b.n	80082b6 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8008230:	79fb      	ldrb	r3, [r7, #7]
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff feac 	bl	8007f90 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	0e1b      	lsrs	r3, r3, #24
 800823c:	b2db      	uxtb	r3, r3
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff fea6 	bl	8007f90 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	0c1b      	lsrs	r3, r3, #16
 8008248:	b2db      	uxtb	r3, r3
 800824a:	4618      	mov	r0, r3
 800824c:	f7ff fea0 	bl	8007f90 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	0a1b      	lsrs	r3, r3, #8
 8008254:	b2db      	uxtb	r3, r3
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff fe9a 	bl	8007f90 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	b2db      	uxtb	r3, r3
 8008260:	4618      	mov	r0, r3
 8008262:	f7ff fe95 	bl	8007f90 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	2b40      	cmp	r3, #64	; 0x40
 800826a:	d102      	bne.n	8008272 <SD_SendCmd+0x5c>
 800826c:	2395      	movs	r3, #149	; 0x95
 800826e:	73fb      	strb	r3, [r7, #15]
 8008270:	e007      	b.n	8008282 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	2b48      	cmp	r3, #72	; 0x48
 8008276:	d102      	bne.n	800827e <SD_SendCmd+0x68>
 8008278:	2387      	movs	r3, #135	; 0x87
 800827a:	73fb      	strb	r3, [r7, #15]
 800827c:	e001      	b.n	8008282 <SD_SendCmd+0x6c>
  else crc = 1;
 800827e:	2301      	movs	r3, #1
 8008280:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff fe83 	bl	8007f90 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	2b4c      	cmp	r3, #76	; 0x4c
 800828e:	d101      	bne.n	8008294 <SD_SendCmd+0x7e>
 8008290:	f7ff feb2 	bl	8007ff8 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8008294:	230a      	movs	r3, #10
 8008296:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8008298:	f7ff feae 	bl	8007ff8 <SPI_RxByte>
 800829c:	4603      	mov	r3, r0
 800829e:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80082a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	da05      	bge.n	80082b4 <SD_SendCmd+0x9e>
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	73bb      	strb	r3, [r7, #14]
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1f1      	bne.n	8008298 <SD_SendCmd+0x82>

  return res;
 80082b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
	...

080082c0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80082c0:	b590      	push	{r4, r7, lr}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80082ca:	79fb      	ldrb	r3, [r7, #7]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <SD_disk_initialize+0x14>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e0d1      	b.n	8008478 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80082d4:	4b6a      	ldr	r3, [pc, #424]	; (8008480 <SD_disk_initialize+0x1c0>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <SD_disk_initialize+0x2a>
 80082e2:	4b67      	ldr	r3, [pc, #412]	; (8008480 <SD_disk_initialize+0x1c0>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	e0c6      	b.n	8008478 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 80082ea:	f7ff fec9 	bl	8008080 <SD_PowerOn>

  /* slave select */
  SELECT();
 80082ee:	f7ff fe2f 	bl	8007f50 <SELECT>

  /* check disk type */
  type = 0;
 80082f2:	2300      	movs	r3, #0
 80082f4:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80082f6:	2100      	movs	r1, #0
 80082f8:	2040      	movs	r0, #64	; 0x40
 80082fa:	f7ff ff8c 	bl	8008216 <SD_SendCmd>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b01      	cmp	r3, #1
 8008302:	f040 80a1 	bne.w	8008448 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8008306:	4b5f      	ldr	r3, [pc, #380]	; (8008484 <SD_disk_initialize+0x1c4>)
 8008308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800830c:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800830e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008312:	2048      	movs	r0, #72	; 0x48
 8008314:	f7ff ff7f 	bl	8008216 <SD_SendCmd>
 8008318:	4603      	mov	r3, r0
 800831a:	2b01      	cmp	r3, #1
 800831c:	d155      	bne.n	80083ca <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]
 8008322:	e00c      	b.n	800833e <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8008324:	7bfc      	ldrb	r4, [r7, #15]
 8008326:	f7ff fe67 	bl	8007ff8 <SPI_RxByte>
 800832a:	4603      	mov	r3, r0
 800832c:	461a      	mov	r2, r3
 800832e:	f104 0310 	add.w	r3, r4, #16
 8008332:	443b      	add	r3, r7
 8008334:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	3301      	adds	r3, #1
 800833c:	73fb      	strb	r3, [r7, #15]
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b03      	cmp	r3, #3
 8008342:	d9ef      	bls.n	8008324 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8008344:	7abb      	ldrb	r3, [r7, #10]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d17e      	bne.n	8008448 <SD_disk_initialize+0x188>
 800834a:	7afb      	ldrb	r3, [r7, #11]
 800834c:	2baa      	cmp	r3, #170	; 0xaa
 800834e:	d17b      	bne.n	8008448 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8008350:	2100      	movs	r1, #0
 8008352:	2077      	movs	r0, #119	; 0x77
 8008354:	f7ff ff5f 	bl	8008216 <SD_SendCmd>
 8008358:	4603      	mov	r3, r0
 800835a:	2b01      	cmp	r3, #1
 800835c:	d807      	bhi.n	800836e <SD_disk_initialize+0xae>
 800835e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008362:	2069      	movs	r0, #105	; 0x69
 8008364:	f7ff ff57 	bl	8008216 <SD_SendCmd>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d004      	beq.n	8008378 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800836e:	4b45      	ldr	r3, [pc, #276]	; (8008484 <SD_disk_initialize+0x1c4>)
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1ec      	bne.n	8008350 <SD_disk_initialize+0x90>
 8008376:	e000      	b.n	800837a <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8008378:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800837a:	4b42      	ldr	r3, [pc, #264]	; (8008484 <SD_disk_initialize+0x1c4>)
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d062      	beq.n	8008448 <SD_disk_initialize+0x188>
 8008382:	2100      	movs	r1, #0
 8008384:	207a      	movs	r0, #122	; 0x7a
 8008386:	f7ff ff46 	bl	8008216 <SD_SendCmd>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d15b      	bne.n	8008448 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8008390:	2300      	movs	r3, #0
 8008392:	73fb      	strb	r3, [r7, #15]
 8008394:	e00c      	b.n	80083b0 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8008396:	7bfc      	ldrb	r4, [r7, #15]
 8008398:	f7ff fe2e 	bl	8007ff8 <SPI_RxByte>
 800839c:	4603      	mov	r3, r0
 800839e:	461a      	mov	r2, r3
 80083a0:	f104 0310 	add.w	r3, r4, #16
 80083a4:	443b      	add	r3, r7
 80083a6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	3301      	adds	r3, #1
 80083ae:	73fb      	strb	r3, [r7, #15]
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d9ef      	bls.n	8008396 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80083b6:	7a3b      	ldrb	r3, [r7, #8]
 80083b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <SD_disk_initialize+0x104>
 80083c0:	230c      	movs	r3, #12
 80083c2:	e000      	b.n	80083c6 <SD_disk_initialize+0x106>
 80083c4:	2304      	movs	r3, #4
 80083c6:	73bb      	strb	r3, [r7, #14]
 80083c8:	e03e      	b.n	8008448 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80083ca:	2100      	movs	r1, #0
 80083cc:	2077      	movs	r0, #119	; 0x77
 80083ce:	f7ff ff22 	bl	8008216 <SD_SendCmd>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d808      	bhi.n	80083ea <SD_disk_initialize+0x12a>
 80083d8:	2100      	movs	r1, #0
 80083da:	2069      	movs	r0, #105	; 0x69
 80083dc:	f7ff ff1b 	bl	8008216 <SD_SendCmd>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d801      	bhi.n	80083ea <SD_disk_initialize+0x12a>
 80083e6:	2302      	movs	r3, #2
 80083e8:	e000      	b.n	80083ec <SD_disk_initialize+0x12c>
 80083ea:	2301      	movs	r3, #1
 80083ec:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d10e      	bne.n	8008412 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80083f4:	2100      	movs	r1, #0
 80083f6:	2077      	movs	r0, #119	; 0x77
 80083f8:	f7ff ff0d 	bl	8008216 <SD_SendCmd>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d80e      	bhi.n	8008420 <SD_disk_initialize+0x160>
 8008402:	2100      	movs	r1, #0
 8008404:	2069      	movs	r0, #105	; 0x69
 8008406:	f7ff ff06 	bl	8008216 <SD_SendCmd>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d107      	bne.n	8008420 <SD_disk_initialize+0x160>
 8008410:	e00c      	b.n	800842c <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8008412:	2100      	movs	r1, #0
 8008414:	2041      	movs	r0, #65	; 0x41
 8008416:	f7ff fefe 	bl	8008216 <SD_SendCmd>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8008420:	4b18      	ldr	r3, [pc, #96]	; (8008484 <SD_disk_initialize+0x1c4>)
 8008422:	881b      	ldrh	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1e2      	bne.n	80083ee <SD_disk_initialize+0x12e>
 8008428:	e000      	b.n	800842c <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800842a:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800842c:	4b15      	ldr	r3, [pc, #84]	; (8008484 <SD_disk_initialize+0x1c4>)
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d007      	beq.n	8008444 <SD_disk_initialize+0x184>
 8008434:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008438:	2050      	movs	r0, #80	; 0x50
 800843a:	f7ff feec 	bl	8008216 <SD_SendCmd>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <SD_disk_initialize+0x188>
 8008444:	2300      	movs	r3, #0
 8008446:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8008448:	4a0f      	ldr	r2, [pc, #60]	; (8008488 <SD_disk_initialize+0x1c8>)
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 800844e:	f7ff fd8f 	bl	8007f70 <DESELECT>
  SPI_RxByte();
 8008452:	f7ff fdd1 	bl	8007ff8 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d008      	beq.n	800846e <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800845c:	4b08      	ldr	r3, [pc, #32]	; (8008480 <SD_disk_initialize+0x1c0>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	b2db      	uxtb	r3, r3
 8008462:	f023 0301 	bic.w	r3, r3, #1
 8008466:	b2da      	uxtb	r2, r3
 8008468:	4b05      	ldr	r3, [pc, #20]	; (8008480 <SD_disk_initialize+0x1c0>)
 800846a:	701a      	strb	r2, [r3, #0]
 800846c:	e001      	b.n	8008472 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800846e:	f7ff fe49 	bl	8008104 <SD_PowerOff>
  }

  return Stat;
 8008472:	4b03      	ldr	r3, [pc, #12]	; (8008480 <SD_disk_initialize+0x1c0>)
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	b2db      	uxtb	r3, r3
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	bd90      	pop	{r4, r7, pc}
 8008480:	20000049 	.word	0x20000049
 8008484:	20005cc8 	.word	0x20005cc8
 8008488:	20005ccc 	.word	0x20005ccc

0800848c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8008496:	79fb      	ldrb	r3, [r7, #7]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <SD_disk_status+0x14>
 800849c:	2301      	movs	r3, #1
 800849e:	e002      	b.n	80084a6 <SD_disk_status+0x1a>
  return Stat;
 80084a0:	4b04      	ldr	r3, [pc, #16]	; (80084b4 <SD_disk_status+0x28>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	b2db      	uxtb	r3, r3
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20000049 	.word	0x20000049

080084b8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	607a      	str	r2, [r7, #4]
 80084c2:	603b      	str	r3, [r7, #0]
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d102      	bne.n	80084d4 <SD_disk_read+0x1c>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <SD_disk_read+0x20>
 80084d4:	2304      	movs	r3, #4
 80084d6:	e051      	b.n	800857c <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80084d8:	4b2a      	ldr	r3, [pc, #168]	; (8008584 <SD_disk_read+0xcc>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <SD_disk_read+0x32>
 80084e6:	2303      	movs	r3, #3
 80084e8:	e048      	b.n	800857c <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80084ea:	4b27      	ldr	r3, [pc, #156]	; (8008588 <SD_disk_read+0xd0>)
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d102      	bne.n	80084fc <SD_disk_read+0x44>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	025b      	lsls	r3, r3, #9
 80084fa:	607b      	str	r3, [r7, #4]

  SELECT();
 80084fc:	f7ff fd28 	bl	8007f50 <SELECT>

  if (count == 1)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d111      	bne.n	800852a <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8008506:	6879      	ldr	r1, [r7, #4]
 8008508:	2051      	movs	r0, #81	; 0x51
 800850a:	f7ff fe84 	bl	8008216 <SD_SendCmd>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d129      	bne.n	8008568 <SD_disk_read+0xb0>
 8008514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008518:	68b8      	ldr	r0, [r7, #8]
 800851a:	f7ff fe0b 	bl	8008134 <SD_RxDataBlock>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d021      	beq.n	8008568 <SD_disk_read+0xb0>
 8008524:	2300      	movs	r3, #0
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	e01e      	b.n	8008568 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	2052      	movs	r0, #82	; 0x52
 800852e:	f7ff fe72 	bl	8008216 <SD_SendCmd>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d117      	bne.n	8008568 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8008538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800853c:	68b8      	ldr	r0, [r7, #8]
 800853e:	f7ff fdf9 	bl	8008134 <SD_RxDataBlock>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <SD_disk_read+0xa6>
        buff += 512;
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800854e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	3b01      	subs	r3, #1
 8008554:	603b      	str	r3, [r7, #0]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1ed      	bne.n	8008538 <SD_disk_read+0x80>
 800855c:	e000      	b.n	8008560 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800855e:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8008560:	2100      	movs	r1, #0
 8008562:	204c      	movs	r0, #76	; 0x4c
 8008564:	f7ff fe57 	bl	8008216 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8008568:	f7ff fd02 	bl	8007f70 <DESELECT>
  SPI_RxByte();
 800856c:	f7ff fd44 	bl	8007ff8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	bf14      	ite	ne
 8008576:	2301      	movne	r3, #1
 8008578:	2300      	moveq	r3, #0
 800857a:	b2db      	uxtb	r3, r3
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20000049 	.word	0x20000049
 8008588:	20005ccc 	.word	0x20005ccc

0800858c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	607a      	str	r2, [r7, #4]
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d102      	bne.n	80085a8 <SD_disk_write+0x1c>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <SD_disk_write+0x20>
 80085a8:	2304      	movs	r3, #4
 80085aa:	e06b      	b.n	8008684 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80085ac:	4b37      	ldr	r3, [pc, #220]	; (800868c <SD_disk_write+0x100>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <SD_disk_write+0x32>
 80085ba:	2303      	movs	r3, #3
 80085bc:	e062      	b.n	8008684 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80085be:	4b33      	ldr	r3, [pc, #204]	; (800868c <SD_disk_write+0x100>)
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <SD_disk_write+0x44>
 80085cc:	2302      	movs	r3, #2
 80085ce:	e059      	b.n	8008684 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80085d0:	4b2f      	ldr	r3, [pc, #188]	; (8008690 <SD_disk_write+0x104>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d102      	bne.n	80085e2 <SD_disk_write+0x56>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	025b      	lsls	r3, r3, #9
 80085e0:	607b      	str	r3, [r7, #4]

  SELECT();
 80085e2:	f7ff fcb5 	bl	8007f50 <SELECT>

  if (count == 1)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d110      	bne.n	800860e <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80085ec:	6879      	ldr	r1, [r7, #4]
 80085ee:	2058      	movs	r0, #88	; 0x58
 80085f0:	f7ff fe11 	bl	8008216 <SD_SendCmd>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d13a      	bne.n	8008670 <SD_disk_write+0xe4>
 80085fa:	21fe      	movs	r1, #254	; 0xfe
 80085fc:	68b8      	ldr	r0, [r7, #8]
 80085fe:	f7ff fdc7 	bl	8008190 <SD_TxDataBlock>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d033      	beq.n	8008670 <SD_disk_write+0xe4>
      count = 0;
 8008608:	2300      	movs	r3, #0
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	e030      	b.n	8008670 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800860e:	4b20      	ldr	r3, [pc, #128]	; (8008690 <SD_disk_write+0x104>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800861a:	2100      	movs	r1, #0
 800861c:	2077      	movs	r0, #119	; 0x77
 800861e:	f7ff fdfa 	bl	8008216 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	2057      	movs	r0, #87	; 0x57
 8008626:	f7ff fdf6 	bl	8008216 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	2059      	movs	r0, #89	; 0x59
 800862e:	f7ff fdf2 	bl	8008216 <SD_SendCmd>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d11b      	bne.n	8008670 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8008638:	21fc      	movs	r1, #252	; 0xfc
 800863a:	68b8      	ldr	r0, [r7, #8]
 800863c:	f7ff fda8 	bl	8008190 <SD_TxDataBlock>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <SD_disk_write+0xd0>
        buff += 512;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800864c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	3b01      	subs	r3, #1
 8008652:	603b      	str	r3, [r7, #0]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1ee      	bne.n	8008638 <SD_disk_write+0xac>
 800865a:	e000      	b.n	800865e <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800865c:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800865e:	21fd      	movs	r1, #253	; 0xfd
 8008660:	2000      	movs	r0, #0
 8008662:	f7ff fd95 	bl	8008190 <SD_TxDataBlock>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <SD_disk_write+0xe4>
      {
        count = 1;
 800866c:	2301      	movs	r3, #1
 800866e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8008670:	f7ff fc7e 	bl	8007f70 <DESELECT>
  SPI_RxByte();
 8008674:	f7ff fcc0 	bl	8007ff8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	bf14      	ite	ne
 800867e:	2301      	movne	r3, #1
 8008680:	2300      	moveq	r3, #0
 8008682:	b2db      	uxtb	r3, r3
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20000049 	.word	0x20000049
 8008690:	20005ccc 	.word	0x20005ccc

08008694 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8008694:	b590      	push	{r4, r7, lr}
 8008696:	b08b      	sub	sp, #44	; 0x2c
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	603a      	str	r2, [r7, #0]
 800869e:	71fb      	strb	r3, [r7, #7]
 80086a0:	460b      	mov	r3, r1
 80086a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <SD_disk_ioctl+0x1e>
 80086ae:	2304      	movs	r3, #4
 80086b0:	e115      	b.n	80088de <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80086b8:	79bb      	ldrb	r3, [r7, #6]
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	d124      	bne.n	8008708 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d012      	beq.n	80086ec <SD_disk_ioctl+0x58>
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	dc1a      	bgt.n	8008700 <SD_disk_ioctl+0x6c>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d002      	beq.n	80086d4 <SD_disk_ioctl+0x40>
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d006      	beq.n	80086e0 <SD_disk_ioctl+0x4c>
 80086d2:	e015      	b.n	8008700 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80086d4:	f7ff fd16 	bl	8008104 <SD_PowerOff>
      res = RES_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80086de:	e0fc      	b.n	80088da <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 80086e0:	f7ff fcce 	bl	8008080 <SD_PowerOn>
      res = RES_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80086ea:	e0f6      	b.n	80088da <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	1c5c      	adds	r4, r3, #1
 80086f0:	f7ff fd14 	bl	800811c <SD_CheckPower>
 80086f4:	4603      	mov	r3, r0
 80086f6:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80086f8:	2300      	movs	r3, #0
 80086fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80086fe:	e0ec      	b.n	80088da <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8008700:	2304      	movs	r3, #4
 8008702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008706:	e0e8      	b.n	80088da <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008708:	4b77      	ldr	r3, [pc, #476]	; (80088e8 <SD_disk_ioctl+0x254>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	b2db      	uxtb	r3, r3
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <SD_disk_ioctl+0x86>
 8008716:	2303      	movs	r3, #3
 8008718:	e0e1      	b.n	80088de <SD_disk_ioctl+0x24a>

    SELECT();
 800871a:	f7ff fc19 	bl	8007f50 <SELECT>

    switch (ctrl)
 800871e:	79bb      	ldrb	r3, [r7, #6]
 8008720:	2b0d      	cmp	r3, #13
 8008722:	f200 80cb 	bhi.w	80088bc <SD_disk_ioctl+0x228>
 8008726:	a201      	add	r2, pc, #4	; (adr r2, 800872c <SD_disk_ioctl+0x98>)
 8008728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872c:	08008827 	.word	0x08008827
 8008730:	08008765 	.word	0x08008765
 8008734:	08008817 	.word	0x08008817
 8008738:	080088bd 	.word	0x080088bd
 800873c:	080088bd 	.word	0x080088bd
 8008740:	080088bd 	.word	0x080088bd
 8008744:	080088bd 	.word	0x080088bd
 8008748:	080088bd 	.word	0x080088bd
 800874c:	080088bd 	.word	0x080088bd
 8008750:	080088bd 	.word	0x080088bd
 8008754:	080088bd 	.word	0x080088bd
 8008758:	08008839 	.word	0x08008839
 800875c:	0800885d 	.word	0x0800885d
 8008760:	08008881 	.word	0x08008881
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8008764:	2100      	movs	r1, #0
 8008766:	2049      	movs	r0, #73	; 0x49
 8008768:	f7ff fd55 	bl	8008216 <SD_SendCmd>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	f040 80a8 	bne.w	80088c4 <SD_disk_ioctl+0x230>
 8008774:	f107 030c 	add.w	r3, r7, #12
 8008778:	2110      	movs	r1, #16
 800877a:	4618      	mov	r0, r3
 800877c:	f7ff fcda 	bl	8008134 <SD_RxDataBlock>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 809e 	beq.w	80088c4 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8008788:	7b3b      	ldrb	r3, [r7, #12]
 800878a:	099b      	lsrs	r3, r3, #6
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b01      	cmp	r3, #1
 8008790:	d10e      	bne.n	80087b0 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8008792:	7d7b      	ldrb	r3, [r7, #21]
 8008794:	b29a      	uxth	r2, r3
 8008796:	7d3b      	ldrb	r3, [r7, #20]
 8008798:	b29b      	uxth	r3, r3
 800879a:	021b      	lsls	r3, r3, #8
 800879c:	b29b      	uxth	r3, r3
 800879e:	4413      	add	r3, r2
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	3301      	adds	r3, #1
 80087a4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80087a6:	8bfb      	ldrh	r3, [r7, #30]
 80087a8:	029a      	lsls	r2, r3, #10
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	e02e      	b.n	800880e <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80087b0:	7c7b      	ldrb	r3, [r7, #17]
 80087b2:	f003 030f 	and.w	r3, r3, #15
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	7dbb      	ldrb	r3, [r7, #22]
 80087ba:	09db      	lsrs	r3, r3, #7
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	4413      	add	r3, r2
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	7d7b      	ldrb	r3, [r7, #21]
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	f003 0306 	and.w	r3, r3, #6
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	4413      	add	r3, r2
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	3302      	adds	r3, #2
 80087d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80087d8:	7d3b      	ldrb	r3, [r7, #20]
 80087da:	099b      	lsrs	r3, r3, #6
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	b29a      	uxth	r2, r3
 80087e0:	7cfb      	ldrb	r3, [r7, #19]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4413      	add	r3, r2
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	7cbb      	ldrb	r3, [r7, #18]
 80087ee:	029b      	lsls	r3, r3, #10
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	4413      	add	r3, r2
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	3301      	adds	r3, #1
 80087fe:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8008800:	8bfa      	ldrh	r2, [r7, #30]
 8008802:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008806:	3b09      	subs	r3, #9
 8008808:	409a      	lsls	r2, r3
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8008814:	e056      	b.n	80088c4 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800881c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008824:	e055      	b.n	80088d2 <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8008826:	f7ff fc11 	bl	800804c <SD_ReadyWait>
 800882a:	4603      	mov	r3, r0
 800882c:	2bff      	cmp	r3, #255	; 0xff
 800882e:	d14b      	bne.n	80088c8 <SD_disk_ioctl+0x234>
 8008830:	2300      	movs	r3, #0
 8008832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008836:	e047      	b.n	80088c8 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8008838:	2100      	movs	r1, #0
 800883a:	2049      	movs	r0, #73	; 0x49
 800883c:	f7ff fceb 	bl	8008216 <SD_SendCmd>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d142      	bne.n	80088cc <SD_disk_ioctl+0x238>
 8008846:	2110      	movs	r1, #16
 8008848:	6a38      	ldr	r0, [r7, #32]
 800884a:	f7ff fc73 	bl	8008134 <SD_RxDataBlock>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d03b      	beq.n	80088cc <SD_disk_ioctl+0x238>
 8008854:	2300      	movs	r3, #0
 8008856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800885a:	e037      	b.n	80088cc <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800885c:	2100      	movs	r1, #0
 800885e:	204a      	movs	r0, #74	; 0x4a
 8008860:	f7ff fcd9 	bl	8008216 <SD_SendCmd>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d132      	bne.n	80088d0 <SD_disk_ioctl+0x23c>
 800886a:	2110      	movs	r1, #16
 800886c:	6a38      	ldr	r0, [r7, #32]
 800886e:	f7ff fc61 	bl	8008134 <SD_RxDataBlock>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d02b      	beq.n	80088d0 <SD_disk_ioctl+0x23c>
 8008878:	2300      	movs	r3, #0
 800887a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800887e:	e027      	b.n	80088d0 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8008880:	2100      	movs	r1, #0
 8008882:	207a      	movs	r0, #122	; 0x7a
 8008884:	f7ff fcc7 	bl	8008216 <SD_SendCmd>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d116      	bne.n	80088bc <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 800888e:	2300      	movs	r3, #0
 8008890:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008894:	e00b      	b.n	80088ae <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8008896:	6a3c      	ldr	r4, [r7, #32]
 8008898:	1c63      	adds	r3, r4, #1
 800889a:	623b      	str	r3, [r7, #32]
 800889c:	f7ff fbac 	bl	8007ff8 <SPI_RxByte>
 80088a0:	4603      	mov	r3, r0
 80088a2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80088a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80088a8:	3301      	adds	r3, #1
 80088aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80088ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d9ef      	bls.n	8008896 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 80088bc:	2304      	movs	r3, #4
 80088be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088c2:	e006      	b.n	80088d2 <SD_disk_ioctl+0x23e>
      break;
 80088c4:	bf00      	nop
 80088c6:	e004      	b.n	80088d2 <SD_disk_ioctl+0x23e>
      break;
 80088c8:	bf00      	nop
 80088ca:	e002      	b.n	80088d2 <SD_disk_ioctl+0x23e>
      break;
 80088cc:	bf00      	nop
 80088ce:	e000      	b.n	80088d2 <SD_disk_ioctl+0x23e>
      break;
 80088d0:	bf00      	nop
    }

    DESELECT();
 80088d2:	f7ff fb4d 	bl	8007f70 <DESELECT>
    SPI_RxByte();
 80088d6:	f7ff fb8f 	bl	8007ff8 <SPI_RxByte>
  }

  return res;
 80088da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80088de:	4618      	mov	r0, r3
 80088e0:	372c      	adds	r7, #44	; 0x2c
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd90      	pop	{r4, r7, pc}
 80088e6:	bf00      	nop
 80088e8:	20000049 	.word	0x20000049

080088ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	4603      	mov	r3, r0
 80088f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7ff fce1 	bl	80082c0 <SD_disk_initialize>
 80088fe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8008912:	79fb      	ldrb	r3, [r7, #7]
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff fdb9 	bl	800848c <SD_disk_status>
 800891a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	607a      	str	r2, [r7, #4]
 800892e:	603b      	str	r3, [r7, #0]
 8008930:	4603      	mov	r3, r0
 8008932:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8008934:	7bf8      	ldrb	r0, [r7, #15]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	f7ff fdbc 	bl	80084b8 <SD_disk_read>
 8008940:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
 8008954:	603b      	str	r3, [r7, #0]
 8008956:	4603      	mov	r3, r0
 8008958:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800895a:	7bf8      	ldrb	r0, [r7, #15]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	68b9      	ldr	r1, [r7, #8]
 8008962:	f7ff fe13 	bl	800858c <SD_disk_write>
 8008966:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	603a      	str	r2, [r7, #0]
 800897a:	71fb      	strb	r3, [r7, #7]
 800897c:	460b      	mov	r3, r1
 800897e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8008980:	79b9      	ldrb	r1, [r7, #6]
 8008982:	79fb      	ldrb	r3, [r7, #7]
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	f7ff fe84 	bl	8008694 <SD_disk_ioctl>
 800898c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
	...

08008998 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	4a08      	ldr	r2, [pc, #32]	; (80089c8 <disk_status+0x30>)
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	79fa      	ldrb	r2, [r7, #7]
 80089b0:	4905      	ldr	r1, [pc, #20]	; (80089c8 <disk_status+0x30>)
 80089b2:	440a      	add	r2, r1
 80089b4:	7a12      	ldrb	r2, [r2, #8]
 80089b6:	4610      	mov	r0, r2
 80089b8:	4798      	blx	r3
 80089ba:	4603      	mov	r3, r0
 80089bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80089be:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	20005ef8 	.word	0x20005ef8

080089cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4603      	mov	r3, r0
 80089d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80089da:	79fb      	ldrb	r3, [r7, #7]
 80089dc:	4a0d      	ldr	r2, [pc, #52]	; (8008a14 <disk_initialize+0x48>)
 80089de:	5cd3      	ldrb	r3, [r2, r3]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d111      	bne.n	8008a08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	4a0b      	ldr	r2, [pc, #44]	; (8008a14 <disk_initialize+0x48>)
 80089e8:	2101      	movs	r1, #1
 80089ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	4a09      	ldr	r2, [pc, #36]	; (8008a14 <disk_initialize+0x48>)
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	79fa      	ldrb	r2, [r7, #7]
 80089fa:	4906      	ldr	r1, [pc, #24]	; (8008a14 <disk_initialize+0x48>)
 80089fc:	440a      	add	r2, r1
 80089fe:	7a12      	ldrb	r2, [r2, #8]
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	20005ef8 	.word	0x20005ef8

08008a18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008a18:	b590      	push	{r4, r7, lr}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	607a      	str	r2, [r7, #4]
 8008a22:	603b      	str	r3, [r7, #0]
 8008a24:	4603      	mov	r3, r0
 8008a26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	4a0a      	ldr	r2, [pc, #40]	; (8008a54 <disk_read+0x3c>)
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	689c      	ldr	r4, [r3, #8]
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	4a07      	ldr	r2, [pc, #28]	; (8008a54 <disk_read+0x3c>)
 8008a38:	4413      	add	r3, r2
 8008a3a:	7a18      	ldrb	r0, [r3, #8]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	68b9      	ldr	r1, [r7, #8]
 8008a42:	47a0      	blx	r4
 8008a44:	4603      	mov	r3, r0
 8008a46:	75fb      	strb	r3, [r7, #23]
  return res;
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd90      	pop	{r4, r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20005ef8 	.word	0x20005ef8

08008a58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008a58:	b590      	push	{r4, r7, lr}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	4a0a      	ldr	r2, [pc, #40]	; (8008a94 <disk_write+0x3c>)
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	68dc      	ldr	r4, [r3, #12]
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	4a07      	ldr	r2, [pc, #28]	; (8008a94 <disk_write+0x3c>)
 8008a78:	4413      	add	r3, r2
 8008a7a:	7a18      	ldrb	r0, [r3, #8]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	47a0      	blx	r4
 8008a84:	4603      	mov	r3, r0
 8008a86:	75fb      	strb	r3, [r7, #23]
  return res;
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	371c      	adds	r7, #28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd90      	pop	{r4, r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20005ef8 	.word	0x20005ef8

08008a98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	603a      	str	r2, [r7, #0]
 8008aa2:	71fb      	strb	r3, [r7, #7]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	4a09      	ldr	r2, [pc, #36]	; (8008ad0 <disk_ioctl+0x38>)
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	79fa      	ldrb	r2, [r7, #7]
 8008ab6:	4906      	ldr	r1, [pc, #24]	; (8008ad0 <disk_ioctl+0x38>)
 8008ab8:	440a      	add	r2, r1
 8008aba:	7a10      	ldrb	r0, [r2, #8]
 8008abc:	79b9      	ldrb	r1, [r7, #6]
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	4798      	blx	r3
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]
  return res;
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	20005ef8 	.word	0x20005ef8

08008ad4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008ae4:	89fb      	ldrh	r3, [r7, #14]
 8008ae6:	021b      	lsls	r3, r3, #8
 8008ae8:	b21a      	sxth	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	b21b      	sxth	r3, r3
 8008af0:	4313      	orrs	r3, r2
 8008af2:	b21b      	sxth	r3, r3
 8008af4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008af6:	89fb      	ldrh	r3, [r7, #14]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	3303      	adds	r3, #3
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	021b      	lsls	r3, r3, #8
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	3202      	adds	r2, #2
 8008b1c:	7812      	ldrb	r2, [r2, #0]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	021b      	lsls	r3, r3, #8
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	3201      	adds	r2, #1
 8008b2a:	7812      	ldrb	r2, [r2, #0]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	7812      	ldrb	r2, [r2, #0]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]
	return rv;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	607a      	str	r2, [r7, #4]
 8008b5c:	887a      	ldrh	r2, [r7, #2]
 8008b5e:	b2d2      	uxtb	r2, r2
 8008b60:	701a      	strb	r2, [r3, #0]
 8008b62:	887b      	ldrh	r3, [r7, #2]
 8008b64:	0a1b      	lsrs	r3, r3, #8
 8008b66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	607a      	str	r2, [r7, #4]
 8008b6e:	887a      	ldrh	r2, [r7, #2]
 8008b70:	b2d2      	uxtb	r2, r2
 8008b72:	701a      	strb	r2, [r3, #0]
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	1c5a      	adds	r2, r3, #1
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	b2d2      	uxtb	r2, r2
 8008b94:	701a      	strb	r2, [r3, #0]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	0a1b      	lsrs	r3, r3, #8
 8008b9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	b2d2      	uxtb	r2, r2
 8008ba6:	701a      	strb	r2, [r3, #0]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	0a1b      	lsrs	r3, r3, #8
 8008bac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	607a      	str	r2, [r7, #4]
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	b2d2      	uxtb	r2, r2
 8008bb8:	701a      	strb	r2, [r3, #0]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	0a1b      	lsrs	r3, r3, #8
 8008bbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	607a      	str	r2, [r7, #4]
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	b2d2      	uxtb	r2, r2
 8008bca:	701a      	strb	r2, [r3, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00d      	beq.n	8008c0e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	1c53      	adds	r3, r2, #1
 8008bf6:	613b      	str	r3, [r7, #16]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	1c59      	adds	r1, r3, #1
 8008bfc:	6179      	str	r1, [r7, #20]
 8008bfe:	7812      	ldrb	r2, [r2, #0]
 8008c00:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	607b      	str	r3, [r7, #4]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1f1      	bne.n	8008bf2 <mem_cpy+0x1a>
	}
}
 8008c0e:	bf00      	nop
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008c1a:	b480      	push	{r7}
 8008c1c:	b087      	sub	sp, #28
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	60b9      	str	r1, [r7, #8]
 8008c24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	617a      	str	r2, [r7, #20]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	607b      	str	r3, [r7, #4]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f3      	bne.n	8008c2a <mem_set+0x10>
}
 8008c42:	bf00      	nop
 8008c44:	bf00      	nop
 8008c46:	371c      	adds	r7, #28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008c50:	b480      	push	{r7}
 8008c52:	b089      	sub	sp, #36	; 0x24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	61fb      	str	r3, [r7, #28]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	61fa      	str	r2, [r7, #28]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	4619      	mov	r1, r3
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	61ba      	str	r2, [r7, #24]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	1acb      	subs	r3, r1, r3
 8008c7c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	607b      	str	r3, [r7, #4]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <mem_cmp+0x40>
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d0eb      	beq.n	8008c68 <mem_cmp+0x18>

	return r;
 8008c90:	697b      	ldr	r3, [r7, #20]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3724      	adds	r7, #36	; 0x24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008ca8:	e002      	b.n	8008cb0 <chk_chr+0x12>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	3301      	adds	r3, #1
 8008cae:	607b      	str	r3, [r7, #4]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d005      	beq.n	8008cc4 <chk_chr+0x26>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d1f2      	bne.n	8008caa <chk_chr+0xc>
	return *str;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60bb      	str	r3, [r7, #8]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	60fb      	str	r3, [r7, #12]
 8008ce6:	e029      	b.n	8008d3c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008ce8:	4a27      	ldr	r2, [pc, #156]	; (8008d88 <chk_lock+0xb4>)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	011b      	lsls	r3, r3, #4
 8008cee:	4413      	add	r3, r2
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d01d      	beq.n	8008d32 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008cf6:	4a24      	ldr	r2, [pc, #144]	; (8008d88 <chk_lock+0xb4>)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	011b      	lsls	r3, r3, #4
 8008cfc:	4413      	add	r3, r2
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d116      	bne.n	8008d36 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008d08:	4a1f      	ldr	r2, [pc, #124]	; (8008d88 <chk_lock+0xb4>)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	011b      	lsls	r3, r3, #4
 8008d0e:	4413      	add	r3, r2
 8008d10:	3304      	adds	r3, #4
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d10c      	bne.n	8008d36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008d1c:	4a1a      	ldr	r2, [pc, #104]	; (8008d88 <chk_lock+0xb4>)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	011b      	lsls	r3, r3, #4
 8008d22:	4413      	add	r3, r2
 8008d24:	3308      	adds	r3, #8
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d102      	bne.n	8008d36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008d30:	e007      	b.n	8008d42 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008d32:	2301      	movs	r3, #1
 8008d34:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d9d2      	bls.n	8008ce8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d109      	bne.n	8008d5c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d102      	bne.n	8008d54 <chk_lock+0x80>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d101      	bne.n	8008d58 <chk_lock+0x84>
 8008d54:	2300      	movs	r3, #0
 8008d56:	e010      	b.n	8008d7a <chk_lock+0xa6>
 8008d58:	2312      	movs	r3, #18
 8008d5a:	e00e      	b.n	8008d7a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d108      	bne.n	8008d74 <chk_lock+0xa0>
 8008d62:	4a09      	ldr	r2, [pc, #36]	; (8008d88 <chk_lock+0xb4>)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	4413      	add	r3, r2
 8008d6a:	330c      	adds	r3, #12
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d72:	d101      	bne.n	8008d78 <chk_lock+0xa4>
 8008d74:	2310      	movs	r3, #16
 8008d76:	e000      	b.n	8008d7a <chk_lock+0xa6>
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	20005cd8 	.word	0x20005cd8

08008d8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d92:	2300      	movs	r3, #0
 8008d94:	607b      	str	r3, [r7, #4]
 8008d96:	e002      	b.n	8008d9e <enq_lock+0x12>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	607b      	str	r3, [r7, #4]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d806      	bhi.n	8008db2 <enq_lock+0x26>
 8008da4:	4a09      	ldr	r2, [pc, #36]	; (8008dcc <enq_lock+0x40>)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	011b      	lsls	r3, r3, #4
 8008daa:	4413      	add	r3, r2
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1f2      	bne.n	8008d98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	bf14      	ite	ne
 8008db8:	2301      	movne	r3, #1
 8008dba:	2300      	moveq	r3, #0
 8008dbc:	b2db      	uxtb	r3, r3
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	20005cd8 	.word	0x20005cd8

08008dd0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]
 8008dde:	e01f      	b.n	8008e20 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008de0:	4a41      	ldr	r2, [pc, #260]	; (8008ee8 <inc_lock+0x118>)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	011b      	lsls	r3, r3, #4
 8008de6:	4413      	add	r3, r2
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d113      	bne.n	8008e1a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008df2:	4a3d      	ldr	r2, [pc, #244]	; (8008ee8 <inc_lock+0x118>)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	4413      	add	r3, r2
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d109      	bne.n	8008e1a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008e06:	4a38      	ldr	r2, [pc, #224]	; (8008ee8 <inc_lock+0x118>)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	011b      	lsls	r3, r3, #4
 8008e0c:	4413      	add	r3, r2
 8008e0e:	3308      	adds	r3, #8
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d006      	beq.n	8008e28 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d9dc      	bls.n	8008de0 <inc_lock+0x10>
 8008e26:	e000      	b.n	8008e2a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008e28:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d132      	bne.n	8008e96 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008e30:	2300      	movs	r3, #0
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	e002      	b.n	8008e3c <inc_lock+0x6c>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d806      	bhi.n	8008e50 <inc_lock+0x80>
 8008e42:	4a29      	ldr	r2, [pc, #164]	; (8008ee8 <inc_lock+0x118>)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	011b      	lsls	r3, r3, #4
 8008e48:	4413      	add	r3, r2
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1f2      	bne.n	8008e36 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d101      	bne.n	8008e5a <inc_lock+0x8a>
 8008e56:	2300      	movs	r3, #0
 8008e58:	e040      	b.n	8008edc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	4922      	ldr	r1, [pc, #136]	; (8008ee8 <inc_lock+0x118>)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	011b      	lsls	r3, r3, #4
 8008e64:	440b      	add	r3, r1
 8008e66:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689a      	ldr	r2, [r3, #8]
 8008e6c:	491e      	ldr	r1, [pc, #120]	; (8008ee8 <inc_lock+0x118>)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	011b      	lsls	r3, r3, #4
 8008e72:	440b      	add	r3, r1
 8008e74:	3304      	adds	r3, #4
 8008e76:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	695a      	ldr	r2, [r3, #20]
 8008e7c:	491a      	ldr	r1, [pc, #104]	; (8008ee8 <inc_lock+0x118>)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	011b      	lsls	r3, r3, #4
 8008e82:	440b      	add	r3, r1
 8008e84:	3308      	adds	r3, #8
 8008e86:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008e88:	4a17      	ldr	r2, [pc, #92]	; (8008ee8 <inc_lock+0x118>)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	011b      	lsls	r3, r3, #4
 8008e8e:	4413      	add	r3, r2
 8008e90:	330c      	adds	r3, #12
 8008e92:	2200      	movs	r2, #0
 8008e94:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d009      	beq.n	8008eb0 <inc_lock+0xe0>
 8008e9c:	4a12      	ldr	r2, [pc, #72]	; (8008ee8 <inc_lock+0x118>)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	011b      	lsls	r3, r3, #4
 8008ea2:	4413      	add	r3, r2
 8008ea4:	330c      	adds	r3, #12
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <inc_lock+0xe0>
 8008eac:	2300      	movs	r3, #0
 8008eae:	e015      	b.n	8008edc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d108      	bne.n	8008ec8 <inc_lock+0xf8>
 8008eb6:	4a0c      	ldr	r2, [pc, #48]	; (8008ee8 <inc_lock+0x118>)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	011b      	lsls	r3, r3, #4
 8008ebc:	4413      	add	r3, r2
 8008ebe:	330c      	adds	r3, #12
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	e001      	b.n	8008ecc <inc_lock+0xfc>
 8008ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ecc:	4906      	ldr	r1, [pc, #24]	; (8008ee8 <inc_lock+0x118>)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	011b      	lsls	r3, r3, #4
 8008ed2:	440b      	add	r3, r1
 8008ed4:	330c      	adds	r3, #12
 8008ed6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3301      	adds	r3, #1
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	20005cd8 	.word	0x20005cd8

08008eec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	607b      	str	r3, [r7, #4]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d825      	bhi.n	8008f4c <dec_lock+0x60>
		n = Files[i].ctr;
 8008f00:	4a17      	ldr	r2, [pc, #92]	; (8008f60 <dec_lock+0x74>)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	4413      	add	r3, r2
 8008f08:	330c      	adds	r3, #12
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008f0e:	89fb      	ldrh	r3, [r7, #14]
 8008f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f14:	d101      	bne.n	8008f1a <dec_lock+0x2e>
 8008f16:	2300      	movs	r3, #0
 8008f18:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008f1a:	89fb      	ldrh	r3, [r7, #14]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d002      	beq.n	8008f26 <dec_lock+0x3a>
 8008f20:	89fb      	ldrh	r3, [r7, #14]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008f26:	4a0e      	ldr	r2, [pc, #56]	; (8008f60 <dec_lock+0x74>)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	4413      	add	r3, r2
 8008f2e:	330c      	adds	r3, #12
 8008f30:	89fa      	ldrh	r2, [r7, #14]
 8008f32:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008f34:	89fb      	ldrh	r3, [r7, #14]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d105      	bne.n	8008f46 <dec_lock+0x5a>
 8008f3a:	4a09      	ldr	r2, [pc, #36]	; (8008f60 <dec_lock+0x74>)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	011b      	lsls	r3, r3, #4
 8008f40:	4413      	add	r3, r2
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	737b      	strb	r3, [r7, #13]
 8008f4a:	e001      	b.n	8008f50 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008f50:	7b7b      	ldrb	r3, [r7, #13]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	20005cd8 	.word	0x20005cd8

08008f64 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60fb      	str	r3, [r7, #12]
 8008f70:	e010      	b.n	8008f94 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008f72:	4a0d      	ldr	r2, [pc, #52]	; (8008fa8 <clear_lock+0x44>)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	011b      	lsls	r3, r3, #4
 8008f78:	4413      	add	r3, r2
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d105      	bne.n	8008f8e <clear_lock+0x2a>
 8008f82:	4a09      	ldr	r2, [pc, #36]	; (8008fa8 <clear_lock+0x44>)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	4413      	add	r3, r2
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3301      	adds	r3, #1
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d9eb      	bls.n	8008f72 <clear_lock+0xe>
	}
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	20005cd8 	.word	0x20005cd8

08008fac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	78db      	ldrb	r3, [r3, #3]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d034      	beq.n	800902a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	7858      	ldrb	r0, [r3, #1]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	f7ff fd40 	bl	8008a58 <disk_write>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d002      	beq.n	8008fe4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	73fb      	strb	r3, [r7, #15]
 8008fe2:	e022      	b.n	800902a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	1ad2      	subs	r2, r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d217      	bcs.n	800902a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	789b      	ldrb	r3, [r3, #2]
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	e010      	b.n	8009024 <sync_window+0x78>
					wsect += fs->fsize;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	4413      	add	r3, r2
 800900a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	7858      	ldrb	r0, [r3, #1]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009016:	2301      	movs	r3, #1
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	f7ff fd1d 	bl	8008a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	3b01      	subs	r3, #1
 8009022:	613b      	str	r3, [r7, #16]
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d8eb      	bhi.n	8009002 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3718      	adds	r7, #24
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	429a      	cmp	r2, r3
 800904a:	d01b      	beq.n	8009084 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff ffad 	bl	8008fac <sync_window>
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d113      	bne.n	8009084 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	7858      	ldrb	r0, [r3, #1]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009066:	2301      	movs	r3, #1
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	f7ff fcd5 	bl	8008a18 <disk_read>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009078:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800907a:	2301      	movs	r3, #1
 800907c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009084:	7bfb      	ldrb	r3, [r7, #15]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff ff87 	bl	8008fac <sync_window>
 800909e:	4603      	mov	r3, r0
 80090a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d159      	bne.n	800915c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d149      	bne.n	8009144 <sync_fs+0xb4>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	791b      	ldrb	r3, [r3, #4]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d145      	bne.n	8009144 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	899b      	ldrh	r3, [r3, #12]
 80090c2:	461a      	mov	r2, r3
 80090c4:	2100      	movs	r1, #0
 80090c6:	f7ff fda8 	bl	8008c1a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3338      	adds	r3, #56	; 0x38
 80090ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80090d2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7ff fd37 	bl	8008b4a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3338      	adds	r3, #56	; 0x38
 80090e0:	4921      	ldr	r1, [pc, #132]	; (8009168 <sync_fs+0xd8>)
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff fd4c 	bl	8008b80 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3338      	adds	r3, #56	; 0x38
 80090ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80090f0:	491e      	ldr	r1, [pc, #120]	; (800916c <sync_fs+0xdc>)
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7ff fd44 	bl	8008b80 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	3338      	adds	r3, #56	; 0x38
 80090fc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	4619      	mov	r1, r3
 8009106:	4610      	mov	r0, r2
 8009108:	f7ff fd3a 	bl	8008b80 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	3338      	adds	r3, #56	; 0x38
 8009110:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f7ff fd30 	bl	8008b80 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	7858      	ldrb	r0, [r3, #1]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009138:	2301      	movs	r3, #1
 800913a:	f7ff fc8d 	bl	8008a58 <disk_write>
			fs->fsi_flag = 0;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	785b      	ldrb	r3, [r3, #1]
 8009148:	2200      	movs	r2, #0
 800914a:	2100      	movs	r1, #0
 800914c:	4618      	mov	r0, r3
 800914e:	f7ff fca3 	bl	8008a98 <disk_ioctl>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <sync_fs+0xcc>
 8009158:	2301      	movs	r3, #1
 800915a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800915c:	7bfb      	ldrb	r3, [r7, #15]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	41615252 	.word	0x41615252
 800916c:	61417272 	.word	0x61417272

08009170 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	3b02      	subs	r3, #2
 800917e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	3b02      	subs	r3, #2
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	429a      	cmp	r2, r3
 800918a:	d301      	bcc.n	8009190 <clust2sect+0x20>
 800918c:	2300      	movs	r3, #0
 800918e:	e008      	b.n	80091a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	895b      	ldrh	r3, [r3, #10]
 8009194:	461a      	mov	r2, r3
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	fb03 f202 	mul.w	r2, r3, r2
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a0:	4413      	add	r3, r2
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b086      	sub	sp, #24
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d904      	bls.n	80091ce <get_fat+0x20>
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	683a      	ldr	r2, [r7, #0]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d302      	bcc.n	80091d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80091ce:	2301      	movs	r3, #1
 80091d0:	617b      	str	r3, [r7, #20]
 80091d2:	e0bb      	b.n	800934c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80091d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	2b03      	cmp	r3, #3
 80091e0:	f000 8083 	beq.w	80092ea <get_fat+0x13c>
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	f300 80a7 	bgt.w	8009338 <get_fat+0x18a>
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d002      	beq.n	80091f4 <get_fat+0x46>
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d056      	beq.n	80092a0 <get_fat+0xf2>
 80091f2:	e0a1      	b.n	8009338 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	085b      	lsrs	r3, r3, #1
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	899b      	ldrh	r3, [r3, #12]
 800920a:	4619      	mov	r1, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009212:	4413      	add	r3, r2
 8009214:	4619      	mov	r1, r3
 8009216:	6938      	ldr	r0, [r7, #16]
 8009218:	f7ff ff0c 	bl	8009034 <move_window>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	f040 808d 	bne.w	800933e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	60fa      	str	r2, [r7, #12]
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	8992      	ldrh	r2, [r2, #12]
 800922e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009232:	fb01 f202 	mul.w	r2, r1, r2
 8009236:	1a9b      	subs	r3, r3, r2
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	4413      	add	r3, r2
 800923c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009240:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	899b      	ldrh	r3, [r3, #12]
 800924a:	4619      	mov	r1, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009252:	4413      	add	r3, r2
 8009254:	4619      	mov	r1, r3
 8009256:	6938      	ldr	r0, [r7, #16]
 8009258:	f7ff feec 	bl	8009034 <move_window>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d16f      	bne.n	8009342 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	899b      	ldrh	r3, [r3, #12]
 8009266:	461a      	mov	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	fbb3 f1f2 	udiv	r1, r3, r2
 800926e:	fb01 f202 	mul.w	r2, r1, r2
 8009272:	1a9b      	subs	r3, r3, r2
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	4413      	add	r3, r2
 8009278:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800927c:	021b      	lsls	r3, r3, #8
 800927e:	461a      	mov	r2, r3
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	4313      	orrs	r3, r2
 8009284:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <get_fat+0xe8>
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	091b      	lsrs	r3, r3, #4
 8009294:	e002      	b.n	800929c <get_fat+0xee>
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800929c:	617b      	str	r3, [r7, #20]
			break;
 800929e:	e055      	b.n	800934c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	899b      	ldrh	r3, [r3, #12]
 80092a8:	085b      	lsrs	r3, r3, #1
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	4619      	mov	r1, r3
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80092b4:	4413      	add	r3, r2
 80092b6:	4619      	mov	r1, r3
 80092b8:	6938      	ldr	r0, [r7, #16]
 80092ba:	f7ff febb 	bl	8009034 <move_window>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d140      	bne.n	8009346 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	8992      	ldrh	r2, [r2, #12]
 80092d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80092d6:	fb00 f202 	mul.w	r2, r0, r2
 80092da:	1a9b      	subs	r3, r3, r2
 80092dc:	440b      	add	r3, r1
 80092de:	4618      	mov	r0, r3
 80092e0:	f7ff fbf8 	bl	8008ad4 <ld_word>
 80092e4:	4603      	mov	r3, r0
 80092e6:	617b      	str	r3, [r7, #20]
			break;
 80092e8:	e030      	b.n	800934c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	899b      	ldrh	r3, [r3, #12]
 80092f2:	089b      	lsrs	r3, r3, #2
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	4619      	mov	r1, r3
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80092fe:	4413      	add	r3, r2
 8009300:	4619      	mov	r1, r3
 8009302:	6938      	ldr	r0, [r7, #16]
 8009304:	f7ff fe96 	bl	8009034 <move_window>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d11d      	bne.n	800934a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	8992      	ldrh	r2, [r2, #12]
 800931c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009320:	fb00 f202 	mul.w	r2, r0, r2
 8009324:	1a9b      	subs	r3, r3, r2
 8009326:	440b      	add	r3, r1
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff fbeb 	bl	8008b04 <ld_dword>
 800932e:	4603      	mov	r3, r0
 8009330:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009334:	617b      	str	r3, [r7, #20]
			break;
 8009336:	e009      	b.n	800934c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009338:	2301      	movs	r3, #1
 800933a:	617b      	str	r3, [r7, #20]
 800933c:	e006      	b.n	800934c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800933e:	bf00      	nop
 8009340:	e004      	b.n	800934c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009342:	bf00      	nop
 8009344:	e002      	b.n	800934c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009346:	bf00      	nop
 8009348:	e000      	b.n	800934c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800934a:	bf00      	nop
		}
	}

	return val;
 800934c:	697b      	ldr	r3, [r7, #20]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009356:	b590      	push	{r4, r7, lr}
 8009358:	b089      	sub	sp, #36	; 0x24
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009362:	2302      	movs	r3, #2
 8009364:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2b01      	cmp	r3, #1
 800936a:	f240 8109 	bls.w	8009580 <put_fat+0x22a>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	429a      	cmp	r2, r3
 8009376:	f080 8103 	bcs.w	8009580 <put_fat+0x22a>
		switch (fs->fs_type) {
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	2b03      	cmp	r3, #3
 8009380:	f000 80b6 	beq.w	80094f0 <put_fat+0x19a>
 8009384:	2b03      	cmp	r3, #3
 8009386:	f300 80fb 	bgt.w	8009580 <put_fat+0x22a>
 800938a:	2b01      	cmp	r3, #1
 800938c:	d003      	beq.n	8009396 <put_fat+0x40>
 800938e:	2b02      	cmp	r3, #2
 8009390:	f000 8083 	beq.w	800949a <put_fat+0x144>
 8009394:	e0f4      	b.n	8009580 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	61bb      	str	r3, [r7, #24]
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	085b      	lsrs	r3, r3, #1
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	4413      	add	r3, r2
 80093a2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	899b      	ldrh	r3, [r3, #12]
 80093ac:	4619      	mov	r1, r3
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80093b4:	4413      	add	r3, r2
 80093b6:	4619      	mov	r1, r3
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f7ff fe3b 	bl	8009034 <move_window>
 80093be:	4603      	mov	r3, r0
 80093c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093c2:	7ffb      	ldrb	r3, [r7, #31]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f040 80d4 	bne.w	8009572 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	1c5a      	adds	r2, r3, #1
 80093d4:	61ba      	str	r2, [r7, #24]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	8992      	ldrh	r2, [r2, #12]
 80093da:	fbb3 f0f2 	udiv	r0, r3, r2
 80093de:	fb00 f202 	mul.w	r2, r0, r2
 80093e2:	1a9b      	subs	r3, r3, r2
 80093e4:	440b      	add	r3, r1
 80093e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00d      	beq.n	800940e <put_fat+0xb8>
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	b25b      	sxtb	r3, r3
 80093f8:	f003 030f 	and.w	r3, r3, #15
 80093fc:	b25a      	sxtb	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	b2db      	uxtb	r3, r3
 8009402:	011b      	lsls	r3, r3, #4
 8009404:	b25b      	sxtb	r3, r3
 8009406:	4313      	orrs	r3, r2
 8009408:	b25b      	sxtb	r3, r3
 800940a:	b2db      	uxtb	r3, r3
 800940c:	e001      	b.n	8009412 <put_fat+0xbc>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	b2db      	uxtb	r3, r3
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2201      	movs	r2, #1
 800941a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	899b      	ldrh	r3, [r3, #12]
 8009424:	4619      	mov	r1, r3
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	fbb3 f3f1 	udiv	r3, r3, r1
 800942c:	4413      	add	r3, r2
 800942e:	4619      	mov	r1, r3
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f7ff fdff 	bl	8009034 <move_window>
 8009436:	4603      	mov	r3, r0
 8009438:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800943a:	7ffb      	ldrb	r3, [r7, #31]
 800943c:	2b00      	cmp	r3, #0
 800943e:	f040 809a 	bne.w	8009576 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	899b      	ldrh	r3, [r3, #12]
 800944c:	461a      	mov	r2, r3
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	fbb3 f0f2 	udiv	r0, r3, r2
 8009454:	fb00 f202 	mul.w	r2, r0, r2
 8009458:	1a9b      	subs	r3, r3, r2
 800945a:	440b      	add	r3, r1
 800945c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	2b00      	cmp	r3, #0
 8009466:	d003      	beq.n	8009470 <put_fat+0x11a>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	091b      	lsrs	r3, r3, #4
 800946c:	b2db      	uxtb	r3, r3
 800946e:	e00e      	b.n	800948e <put_fat+0x138>
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	b25b      	sxtb	r3, r3
 8009476:	f023 030f 	bic.w	r3, r3, #15
 800947a:	b25a      	sxtb	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	0a1b      	lsrs	r3, r3, #8
 8009480:	b25b      	sxtb	r3, r3
 8009482:	f003 030f 	and.w	r3, r3, #15
 8009486:	b25b      	sxtb	r3, r3
 8009488:	4313      	orrs	r3, r2
 800948a:	b25b      	sxtb	r3, r3
 800948c:	b2db      	uxtb	r3, r3
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2201      	movs	r2, #1
 8009496:	70da      	strb	r2, [r3, #3]
			break;
 8009498:	e072      	b.n	8009580 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	899b      	ldrh	r3, [r3, #12]
 80094a2:	085b      	lsrs	r3, r3, #1
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	4619      	mov	r1, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80094ae:	4413      	add	r3, r2
 80094b0:	4619      	mov	r1, r3
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f7ff fdbe 	bl	8009034 <move_window>
 80094b8:	4603      	mov	r3, r0
 80094ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094bc:	7ffb      	ldrb	r3, [r7, #31]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d15b      	bne.n	800957a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	005b      	lsls	r3, r3, #1
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	8992      	ldrh	r2, [r2, #12]
 80094d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80094d4:	fb00 f202 	mul.w	r2, r0, r2
 80094d8:	1a9b      	subs	r3, r3, r2
 80094da:	440b      	add	r3, r1
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	b292      	uxth	r2, r2
 80094e0:	4611      	mov	r1, r2
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7ff fb31 	bl	8008b4a <st_word>
			fs->wflag = 1;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2201      	movs	r2, #1
 80094ec:	70da      	strb	r2, [r3, #3]
			break;
 80094ee:	e047      	b.n	8009580 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	899b      	ldrh	r3, [r3, #12]
 80094f8:	089b      	lsrs	r3, r3, #2
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	4619      	mov	r1, r3
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	fbb3 f3f1 	udiv	r3, r3, r1
 8009504:	4413      	add	r3, r2
 8009506:	4619      	mov	r1, r3
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7ff fd93 	bl	8009034 <move_window>
 800950e:	4603      	mov	r3, r0
 8009510:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009512:	7ffb      	ldrb	r3, [r7, #31]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d132      	bne.n	800957e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	8992      	ldrh	r2, [r2, #12]
 800952c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009530:	fb00 f202 	mul.w	r2, r0, r2
 8009534:	1a9b      	subs	r3, r3, r2
 8009536:	440b      	add	r3, r1
 8009538:	4618      	mov	r0, r3
 800953a:	f7ff fae3 	bl	8008b04 <ld_dword>
 800953e:	4603      	mov	r3, r0
 8009540:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009544:	4323      	orrs	r3, r4
 8009546:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	8992      	ldrh	r2, [r2, #12]
 8009556:	fbb3 f0f2 	udiv	r0, r3, r2
 800955a:	fb00 f202 	mul.w	r2, r0, r2
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	440b      	add	r3, r1
 8009562:	6879      	ldr	r1, [r7, #4]
 8009564:	4618      	mov	r0, r3
 8009566:	f7ff fb0b 	bl	8008b80 <st_dword>
			fs->wflag = 1;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	70da      	strb	r2, [r3, #3]
			break;
 8009570:	e006      	b.n	8009580 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009572:	bf00      	nop
 8009574:	e004      	b.n	8009580 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009576:	bf00      	nop
 8009578:	e002      	b.n	8009580 <put_fat+0x22a>
			if (res != FR_OK) break;
 800957a:	bf00      	nop
 800957c:	e000      	b.n	8009580 <put_fat+0x22a>
			if (res != FR_OK) break;
 800957e:	bf00      	nop
		}
	}
	return res;
 8009580:	7ffb      	ldrb	r3, [r7, #31]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3724      	adds	r7, #36	; 0x24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd90      	pop	{r4, r7, pc}

0800958a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b088      	sub	sp, #32
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	60b9      	str	r1, [r7, #8]
 8009594:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d904      	bls.n	80095b0 <remove_chain+0x26>
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d301      	bcc.n	80095b4 <remove_chain+0x2a>
 80095b0:	2302      	movs	r3, #2
 80095b2:	e04b      	b.n	800964c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00c      	beq.n	80095d4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80095ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	69b8      	ldr	r0, [r7, #24]
 80095c2:	f7ff fec8 	bl	8009356 <put_fat>
 80095c6:	4603      	mov	r3, r0
 80095c8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80095ca:	7ffb      	ldrb	r3, [r7, #31]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <remove_chain+0x4a>
 80095d0:	7ffb      	ldrb	r3, [r7, #31]
 80095d2:	e03b      	b.n	800964c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80095d4:	68b9      	ldr	r1, [r7, #8]
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f7ff fde9 	bl	80091ae <get_fat>
 80095dc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d031      	beq.n	8009648 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d101      	bne.n	80095ee <remove_chain+0x64>
 80095ea:	2302      	movs	r3, #2
 80095ec:	e02e      	b.n	800964c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095f4:	d101      	bne.n	80095fa <remove_chain+0x70>
 80095f6:	2301      	movs	r3, #1
 80095f8:	e028      	b.n	800964c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80095fa:	2200      	movs	r2, #0
 80095fc:	68b9      	ldr	r1, [r7, #8]
 80095fe:	69b8      	ldr	r0, [r7, #24]
 8009600:	f7ff fea9 	bl	8009356 <put_fat>
 8009604:	4603      	mov	r3, r0
 8009606:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009608:	7ffb      	ldrb	r3, [r7, #31]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <remove_chain+0x88>
 800960e:	7ffb      	ldrb	r3, [r7, #31]
 8009610:	e01c      	b.n	800964c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	699a      	ldr	r2, [r3, #24]
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	3b02      	subs	r3, #2
 800961c:	429a      	cmp	r2, r3
 800961e:	d20b      	bcs.n	8009638 <remove_chain+0xae>
			fs->free_clst++;
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	791b      	ldrb	r3, [r3, #4]
 800962e:	f043 0301 	orr.w	r3, r3, #1
 8009632:	b2da      	uxtb	r2, r3
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	429a      	cmp	r2, r3
 8009644:	d3c6      	bcc.n	80095d4 <remove_chain+0x4a>
 8009646:	e000      	b.n	800964a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009648:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3720      	adds	r7, #32
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b088      	sub	sp, #32
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10d      	bne.n	8009686 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d004      	beq.n	8009680 <create_chain+0x2c>
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	429a      	cmp	r2, r3
 800967e:	d31b      	bcc.n	80096b8 <create_chain+0x64>
 8009680:	2301      	movs	r3, #1
 8009682:	61bb      	str	r3, [r7, #24]
 8009684:	e018      	b.n	80096b8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7ff fd90 	bl	80091ae <get_fat>
 800968e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d801      	bhi.n	800969a <create_chain+0x46>
 8009696:	2301      	movs	r3, #1
 8009698:	e070      	b.n	800977c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096a0:	d101      	bne.n	80096a6 <create_chain+0x52>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	e06a      	b.n	800977c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d201      	bcs.n	80096b4 <create_chain+0x60>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	e063      	b.n	800977c <create_chain+0x128>
		scl = clst;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	3301      	adds	r3, #1
 80096c0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d307      	bcc.n	80096dc <create_chain+0x88>
				ncl = 2;
 80096cc:	2302      	movs	r3, #2
 80096ce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80096d0:	69fa      	ldr	r2, [r7, #28]
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d901      	bls.n	80096dc <create_chain+0x88>
 80096d8:	2300      	movs	r3, #0
 80096da:	e04f      	b.n	800977c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80096dc:	69f9      	ldr	r1, [r7, #28]
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7ff fd65 	bl	80091ae <get_fat>
 80096e4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00e      	beq.n	800970a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d003      	beq.n	80096fa <create_chain+0xa6>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096f8:	d101      	bne.n	80096fe <create_chain+0xaa>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	e03e      	b.n	800977c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80096fe:	69fa      	ldr	r2, [r7, #28]
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	429a      	cmp	r2, r3
 8009704:	d1da      	bne.n	80096bc <create_chain+0x68>
 8009706:	2300      	movs	r3, #0
 8009708:	e038      	b.n	800977c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800970a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800970c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009710:	69f9      	ldr	r1, [r7, #28]
 8009712:	6938      	ldr	r0, [r7, #16]
 8009714:	f7ff fe1f 	bl	8009356 <put_fat>
 8009718:	4603      	mov	r3, r0
 800971a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800971c:	7dfb      	ldrb	r3, [r7, #23]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d109      	bne.n	8009736 <create_chain+0xe2>
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d006      	beq.n	8009736 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009728:	69fa      	ldr	r2, [r7, #28]
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6938      	ldr	r0, [r7, #16]
 800972e:	f7ff fe12 	bl	8009356 <put_fat>
 8009732:	4603      	mov	r3, r0
 8009734:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009736:	7dfb      	ldrb	r3, [r7, #23]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d116      	bne.n	800976a <create_chain+0x116>
		fs->last_clst = ncl;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	69fa      	ldr	r2, [r7, #28]
 8009740:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	699a      	ldr	r2, [r3, #24]
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	69db      	ldr	r3, [r3, #28]
 800974a:	3b02      	subs	r3, #2
 800974c:	429a      	cmp	r2, r3
 800974e:	d804      	bhi.n	800975a <create_chain+0x106>
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	1e5a      	subs	r2, r3, #1
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	791b      	ldrb	r3, [r3, #4]
 800975e:	f043 0301 	orr.w	r3, r3, #1
 8009762:	b2da      	uxtb	r2, r3
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	711a      	strb	r2, [r3, #4]
 8009768:	e007      	b.n	800977a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d102      	bne.n	8009776 <create_chain+0x122>
 8009770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009774:	e000      	b.n	8009778 <create_chain+0x124>
 8009776:	2301      	movs	r3, #1
 8009778:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800977a:	69fb      	ldr	r3, [r7, #28]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3720      	adds	r7, #32
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009798:	3304      	adds	r3, #4
 800979a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	899b      	ldrh	r3, [r3, #12]
 80097a0:	461a      	mov	r2, r3
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	8952      	ldrh	r2, [r2, #10]
 80097ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80097b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	1d1a      	adds	r2, r3, #4
 80097b6:	613a      	str	r2, [r7, #16]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <clmt_clust+0x42>
 80097c2:	2300      	movs	r3, #0
 80097c4:	e010      	b.n	80097e8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d307      	bcc.n	80097de <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	617b      	str	r3, [r7, #20]
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	3304      	adds	r3, #4
 80097da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80097dc:	e7e9      	b.n	80097b2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80097de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	4413      	add	r3, r2
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800980a:	d204      	bcs.n	8009816 <dir_sdi+0x22>
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	f003 031f 	and.w	r3, r3, #31
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <dir_sdi+0x26>
		return FR_INT_ERR;
 8009816:	2302      	movs	r3, #2
 8009818:	e071      	b.n	80098fe <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d106      	bne.n	800983a <dir_sdi+0x46>
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	2b02      	cmp	r3, #2
 8009832:	d902      	bls.n	800983a <dir_sdi+0x46>
		clst = fs->dirbase;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10c      	bne.n	800985a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	095b      	lsrs	r3, r3, #5
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	8912      	ldrh	r2, [r2, #8]
 8009848:	4293      	cmp	r3, r2
 800984a:	d301      	bcc.n	8009850 <dir_sdi+0x5c>
 800984c:	2302      	movs	r3, #2
 800984e:	e056      	b.n	80098fe <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	61da      	str	r2, [r3, #28]
 8009858:	e02d      	b.n	80098b6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	895b      	ldrh	r3, [r3, #10]
 800985e:	461a      	mov	r2, r3
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	899b      	ldrh	r3, [r3, #12]
 8009864:	fb02 f303 	mul.w	r3, r2, r3
 8009868:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800986a:	e019      	b.n	80098a0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6979      	ldr	r1, [r7, #20]
 8009870:	4618      	mov	r0, r3
 8009872:	f7ff fc9c 	bl	80091ae <get_fat>
 8009876:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800987e:	d101      	bne.n	8009884 <dir_sdi+0x90>
 8009880:	2301      	movs	r3, #1
 8009882:	e03c      	b.n	80098fe <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d904      	bls.n	8009894 <dir_sdi+0xa0>
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	429a      	cmp	r2, r3
 8009892:	d301      	bcc.n	8009898 <dir_sdi+0xa4>
 8009894:	2302      	movs	r3, #2
 8009896:	e032      	b.n	80098fe <dir_sdi+0x10a>
			ofs -= csz;
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d2e1      	bcs.n	800986c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80098a8:	6979      	ldr	r1, [r7, #20]
 80098aa:	6938      	ldr	r0, [r7, #16]
 80098ac:	f7ff fc60 	bl	8009170 <clust2sect>
 80098b0:	4602      	mov	r2, r0
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	69db      	ldr	r3, [r3, #28]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <dir_sdi+0xd4>
 80098c4:	2302      	movs	r3, #2
 80098c6:	e01a      	b.n	80098fe <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	69da      	ldr	r2, [r3, #28]
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	899b      	ldrh	r3, [r3, #12]
 80098d0:	4619      	mov	r1, r3
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80098d8:	441a      	add	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	899b      	ldrh	r3, [r3, #12]
 80098e8:	461a      	mov	r2, r3
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80098f0:	fb00 f202 	mul.w	r2, r0, r2
 80098f4:	1a9b      	subs	r3, r3, r2
 80098f6:	18ca      	adds	r2, r1, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b086      	sub	sp, #24
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	3320      	adds	r3, #32
 800991c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	69db      	ldr	r3, [r3, #28]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d003      	beq.n	800992e <dir_next+0x28>
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800992c:	d301      	bcc.n	8009932 <dir_next+0x2c>
 800992e:	2304      	movs	r3, #4
 8009930:	e0bb      	b.n	8009aaa <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	899b      	ldrh	r3, [r3, #12]
 8009936:	461a      	mov	r2, r3
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	fbb3 f1f2 	udiv	r1, r3, r2
 800993e:	fb01 f202 	mul.w	r2, r1, r2
 8009942:	1a9b      	subs	r3, r3, r2
 8009944:	2b00      	cmp	r3, #0
 8009946:	f040 809d 	bne.w	8009a84 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	69db      	ldr	r3, [r3, #28]
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10b      	bne.n	8009974 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	095b      	lsrs	r3, r3, #5
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	8912      	ldrh	r2, [r2, #8]
 8009964:	4293      	cmp	r3, r2
 8009966:	f0c0 808d 	bcc.w	8009a84 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	61da      	str	r2, [r3, #28]
 8009970:	2304      	movs	r3, #4
 8009972:	e09a      	b.n	8009aaa <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	899b      	ldrh	r3, [r3, #12]
 8009978:	461a      	mov	r2, r3
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	8952      	ldrh	r2, [r2, #10]
 8009984:	3a01      	subs	r2, #1
 8009986:	4013      	ands	r3, r2
 8009988:	2b00      	cmp	r3, #0
 800998a:	d17b      	bne.n	8009a84 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	4619      	mov	r1, r3
 8009994:	4610      	mov	r0, r2
 8009996:	f7ff fc0a 	bl	80091ae <get_fat>
 800999a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d801      	bhi.n	80099a6 <dir_next+0xa0>
 80099a2:	2302      	movs	r3, #2
 80099a4:	e081      	b.n	8009aaa <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099ac:	d101      	bne.n	80099b2 <dir_next+0xac>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e07b      	b.n	8009aaa <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d359      	bcc.n	8009a70 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d104      	bne.n	80099cc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	61da      	str	r2, [r3, #28]
 80099c8:	2304      	movs	r3, #4
 80099ca:	e06e      	b.n	8009aaa <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	4619      	mov	r1, r3
 80099d4:	4610      	mov	r0, r2
 80099d6:	f7ff fe3d 	bl	8009654 <create_chain>
 80099da:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <dir_next+0xe0>
 80099e2:	2307      	movs	r3, #7
 80099e4:	e061      	b.n	8009aaa <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d101      	bne.n	80099f0 <dir_next+0xea>
 80099ec:	2302      	movs	r3, #2
 80099ee:	e05c      	b.n	8009aaa <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099f6:	d101      	bne.n	80099fc <dir_next+0xf6>
 80099f8:	2301      	movs	r3, #1
 80099fa:	e056      	b.n	8009aaa <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f7ff fad5 	bl	8008fac <sync_window>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <dir_next+0x106>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e04e      	b.n	8009aaa <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	899b      	ldrh	r3, [r3, #12]
 8009a16:	461a      	mov	r2, r3
 8009a18:	2100      	movs	r1, #0
 8009a1a:	f7ff f8fe 	bl	8008c1a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009a1e:	2300      	movs	r3, #0
 8009a20:	613b      	str	r3, [r7, #16]
 8009a22:	6979      	ldr	r1, [r7, #20]
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f7ff fba3 	bl	8009170 <clust2sect>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	635a      	str	r2, [r3, #52]	; 0x34
 8009a30:	e012      	b.n	8009a58 <dir_next+0x152>
						fs->wflag = 1;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2201      	movs	r2, #1
 8009a36:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f7ff fab7 	bl	8008fac <sync_window>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <dir_next+0x142>
 8009a44:	2301      	movs	r3, #1
 8009a46:	e030      	b.n	8009aaa <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	613b      	str	r3, [r7, #16]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	635a      	str	r2, [r3, #52]	; 0x34
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	895b      	ldrh	r3, [r3, #10]
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d3e6      	bcc.n	8009a32 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	1ad2      	subs	r2, r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009a76:	6979      	ldr	r1, [r7, #20]
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f7ff fb79 	bl	8009170 <clust2sect>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	899b      	ldrh	r3, [r3, #12]
 8009a94:	461a      	mov	r2, r3
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a9c:	fb00 f202 	mul.w	r2, r0, r2
 8009aa0:	1a9b      	subs	r3, r3, r2
 8009aa2:	18ca      	adds	r2, r1, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3718      	adds	r7, #24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b086      	sub	sp, #24
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff fe95 	bl	80097f4 <dir_sdi>
 8009aca:	4603      	mov	r3, r0
 8009acc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d12b      	bne.n	8009b2c <dir_alloc+0x7a>
		n = 0;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	4619      	mov	r1, r3
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f7ff faa8 	bl	8009034 <move_window>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d11d      	bne.n	8009b2a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2be5      	cmp	r3, #229	; 0xe5
 8009af6:	d004      	beq.n	8009b02 <dir_alloc+0x50>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a1b      	ldr	r3, [r3, #32]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d107      	bne.n	8009b12 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	3301      	adds	r3, #1
 8009b06:	613b      	str	r3, [r7, #16]
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d102      	bne.n	8009b16 <dir_alloc+0x64>
 8009b10:	e00c      	b.n	8009b2c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009b12:	2300      	movs	r3, #0
 8009b14:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009b16:	2101      	movs	r1, #1
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff fef4 	bl	8009906 <dir_next>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0d7      	beq.n	8009ad8 <dir_alloc+0x26>
 8009b28:	e000      	b.n	8009b2c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009b2a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009b2c:	7dfb      	ldrb	r3, [r7, #23]
 8009b2e:	2b04      	cmp	r3, #4
 8009b30:	d101      	bne.n	8009b36 <dir_alloc+0x84>
 8009b32:	2307      	movs	r3, #7
 8009b34:	75fb      	strb	r3, [r7, #23]
	return res;
 8009b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3718      	adds	r7, #24
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	331a      	adds	r3, #26
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe ffc0 	bl	8008ad4 <ld_word>
 8009b54:	4603      	mov	r3, r0
 8009b56:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2b03      	cmp	r3, #3
 8009b5e:	d109      	bne.n	8009b74 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	3314      	adds	r3, #20
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fe ffb5 	bl	8008ad4 <ld_word>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	041b      	lsls	r3, r3, #16
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009b74:	68fb      	ldr	r3, [r7, #12]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b084      	sub	sp, #16
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	60f8      	str	r0, [r7, #12]
 8009b86:	60b9      	str	r1, [r7, #8]
 8009b88:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	331a      	adds	r3, #26
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	b292      	uxth	r2, r2
 8009b92:	4611      	mov	r1, r2
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7fe ffd8 	bl	8008b4a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d109      	bne.n	8009bb6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	f103 0214 	add.w	r2, r3, #20
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	0c1b      	lsrs	r3, r3, #16
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	4619      	mov	r1, r3
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	f7fe ffca 	bl	8008b4a <st_word>
	}
}
 8009bb6:	bf00      	nop
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
	...

08009bc0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009bc0:	b590      	push	{r4, r7, lr}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	331a      	adds	r3, #26
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fe ff80 	bl	8008ad4 <ld_word>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d001      	beq.n	8009bde <cmp_lfn+0x1e>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e059      	b.n	8009c92 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009be6:	1e5a      	subs	r2, r3, #1
 8009be8:	4613      	mov	r3, r2
 8009bea:	005b      	lsls	r3, r3, #1
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	81fb      	strh	r3, [r7, #14]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	613b      	str	r3, [r7, #16]
 8009bfc:	e033      	b.n	8009c66 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009bfe:	4a27      	ldr	r2, [pc, #156]	; (8009c9c <cmp_lfn+0xdc>)
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	4413      	add	r3, r2
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fe ff61 	bl	8008ad4 <ld_word>
 8009c12:	4603      	mov	r3, r0
 8009c14:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009c16:	89fb      	ldrh	r3, [r7, #14]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d01a      	beq.n	8009c52 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2bfe      	cmp	r3, #254	; 0xfe
 8009c20:	d812      	bhi.n	8009c48 <cmp_lfn+0x88>
 8009c22:	89bb      	ldrh	r3, [r7, #12]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f001 ff89 	bl	800bb3c <ff_wtoupper>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	461c      	mov	r4, r3
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	1c5a      	adds	r2, r3, #1
 8009c32:	617a      	str	r2, [r7, #20]
 8009c34:	005b      	lsls	r3, r3, #1
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	4413      	add	r3, r2
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f001 ff7d 	bl	800bb3c <ff_wtoupper>
 8009c42:	4603      	mov	r3, r0
 8009c44:	429c      	cmp	r4, r3
 8009c46:	d001      	beq.n	8009c4c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009c48:	2300      	movs	r3, #0
 8009c4a:	e022      	b.n	8009c92 <cmp_lfn+0xd2>
			}
			wc = uc;
 8009c4c:	89bb      	ldrh	r3, [r7, #12]
 8009c4e:	81fb      	strh	r3, [r7, #14]
 8009c50:	e006      	b.n	8009c60 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009c52:	89bb      	ldrh	r3, [r7, #12]
 8009c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d001      	beq.n	8009c60 <cmp_lfn+0xa0>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	e018      	b.n	8009c92 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	3301      	adds	r3, #1
 8009c64:	613b      	str	r3, [r7, #16]
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2b0c      	cmp	r3, #12
 8009c6a:	d9c8      	bls.n	8009bfe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00b      	beq.n	8009c90 <cmp_lfn+0xd0>
 8009c78:	89fb      	ldrh	r3, [r7, #14]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d008      	beq.n	8009c90 <cmp_lfn+0xd0>
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	005b      	lsls	r3, r3, #1
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	4413      	add	r3, r2
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <cmp_lfn+0xd0>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	e000      	b.n	8009c92 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009c90:	2301      	movs	r3, #1
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	371c      	adds	r7, #28
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd90      	pop	{r4, r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	0800cec4 	.word	0x0800cec4

08009ca0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b088      	sub	sp, #32
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	4611      	mov	r1, r2
 8009cac:	461a      	mov	r2, r3
 8009cae:	460b      	mov	r3, r1
 8009cb0:	71fb      	strb	r3, [r7, #7]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	330d      	adds	r3, #13
 8009cba:	79ba      	ldrb	r2, [r7, #6]
 8009cbc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	330b      	adds	r3, #11
 8009cc2:	220f      	movs	r2, #15
 8009cc4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	330c      	adds	r3, #12
 8009cca:	2200      	movs	r2, #0
 8009ccc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	331a      	adds	r3, #26
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fe ff38 	bl	8008b4a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009cda:	79fb      	ldrb	r3, [r7, #7]
 8009cdc:	1e5a      	subs	r2, r3, #1
 8009cde:	4613      	mov	r3, r2
 8009ce0:	005b      	lsls	r3, r3, #1
 8009ce2:	4413      	add	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009cea:	2300      	movs	r3, #0
 8009cec:	82fb      	strh	r3, [r7, #22]
 8009cee:	2300      	movs	r3, #0
 8009cf0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009cf2:	8afb      	ldrh	r3, [r7, #22]
 8009cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d007      	beq.n	8009d0c <put_lfn+0x6c>
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	61fa      	str	r2, [r7, #28]
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	4413      	add	r3, r2
 8009d08:	881b      	ldrh	r3, [r3, #0]
 8009d0a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009d0c:	4a17      	ldr	r2, [pc, #92]	; (8009d6c <put_lfn+0xcc>)
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	4413      	add	r3, r2
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4413      	add	r3, r2
 8009d1a:	8afa      	ldrh	r2, [r7, #22]
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe ff13 	bl	8008b4a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009d24:	8afb      	ldrh	r3, [r7, #22]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d102      	bne.n	8009d30 <put_lfn+0x90>
 8009d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d2e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	3301      	adds	r3, #1
 8009d34:	61bb      	str	r3, [r7, #24]
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	2b0c      	cmp	r3, #12
 8009d3a:	d9da      	bls.n	8009cf2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009d3c:	8afb      	ldrh	r3, [r7, #22]
 8009d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d006      	beq.n	8009d54 <put_lfn+0xb4>
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	005b      	lsls	r3, r3, #1
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	881b      	ldrh	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d103      	bne.n	8009d5c <put_lfn+0xbc>
 8009d54:	79fb      	ldrb	r3, [r7, #7]
 8009d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d5a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	79fa      	ldrb	r2, [r7, #7]
 8009d60:	701a      	strb	r2, [r3, #0]
}
 8009d62:	bf00      	nop
 8009d64:	3720      	adds	r7, #32
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	0800cec4 	.word	0x0800cec4

08009d70 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08c      	sub	sp, #48	; 0x30
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009d7e:	220b      	movs	r2, #11
 8009d80:	68b9      	ldr	r1, [r7, #8]
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7fe ff28 	bl	8008bd8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b05      	cmp	r3, #5
 8009d8c:	d92b      	bls.n	8009de6 <gen_numname+0x76>
		sr = seq;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009d92:	e022      	b.n	8009dda <gen_numname+0x6a>
			wc = *lfn++;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	1c9a      	adds	r2, r3, #2
 8009d98:	607a      	str	r2, [r7, #4]
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009d9e:	2300      	movs	r3, #0
 8009da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009da2:	e017      	b.n	8009dd4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	005a      	lsls	r2, r3, #1
 8009da8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	4413      	add	r3, r2
 8009db0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009db2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009db4:	085b      	lsrs	r3, r3, #1
 8009db6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d005      	beq.n	8009dce <gen_numname+0x5e>
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009dc8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009dcc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd6:	2b0f      	cmp	r3, #15
 8009dd8:	d9e4      	bls.n	8009da4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1d8      	bne.n	8009d94 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009de6:	2307      	movs	r3, #7
 8009de8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	f003 030f 	and.w	r3, r3, #15
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	3330      	adds	r3, #48	; 0x30
 8009df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dfe:	2b39      	cmp	r3, #57	; 0x39
 8009e00:	d904      	bls.n	8009e0c <gen_numname+0x9c>
 8009e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e06:	3307      	adds	r3, #7
 8009e08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	1e5a      	subs	r2, r3, #1
 8009e10:	62ba      	str	r2, [r7, #40]	; 0x28
 8009e12:	3330      	adds	r3, #48	; 0x30
 8009e14:	443b      	add	r3, r7
 8009e16:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009e1a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	091b      	lsrs	r3, r3, #4
 8009e22:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1df      	bne.n	8009dea <gen_numname+0x7a>
	ns[i] = '~';
 8009e2a:	f107 0214 	add.w	r2, r7, #20
 8009e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e30:	4413      	add	r3, r2
 8009e32:	227e      	movs	r2, #126	; 0x7e
 8009e34:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009e36:	2300      	movs	r3, #0
 8009e38:	627b      	str	r3, [r7, #36]	; 0x24
 8009e3a:	e002      	b.n	8009e42 <gen_numname+0xd2>
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	3301      	adds	r3, #1
 8009e40:	627b      	str	r3, [r7, #36]	; 0x24
 8009e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d205      	bcs.n	8009e56 <gen_numname+0xe6>
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	4413      	add	r3, r2
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	2b20      	cmp	r3, #32
 8009e54:	d1f2      	bne.n	8009e3c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e58:	2b07      	cmp	r3, #7
 8009e5a:	d807      	bhi.n	8009e6c <gen_numname+0xfc>
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	1c5a      	adds	r2, r3, #1
 8009e60:	62ba      	str	r2, [r7, #40]	; 0x28
 8009e62:	3330      	adds	r3, #48	; 0x30
 8009e64:	443b      	add	r3, r7
 8009e66:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009e6a:	e000      	b.n	8009e6e <gen_numname+0xfe>
 8009e6c:	2120      	movs	r1, #32
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	1c5a      	adds	r2, r3, #1
 8009e72:	627a      	str	r2, [r7, #36]	; 0x24
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	4413      	add	r3, r2
 8009e78:	460a      	mov	r2, r1
 8009e7a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	2b07      	cmp	r3, #7
 8009e80:	d9e9      	bls.n	8009e56 <gen_numname+0xe6>
}
 8009e82:	bf00      	nop
 8009e84:	bf00      	nop
 8009e86:	3730      	adds	r7, #48	; 0x30
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009e94:	2300      	movs	r3, #0
 8009e96:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009e98:	230b      	movs	r3, #11
 8009e9a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	0852      	lsrs	r2, r2, #1
 8009ea2:	01db      	lsls	r3, r3, #7
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	1c59      	adds	r1, r3, #1
 8009eac:	6079      	str	r1, [r7, #4]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	60bb      	str	r3, [r7, #8]
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1ed      	bne.n	8009e9c <sum_sfn+0x10>
	return sum;
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b086      	sub	sp, #24
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009edc:	2100      	movs	r1, #0
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff fc88 	bl	80097f4 <dir_sdi>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <dir_find+0x24>
 8009eee:	7dfb      	ldrb	r3, [r7, #23]
 8009ef0:	e0a9      	b.n	800a046 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009ef2:	23ff      	movs	r3, #255	; 0xff
 8009ef4:	753b      	strb	r3, [r7, #20]
 8009ef6:	7d3b      	ldrb	r3, [r7, #20]
 8009ef8:	757b      	strb	r3, [r7, #21]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f00:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	69db      	ldr	r3, [r3, #28]
 8009f06:	4619      	mov	r1, r3
 8009f08:	6938      	ldr	r0, [r7, #16]
 8009f0a:	f7ff f893 	bl	8009034 <move_window>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f040 8090 	bne.w	800a03a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009f22:	7dbb      	ldrb	r3, [r7, #22]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d102      	bne.n	8009f2e <dir_find+0x60>
 8009f28:	2304      	movs	r3, #4
 8009f2a:	75fb      	strb	r3, [r7, #23]
 8009f2c:	e08a      	b.n	800a044 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	330b      	adds	r3, #11
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f3a:	73fb      	strb	r3, [r7, #15]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	7bfa      	ldrb	r2, [r7, #15]
 8009f40:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009f42:	7dbb      	ldrb	r3, [r7, #22]
 8009f44:	2be5      	cmp	r3, #229	; 0xe5
 8009f46:	d007      	beq.n	8009f58 <dir_find+0x8a>
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	f003 0308 	and.w	r3, r3, #8
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d009      	beq.n	8009f66 <dir_find+0x98>
 8009f52:	7bfb      	ldrb	r3, [r7, #15]
 8009f54:	2b0f      	cmp	r3, #15
 8009f56:	d006      	beq.n	8009f66 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009f58:	23ff      	movs	r3, #255	; 0xff
 8009f5a:	757b      	strb	r3, [r7, #21]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f62:	631a      	str	r2, [r3, #48]	; 0x30
 8009f64:	e05e      	b.n	800a024 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	2b0f      	cmp	r3, #15
 8009f6a:	d136      	bne.n	8009fda <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d154      	bne.n	800a024 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009f7a:	7dbb      	ldrb	r3, [r7, #22]
 8009f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00d      	beq.n	8009fa0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	7b5b      	ldrb	r3, [r3, #13]
 8009f8a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009f8c:	7dbb      	ldrb	r3, [r7, #22]
 8009f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f92:	75bb      	strb	r3, [r7, #22]
 8009f94:	7dbb      	ldrb	r3, [r7, #22]
 8009f96:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	695a      	ldr	r2, [r3, #20]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009fa0:	7dba      	ldrb	r2, [r7, #22]
 8009fa2:	7d7b      	ldrb	r3, [r7, #21]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d115      	bne.n	8009fd4 <dir_find+0x106>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	330d      	adds	r3, #13
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	7d3a      	ldrb	r2, [r7, #20]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d10e      	bne.n	8009fd4 <dir_find+0x106>
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	691a      	ldr	r2, [r3, #16]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	f7ff fdfd 	bl	8009bc0 <cmp_lfn>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d003      	beq.n	8009fd4 <dir_find+0x106>
 8009fcc:	7d7b      	ldrb	r3, [r7, #21]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	e000      	b.n	8009fd6 <dir_find+0x108>
 8009fd4:	23ff      	movs	r3, #255	; 0xff
 8009fd6:	757b      	strb	r3, [r7, #21]
 8009fd8:	e024      	b.n	800a024 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009fda:	7d7b      	ldrb	r3, [r7, #21]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d109      	bne.n	8009ff4 <dir_find+0x126>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7ff ff51 	bl	8009e8c <sum_sfn>
 8009fea:	4603      	mov	r3, r0
 8009fec:	461a      	mov	r2, r3
 8009fee:	7d3b      	ldrb	r3, [r7, #20]
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d024      	beq.n	800a03e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <dir_find+0x14a>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a18      	ldr	r0, [r3, #32]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	3324      	adds	r3, #36	; 0x24
 800a00a:	220b      	movs	r2, #11
 800a00c:	4619      	mov	r1, r3
 800a00e:	f7fe fe1f 	bl	8008c50 <mem_cmp>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d014      	beq.n	800a042 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a018:	23ff      	movs	r3, #255	; 0xff
 800a01a:	757b      	strb	r3, [r7, #21]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a022:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a024:	2100      	movs	r1, #0
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7ff fc6d 	bl	8009906 <dir_next>
 800a02c:	4603      	mov	r3, r0
 800a02e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	2b00      	cmp	r3, #0
 800a034:	f43f af65 	beq.w	8009f02 <dir_find+0x34>
 800a038:	e004      	b.n	800a044 <dir_find+0x176>
		if (res != FR_OK) break;
 800a03a:	bf00      	nop
 800a03c:	e002      	b.n	800a044 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a03e:	bf00      	nop
 800a040:	e000      	b.n	800a044 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a042:	bf00      	nop

	return res;
 800a044:	7dfb      	ldrb	r3, [r7, #23]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
	...

0800a050 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08c      	sub	sp, #48	; 0x30
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a064:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <dir_register+0x20>
 800a06c:	2306      	movs	r3, #6
 800a06e:	e0e0      	b.n	800a232 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a070:	2300      	movs	r3, #0
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
 800a074:	e002      	b.n	800a07c <dir_register+0x2c>
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	3301      	adds	r3, #1
 800a07a:	627b      	str	r3, [r7, #36]	; 0x24
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	691a      	ldr	r2, [r3, #16]
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	4413      	add	r3, r2
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1f4      	bne.n	800a076 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a092:	f107 030c 	add.w	r3, r7, #12
 800a096:	220c      	movs	r2, #12
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fe fd9d 	bl	8008bd8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a09e:	7dfb      	ldrb	r3, [r7, #23]
 800a0a0:	f003 0301 	and.w	r3, r3, #1
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d032      	beq.n	800a10e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2240      	movs	r2, #64	; 0x40
 800a0ac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0b4:	e016      	b.n	800a0e4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	691a      	ldr	r2, [r3, #16]
 800a0c0:	f107 010c 	add.w	r1, r7, #12
 800a0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c6:	f7ff fe53 	bl	8009d70 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff feff 	bl	8009ece <dir_find>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a0d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d106      	bne.n	800a0ec <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e6:	2b63      	cmp	r3, #99	; 0x63
 800a0e8:	d9e5      	bls.n	800a0b6 <dir_register+0x66>
 800a0ea:	e000      	b.n	800a0ee <dir_register+0x9e>
			if (res != FR_OK) break;
 800a0ec:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f0:	2b64      	cmp	r3, #100	; 0x64
 800a0f2:	d101      	bne.n	800a0f8 <dir_register+0xa8>
 800a0f4:	2307      	movs	r3, #7
 800a0f6:	e09c      	b.n	800a232 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a0f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0fc:	2b04      	cmp	r3, #4
 800a0fe:	d002      	beq.n	800a106 <dir_register+0xb6>
 800a100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a104:	e095      	b.n	800a232 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a106:	7dfa      	ldrb	r2, [r7, #23]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
 800a110:	f003 0302 	and.w	r3, r3, #2
 800a114:	2b00      	cmp	r3, #0
 800a116:	d007      	beq.n	800a128 <dir_register+0xd8>
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	330c      	adds	r3, #12
 800a11c:	4a47      	ldr	r2, [pc, #284]	; (800a23c <dir_register+0x1ec>)
 800a11e:	fba2 2303 	umull	r2, r3, r2, r3
 800a122:	089b      	lsrs	r3, r3, #2
 800a124:	3301      	adds	r3, #1
 800a126:	e000      	b.n	800a12a <dir_register+0xda>
 800a128:	2301      	movs	r3, #1
 800a12a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a12c:	6a39      	ldr	r1, [r7, #32]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7ff fcbf 	bl	8009ab2 <dir_alloc>
 800a134:	4603      	mov	r3, r0
 800a136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a13a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d148      	bne.n	800a1d4 <dir_register+0x184>
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	3b01      	subs	r3, #1
 800a146:	623b      	str	r3, [r7, #32]
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d042      	beq.n	800a1d4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	695a      	ldr	r2, [r3, #20]
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	015b      	lsls	r3, r3, #5
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	4619      	mov	r1, r3
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f7ff fb4a 	bl	80097f4 <dir_sdi>
 800a160:	4603      	mov	r3, r0
 800a162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d132      	bne.n	800a1d4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	3324      	adds	r3, #36	; 0x24
 800a172:	4618      	mov	r0, r3
 800a174:	f7ff fe8a 	bl	8009e8c <sum_sfn>
 800a178:	4603      	mov	r3, r0
 800a17a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	69db      	ldr	r3, [r3, #28]
 800a180:	4619      	mov	r1, r3
 800a182:	69f8      	ldr	r0, [r7, #28]
 800a184:	f7fe ff56 	bl	8009034 <move_window>
 800a188:	4603      	mov	r3, r0
 800a18a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a18e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a192:	2b00      	cmp	r3, #0
 800a194:	d11d      	bne.n	800a1d2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	6918      	ldr	r0, [r3, #16]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a19      	ldr	r1, [r3, #32]
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	7efb      	ldrb	r3, [r7, #27]
 800a1a4:	f7ff fd7c 	bl	8009ca0 <put_lfn>
				fs->wflag = 1;
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff fba8 	bl	8009906 <dir_next>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a1bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d107      	bne.n	800a1d4 <dir_register+0x184>
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	623b      	str	r3, [r7, #32]
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1d5      	bne.n	800a17c <dir_register+0x12c>
 800a1d0:	e000      	b.n	800a1d4 <dir_register+0x184>
				if (res != FR_OK) break;
 800a1d2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a1d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d128      	bne.n	800a22e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	69db      	ldr	r3, [r3, #28]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	69f8      	ldr	r0, [r7, #28]
 800a1e4:	f7fe ff26 	bl	8009034 <move_window>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a1ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d11b      	bne.n	800a22e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fe fd0b 	bl	8008c1a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a18      	ldr	r0, [r3, #32]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3324      	adds	r3, #36	; 0x24
 800a20c:	220b      	movs	r2, #11
 800a20e:	4619      	mov	r1, r3
 800a210:	f7fe fce2 	bl	8008bd8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	330c      	adds	r3, #12
 800a220:	f002 0218 	and.w	r2, r2, #24
 800a224:	b2d2      	uxtb	r2, r2
 800a226:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	2201      	movs	r2, #1
 800a22c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a22e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a232:	4618      	mov	r0, r3
 800a234:	3730      	adds	r7, #48	; 0x30
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	4ec4ec4f 	.word	0x4ec4ec4f

0800a240 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08a      	sub	sp, #40	; 0x28
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	613b      	str	r3, [r7, #16]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	60fb      	str	r3, [r7, #12]
 800a258:	2300      	movs	r3, #0
 800a25a:	617b      	str	r3, [r7, #20]
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	61ba      	str	r2, [r7, #24]
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	4413      	add	r3, r2
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a26e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a270:	2b1f      	cmp	r3, #31
 800a272:	d940      	bls.n	800a2f6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a276:	2b2f      	cmp	r3, #47	; 0x2f
 800a278:	d006      	beq.n	800a288 <create_name+0x48>
 800a27a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a27c:	2b5c      	cmp	r3, #92	; 0x5c
 800a27e:	d110      	bne.n	800a2a2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a280:	e002      	b.n	800a288 <create_name+0x48>
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	3301      	adds	r3, #1
 800a286:	61bb      	str	r3, [r7, #24]
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	4413      	add	r3, r2
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	2b2f      	cmp	r3, #47	; 0x2f
 800a292:	d0f6      	beq.n	800a282 <create_name+0x42>
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	4413      	add	r3, r2
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	2b5c      	cmp	r3, #92	; 0x5c
 800a29e:	d0f0      	beq.n	800a282 <create_name+0x42>
			break;
 800a2a0:	e02a      	b.n	800a2f8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	2bfe      	cmp	r3, #254	; 0xfe
 800a2a6:	d901      	bls.n	800a2ac <create_name+0x6c>
 800a2a8:	2306      	movs	r3, #6
 800a2aa:	e17d      	b.n	800a5a8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a2ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a2b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f001 fc04 	bl	800bac4 <ff_convert>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a2c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <create_name+0x8a>
 800a2c6:	2306      	movs	r3, #6
 800a2c8:	e16e      	b.n	800a5a8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a2ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2cc:	2b7f      	cmp	r3, #127	; 0x7f
 800a2ce:	d809      	bhi.n	800a2e4 <create_name+0xa4>
 800a2d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	488d      	ldr	r0, [pc, #564]	; (800a50c <create_name+0x2cc>)
 800a2d6:	f7fe fce2 	bl	8008c9e <chk_chr>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <create_name+0xa4>
 800a2e0:	2306      	movs	r3, #6
 800a2e2:	e161      	b.n	800a5a8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	1c5a      	adds	r2, r3, #1
 800a2e8:	617a      	str	r2, [r7, #20]
 800a2ea:	005b      	lsls	r3, r3, #1
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a2f2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a2f4:	e7b4      	b.n	800a260 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a2f6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	441a      	add	r2, r3
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a304:	2b1f      	cmp	r3, #31
 800a306:	d801      	bhi.n	800a30c <create_name+0xcc>
 800a308:	2304      	movs	r3, #4
 800a30a:	e000      	b.n	800a30e <create_name+0xce>
 800a30c:	2300      	movs	r3, #0
 800a30e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a312:	e011      	b.n	800a338 <create_name+0xf8>
		w = lfn[di - 1];
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a31a:	3b01      	subs	r3, #1
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	4413      	add	r3, r2
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a328:	2b20      	cmp	r3, #32
 800a32a:	d002      	beq.n	800a332 <create_name+0xf2>
 800a32c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a32e:	2b2e      	cmp	r3, #46	; 0x2e
 800a330:	d106      	bne.n	800a340 <create_name+0x100>
		di--;
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	3b01      	subs	r3, #1
 800a336:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1ea      	bne.n	800a314 <create_name+0xd4>
 800a33e:	e000      	b.n	800a342 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a340:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	4413      	add	r3, r2
 800a34a:	2200      	movs	r2, #0
 800a34c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <create_name+0x118>
 800a354:	2306      	movs	r3, #6
 800a356:	e127      	b.n	800a5a8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	3324      	adds	r3, #36	; 0x24
 800a35c:	220b      	movs	r2, #11
 800a35e:	2120      	movs	r1, #32
 800a360:	4618      	mov	r0, r3
 800a362:	f7fe fc5a 	bl	8008c1a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a366:	2300      	movs	r3, #0
 800a368:	61bb      	str	r3, [r7, #24]
 800a36a:	e002      	b.n	800a372 <create_name+0x132>
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	3301      	adds	r3, #1
 800a370:	61bb      	str	r3, [r7, #24]
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	4413      	add	r3, r2
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	2b20      	cmp	r3, #32
 800a37e:	d0f5      	beq.n	800a36c <create_name+0x12c>
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	4413      	add	r3, r2
 800a388:	881b      	ldrh	r3, [r3, #0]
 800a38a:	2b2e      	cmp	r3, #46	; 0x2e
 800a38c:	d0ee      	beq.n	800a36c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d009      	beq.n	800a3a8 <create_name+0x168>
 800a394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a398:	f043 0303 	orr.w	r3, r3, #3
 800a39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a3a0:	e002      	b.n	800a3a8 <create_name+0x168>
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	617b      	str	r3, [r7, #20]
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d009      	beq.n	800a3c2 <create_name+0x182>
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	005b      	lsls	r3, r3, #1
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	2b2e      	cmp	r3, #46	; 0x2e
 800a3c0:	d1ef      	bne.n	800a3a2 <create_name+0x162>

	i = b = 0; ni = 8;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	623b      	str	r3, [r7, #32]
 800a3cc:	2308      	movs	r3, #8
 800a3ce:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	61ba      	str	r2, [r7, #24]
 800a3d6:	005b      	lsls	r3, r3, #1
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	4413      	add	r3, r2
 800a3dc:	881b      	ldrh	r3, [r3, #0]
 800a3de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a3e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 8090 	beq.w	800a508 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a3e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3ea:	2b20      	cmp	r3, #32
 800a3ec:	d006      	beq.n	800a3fc <create_name+0x1bc>
 800a3ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a3f2:	d10a      	bne.n	800a40a <create_name+0x1ca>
 800a3f4:	69ba      	ldr	r2, [r7, #24]
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d006      	beq.n	800a40a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a3fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a400:	f043 0303 	orr.w	r3, r3, #3
 800a404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a408:	e07d      	b.n	800a506 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a40a:	6a3a      	ldr	r2, [r7, #32]
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d203      	bcs.n	800a41a <create_name+0x1da>
 800a412:	69ba      	ldr	r2, [r7, #24]
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	429a      	cmp	r2, r3
 800a418:	d123      	bne.n	800a462 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	2b0b      	cmp	r3, #11
 800a41e:	d106      	bne.n	800a42e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a424:	f043 0303 	orr.w	r3, r3, #3
 800a428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a42c:	e075      	b.n	800a51a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	429a      	cmp	r2, r3
 800a434:	d005      	beq.n	800a442 <create_name+0x202>
 800a436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a43a:	f043 0303 	orr.w	r3, r3, #3
 800a43e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a442:	69ba      	ldr	r2, [r7, #24]
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	429a      	cmp	r2, r3
 800a448:	d866      	bhi.n	800a518 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	61bb      	str	r3, [r7, #24]
 800a44e:	2308      	movs	r3, #8
 800a450:	623b      	str	r3, [r7, #32]
 800a452:	230b      	movs	r3, #11
 800a454:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a456:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a460:	e051      	b.n	800a506 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a464:	2b7f      	cmp	r3, #127	; 0x7f
 800a466:	d914      	bls.n	800a492 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a46a:	2100      	movs	r1, #0
 800a46c:	4618      	mov	r0, r3
 800a46e:	f001 fb29 	bl	800bac4 <ff_convert>
 800a472:	4603      	mov	r3, r0
 800a474:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d004      	beq.n	800a486 <create_name+0x246>
 800a47c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a47e:	3b80      	subs	r3, #128	; 0x80
 800a480:	4a23      	ldr	r2, [pc, #140]	; (800a510 <create_name+0x2d0>)
 800a482:	5cd3      	ldrb	r3, [r2, r3]
 800a484:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a48a:	f043 0302 	orr.w	r3, r3, #2
 800a48e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a494:	2b00      	cmp	r3, #0
 800a496:	d007      	beq.n	800a4a8 <create_name+0x268>
 800a498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a49a:	4619      	mov	r1, r3
 800a49c:	481d      	ldr	r0, [pc, #116]	; (800a514 <create_name+0x2d4>)
 800a49e:	f7fe fbfe 	bl	8008c9e <chk_chr>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d008      	beq.n	800a4ba <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a4a8:	235f      	movs	r3, #95	; 0x5f
 800a4aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4b0:	f043 0303 	orr.w	r3, r3, #3
 800a4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4b8:	e01b      	b.n	800a4f2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a4ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4bc:	2b40      	cmp	r3, #64	; 0x40
 800a4be:	d909      	bls.n	800a4d4 <create_name+0x294>
 800a4c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4c2:	2b5a      	cmp	r3, #90	; 0x5a
 800a4c4:	d806      	bhi.n	800a4d4 <create_name+0x294>
					b |= 2;
 800a4c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a4ca:	f043 0302 	orr.w	r3, r3, #2
 800a4ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a4d2:	e00e      	b.n	800a4f2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a4d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4d6:	2b60      	cmp	r3, #96	; 0x60
 800a4d8:	d90b      	bls.n	800a4f2 <create_name+0x2b2>
 800a4da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4dc:	2b7a      	cmp	r3, #122	; 0x7a
 800a4de:	d808      	bhi.n	800a4f2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a4e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a4e4:	f043 0301 	orr.w	r3, r3, #1
 800a4e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a4ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4ee:	3b20      	subs	r3, #32
 800a4f0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a4f2:	6a3b      	ldr	r3, [r7, #32]
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	623a      	str	r2, [r7, #32]
 800a4f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a4fa:	b2d1      	uxtb	r1, r2
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	4413      	add	r3, r2
 800a500:	460a      	mov	r2, r1
 800a502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a506:	e763      	b.n	800a3d0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a508:	bf00      	nop
 800a50a:	e006      	b.n	800a51a <create_name+0x2da>
 800a50c:	0800cdb4 	.word	0x0800cdb4
 800a510:	0800ce44 	.word	0x0800ce44
 800a514:	0800cdc0 	.word	0x0800cdc0
			if (si > di) break;			/* No extension */
 800a518:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a520:	2be5      	cmp	r3, #229	; 0xe5
 800a522:	d103      	bne.n	800a52c <create_name+0x2ec>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2205      	movs	r2, #5
 800a528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	2b08      	cmp	r3, #8
 800a530:	d104      	bne.n	800a53c <create_name+0x2fc>
 800a532:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a53c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a540:	f003 030c 	and.w	r3, r3, #12
 800a544:	2b0c      	cmp	r3, #12
 800a546:	d005      	beq.n	800a554 <create_name+0x314>
 800a548:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a54c:	f003 0303 	and.w	r3, r3, #3
 800a550:	2b03      	cmp	r3, #3
 800a552:	d105      	bne.n	800a560 <create_name+0x320>
 800a554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a558:	f043 0302 	orr.w	r3, r3, #2
 800a55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d117      	bne.n	800a59c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a56c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a570:	f003 0303 	and.w	r3, r3, #3
 800a574:	2b01      	cmp	r3, #1
 800a576:	d105      	bne.n	800a584 <create_name+0x344>
 800a578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a57c:	f043 0310 	orr.w	r3, r3, #16
 800a580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a588:	f003 030c 	and.w	r3, r3, #12
 800a58c:	2b04      	cmp	r3, #4
 800a58e:	d105      	bne.n	800a59c <create_name+0x35c>
 800a590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a594:	f043 0308 	orr.w	r3, r3, #8
 800a598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a5a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a5a6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3728      	adds	r7, #40	; 0x28
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a5c4:	e002      	b.n	800a5cc <follow_path+0x1c>
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2b2f      	cmp	r3, #47	; 0x2f
 800a5d2:	d0f8      	beq.n	800a5c6 <follow_path+0x16>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2b5c      	cmp	r3, #92	; 0x5c
 800a5da:	d0f4      	beq.n	800a5c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	2b1f      	cmp	r3, #31
 800a5e8:	d80a      	bhi.n	800a600 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2280      	movs	r2, #128	; 0x80
 800a5ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7ff f8fd 	bl	80097f4 <dir_sdi>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	75fb      	strb	r3, [r7, #23]
 800a5fe:	e048      	b.n	800a692 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a600:	463b      	mov	r3, r7
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff fe1b 	bl	800a240 <create_name>
 800a60a:	4603      	mov	r3, r0
 800a60c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d139      	bne.n	800a688 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f7ff fc5a 	bl	8009ece <dir_find>
 800a61a:	4603      	mov	r3, r0
 800a61c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a624:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a626:	7dfb      	ldrb	r3, [r7, #23]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00a      	beq.n	800a642 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a62c:	7dfb      	ldrb	r3, [r7, #23]
 800a62e:	2b04      	cmp	r3, #4
 800a630:	d12c      	bne.n	800a68c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a632:	7afb      	ldrb	r3, [r7, #11]
 800a634:	f003 0304 	and.w	r3, r3, #4
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d127      	bne.n	800a68c <follow_path+0xdc>
 800a63c:	2305      	movs	r3, #5
 800a63e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a640:	e024      	b.n	800a68c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a642:	7afb      	ldrb	r3, [r7, #11]
 800a644:	f003 0304 	and.w	r3, r3, #4
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d121      	bne.n	800a690 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	799b      	ldrb	r3, [r3, #6]
 800a650:	f003 0310 	and.w	r3, r3, #16
 800a654:	2b00      	cmp	r3, #0
 800a656:	d102      	bne.n	800a65e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a658:	2305      	movs	r3, #5
 800a65a:	75fb      	strb	r3, [r7, #23]
 800a65c:	e019      	b.n	800a692 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	695b      	ldr	r3, [r3, #20]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	8992      	ldrh	r2, [r2, #12]
 800a66c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a670:	fb00 f202 	mul.w	r2, r0, r2
 800a674:	1a9b      	subs	r3, r3, r2
 800a676:	440b      	add	r3, r1
 800a678:	4619      	mov	r1, r3
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7ff fa60 	bl	8009b40 <ld_clust>
 800a680:	4602      	mov	r2, r0
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a686:	e7bb      	b.n	800a600 <follow_path+0x50>
			if (res != FR_OK) break;
 800a688:	bf00      	nop
 800a68a:	e002      	b.n	800a692 <follow_path+0xe2>
				break;
 800a68c:	bf00      	nop
 800a68e:	e000      	b.n	800a692 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a690:	bf00      	nop
			}
		}
	}

	return res;
 800a692:	7dfb      	ldrb	r3, [r7, #23]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3718      	adds	r7, #24
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a6a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6a8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d031      	beq.n	800a716 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	617b      	str	r3, [r7, #20]
 800a6b8:	e002      	b.n	800a6c0 <get_ldnumber+0x24>
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	617b      	str	r3, [r7, #20]
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	2b1f      	cmp	r3, #31
 800a6c6:	d903      	bls.n	800a6d0 <get_ldnumber+0x34>
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	2b3a      	cmp	r3, #58	; 0x3a
 800a6ce:	d1f4      	bne.n	800a6ba <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2b3a      	cmp	r3, #58	; 0x3a
 800a6d6:	d11c      	bne.n	800a712 <get_ldnumber+0x76>
			tp = *path;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	60fa      	str	r2, [r7, #12]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	3b30      	subs	r3, #48	; 0x30
 800a6e8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	2b09      	cmp	r3, #9
 800a6ee:	d80e      	bhi.n	800a70e <get_ldnumber+0x72>
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d10a      	bne.n	800a70e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d107      	bne.n	800a70e <get_ldnumber+0x72>
					vol = (int)i;
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	3301      	adds	r3, #1
 800a706:	617b      	str	r3, [r7, #20]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	e002      	b.n	800a718 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a712:	2300      	movs	r3, #0
 800a714:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a716:	693b      	ldr	r3, [r7, #16]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	371c      	adds	r7, #28
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	70da      	strb	r2, [r3, #3]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a73a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7fe fc78 	bl	8009034 <move_window>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <check_fs+0x2a>
 800a74a:	2304      	movs	r3, #4
 800a74c:	e038      	b.n	800a7c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	3338      	adds	r3, #56	; 0x38
 800a752:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a756:	4618      	mov	r0, r3
 800a758:	f7fe f9bc 	bl	8008ad4 <ld_word>
 800a75c:	4603      	mov	r3, r0
 800a75e:	461a      	mov	r2, r3
 800a760:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a764:	429a      	cmp	r2, r3
 800a766:	d001      	beq.n	800a76c <check_fs+0x48>
 800a768:	2303      	movs	r3, #3
 800a76a:	e029      	b.n	800a7c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a772:	2be9      	cmp	r3, #233	; 0xe9
 800a774:	d009      	beq.n	800a78a <check_fs+0x66>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a77c:	2beb      	cmp	r3, #235	; 0xeb
 800a77e:	d11e      	bne.n	800a7be <check_fs+0x9a>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a786:	2b90      	cmp	r3, #144	; 0x90
 800a788:	d119      	bne.n	800a7be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	3338      	adds	r3, #56	; 0x38
 800a78e:	3336      	adds	r3, #54	; 0x36
 800a790:	4618      	mov	r0, r3
 800a792:	f7fe f9b7 	bl	8008b04 <ld_dword>
 800a796:	4603      	mov	r3, r0
 800a798:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a79c:	4a0a      	ldr	r2, [pc, #40]	; (800a7c8 <check_fs+0xa4>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d101      	bne.n	800a7a6 <check_fs+0x82>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	e00c      	b.n	800a7c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	3338      	adds	r3, #56	; 0x38
 800a7aa:	3352      	adds	r3, #82	; 0x52
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fe f9a9 	bl	8008b04 <ld_dword>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	4a05      	ldr	r2, [pc, #20]	; (800a7cc <check_fs+0xa8>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d101      	bne.n	800a7be <check_fs+0x9a>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	e000      	b.n	800a7c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a7be:	2302      	movs	r3, #2
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	00544146 	.word	0x00544146
 800a7cc:	33544146 	.word	0x33544146

0800a7d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b096      	sub	sp, #88	; 0x58
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f7ff ff59 	bl	800a69c <get_ldnumber>
 800a7ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	da01      	bge.n	800a7f6 <find_volume+0x26>
 800a7f2:	230b      	movs	r3, #11
 800a7f4:	e265      	b.n	800acc2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a7f6:	4a9f      	ldr	r2, [pc, #636]	; (800aa74 <find_volume+0x2a4>)
 800a7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a802:	2b00      	cmp	r3, #0
 800a804:	d101      	bne.n	800a80a <find_volume+0x3a>
 800a806:	230c      	movs	r3, #12
 800a808:	e25b      	b.n	800acc2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a80e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a810:	79fb      	ldrb	r3, [r7, #7]
 800a812:	f023 0301 	bic.w	r3, r3, #1
 800a816:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01a      	beq.n	800a856 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a822:	785b      	ldrb	r3, [r3, #1]
 800a824:	4618      	mov	r0, r3
 800a826:	f7fe f8b7 	bl	8008998 <disk_status>
 800a82a:	4603      	mov	r3, r0
 800a82c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a830:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a834:	f003 0301 	and.w	r3, r3, #1
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10c      	bne.n	800a856 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d007      	beq.n	800a852 <find_volume+0x82>
 800a842:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a846:	f003 0304 	and.w	r3, r3, #4
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a84e:	230a      	movs	r3, #10
 800a850:	e237      	b.n	800acc2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a852:	2300      	movs	r3, #0
 800a854:	e235      	b.n	800acc2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a858:	2200      	movs	r2, #0
 800a85a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a862:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a866:	785b      	ldrb	r3, [r3, #1]
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fe f8af 	bl	80089cc <disk_initialize>
 800a86e:	4603      	mov	r3, r0
 800a870:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a874:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d001      	beq.n	800a884 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a880:	2303      	movs	r3, #3
 800a882:	e21e      	b.n	800acc2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d007      	beq.n	800a89a <find_volume+0xca>
 800a88a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a88e:	f003 0304 	and.w	r3, r3, #4
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a896:	230a      	movs	r3, #10
 800a898:	e213      	b.n	800acc2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89c:	7858      	ldrb	r0, [r3, #1]
 800a89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a0:	330c      	adds	r3, #12
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	2102      	movs	r1, #2
 800a8a6:	f7fe f8f7 	bl	8008a98 <disk_ioctl>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d001      	beq.n	800a8b4 <find_volume+0xe4>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e206      	b.n	800acc2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	899b      	ldrh	r3, [r3, #12]
 800a8b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8bc:	d80d      	bhi.n	800a8da <find_volume+0x10a>
 800a8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c0:	899b      	ldrh	r3, [r3, #12]
 800a8c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8c6:	d308      	bcc.n	800a8da <find_volume+0x10a>
 800a8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ca:	899b      	ldrh	r3, [r3, #12]
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d0:	899b      	ldrh	r3, [r3, #12]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <find_volume+0x10e>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e1f1      	b.n	800acc2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a8e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a8e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a8e6:	f7ff ff1d 	bl	800a724 <check_fs>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a8f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d149      	bne.n	800a98c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	643b      	str	r3, [r7, #64]	; 0x40
 800a8fc:	e01e      	b.n	800a93c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a900:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a906:	011b      	lsls	r3, r3, #4
 800a908:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a90c:	4413      	add	r3, r2
 800a90e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a912:	3304      	adds	r3, #4
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d006      	beq.n	800a928 <find_volume+0x158>
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	3308      	adds	r3, #8
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe f8f0 	bl	8008b04 <ld_dword>
 800a924:	4602      	mov	r2, r0
 800a926:	e000      	b.n	800a92a <find_volume+0x15a>
 800a928:	2200      	movs	r2, #0
 800a92a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	3358      	adds	r3, #88	; 0x58
 800a930:	443b      	add	r3, r7
 800a932:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a938:	3301      	adds	r3, #1
 800a93a:	643b      	str	r3, [r7, #64]	; 0x40
 800a93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d9dd      	bls.n	800a8fe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a942:	2300      	movs	r3, #0
 800a944:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <find_volume+0x182>
 800a94c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a94e:	3b01      	subs	r3, #1
 800a950:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	3358      	adds	r3, #88	; 0x58
 800a958:	443b      	add	r3, r7
 800a95a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a95e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a962:	2b00      	cmp	r3, #0
 800a964:	d005      	beq.n	800a972 <find_volume+0x1a2>
 800a966:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a968:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a96a:	f7ff fedb 	bl	800a724 <check_fs>
 800a96e:	4603      	mov	r3, r0
 800a970:	e000      	b.n	800a974 <find_volume+0x1a4>
 800a972:	2303      	movs	r3, #3
 800a974:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d905      	bls.n	800a98c <find_volume+0x1bc>
 800a980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a982:	3301      	adds	r3, #1
 800a984:	643b      	str	r3, [r7, #64]	; 0x40
 800a986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a988:	2b03      	cmp	r3, #3
 800a98a:	d9e2      	bls.n	800a952 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a98c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a990:	2b04      	cmp	r3, #4
 800a992:	d101      	bne.n	800a998 <find_volume+0x1c8>
 800a994:	2301      	movs	r3, #1
 800a996:	e194      	b.n	800acc2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d901      	bls.n	800a9a4 <find_volume+0x1d4>
 800a9a0:	230d      	movs	r3, #13
 800a9a2:	e18e      	b.n	800acc2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	3338      	adds	r3, #56	; 0x38
 800a9a8:	330b      	adds	r3, #11
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fe f892 	bl	8008ad4 <ld_word>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b6:	899b      	ldrh	r3, [r3, #12]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d001      	beq.n	800a9c0 <find_volume+0x1f0>
 800a9bc:	230d      	movs	r3, #13
 800a9be:	e180      	b.n	800acc2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c2:	3338      	adds	r3, #56	; 0x38
 800a9c4:	3316      	adds	r3, #22
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fe f884 	bl	8008ad4 <ld_word>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a9d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d106      	bne.n	800a9e4 <find_volume+0x214>
 800a9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d8:	3338      	adds	r3, #56	; 0x38
 800a9da:	3324      	adds	r3, #36	; 0x24
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fe f891 	bl	8008b04 <ld_dword>
 800a9e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a9e8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ec:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f6:	789b      	ldrb	r3, [r3, #2]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d005      	beq.n	800aa08 <find_volume+0x238>
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fe:	789b      	ldrb	r3, [r3, #2]
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d001      	beq.n	800aa08 <find_volume+0x238>
 800aa04:	230d      	movs	r3, #13
 800aa06:	e15c      	b.n	800acc2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800aa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0a:	789b      	ldrb	r3, [r3, #2]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa10:	fb02 f303 	mul.w	r3, r2, r3
 800aa14:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800aa16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa20:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800aa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa24:	895b      	ldrh	r3, [r3, #10]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d008      	beq.n	800aa3c <find_volume+0x26c>
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2c:	895b      	ldrh	r3, [r3, #10]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa32:	895b      	ldrh	r3, [r3, #10]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	4013      	ands	r3, r2
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <find_volume+0x270>
 800aa3c:	230d      	movs	r3, #13
 800aa3e:	e140      	b.n	800acc2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800aa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa42:	3338      	adds	r3, #56	; 0x38
 800aa44:	3311      	adds	r3, #17
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe f844 	bl	8008ad4 <ld_word>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	461a      	mov	r2, r3
 800aa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa52:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800aa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa56:	891b      	ldrh	r3, [r3, #8]
 800aa58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa5a:	8992      	ldrh	r2, [r2, #12]
 800aa5c:	0952      	lsrs	r2, r2, #5
 800aa5e:	b292      	uxth	r2, r2
 800aa60:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa64:	fb01 f202 	mul.w	r2, r1, r2
 800aa68:	1a9b      	subs	r3, r3, r2
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d003      	beq.n	800aa78 <find_volume+0x2a8>
 800aa70:	230d      	movs	r3, #13
 800aa72:	e126      	b.n	800acc2 <find_volume+0x4f2>
 800aa74:	20005cd0 	.word	0x20005cd0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800aa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7a:	3338      	adds	r3, #56	; 0x38
 800aa7c:	3313      	adds	r3, #19
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fe f828 	bl	8008ad4 <ld_word>
 800aa84:	4603      	mov	r3, r0
 800aa86:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800aa88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d106      	bne.n	800aa9c <find_volume+0x2cc>
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa90:	3338      	adds	r3, #56	; 0x38
 800aa92:	3320      	adds	r3, #32
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fe f835 	bl	8008b04 <ld_dword>
 800aa9a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800aa9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9e:	3338      	adds	r3, #56	; 0x38
 800aaa0:	330e      	adds	r3, #14
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fe f816 	bl	8008ad4 <ld_word>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800aaac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d101      	bne.n	800aab6 <find_volume+0x2e6>
 800aab2:	230d      	movs	r3, #13
 800aab4:	e105      	b.n	800acc2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800aab6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaba:	4413      	add	r3, r2
 800aabc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aabe:	8911      	ldrh	r1, [r2, #8]
 800aac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aac2:	8992      	ldrh	r2, [r2, #12]
 800aac4:	0952      	lsrs	r2, r2, #5
 800aac6:	b292      	uxth	r2, r2
 800aac8:	fbb1 f2f2 	udiv	r2, r1, r2
 800aacc:	b292      	uxth	r2, r2
 800aace:	4413      	add	r3, r2
 800aad0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800aad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d201      	bcs.n	800aade <find_volume+0x30e>
 800aada:	230d      	movs	r3, #13
 800aadc:	e0f1      	b.n	800acc2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800aade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aae6:	8952      	ldrh	r2, [r2, #10]
 800aae8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d101      	bne.n	800aaf8 <find_volume+0x328>
 800aaf4:	230d      	movs	r3, #13
 800aaf6:	e0e4      	b.n	800acc2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800aafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab00:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d802      	bhi.n	800ab0e <find_volume+0x33e>
 800ab08:	2302      	movs	r3, #2
 800ab0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d802      	bhi.n	800ab1e <find_volume+0x34e>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab20:	1c9a      	adds	r2, r3, #2
 800ab22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab24:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ab26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab2a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ab2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ab2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab30:	441a      	add	r2, r3
 800ab32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab34:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ab36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3a:	441a      	add	r2, r3
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800ab40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d11e      	bne.n	800ab86 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ab48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4a:	3338      	adds	r3, #56	; 0x38
 800ab4c:	332a      	adds	r3, #42	; 0x2a
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fd ffc0 	bl	8008ad4 <ld_word>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d001      	beq.n	800ab5e <find_volume+0x38e>
 800ab5a:	230d      	movs	r3, #13
 800ab5c:	e0b1      	b.n	800acc2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ab5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab60:	891b      	ldrh	r3, [r3, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <find_volume+0x39a>
 800ab66:	230d      	movs	r3, #13
 800ab68:	e0ab      	b.n	800acc2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6c:	3338      	adds	r3, #56	; 0x38
 800ab6e:	332c      	adds	r3, #44	; 0x2c
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7fd ffc7 	bl	8008b04 <ld_dword>
 800ab76:	4602      	mov	r2, r0
 800ab78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ab7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7e:	69db      	ldr	r3, [r3, #28]
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	647b      	str	r3, [r7, #68]	; 0x44
 800ab84:	e01f      	b.n	800abc6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ab86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab88:	891b      	ldrh	r3, [r3, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <find_volume+0x3c2>
 800ab8e:	230d      	movs	r3, #13
 800ab90:	e097      	b.n	800acc2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ab92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab98:	441a      	add	r2, r3
 800ab9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ab9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d103      	bne.n	800abae <find_volume+0x3de>
 800aba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	005b      	lsls	r3, r3, #1
 800abac:	e00a      	b.n	800abc4 <find_volume+0x3f4>
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	69da      	ldr	r2, [r3, #28]
 800abb2:	4613      	mov	r3, r2
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	4413      	add	r3, r2
 800abb8:	085a      	lsrs	r2, r3, #1
 800abba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800abc4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800abc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc8:	6a1a      	ldr	r2, [r3, #32]
 800abca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abcc:	899b      	ldrh	r3, [r3, #12]
 800abce:	4619      	mov	r1, r3
 800abd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abd2:	440b      	add	r3, r1
 800abd4:	3b01      	subs	r3, #1
 800abd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800abd8:	8989      	ldrh	r1, [r1, #12]
 800abda:	fbb3 f3f1 	udiv	r3, r3, r1
 800abde:	429a      	cmp	r2, r3
 800abe0:	d201      	bcs.n	800abe6 <find_volume+0x416>
 800abe2:	230d      	movs	r3, #13
 800abe4:	e06d      	b.n	800acc2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800abe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abec:	619a      	str	r2, [r3, #24]
 800abee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf0:	699a      	ldr	r2, [r3, #24]
 800abf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800abf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf8:	2280      	movs	r2, #128	; 0x80
 800abfa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800abfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac00:	2b03      	cmp	r3, #3
 800ac02:	d149      	bne.n	800ac98 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ac04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac06:	3338      	adds	r3, #56	; 0x38
 800ac08:	3330      	adds	r3, #48	; 0x30
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fd ff62 	bl	8008ad4 <ld_word>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d140      	bne.n	800ac98 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ac16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac18:	3301      	adds	r3, #1
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac1e:	f7fe fa09 	bl	8009034 <move_window>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d137      	bne.n	800ac98 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800ac28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ac2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac30:	3338      	adds	r3, #56	; 0x38
 800ac32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fd ff4c 	bl	8008ad4 <ld_word>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	461a      	mov	r2, r3
 800ac40:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d127      	bne.n	800ac98 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ac48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4a:	3338      	adds	r3, #56	; 0x38
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fd ff59 	bl	8008b04 <ld_dword>
 800ac52:	4603      	mov	r3, r0
 800ac54:	4a1d      	ldr	r2, [pc, #116]	; (800accc <find_volume+0x4fc>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d11e      	bne.n	800ac98 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ac5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5c:	3338      	adds	r3, #56	; 0x38
 800ac5e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fd ff4e 	bl	8008b04 <ld_dword>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	4a19      	ldr	r2, [pc, #100]	; (800acd0 <find_volume+0x500>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d113      	bne.n	800ac98 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ac70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac72:	3338      	adds	r3, #56	; 0x38
 800ac74:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7fd ff43 	bl	8008b04 <ld_dword>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac82:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac86:	3338      	adds	r3, #56	; 0x38
 800ac88:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7fd ff39 	bl	8008b04 <ld_dword>
 800ac92:	4602      	mov	r2, r0
 800ac94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac96:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ac98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ac9e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aca0:	4b0c      	ldr	r3, [pc, #48]	; (800acd4 <find_volume+0x504>)
 800aca2:	881b      	ldrh	r3, [r3, #0]
 800aca4:	3301      	adds	r3, #1
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	4b0a      	ldr	r3, [pc, #40]	; (800acd4 <find_volume+0x504>)
 800acaa:	801a      	strh	r2, [r3, #0]
 800acac:	4b09      	ldr	r3, [pc, #36]	; (800acd4 <find_volume+0x504>)
 800acae:	881a      	ldrh	r2, [r3, #0]
 800acb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800acb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb6:	4a08      	ldr	r2, [pc, #32]	; (800acd8 <find_volume+0x508>)
 800acb8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800acba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800acbc:	f7fe f952 	bl	8008f64 <clear_lock>
#endif
	return FR_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3758      	adds	r7, #88	; 0x58
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	41615252 	.word	0x41615252
 800acd0:	61417272 	.word	0x61417272
 800acd4:	20005cd4 	.word	0x20005cd4
 800acd8:	20005cf8 	.word	0x20005cf8

0800acdc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ace6:	2309      	movs	r3, #9
 800ace8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01c      	beq.n	800ad2a <validate+0x4e>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d018      	beq.n	800ad2a <validate+0x4e>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d013      	beq.n	800ad2a <validate+0x4e>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	889a      	ldrh	r2, [r3, #4]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	88db      	ldrh	r3, [r3, #6]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d10c      	bne.n	800ad2a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	785b      	ldrb	r3, [r3, #1]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fd fe3e 	bl	8008998 <disk_status>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <validate+0x4e>
			res = FR_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d102      	bne.n	800ad36 <validate+0x5a>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	e000      	b.n	800ad38 <validate+0x5c>
 800ad36:	2300      	movs	r3, #0
 800ad38:	683a      	ldr	r2, [r7, #0]
 800ad3a:	6013      	str	r3, [r2, #0]
	return res;
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
	...

0800ad48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b088      	sub	sp, #32
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	4613      	mov	r3, r2
 800ad54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ad5a:	f107 0310 	add.w	r3, r7, #16
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff fc9c 	bl	800a69c <get_ldnumber>
 800ad64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	da01      	bge.n	800ad70 <f_mount+0x28>
 800ad6c:	230b      	movs	r3, #11
 800ad6e:	e02b      	b.n	800adc8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ad70:	4a17      	ldr	r2, [pc, #92]	; (800add0 <f_mount+0x88>)
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d005      	beq.n	800ad8c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ad80:	69b8      	ldr	r0, [r7, #24]
 800ad82:	f7fe f8ef 	bl	8008f64 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d002      	beq.n	800ad98 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	490d      	ldr	r1, [pc, #52]	; (800add0 <f_mount+0x88>)
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <f_mount+0x66>
 800ada8:	79fb      	ldrb	r3, [r7, #7]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d001      	beq.n	800adb2 <f_mount+0x6a>
 800adae:	2300      	movs	r3, #0
 800adb0:	e00a      	b.n	800adc8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800adb2:	f107 010c 	add.w	r1, r7, #12
 800adb6:	f107 0308 	add.w	r3, r7, #8
 800adba:	2200      	movs	r2, #0
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff fd07 	bl	800a7d0 <find_volume>
 800adc2:	4603      	mov	r3, r0
 800adc4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3720      	adds	r7, #32
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	20005cd0 	.word	0x20005cd0

0800add4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b09a      	sub	sp, #104	; 0x68
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	4613      	mov	r3, r2
 800ade0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <f_open+0x18>
 800ade8:	2309      	movs	r3, #9
 800adea:	e1bb      	b.n	800b164 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800adec:	79fb      	ldrb	r3, [r7, #7]
 800adee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adf2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800adf4:	79fa      	ldrb	r2, [r7, #7]
 800adf6:	f107 0114 	add.w	r1, r7, #20
 800adfa:	f107 0308 	add.w	r3, r7, #8
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff fce6 	bl	800a7d0 <find_volume>
 800ae04:	4603      	mov	r3, r0
 800ae06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ae0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f040 819f 	bne.w	800b152 <f_open+0x37e>
		dj.obj.fs = fs;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	f107 0318 	add.w	r3, r7, #24
 800ae1e:	4611      	mov	r1, r2
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff fbc5 	bl	800a5b0 <follow_path>
 800ae26:	4603      	mov	r3, r0
 800ae28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ae2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d11a      	bne.n	800ae6a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ae34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ae38:	b25b      	sxtb	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	da03      	bge.n	800ae46 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ae3e:	2306      	movs	r3, #6
 800ae40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ae44:	e011      	b.n	800ae6a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ae46:	79fb      	ldrb	r3, [r7, #7]
 800ae48:	f023 0301 	bic.w	r3, r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bf14      	ite	ne
 800ae50:	2301      	movne	r3, #1
 800ae52:	2300      	moveq	r3, #0
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	461a      	mov	r2, r3
 800ae58:	f107 0318 	add.w	r3, r7, #24
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fd ff38 	bl	8008cd4 <chk_lock>
 800ae64:	4603      	mov	r3, r0
 800ae66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ae6a:	79fb      	ldrb	r3, [r7, #7]
 800ae6c:	f003 031c 	and.w	r3, r3, #28
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d07f      	beq.n	800af74 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ae74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d017      	beq.n	800aeac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ae7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	d10e      	bne.n	800aea2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ae84:	f7fd ff82 	bl	8008d8c <enq_lock>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d006      	beq.n	800ae9c <f_open+0xc8>
 800ae8e:	f107 0318 	add.w	r3, r7, #24
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7ff f8dc 	bl	800a050 <dir_register>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	e000      	b.n	800ae9e <f_open+0xca>
 800ae9c:	2312      	movs	r3, #18
 800ae9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	f043 0308 	orr.w	r3, r3, #8
 800aea8:	71fb      	strb	r3, [r7, #7]
 800aeaa:	e010      	b.n	800aece <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800aeac:	7fbb      	ldrb	r3, [r7, #30]
 800aeae:	f003 0311 	and.w	r3, r3, #17
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d003      	beq.n	800aebe <f_open+0xea>
					res = FR_DENIED;
 800aeb6:	2307      	movs	r3, #7
 800aeb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aebc:	e007      	b.n	800aece <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	f003 0304 	and.w	r3, r3, #4
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d002      	beq.n	800aece <f_open+0xfa>
 800aec8:	2308      	movs	r3, #8
 800aeca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aece:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d168      	bne.n	800afa8 <f_open+0x1d4>
 800aed6:	79fb      	ldrb	r3, [r7, #7]
 800aed8:	f003 0308 	and.w	r3, r3, #8
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d063      	beq.n	800afa8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800aee0:	f7fd f82e 	bl	8007f40 <get_fattime>
 800aee4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee8:	330e      	adds	r3, #14
 800aeea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7fd fe47 	bl	8008b80 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	3316      	adds	r3, #22
 800aef6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7fd fe41 	bl	8008b80 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af00:	330b      	adds	r3, #11
 800af02:	2220      	movs	r2, #32
 800af04:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af0a:	4611      	mov	r1, r2
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe fe17 	bl	8009b40 <ld_clust>
 800af12:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800af18:	2200      	movs	r2, #0
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe fe2f 	bl	8009b7e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800af20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af22:	331c      	adds	r3, #28
 800af24:	2100      	movs	r1, #0
 800af26:	4618      	mov	r0, r3
 800af28:	f7fd fe2a 	bl	8008b80 <st_dword>
					fs->wflag = 1;
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	2201      	movs	r2, #1
 800af30:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800af32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af34:	2b00      	cmp	r3, #0
 800af36:	d037      	beq.n	800afa8 <f_open+0x1d4>
						dw = fs->winsect;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800af3e:	f107 0318 	add.w	r3, r7, #24
 800af42:	2200      	movs	r2, #0
 800af44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af46:	4618      	mov	r0, r3
 800af48:	f7fe fb1f 	bl	800958a <remove_chain>
 800af4c:	4603      	mov	r3, r0
 800af4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800af52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800af56:	2b00      	cmp	r3, #0
 800af58:	d126      	bne.n	800afa8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fe f868 	bl	8009034 <move_window>
 800af64:	4603      	mov	r3, r0
 800af66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af6e:	3a01      	subs	r2, #1
 800af70:	615a      	str	r2, [r3, #20]
 800af72:	e019      	b.n	800afa8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800af74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d115      	bne.n	800afa8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800af7c:	7fbb      	ldrb	r3, [r7, #30]
 800af7e:	f003 0310 	and.w	r3, r3, #16
 800af82:	2b00      	cmp	r3, #0
 800af84:	d003      	beq.n	800af8e <f_open+0x1ba>
					res = FR_NO_FILE;
 800af86:	2304      	movs	r3, #4
 800af88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800af8c:	e00c      	b.n	800afa8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800af8e:	79fb      	ldrb	r3, [r7, #7]
 800af90:	f003 0302 	and.w	r3, r3, #2
 800af94:	2b00      	cmp	r3, #0
 800af96:	d007      	beq.n	800afa8 <f_open+0x1d4>
 800af98:	7fbb      	ldrb	r3, [r7, #30]
 800af9a:	f003 0301 	and.w	r3, r3, #1
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d002      	beq.n	800afa8 <f_open+0x1d4>
						res = FR_DENIED;
 800afa2:	2307      	movs	r3, #7
 800afa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800afa8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800afac:	2b00      	cmp	r3, #0
 800afae:	d128      	bne.n	800b002 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800afb0:	79fb      	ldrb	r3, [r7, #7]
 800afb2:	f003 0308 	and.w	r3, r3, #8
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d003      	beq.n	800afc2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800afba:	79fb      	ldrb	r3, [r7, #7]
 800afbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afc0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800afca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800afd0:	79fb      	ldrb	r3, [r7, #7]
 800afd2:	f023 0301 	bic.w	r3, r3, #1
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	bf14      	ite	ne
 800afda:	2301      	movne	r3, #1
 800afdc:	2300      	moveq	r3, #0
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	461a      	mov	r2, r3
 800afe2:	f107 0318 	add.w	r3, r7, #24
 800afe6:	4611      	mov	r1, r2
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fd fef1 	bl	8008dd0 <inc_lock>
 800afee:	4602      	mov	r2, r0
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d102      	bne.n	800b002 <f_open+0x22e>
 800affc:	2302      	movs	r3, #2
 800affe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b002:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b006:	2b00      	cmp	r3, #0
 800b008:	f040 80a3 	bne.w	800b152 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b010:	4611      	mov	r1, r2
 800b012:	4618      	mov	r0, r3
 800b014:	f7fe fd94 	bl	8009b40 <ld_clust>
 800b018:	4602      	mov	r2, r0
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b020:	331c      	adds	r3, #28
 800b022:	4618      	mov	r0, r3
 800b024:	f7fd fd6e 	bl	8008b04 <ld_dword>
 800b028:	4602      	mov	r2, r0
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b034:	697a      	ldr	r2, [r7, #20]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	88da      	ldrh	r2, [r3, #6]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	79fa      	ldrb	r2, [r7, #7]
 800b046:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2200      	movs	r2, #0
 800b058:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	3330      	adds	r3, #48	; 0x30
 800b05e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b062:	2100      	movs	r1, #0
 800b064:	4618      	mov	r0, r3
 800b066:	f7fd fdd8 	bl	8008c1a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b06a:	79fb      	ldrb	r3, [r7, #7]
 800b06c:	f003 0320 	and.w	r3, r3, #32
 800b070:	2b00      	cmp	r3, #0
 800b072:	d06e      	beq.n	800b152 <f_open+0x37e>
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d06a      	beq.n	800b152 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	68da      	ldr	r2, [r3, #12]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	895b      	ldrh	r3, [r3, #10]
 800b088:	461a      	mov	r2, r3
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	899b      	ldrh	r3, [r3, #12]
 800b08e:	fb02 f303 	mul.w	r3, r2, r3
 800b092:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0a0:	e016      	b.n	800b0d0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7fe f881 	bl	80091ae <get_fat>
 800b0ac:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b0ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d802      	bhi.n	800b0ba <f_open+0x2e6>
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b0ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0c0:	d102      	bne.n	800b0c8 <f_open+0x2f4>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b0c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d103      	bne.n	800b0e0 <f_open+0x30c>
 800b0d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d8e0      	bhi.n	800b0a2 <f_open+0x2ce>
				}
				fp->clust = clst;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b0e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b0e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d131      	bne.n	800b152 <f_open+0x37e>
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	899b      	ldrh	r3, [r3, #12]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0fa:	fb01 f202 	mul.w	r2, r1, r2
 800b0fe:	1a9b      	subs	r3, r3, r2
 800b100:	2b00      	cmp	r3, #0
 800b102:	d026      	beq.n	800b152 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fe f831 	bl	8009170 <clust2sect>
 800b10e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b112:	2b00      	cmp	r3, #0
 800b114:	d103      	bne.n	800b11e <f_open+0x34a>
						res = FR_INT_ERR;
 800b116:	2302      	movs	r3, #2
 800b118:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b11c:	e019      	b.n	800b152 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	899b      	ldrh	r3, [r3, #12]
 800b122:	461a      	mov	r2, r3
 800b124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b126:	fbb3 f2f2 	udiv	r2, r3, r2
 800b12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b12c:	441a      	add	r2, r3
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	7858      	ldrb	r0, [r3, #1]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	6a1a      	ldr	r2, [r3, #32]
 800b140:	2301      	movs	r3, #1
 800b142:	f7fd fc69 	bl	8008a18 <disk_read>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <f_open+0x37e>
 800b14c:	2301      	movs	r3, #1
 800b14e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b152:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b156:	2b00      	cmp	r3, #0
 800b158:	d002      	beq.n	800b160 <f_open+0x38c>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b160:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b164:	4618      	mov	r0, r3
 800b166:	3768      	adds	r7, #104	; 0x68
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b08e      	sub	sp, #56	; 0x38
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
 800b178:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2200      	movs	r2, #0
 800b182:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f107 0214 	add.w	r2, r7, #20
 800b18a:	4611      	mov	r1, r2
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7ff fda5 	bl	800acdc <validate>
 800b192:	4603      	mov	r3, r0
 800b194:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d107      	bne.n	800b1b0 <f_read+0x44>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	7d5b      	ldrb	r3, [r3, #21]
 800b1a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b1a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d002      	beq.n	800b1b6 <f_read+0x4a>
 800b1b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1b4:	e135      	b.n	800b422 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	7d1b      	ldrb	r3, [r3, #20]
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <f_read+0x5a>
 800b1c2:	2307      	movs	r3, #7
 800b1c4:	e12d      	b.n	800b422 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	68da      	ldr	r2, [r3, #12]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	6a3b      	ldr	r3, [r7, #32]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	f240 811e 	bls.w	800b418 <f_read+0x2ac>
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b1e0:	e11a      	b.n	800b418 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	699b      	ldr	r3, [r3, #24]
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	8992      	ldrh	r2, [r2, #12]
 800b1ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1ee:	fb01 f202 	mul.w	r2, r1, r2
 800b1f2:	1a9b      	subs	r3, r3, r2
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f040 80d5 	bne.w	800b3a4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	8992      	ldrh	r2, [r2, #12]
 800b202:	fbb3 f3f2 	udiv	r3, r3, r2
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	8952      	ldrh	r2, [r2, #10]
 800b20a:	3a01      	subs	r2, #1
 800b20c:	4013      	ands	r3, r2
 800b20e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d12f      	bne.n	800b276 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	699b      	ldr	r3, [r3, #24]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d103      	bne.n	800b226 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	633b      	str	r3, [r7, #48]	; 0x30
 800b224:	e013      	b.n	800b24e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d007      	beq.n	800b23e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	699b      	ldr	r3, [r3, #24]
 800b232:	4619      	mov	r1, r3
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f7fe faa5 	bl	8009784 <clmt_clust>
 800b23a:	6338      	str	r0, [r7, #48]	; 0x30
 800b23c:	e007      	b.n	800b24e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	69db      	ldr	r3, [r3, #28]
 800b244:	4619      	mov	r1, r3
 800b246:	4610      	mov	r0, r2
 800b248:	f7fd ffb1 	bl	80091ae <get_fat>
 800b24c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	2b01      	cmp	r3, #1
 800b252:	d804      	bhi.n	800b25e <f_read+0xf2>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2202      	movs	r2, #2
 800b258:	755a      	strb	r2, [r3, #21]
 800b25a:	2302      	movs	r3, #2
 800b25c:	e0e1      	b.n	800b422 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b264:	d104      	bne.n	800b270 <f_read+0x104>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2201      	movs	r2, #1
 800b26a:	755a      	strb	r2, [r3, #21]
 800b26c:	2301      	movs	r3, #1
 800b26e:	e0d8      	b.n	800b422 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b274:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b276:	697a      	ldr	r2, [r7, #20]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	69db      	ldr	r3, [r3, #28]
 800b27c:	4619      	mov	r1, r3
 800b27e:	4610      	mov	r0, r2
 800b280:	f7fd ff76 	bl	8009170 <clust2sect>
 800b284:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d104      	bne.n	800b296 <f_read+0x12a>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2202      	movs	r2, #2
 800b290:	755a      	strb	r2, [r3, #21]
 800b292:	2302      	movs	r3, #2
 800b294:	e0c5      	b.n	800b422 <f_read+0x2b6>
			sect += csect;
 800b296:	69ba      	ldr	r2, [r7, #24]
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	4413      	add	r3, r2
 800b29c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	899b      	ldrh	r3, [r3, #12]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2aa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d041      	beq.n	800b336 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b2b2:	69fa      	ldr	r2, [r7, #28]
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	4413      	add	r3, r2
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	8952      	ldrh	r2, [r2, #10]
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d905      	bls.n	800b2cc <f_read+0x160>
					cc = fs->csize - csect;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	895b      	ldrh	r3, [r3, #10]
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	7858      	ldrb	r0, [r3, #1]
 800b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d2:	69ba      	ldr	r2, [r7, #24]
 800b2d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2d6:	f7fd fb9f 	bl	8008a18 <disk_read>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d004      	beq.n	800b2ea <f_read+0x17e>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	755a      	strb	r2, [r3, #21]
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e09b      	b.n	800b422 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	7d1b      	ldrb	r3, [r3, #20]
 800b2ee:	b25b      	sxtb	r3, r3
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	da18      	bge.n	800b326 <f_read+0x1ba>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6a1a      	ldr	r2, [r3, #32]
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d911      	bls.n	800b326 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6a1a      	ldr	r2, [r3, #32]
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	8992      	ldrh	r2, [r2, #12]
 800b30e:	fb02 f303 	mul.w	r3, r2, r3
 800b312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b314:	18d0      	adds	r0, r2, r3
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	899b      	ldrh	r3, [r3, #12]
 800b320:	461a      	mov	r2, r3
 800b322:	f7fd fc59 	bl	8008bd8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	899b      	ldrh	r3, [r3, #12]
 800b32a:	461a      	mov	r2, r3
 800b32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32e:	fb02 f303 	mul.w	r3, r2, r3
 800b332:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b334:	e05c      	b.n	800b3f0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	69ba      	ldr	r2, [r7, #24]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d02e      	beq.n	800b39e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	7d1b      	ldrb	r3, [r3, #20]
 800b344:	b25b      	sxtb	r3, r3
 800b346:	2b00      	cmp	r3, #0
 800b348:	da18      	bge.n	800b37c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	7858      	ldrb	r0, [r3, #1]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6a1a      	ldr	r2, [r3, #32]
 800b358:	2301      	movs	r3, #1
 800b35a:	f7fd fb7d 	bl	8008a58 <disk_write>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d004      	beq.n	800b36e <f_read+0x202>
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2201      	movs	r2, #1
 800b368:	755a      	strb	r2, [r3, #21]
 800b36a:	2301      	movs	r3, #1
 800b36c:	e059      	b.n	800b422 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	7d1b      	ldrb	r3, [r3, #20]
 800b372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b376:	b2da      	uxtb	r2, r3
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	7858      	ldrb	r0, [r3, #1]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b386:	2301      	movs	r3, #1
 800b388:	69ba      	ldr	r2, [r7, #24]
 800b38a:	f7fd fb45 	bl	8008a18 <disk_read>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <f_read+0x232>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2201      	movs	r2, #1
 800b398:	755a      	strb	r2, [r3, #21]
 800b39a:	2301      	movs	r3, #1
 800b39c:	e041      	b.n	800b422 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	69ba      	ldr	r2, [r7, #24]
 800b3a2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	899b      	ldrh	r3, [r3, #12]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	697a      	ldr	r2, [r7, #20]
 800b3b0:	8992      	ldrh	r2, [r2, #12]
 800b3b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3b6:	fb01 f202 	mul.w	r2, r1, r2
 800b3ba:	1a9b      	subs	r3, r3, r2
 800b3bc:	1ac3      	subs	r3, r0, r3
 800b3be:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b3c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d901      	bls.n	800b3cc <f_read+0x260>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	699b      	ldr	r3, [r3, #24]
 800b3d6:	697a      	ldr	r2, [r7, #20]
 800b3d8:	8992      	ldrh	r2, [r2, #12]
 800b3da:	fbb3 f0f2 	udiv	r0, r3, r2
 800b3de:	fb00 f202 	mul.w	r2, r0, r2
 800b3e2:	1a9b      	subs	r3, r3, r2
 800b3e4:	440b      	add	r3, r1
 800b3e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3ec:	f7fd fbf4 	bl	8008bd8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b3f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f4:	4413      	add	r3, r2
 800b3f6:	627b      	str	r3, [r7, #36]	; 0x24
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	699a      	ldr	r2, [r3, #24]
 800b3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fe:	441a      	add	r2, r3
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	619a      	str	r2, [r3, #24]
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40a:	441a      	add	r2, r3
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	601a      	str	r2, [r3, #0]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	f47f aee1 	bne.w	800b1e2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3738      	adds	r7, #56	; 0x38
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b08c      	sub	sp, #48	; 0x30
 800b42e:	af00      	add	r7, sp, #0
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	607a      	str	r2, [r7, #4]
 800b436:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	2200      	movs	r2, #0
 800b440:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f107 0210 	add.w	r2, r7, #16
 800b448:	4611      	mov	r1, r2
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7ff fc46 	bl	800acdc <validate>
 800b450:	4603      	mov	r3, r0
 800b452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d107      	bne.n	800b46e <f_write+0x44>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	7d5b      	ldrb	r3, [r3, #21]
 800b462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d002      	beq.n	800b474 <f_write+0x4a>
 800b46e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b472:	e16a      	b.n	800b74a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	7d1b      	ldrb	r3, [r3, #20]
 800b478:	f003 0302 	and.w	r3, r3, #2
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d101      	bne.n	800b484 <f_write+0x5a>
 800b480:	2307      	movs	r3, #7
 800b482:	e162      	b.n	800b74a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	699a      	ldr	r2, [r3, #24]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	441a      	add	r2, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	429a      	cmp	r2, r3
 800b492:	f080 814c 	bcs.w	800b72e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	699b      	ldr	r3, [r3, #24]
 800b49a:	43db      	mvns	r3, r3
 800b49c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b49e:	e146      	b.n	800b72e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	699b      	ldr	r3, [r3, #24]
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	8992      	ldrh	r2, [r2, #12]
 800b4a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4ac:	fb01 f202 	mul.w	r2, r1, r2
 800b4b0:	1a9b      	subs	r3, r3, r2
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f040 80f1 	bne.w	800b69a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	699b      	ldr	r3, [r3, #24]
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	8992      	ldrh	r2, [r2, #12]
 800b4c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	8952      	ldrh	r2, [r2, #10]
 800b4c8:	3a01      	subs	r2, #1
 800b4ca:	4013      	ands	r3, r2
 800b4cc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d143      	bne.n	800b55c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10c      	bne.n	800b4f6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d11a      	bne.n	800b51e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fe f8b1 	bl	8009654 <create_chain>
 800b4f2:	62b8      	str	r0, [r7, #40]	; 0x28
 800b4f4:	e013      	b.n	800b51e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d007      	beq.n	800b50e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	699b      	ldr	r3, [r3, #24]
 800b502:	4619      	mov	r1, r3
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f7fe f93d 	bl	8009784 <clmt_clust>
 800b50a:	62b8      	str	r0, [r7, #40]	; 0x28
 800b50c:	e007      	b.n	800b51e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	69db      	ldr	r3, [r3, #28]
 800b514:	4619      	mov	r1, r3
 800b516:	4610      	mov	r0, r2
 800b518:	f7fe f89c 	bl	8009654 <create_chain>
 800b51c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b520:	2b00      	cmp	r3, #0
 800b522:	f000 8109 	beq.w	800b738 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d104      	bne.n	800b536 <f_write+0x10c>
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2202      	movs	r2, #2
 800b530:	755a      	strb	r2, [r3, #21]
 800b532:	2302      	movs	r3, #2
 800b534:	e109      	b.n	800b74a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b53c:	d104      	bne.n	800b548 <f_write+0x11e>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2201      	movs	r2, #1
 800b542:	755a      	strb	r2, [r3, #21]
 800b544:	2301      	movs	r3, #1
 800b546:	e100      	b.n	800b74a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b54c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d102      	bne.n	800b55c <f_write+0x132>
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b55a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	7d1b      	ldrb	r3, [r3, #20]
 800b560:	b25b      	sxtb	r3, r3
 800b562:	2b00      	cmp	r3, #0
 800b564:	da18      	bge.n	800b598 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	7858      	ldrb	r0, [r3, #1]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6a1a      	ldr	r2, [r3, #32]
 800b574:	2301      	movs	r3, #1
 800b576:	f7fd fa6f 	bl	8008a58 <disk_write>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d004      	beq.n	800b58a <f_write+0x160>
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2201      	movs	r2, #1
 800b584:	755a      	strb	r2, [r3, #21]
 800b586:	2301      	movs	r3, #1
 800b588:	e0df      	b.n	800b74a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	7d1b      	ldrb	r3, [r3, #20]
 800b58e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b592:	b2da      	uxtb	r2, r3
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	69db      	ldr	r3, [r3, #28]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	f7fd fde5 	bl	8009170 <clust2sect>
 800b5a6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d104      	bne.n	800b5b8 <f_write+0x18e>
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2202      	movs	r2, #2
 800b5b2:	755a      	strb	r2, [r3, #21]
 800b5b4:	2302      	movs	r3, #2
 800b5b6:	e0c8      	b.n	800b74a <f_write+0x320>
			sect += csect;
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	4413      	add	r3, r2
 800b5be:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	899b      	ldrh	r3, [r3, #12]
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5cc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b5ce:	6a3b      	ldr	r3, [r7, #32]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d043      	beq.n	800b65c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b5d4:	69ba      	ldr	r2, [r7, #24]
 800b5d6:	6a3b      	ldr	r3, [r7, #32]
 800b5d8:	4413      	add	r3, r2
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	8952      	ldrh	r2, [r2, #10]
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d905      	bls.n	800b5ee <f_write+0x1c4>
					cc = fs->csize - csect;
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	895b      	ldrh	r3, [r3, #10]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	7858      	ldrb	r0, [r3, #1]
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	69f9      	ldr	r1, [r7, #28]
 800b5f8:	f7fd fa2e 	bl	8008a58 <disk_write>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d004      	beq.n	800b60c <f_write+0x1e2>
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2201      	movs	r2, #1
 800b606:	755a      	strb	r2, [r3, #21]
 800b608:	2301      	movs	r3, #1
 800b60a:	e09e      	b.n	800b74a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6a1a      	ldr	r2, [r3, #32]
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	6a3a      	ldr	r2, [r7, #32]
 800b616:	429a      	cmp	r2, r3
 800b618:	d918      	bls.n	800b64c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6a1a      	ldr	r2, [r3, #32]
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	8992      	ldrh	r2, [r2, #12]
 800b62c:	fb02 f303 	mul.w	r3, r2, r3
 800b630:	69fa      	ldr	r2, [r7, #28]
 800b632:	18d1      	adds	r1, r2, r3
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	899b      	ldrh	r3, [r3, #12]
 800b638:	461a      	mov	r2, r3
 800b63a:	f7fd facd 	bl	8008bd8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	7d1b      	ldrb	r3, [r3, #20]
 800b642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b646:	b2da      	uxtb	r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	899b      	ldrh	r3, [r3, #12]
 800b650:	461a      	mov	r2, r3
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	fb02 f303 	mul.w	r3, r2, r3
 800b658:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b65a:	e04b      	b.n	800b6f4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6a1b      	ldr	r3, [r3, #32]
 800b660:	697a      	ldr	r2, [r7, #20]
 800b662:	429a      	cmp	r2, r3
 800b664:	d016      	beq.n	800b694 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	699a      	ldr	r2, [r3, #24]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b66e:	429a      	cmp	r2, r3
 800b670:	d210      	bcs.n	800b694 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	7858      	ldrb	r0, [r3, #1]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b67c:	2301      	movs	r3, #1
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	f7fd f9ca 	bl	8008a18 <disk_read>
 800b684:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b686:	2b00      	cmp	r3, #0
 800b688:	d004      	beq.n	800b694 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2201      	movs	r2, #1
 800b68e:	755a      	strb	r2, [r3, #21]
 800b690:	2301      	movs	r3, #1
 800b692:	e05a      	b.n	800b74a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	697a      	ldr	r2, [r7, #20]
 800b698:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	899b      	ldrh	r3, [r3, #12]
 800b69e:	4618      	mov	r0, r3
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	699b      	ldr	r3, [r3, #24]
 800b6a4:	693a      	ldr	r2, [r7, #16]
 800b6a6:	8992      	ldrh	r2, [r2, #12]
 800b6a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6ac:	fb01 f202 	mul.w	r2, r1, r2
 800b6b0:	1a9b      	subs	r3, r3, r2
 800b6b2:	1ac3      	subs	r3, r0, r3
 800b6b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d901      	bls.n	800b6c2 <f_write+0x298>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	699b      	ldr	r3, [r3, #24]
 800b6cc:	693a      	ldr	r2, [r7, #16]
 800b6ce:	8992      	ldrh	r2, [r2, #12]
 800b6d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6d4:	fb00 f202 	mul.w	r2, r0, r2
 800b6d8:	1a9b      	subs	r3, r3, r2
 800b6da:	440b      	add	r3, r1
 800b6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6de:	69f9      	ldr	r1, [r7, #28]
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fd fa79 	bl	8008bd8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	7d1b      	ldrb	r3, [r3, #20]
 800b6ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b6ee:	b2da      	uxtb	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b6f4:	69fa      	ldr	r2, [r7, #28]
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f8:	4413      	add	r3, r2
 800b6fa:	61fb      	str	r3, [r7, #28]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	699a      	ldr	r2, [r3, #24]
 800b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b702:	441a      	add	r2, r3
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	619a      	str	r2, [r3, #24]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	68da      	ldr	r2, [r3, #12]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	429a      	cmp	r2, r3
 800b712:	bf38      	it	cc
 800b714:	461a      	movcc	r2, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	60da      	str	r2, [r3, #12]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b720:	441a      	add	r2, r3
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	601a      	str	r2, [r3, #0]
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72a:	1ad3      	subs	r3, r2, r3
 800b72c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	f47f aeb5 	bne.w	800b4a0 <f_write+0x76>
 800b736:	e000      	b.n	800b73a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b738:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	7d1b      	ldrb	r3, [r3, #20]
 800b73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b742:	b2da      	uxtb	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3730      	adds	r7, #48	; 0x30
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b086      	sub	sp, #24
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f107 0208 	add.w	r2, r7, #8
 800b760:	4611      	mov	r1, r2
 800b762:	4618      	mov	r0, r3
 800b764:	f7ff faba 	bl	800acdc <validate>
 800b768:	4603      	mov	r3, r0
 800b76a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b76c:	7dfb      	ldrb	r3, [r7, #23]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d168      	bne.n	800b844 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	7d1b      	ldrb	r3, [r3, #20]
 800b776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d062      	beq.n	800b844 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	7d1b      	ldrb	r3, [r3, #20]
 800b782:	b25b      	sxtb	r3, r3
 800b784:	2b00      	cmp	r3, #0
 800b786:	da15      	bge.n	800b7b4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	7858      	ldrb	r0, [r3, #1]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a1a      	ldr	r2, [r3, #32]
 800b796:	2301      	movs	r3, #1
 800b798:	f7fd f95e 	bl	8008a58 <disk_write>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <f_sync+0x54>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e04f      	b.n	800b846 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	7d1b      	ldrb	r3, [r3, #20]
 800b7aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7ae:	b2da      	uxtb	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b7b4:	f7fc fbc4 	bl	8007f40 <get_fattime>
 800b7b8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	f7fd fc36 	bl	8009034 <move_window>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b7cc:	7dfb      	ldrb	r3, [r7, #23]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d138      	bne.n	800b844 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	330b      	adds	r3, #11
 800b7dc:	781a      	ldrb	r2, [r3, #0]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	330b      	adds	r3, #11
 800b7e2:	f042 0220 	orr.w	r2, r2, #32
 800b7e6:	b2d2      	uxtb	r2, r2
 800b7e8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6818      	ldr	r0, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	68f9      	ldr	r1, [r7, #12]
 800b7f6:	f7fe f9c2 	bl	8009b7e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f103 021c 	add.w	r2, r3, #28
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	4619      	mov	r1, r3
 800b806:	4610      	mov	r0, r2
 800b808:	f7fd f9ba 	bl	8008b80 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	3316      	adds	r3, #22
 800b810:	6939      	ldr	r1, [r7, #16]
 800b812:	4618      	mov	r0, r3
 800b814:	f7fd f9b4 	bl	8008b80 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	3312      	adds	r3, #18
 800b81c:	2100      	movs	r1, #0
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fd f993 	bl	8008b4a <st_word>
					fs->wflag = 1;
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	2201      	movs	r2, #1
 800b828:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7fd fc2f 	bl	8009090 <sync_fs>
 800b832:	4603      	mov	r3, r0
 800b834:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	7d1b      	ldrb	r3, [r3, #20]
 800b83a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b844:	7dfb      	ldrb	r3, [r7, #23]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3718      	adds	r7, #24
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b084      	sub	sp, #16
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7ff ff7b 	bl	800b752 <f_sync>
 800b85c:	4603      	mov	r3, r0
 800b85e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b860:	7bfb      	ldrb	r3, [r7, #15]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d118      	bne.n	800b898 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f107 0208 	add.w	r2, r7, #8
 800b86c:	4611      	mov	r1, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f7ff fa34 	bl	800acdc <validate>
 800b874:	4603      	mov	r3, r0
 800b876:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b878:	7bfb      	ldrb	r3, [r7, #15]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10c      	bne.n	800b898 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	4618      	mov	r0, r3
 800b884:	f7fd fb32 	bl	8008eec <dec_lock>
 800b888:	4603      	mov	r3, r0
 800b88a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b88c:	7bfb      	ldrb	r3, [r7, #15]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d102      	bne.n	800b898 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b898:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b092      	sub	sp, #72	; 0x48
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	60f8      	str	r0, [r7, #12]
 800b8aa:	60b9      	str	r1, [r7, #8]
 800b8ac:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b8ae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b8b2:	f107 030c 	add.w	r3, r7, #12
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7fe ff89 	bl	800a7d0 <find_volume>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b8c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f040 8099 	bne.w	800ba00 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b8ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	699a      	ldr	r2, [r3, #24]
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	69db      	ldr	r3, [r3, #28]
 800b8dc:	3b02      	subs	r3, #2
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d804      	bhi.n	800b8ec <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e4:	699a      	ldr	r2, [r3, #24]
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	601a      	str	r2, [r3, #0]
 800b8ea:	e089      	b.n	800ba00 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d128      	bne.n	800b94a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fe:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b900:	f107 0314 	add.w	r3, r7, #20
 800b904:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b906:	4618      	mov	r0, r3
 800b908:	f7fd fc51 	bl	80091ae <get_fat>
 800b90c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b914:	d103      	bne.n	800b91e <f_getfree+0x7c>
 800b916:	2301      	movs	r3, #1
 800b918:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b91c:	e063      	b.n	800b9e6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b920:	2b01      	cmp	r3, #1
 800b922:	d103      	bne.n	800b92c <f_getfree+0x8a>
 800b924:	2302      	movs	r3, #2
 800b926:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b92a:	e05c      	b.n	800b9e6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d102      	bne.n	800b938 <f_getfree+0x96>
 800b932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b934:	3301      	adds	r3, #1
 800b936:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b93a:	3301      	adds	r3, #1
 800b93c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b940:	69db      	ldr	r3, [r3, #28]
 800b942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b944:	429a      	cmp	r2, r3
 800b946:	d3db      	bcc.n	800b900 <f_getfree+0x5e>
 800b948:	e04d      	b.n	800b9e6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94c:	69db      	ldr	r3, [r3, #28]
 800b94e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b954:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b956:	2300      	movs	r3, #0
 800b958:	637b      	str	r3, [r7, #52]	; 0x34
 800b95a:	2300      	movs	r3, #0
 800b95c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b960:	2b00      	cmp	r3, #0
 800b962:	d113      	bne.n	800b98c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b968:	1c5a      	adds	r2, r3, #1
 800b96a:	63ba      	str	r2, [r7, #56]	; 0x38
 800b96c:	4619      	mov	r1, r3
 800b96e:	f7fd fb61 	bl	8009034 <move_window>
 800b972:	4603      	mov	r3, r0
 800b974:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b978:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d131      	bne.n	800b9e4 <f_getfree+0x142>
							p = fs->win;
 800b980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b982:	3338      	adds	r3, #56	; 0x38
 800b984:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b988:	899b      	ldrh	r3, [r3, #12]
 800b98a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	2b02      	cmp	r3, #2
 800b992:	d10f      	bne.n	800b9b4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b996:	f7fd f89d 	bl	8008ad4 <ld_word>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d102      	bne.n	800b9a6 <f_getfree+0x104>
 800b9a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	3302      	adds	r3, #2
 800b9aa:	633b      	str	r3, [r7, #48]	; 0x30
 800b9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ae:	3b02      	subs	r3, #2
 800b9b0:	637b      	str	r3, [r7, #52]	; 0x34
 800b9b2:	e010      	b.n	800b9d6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b9b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9b6:	f7fd f8a5 	bl	8008b04 <ld_dword>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d102      	bne.n	800b9ca <f_getfree+0x128>
 800b9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	633b      	str	r3, [r7, #48]	; 0x30
 800b9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d2:	3b04      	subs	r3, #4
 800b9d4:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b9d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1bd      	bne.n	800b95e <f_getfree+0xbc>
 800b9e2:	e000      	b.n	800b9e6 <f_getfree+0x144>
							if (res != FR_OK) break;
 800b9e4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9ea:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9f0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f4:	791a      	ldrb	r2, [r3, #4]
 800b9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f8:	f042 0201 	orr.w	r2, r2, #1
 800b9fc:	b2d2      	uxtb	r2, r2
 800b9fe:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ba00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3748      	adds	r7, #72	; 0x48
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b087      	sub	sp, #28
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	4613      	mov	r3, r2
 800ba18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ba22:	4b1f      	ldr	r3, [pc, #124]	; (800baa0 <FATFS_LinkDriverEx+0x94>)
 800ba24:	7a5b      	ldrb	r3, [r3, #9]
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d131      	bne.n	800ba90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ba2c:	4b1c      	ldr	r3, [pc, #112]	; (800baa0 <FATFS_LinkDriverEx+0x94>)
 800ba2e:	7a5b      	ldrb	r3, [r3, #9]
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	461a      	mov	r2, r3
 800ba34:	4b1a      	ldr	r3, [pc, #104]	; (800baa0 <FATFS_LinkDriverEx+0x94>)
 800ba36:	2100      	movs	r1, #0
 800ba38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ba3a:	4b19      	ldr	r3, [pc, #100]	; (800baa0 <FATFS_LinkDriverEx+0x94>)
 800ba3c:	7a5b      	ldrb	r3, [r3, #9]
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	4a17      	ldr	r2, [pc, #92]	; (800baa0 <FATFS_LinkDriverEx+0x94>)
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ba4a:	4b15      	ldr	r3, [pc, #84]	; (800baa0 <FATFS_LinkDriverEx+0x94>)
 800ba4c:	7a5b      	ldrb	r3, [r3, #9]
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	461a      	mov	r2, r3
 800ba52:	4b13      	ldr	r3, [pc, #76]	; (800baa0 <FATFS_LinkDriverEx+0x94>)
 800ba54:	4413      	add	r3, r2
 800ba56:	79fa      	ldrb	r2, [r7, #7]
 800ba58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ba5a:	4b11      	ldr	r3, [pc, #68]	; (800baa0 <FATFS_LinkDriverEx+0x94>)
 800ba5c:	7a5b      	ldrb	r3, [r3, #9]
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	1c5a      	adds	r2, r3, #1
 800ba62:	b2d1      	uxtb	r1, r2
 800ba64:	4a0e      	ldr	r2, [pc, #56]	; (800baa0 <FATFS_LinkDriverEx+0x94>)
 800ba66:	7251      	strb	r1, [r2, #9]
 800ba68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ba6a:	7dbb      	ldrb	r3, [r7, #22]
 800ba6c:	3330      	adds	r3, #48	; 0x30
 800ba6e:	b2da      	uxtb	r2, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	3301      	adds	r3, #1
 800ba78:	223a      	movs	r2, #58	; 0x3a
 800ba7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	3302      	adds	r3, #2
 800ba80:	222f      	movs	r2, #47	; 0x2f
 800ba82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	3303      	adds	r3, #3
 800ba88:	2200      	movs	r2, #0
 800ba8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ba90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	371c      	adds	r7, #28
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	20005ef8 	.word	0x20005ef8

0800baa4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800baae:	2200      	movs	r2, #0
 800bab0:	6839      	ldr	r1, [r7, #0]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7ff ffaa 	bl	800ba0c <FATFS_LinkDriverEx>
 800bab8:	4603      	mov	r3, r0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
	...

0800bac4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	4603      	mov	r3, r0
 800bacc:	6039      	str	r1, [r7, #0]
 800bace:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bad0:	88fb      	ldrh	r3, [r7, #6]
 800bad2:	2b7f      	cmp	r3, #127	; 0x7f
 800bad4:	d802      	bhi.n	800badc <ff_convert+0x18>
		c = chr;
 800bad6:	88fb      	ldrh	r3, [r7, #6]
 800bad8:	81fb      	strh	r3, [r7, #14]
 800bada:	e025      	b.n	800bb28 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00b      	beq.n	800bafa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bae2:	88fb      	ldrh	r3, [r7, #6]
 800bae4:	2bff      	cmp	r3, #255	; 0xff
 800bae6:	d805      	bhi.n	800baf4 <ff_convert+0x30>
 800bae8:	88fb      	ldrh	r3, [r7, #6]
 800baea:	3b80      	subs	r3, #128	; 0x80
 800baec:	4a12      	ldr	r2, [pc, #72]	; (800bb38 <ff_convert+0x74>)
 800baee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baf2:	e000      	b.n	800baf6 <ff_convert+0x32>
 800baf4:	2300      	movs	r3, #0
 800baf6:	81fb      	strh	r3, [r7, #14]
 800baf8:	e016      	b.n	800bb28 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bafa:	2300      	movs	r3, #0
 800bafc:	81fb      	strh	r3, [r7, #14]
 800bafe:	e009      	b.n	800bb14 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bb00:	89fb      	ldrh	r3, [r7, #14]
 800bb02:	4a0d      	ldr	r2, [pc, #52]	; (800bb38 <ff_convert+0x74>)
 800bb04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb08:	88fa      	ldrh	r2, [r7, #6]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d006      	beq.n	800bb1c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bb0e:	89fb      	ldrh	r3, [r7, #14]
 800bb10:	3301      	adds	r3, #1
 800bb12:	81fb      	strh	r3, [r7, #14]
 800bb14:	89fb      	ldrh	r3, [r7, #14]
 800bb16:	2b7f      	cmp	r3, #127	; 0x7f
 800bb18:	d9f2      	bls.n	800bb00 <ff_convert+0x3c>
 800bb1a:	e000      	b.n	800bb1e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bb1c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bb1e:	89fb      	ldrh	r3, [r7, #14]
 800bb20:	3380      	adds	r3, #128	; 0x80
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bb28:	89fb      	ldrh	r3, [r7, #14]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3714      	adds	r7, #20
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	0800ced4 	.word	0x0800ced4

0800bb3c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b087      	sub	sp, #28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	4603      	mov	r3, r0
 800bb44:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bb46:	88fb      	ldrh	r3, [r7, #6]
 800bb48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb4c:	d201      	bcs.n	800bb52 <ff_wtoupper+0x16>
 800bb4e:	4b3e      	ldr	r3, [pc, #248]	; (800bc48 <ff_wtoupper+0x10c>)
 800bb50:	e000      	b.n	800bb54 <ff_wtoupper+0x18>
 800bb52:	4b3e      	ldr	r3, [pc, #248]	; (800bc4c <ff_wtoupper+0x110>)
 800bb54:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	1c9a      	adds	r2, r3, #2
 800bb5a:	617a      	str	r2, [r7, #20]
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800bb60:	8a7b      	ldrh	r3, [r7, #18]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d068      	beq.n	800bc38 <ff_wtoupper+0xfc>
 800bb66:	88fa      	ldrh	r2, [r7, #6]
 800bb68:	8a7b      	ldrh	r3, [r7, #18]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d364      	bcc.n	800bc38 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	1c9a      	adds	r2, r3, #2
 800bb72:	617a      	str	r2, [r7, #20]
 800bb74:	881b      	ldrh	r3, [r3, #0]
 800bb76:	823b      	strh	r3, [r7, #16]
 800bb78:	8a3b      	ldrh	r3, [r7, #16]
 800bb7a:	0a1b      	lsrs	r3, r3, #8
 800bb7c:	81fb      	strh	r3, [r7, #14]
 800bb7e:	8a3b      	ldrh	r3, [r7, #16]
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800bb84:	88fa      	ldrh	r2, [r7, #6]
 800bb86:	8a79      	ldrh	r1, [r7, #18]
 800bb88:	8a3b      	ldrh	r3, [r7, #16]
 800bb8a:	440b      	add	r3, r1
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	da49      	bge.n	800bc24 <ff_wtoupper+0xe8>
			switch (cmd) {
 800bb90:	89fb      	ldrh	r3, [r7, #14]
 800bb92:	2b08      	cmp	r3, #8
 800bb94:	d84f      	bhi.n	800bc36 <ff_wtoupper+0xfa>
 800bb96:	a201      	add	r2, pc, #4	; (adr r2, 800bb9c <ff_wtoupper+0x60>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bbc1 	.word	0x0800bbc1
 800bba0:	0800bbd3 	.word	0x0800bbd3
 800bba4:	0800bbe9 	.word	0x0800bbe9
 800bba8:	0800bbf1 	.word	0x0800bbf1
 800bbac:	0800bbf9 	.word	0x0800bbf9
 800bbb0:	0800bc01 	.word	0x0800bc01
 800bbb4:	0800bc09 	.word	0x0800bc09
 800bbb8:	0800bc11 	.word	0x0800bc11
 800bbbc:	0800bc19 	.word	0x0800bc19
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bbc0:	88fa      	ldrh	r2, [r7, #6]
 800bbc2:	8a7b      	ldrh	r3, [r7, #18]
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	005b      	lsls	r3, r3, #1
 800bbc8:	697a      	ldr	r2, [r7, #20]
 800bbca:	4413      	add	r3, r2
 800bbcc:	881b      	ldrh	r3, [r3, #0]
 800bbce:	80fb      	strh	r3, [r7, #6]
 800bbd0:	e027      	b.n	800bc22 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800bbd2:	88fa      	ldrh	r2, [r7, #6]
 800bbd4:	8a7b      	ldrh	r3, [r7, #18]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	88fa      	ldrh	r2, [r7, #6]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	80fb      	strh	r3, [r7, #6]
 800bbe6:	e01c      	b.n	800bc22 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800bbe8:	88fb      	ldrh	r3, [r7, #6]
 800bbea:	3b10      	subs	r3, #16
 800bbec:	80fb      	strh	r3, [r7, #6]
 800bbee:	e018      	b.n	800bc22 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800bbf0:	88fb      	ldrh	r3, [r7, #6]
 800bbf2:	3b20      	subs	r3, #32
 800bbf4:	80fb      	strh	r3, [r7, #6]
 800bbf6:	e014      	b.n	800bc22 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bbf8:	88fb      	ldrh	r3, [r7, #6]
 800bbfa:	3b30      	subs	r3, #48	; 0x30
 800bbfc:	80fb      	strh	r3, [r7, #6]
 800bbfe:	e010      	b.n	800bc22 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bc00:	88fb      	ldrh	r3, [r7, #6]
 800bc02:	3b1a      	subs	r3, #26
 800bc04:	80fb      	strh	r3, [r7, #6]
 800bc06:	e00c      	b.n	800bc22 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bc08:	88fb      	ldrh	r3, [r7, #6]
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	80fb      	strh	r3, [r7, #6]
 800bc0e:	e008      	b.n	800bc22 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800bc10:	88fb      	ldrh	r3, [r7, #6]
 800bc12:	3b50      	subs	r3, #80	; 0x50
 800bc14:	80fb      	strh	r3, [r7, #6]
 800bc16:	e004      	b.n	800bc22 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bc18:	88fb      	ldrh	r3, [r7, #6]
 800bc1a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800bc1e:	80fb      	strh	r3, [r7, #6]
 800bc20:	bf00      	nop
			}
			break;
 800bc22:	e008      	b.n	800bc36 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800bc24:	89fb      	ldrh	r3, [r7, #14]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d195      	bne.n	800bb56 <ff_wtoupper+0x1a>
 800bc2a:	8a3b      	ldrh	r3, [r7, #16]
 800bc2c:	005b      	lsls	r3, r3, #1
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	4413      	add	r3, r2
 800bc32:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800bc34:	e78f      	b.n	800bb56 <ff_wtoupper+0x1a>
			break;
 800bc36:	bf00      	nop
	}

	return chr;
 800bc38:	88fb      	ldrh	r3, [r7, #6]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	371c      	adds	r7, #28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	0800cfd4 	.word	0x0800cfd4
 800bc4c:	0800d1c8 	.word	0x0800d1c8

0800bc50 <std>:
 800bc50:	2300      	movs	r3, #0
 800bc52:	b510      	push	{r4, lr}
 800bc54:	4604      	mov	r4, r0
 800bc56:	e9c0 3300 	strd	r3, r3, [r0]
 800bc5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc5e:	6083      	str	r3, [r0, #8]
 800bc60:	8181      	strh	r1, [r0, #12]
 800bc62:	6643      	str	r3, [r0, #100]	; 0x64
 800bc64:	81c2      	strh	r2, [r0, #14]
 800bc66:	6183      	str	r3, [r0, #24]
 800bc68:	4619      	mov	r1, r3
 800bc6a:	2208      	movs	r2, #8
 800bc6c:	305c      	adds	r0, #92	; 0x5c
 800bc6e:	f000 f931 	bl	800bed4 <memset>
 800bc72:	4b0d      	ldr	r3, [pc, #52]	; (800bca8 <std+0x58>)
 800bc74:	6263      	str	r3, [r4, #36]	; 0x24
 800bc76:	4b0d      	ldr	r3, [pc, #52]	; (800bcac <std+0x5c>)
 800bc78:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc7a:	4b0d      	ldr	r3, [pc, #52]	; (800bcb0 <std+0x60>)
 800bc7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc7e:	4b0d      	ldr	r3, [pc, #52]	; (800bcb4 <std+0x64>)
 800bc80:	6323      	str	r3, [r4, #48]	; 0x30
 800bc82:	4b0d      	ldr	r3, [pc, #52]	; (800bcb8 <std+0x68>)
 800bc84:	6224      	str	r4, [r4, #32]
 800bc86:	429c      	cmp	r4, r3
 800bc88:	d006      	beq.n	800bc98 <std+0x48>
 800bc8a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bc8e:	4294      	cmp	r4, r2
 800bc90:	d002      	beq.n	800bc98 <std+0x48>
 800bc92:	33d0      	adds	r3, #208	; 0xd0
 800bc94:	429c      	cmp	r4, r3
 800bc96:	d105      	bne.n	800bca4 <std+0x54>
 800bc98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bca0:	f000 b94a 	b.w	800bf38 <__retarget_lock_init_recursive>
 800bca4:	bd10      	pop	{r4, pc}
 800bca6:	bf00      	nop
 800bca8:	0800c799 	.word	0x0800c799
 800bcac:	0800c7bb 	.word	0x0800c7bb
 800bcb0:	0800c7f3 	.word	0x0800c7f3
 800bcb4:	0800c817 	.word	0x0800c817
 800bcb8:	20005f04 	.word	0x20005f04

0800bcbc <stdio_exit_handler>:
 800bcbc:	4a02      	ldr	r2, [pc, #8]	; (800bcc8 <stdio_exit_handler+0xc>)
 800bcbe:	4903      	ldr	r1, [pc, #12]	; (800bccc <stdio_exit_handler+0x10>)
 800bcc0:	4803      	ldr	r0, [pc, #12]	; (800bcd0 <stdio_exit_handler+0x14>)
 800bcc2:	f000 b869 	b.w	800bd98 <_fwalk_sglue>
 800bcc6:	bf00      	nop
 800bcc8:	20000060 	.word	0x20000060
 800bccc:	0800c731 	.word	0x0800c731
 800bcd0:	2000006c 	.word	0x2000006c

0800bcd4 <cleanup_stdio>:
 800bcd4:	6841      	ldr	r1, [r0, #4]
 800bcd6:	4b0c      	ldr	r3, [pc, #48]	; (800bd08 <cleanup_stdio+0x34>)
 800bcd8:	4299      	cmp	r1, r3
 800bcda:	b510      	push	{r4, lr}
 800bcdc:	4604      	mov	r4, r0
 800bcde:	d001      	beq.n	800bce4 <cleanup_stdio+0x10>
 800bce0:	f000 fd26 	bl	800c730 <_fflush_r>
 800bce4:	68a1      	ldr	r1, [r4, #8]
 800bce6:	4b09      	ldr	r3, [pc, #36]	; (800bd0c <cleanup_stdio+0x38>)
 800bce8:	4299      	cmp	r1, r3
 800bcea:	d002      	beq.n	800bcf2 <cleanup_stdio+0x1e>
 800bcec:	4620      	mov	r0, r4
 800bcee:	f000 fd1f 	bl	800c730 <_fflush_r>
 800bcf2:	68e1      	ldr	r1, [r4, #12]
 800bcf4:	4b06      	ldr	r3, [pc, #24]	; (800bd10 <cleanup_stdio+0x3c>)
 800bcf6:	4299      	cmp	r1, r3
 800bcf8:	d004      	beq.n	800bd04 <cleanup_stdio+0x30>
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd00:	f000 bd16 	b.w	800c730 <_fflush_r>
 800bd04:	bd10      	pop	{r4, pc}
 800bd06:	bf00      	nop
 800bd08:	20005f04 	.word	0x20005f04
 800bd0c:	20005f6c 	.word	0x20005f6c
 800bd10:	20005fd4 	.word	0x20005fd4

0800bd14 <global_stdio_init.part.0>:
 800bd14:	b510      	push	{r4, lr}
 800bd16:	4b0b      	ldr	r3, [pc, #44]	; (800bd44 <global_stdio_init.part.0+0x30>)
 800bd18:	4c0b      	ldr	r4, [pc, #44]	; (800bd48 <global_stdio_init.part.0+0x34>)
 800bd1a:	4a0c      	ldr	r2, [pc, #48]	; (800bd4c <global_stdio_init.part.0+0x38>)
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	4620      	mov	r0, r4
 800bd20:	2200      	movs	r2, #0
 800bd22:	2104      	movs	r1, #4
 800bd24:	f7ff ff94 	bl	800bc50 <std>
 800bd28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	2109      	movs	r1, #9
 800bd30:	f7ff ff8e 	bl	800bc50 <std>
 800bd34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bd38:	2202      	movs	r2, #2
 800bd3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd3e:	2112      	movs	r1, #18
 800bd40:	f7ff bf86 	b.w	800bc50 <std>
 800bd44:	2000603c 	.word	0x2000603c
 800bd48:	20005f04 	.word	0x20005f04
 800bd4c:	0800bcbd 	.word	0x0800bcbd

0800bd50 <__sfp_lock_acquire>:
 800bd50:	4801      	ldr	r0, [pc, #4]	; (800bd58 <__sfp_lock_acquire+0x8>)
 800bd52:	f000 b8f2 	b.w	800bf3a <__retarget_lock_acquire_recursive>
 800bd56:	bf00      	nop
 800bd58:	20006041 	.word	0x20006041

0800bd5c <__sfp_lock_release>:
 800bd5c:	4801      	ldr	r0, [pc, #4]	; (800bd64 <__sfp_lock_release+0x8>)
 800bd5e:	f000 b8ed 	b.w	800bf3c <__retarget_lock_release_recursive>
 800bd62:	bf00      	nop
 800bd64:	20006041 	.word	0x20006041

0800bd68 <__sinit>:
 800bd68:	b510      	push	{r4, lr}
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	f7ff fff0 	bl	800bd50 <__sfp_lock_acquire>
 800bd70:	6a23      	ldr	r3, [r4, #32]
 800bd72:	b11b      	cbz	r3, 800bd7c <__sinit+0x14>
 800bd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd78:	f7ff bff0 	b.w	800bd5c <__sfp_lock_release>
 800bd7c:	4b04      	ldr	r3, [pc, #16]	; (800bd90 <__sinit+0x28>)
 800bd7e:	6223      	str	r3, [r4, #32]
 800bd80:	4b04      	ldr	r3, [pc, #16]	; (800bd94 <__sinit+0x2c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1f5      	bne.n	800bd74 <__sinit+0xc>
 800bd88:	f7ff ffc4 	bl	800bd14 <global_stdio_init.part.0>
 800bd8c:	e7f2      	b.n	800bd74 <__sinit+0xc>
 800bd8e:	bf00      	nop
 800bd90:	0800bcd5 	.word	0x0800bcd5
 800bd94:	2000603c 	.word	0x2000603c

0800bd98 <_fwalk_sglue>:
 800bd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd9c:	4607      	mov	r7, r0
 800bd9e:	4688      	mov	r8, r1
 800bda0:	4614      	mov	r4, r2
 800bda2:	2600      	movs	r6, #0
 800bda4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bda8:	f1b9 0901 	subs.w	r9, r9, #1
 800bdac:	d505      	bpl.n	800bdba <_fwalk_sglue+0x22>
 800bdae:	6824      	ldr	r4, [r4, #0]
 800bdb0:	2c00      	cmp	r4, #0
 800bdb2:	d1f7      	bne.n	800bda4 <_fwalk_sglue+0xc>
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdba:	89ab      	ldrh	r3, [r5, #12]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d907      	bls.n	800bdd0 <_fwalk_sglue+0x38>
 800bdc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	d003      	beq.n	800bdd0 <_fwalk_sglue+0x38>
 800bdc8:	4629      	mov	r1, r5
 800bdca:	4638      	mov	r0, r7
 800bdcc:	47c0      	blx	r8
 800bdce:	4306      	orrs	r6, r0
 800bdd0:	3568      	adds	r5, #104	; 0x68
 800bdd2:	e7e9      	b.n	800bda8 <_fwalk_sglue+0x10>

0800bdd4 <iprintf>:
 800bdd4:	b40f      	push	{r0, r1, r2, r3}
 800bdd6:	b507      	push	{r0, r1, r2, lr}
 800bdd8:	4906      	ldr	r1, [pc, #24]	; (800bdf4 <iprintf+0x20>)
 800bdda:	ab04      	add	r3, sp, #16
 800bddc:	6808      	ldr	r0, [r1, #0]
 800bdde:	f853 2b04 	ldr.w	r2, [r3], #4
 800bde2:	6881      	ldr	r1, [r0, #8]
 800bde4:	9301      	str	r3, [sp, #4]
 800bde6:	f000 f8d3 	bl	800bf90 <_vfiprintf_r>
 800bdea:	b003      	add	sp, #12
 800bdec:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdf0:	b004      	add	sp, #16
 800bdf2:	4770      	bx	lr
 800bdf4:	200000b8 	.word	0x200000b8

0800bdf8 <_puts_r>:
 800bdf8:	6a03      	ldr	r3, [r0, #32]
 800bdfa:	b570      	push	{r4, r5, r6, lr}
 800bdfc:	6884      	ldr	r4, [r0, #8]
 800bdfe:	4605      	mov	r5, r0
 800be00:	460e      	mov	r6, r1
 800be02:	b90b      	cbnz	r3, 800be08 <_puts_r+0x10>
 800be04:	f7ff ffb0 	bl	800bd68 <__sinit>
 800be08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be0a:	07db      	lsls	r3, r3, #31
 800be0c:	d405      	bmi.n	800be1a <_puts_r+0x22>
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	0598      	lsls	r0, r3, #22
 800be12:	d402      	bmi.n	800be1a <_puts_r+0x22>
 800be14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be16:	f000 f890 	bl	800bf3a <__retarget_lock_acquire_recursive>
 800be1a:	89a3      	ldrh	r3, [r4, #12]
 800be1c:	0719      	lsls	r1, r3, #28
 800be1e:	d513      	bpl.n	800be48 <_puts_r+0x50>
 800be20:	6923      	ldr	r3, [r4, #16]
 800be22:	b18b      	cbz	r3, 800be48 <_puts_r+0x50>
 800be24:	3e01      	subs	r6, #1
 800be26:	68a3      	ldr	r3, [r4, #8]
 800be28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800be2c:	3b01      	subs	r3, #1
 800be2e:	60a3      	str	r3, [r4, #8]
 800be30:	b9e9      	cbnz	r1, 800be6e <_puts_r+0x76>
 800be32:	2b00      	cmp	r3, #0
 800be34:	da2e      	bge.n	800be94 <_puts_r+0x9c>
 800be36:	4622      	mov	r2, r4
 800be38:	210a      	movs	r1, #10
 800be3a:	4628      	mov	r0, r5
 800be3c:	f000 fcef 	bl	800c81e <__swbuf_r>
 800be40:	3001      	adds	r0, #1
 800be42:	d007      	beq.n	800be54 <_puts_r+0x5c>
 800be44:	250a      	movs	r5, #10
 800be46:	e007      	b.n	800be58 <_puts_r+0x60>
 800be48:	4621      	mov	r1, r4
 800be4a:	4628      	mov	r0, r5
 800be4c:	f000 fd24 	bl	800c898 <__swsetup_r>
 800be50:	2800      	cmp	r0, #0
 800be52:	d0e7      	beq.n	800be24 <_puts_r+0x2c>
 800be54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800be58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be5a:	07da      	lsls	r2, r3, #31
 800be5c:	d405      	bmi.n	800be6a <_puts_r+0x72>
 800be5e:	89a3      	ldrh	r3, [r4, #12]
 800be60:	059b      	lsls	r3, r3, #22
 800be62:	d402      	bmi.n	800be6a <_puts_r+0x72>
 800be64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be66:	f000 f869 	bl	800bf3c <__retarget_lock_release_recursive>
 800be6a:	4628      	mov	r0, r5
 800be6c:	bd70      	pop	{r4, r5, r6, pc}
 800be6e:	2b00      	cmp	r3, #0
 800be70:	da04      	bge.n	800be7c <_puts_r+0x84>
 800be72:	69a2      	ldr	r2, [r4, #24]
 800be74:	429a      	cmp	r2, r3
 800be76:	dc06      	bgt.n	800be86 <_puts_r+0x8e>
 800be78:	290a      	cmp	r1, #10
 800be7a:	d004      	beq.n	800be86 <_puts_r+0x8e>
 800be7c:	6823      	ldr	r3, [r4, #0]
 800be7e:	1c5a      	adds	r2, r3, #1
 800be80:	6022      	str	r2, [r4, #0]
 800be82:	7019      	strb	r1, [r3, #0]
 800be84:	e7cf      	b.n	800be26 <_puts_r+0x2e>
 800be86:	4622      	mov	r2, r4
 800be88:	4628      	mov	r0, r5
 800be8a:	f000 fcc8 	bl	800c81e <__swbuf_r>
 800be8e:	3001      	adds	r0, #1
 800be90:	d1c9      	bne.n	800be26 <_puts_r+0x2e>
 800be92:	e7df      	b.n	800be54 <_puts_r+0x5c>
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	250a      	movs	r5, #10
 800be98:	1c5a      	adds	r2, r3, #1
 800be9a:	6022      	str	r2, [r4, #0]
 800be9c:	701d      	strb	r5, [r3, #0]
 800be9e:	e7db      	b.n	800be58 <_puts_r+0x60>

0800bea0 <puts>:
 800bea0:	4b02      	ldr	r3, [pc, #8]	; (800beac <puts+0xc>)
 800bea2:	4601      	mov	r1, r0
 800bea4:	6818      	ldr	r0, [r3, #0]
 800bea6:	f7ff bfa7 	b.w	800bdf8 <_puts_r>
 800beaa:	bf00      	nop
 800beac:	200000b8 	.word	0x200000b8

0800beb0 <strncmp>:
 800beb0:	b510      	push	{r4, lr}
 800beb2:	b16a      	cbz	r2, 800bed0 <strncmp+0x20>
 800beb4:	3901      	subs	r1, #1
 800beb6:	1884      	adds	r4, r0, r2
 800beb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bebc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d103      	bne.n	800becc <strncmp+0x1c>
 800bec4:	42a0      	cmp	r0, r4
 800bec6:	d001      	beq.n	800becc <strncmp+0x1c>
 800bec8:	2a00      	cmp	r2, #0
 800beca:	d1f5      	bne.n	800beb8 <strncmp+0x8>
 800becc:	1ad0      	subs	r0, r2, r3
 800bece:	bd10      	pop	{r4, pc}
 800bed0:	4610      	mov	r0, r2
 800bed2:	e7fc      	b.n	800bece <strncmp+0x1e>

0800bed4 <memset>:
 800bed4:	4402      	add	r2, r0
 800bed6:	4603      	mov	r3, r0
 800bed8:	4293      	cmp	r3, r2
 800beda:	d100      	bne.n	800bede <memset+0xa>
 800bedc:	4770      	bx	lr
 800bede:	f803 1b01 	strb.w	r1, [r3], #1
 800bee2:	e7f9      	b.n	800bed8 <memset+0x4>

0800bee4 <__errno>:
 800bee4:	4b01      	ldr	r3, [pc, #4]	; (800beec <__errno+0x8>)
 800bee6:	6818      	ldr	r0, [r3, #0]
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	200000b8 	.word	0x200000b8

0800bef0 <__libc_init_array>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	4d0d      	ldr	r5, [pc, #52]	; (800bf28 <__libc_init_array+0x38>)
 800bef4:	4c0d      	ldr	r4, [pc, #52]	; (800bf2c <__libc_init_array+0x3c>)
 800bef6:	1b64      	subs	r4, r4, r5
 800bef8:	10a4      	asrs	r4, r4, #2
 800befa:	2600      	movs	r6, #0
 800befc:	42a6      	cmp	r6, r4
 800befe:	d109      	bne.n	800bf14 <__libc_init_array+0x24>
 800bf00:	4d0b      	ldr	r5, [pc, #44]	; (800bf30 <__libc_init_array+0x40>)
 800bf02:	4c0c      	ldr	r4, [pc, #48]	; (800bf34 <__libc_init_array+0x44>)
 800bf04:	f000 fe46 	bl	800cb94 <_init>
 800bf08:	1b64      	subs	r4, r4, r5
 800bf0a:	10a4      	asrs	r4, r4, #2
 800bf0c:	2600      	movs	r6, #0
 800bf0e:	42a6      	cmp	r6, r4
 800bf10:	d105      	bne.n	800bf1e <__libc_init_array+0x2e>
 800bf12:	bd70      	pop	{r4, r5, r6, pc}
 800bf14:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf18:	4798      	blx	r3
 800bf1a:	3601      	adds	r6, #1
 800bf1c:	e7ee      	b.n	800befc <__libc_init_array+0xc>
 800bf1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf22:	4798      	blx	r3
 800bf24:	3601      	adds	r6, #1
 800bf26:	e7f2      	b.n	800bf0e <__libc_init_array+0x1e>
 800bf28:	0800d2c0 	.word	0x0800d2c0
 800bf2c:	0800d2c0 	.word	0x0800d2c0
 800bf30:	0800d2c0 	.word	0x0800d2c0
 800bf34:	0800d2c4 	.word	0x0800d2c4

0800bf38 <__retarget_lock_init_recursive>:
 800bf38:	4770      	bx	lr

0800bf3a <__retarget_lock_acquire_recursive>:
 800bf3a:	4770      	bx	lr

0800bf3c <__retarget_lock_release_recursive>:
 800bf3c:	4770      	bx	lr

0800bf3e <__sfputc_r>:
 800bf3e:	6893      	ldr	r3, [r2, #8]
 800bf40:	3b01      	subs	r3, #1
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	b410      	push	{r4}
 800bf46:	6093      	str	r3, [r2, #8]
 800bf48:	da08      	bge.n	800bf5c <__sfputc_r+0x1e>
 800bf4a:	6994      	ldr	r4, [r2, #24]
 800bf4c:	42a3      	cmp	r3, r4
 800bf4e:	db01      	blt.n	800bf54 <__sfputc_r+0x16>
 800bf50:	290a      	cmp	r1, #10
 800bf52:	d103      	bne.n	800bf5c <__sfputc_r+0x1e>
 800bf54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf58:	f000 bc61 	b.w	800c81e <__swbuf_r>
 800bf5c:	6813      	ldr	r3, [r2, #0]
 800bf5e:	1c58      	adds	r0, r3, #1
 800bf60:	6010      	str	r0, [r2, #0]
 800bf62:	7019      	strb	r1, [r3, #0]
 800bf64:	4608      	mov	r0, r1
 800bf66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <__sfputs_r>:
 800bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6e:	4606      	mov	r6, r0
 800bf70:	460f      	mov	r7, r1
 800bf72:	4614      	mov	r4, r2
 800bf74:	18d5      	adds	r5, r2, r3
 800bf76:	42ac      	cmp	r4, r5
 800bf78:	d101      	bne.n	800bf7e <__sfputs_r+0x12>
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	e007      	b.n	800bf8e <__sfputs_r+0x22>
 800bf7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf82:	463a      	mov	r2, r7
 800bf84:	4630      	mov	r0, r6
 800bf86:	f7ff ffda 	bl	800bf3e <__sfputc_r>
 800bf8a:	1c43      	adds	r3, r0, #1
 800bf8c:	d1f3      	bne.n	800bf76 <__sfputs_r+0xa>
 800bf8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf90 <_vfiprintf_r>:
 800bf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf94:	460d      	mov	r5, r1
 800bf96:	b09d      	sub	sp, #116	; 0x74
 800bf98:	4614      	mov	r4, r2
 800bf9a:	4698      	mov	r8, r3
 800bf9c:	4606      	mov	r6, r0
 800bf9e:	b118      	cbz	r0, 800bfa8 <_vfiprintf_r+0x18>
 800bfa0:	6a03      	ldr	r3, [r0, #32]
 800bfa2:	b90b      	cbnz	r3, 800bfa8 <_vfiprintf_r+0x18>
 800bfa4:	f7ff fee0 	bl	800bd68 <__sinit>
 800bfa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfaa:	07d9      	lsls	r1, r3, #31
 800bfac:	d405      	bmi.n	800bfba <_vfiprintf_r+0x2a>
 800bfae:	89ab      	ldrh	r3, [r5, #12]
 800bfb0:	059a      	lsls	r2, r3, #22
 800bfb2:	d402      	bmi.n	800bfba <_vfiprintf_r+0x2a>
 800bfb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfb6:	f7ff ffc0 	bl	800bf3a <__retarget_lock_acquire_recursive>
 800bfba:	89ab      	ldrh	r3, [r5, #12]
 800bfbc:	071b      	lsls	r3, r3, #28
 800bfbe:	d501      	bpl.n	800bfc4 <_vfiprintf_r+0x34>
 800bfc0:	692b      	ldr	r3, [r5, #16]
 800bfc2:	b99b      	cbnz	r3, 800bfec <_vfiprintf_r+0x5c>
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f000 fc66 	bl	800c898 <__swsetup_r>
 800bfcc:	b170      	cbz	r0, 800bfec <_vfiprintf_r+0x5c>
 800bfce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd0:	07dc      	lsls	r4, r3, #31
 800bfd2:	d504      	bpl.n	800bfde <_vfiprintf_r+0x4e>
 800bfd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfd8:	b01d      	add	sp, #116	; 0x74
 800bfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfde:	89ab      	ldrh	r3, [r5, #12]
 800bfe0:	0598      	lsls	r0, r3, #22
 800bfe2:	d4f7      	bmi.n	800bfd4 <_vfiprintf_r+0x44>
 800bfe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfe6:	f7ff ffa9 	bl	800bf3c <__retarget_lock_release_recursive>
 800bfea:	e7f3      	b.n	800bfd4 <_vfiprintf_r+0x44>
 800bfec:	2300      	movs	r3, #0
 800bfee:	9309      	str	r3, [sp, #36]	; 0x24
 800bff0:	2320      	movs	r3, #32
 800bff2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bff6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bffa:	2330      	movs	r3, #48	; 0x30
 800bffc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c1b0 <_vfiprintf_r+0x220>
 800c000:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c004:	f04f 0901 	mov.w	r9, #1
 800c008:	4623      	mov	r3, r4
 800c00a:	469a      	mov	sl, r3
 800c00c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c010:	b10a      	cbz	r2, 800c016 <_vfiprintf_r+0x86>
 800c012:	2a25      	cmp	r2, #37	; 0x25
 800c014:	d1f9      	bne.n	800c00a <_vfiprintf_r+0x7a>
 800c016:	ebba 0b04 	subs.w	fp, sl, r4
 800c01a:	d00b      	beq.n	800c034 <_vfiprintf_r+0xa4>
 800c01c:	465b      	mov	r3, fp
 800c01e:	4622      	mov	r2, r4
 800c020:	4629      	mov	r1, r5
 800c022:	4630      	mov	r0, r6
 800c024:	f7ff ffa2 	bl	800bf6c <__sfputs_r>
 800c028:	3001      	adds	r0, #1
 800c02a:	f000 80a9 	beq.w	800c180 <_vfiprintf_r+0x1f0>
 800c02e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c030:	445a      	add	r2, fp
 800c032:	9209      	str	r2, [sp, #36]	; 0x24
 800c034:	f89a 3000 	ldrb.w	r3, [sl]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	f000 80a1 	beq.w	800c180 <_vfiprintf_r+0x1f0>
 800c03e:	2300      	movs	r3, #0
 800c040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c048:	f10a 0a01 	add.w	sl, sl, #1
 800c04c:	9304      	str	r3, [sp, #16]
 800c04e:	9307      	str	r3, [sp, #28]
 800c050:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c054:	931a      	str	r3, [sp, #104]	; 0x68
 800c056:	4654      	mov	r4, sl
 800c058:	2205      	movs	r2, #5
 800c05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c05e:	4854      	ldr	r0, [pc, #336]	; (800c1b0 <_vfiprintf_r+0x220>)
 800c060:	f7f4 f8b6 	bl	80001d0 <memchr>
 800c064:	9a04      	ldr	r2, [sp, #16]
 800c066:	b9d8      	cbnz	r0, 800c0a0 <_vfiprintf_r+0x110>
 800c068:	06d1      	lsls	r1, r2, #27
 800c06a:	bf44      	itt	mi
 800c06c:	2320      	movmi	r3, #32
 800c06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c072:	0713      	lsls	r3, r2, #28
 800c074:	bf44      	itt	mi
 800c076:	232b      	movmi	r3, #43	; 0x2b
 800c078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c07c:	f89a 3000 	ldrb.w	r3, [sl]
 800c080:	2b2a      	cmp	r3, #42	; 0x2a
 800c082:	d015      	beq.n	800c0b0 <_vfiprintf_r+0x120>
 800c084:	9a07      	ldr	r2, [sp, #28]
 800c086:	4654      	mov	r4, sl
 800c088:	2000      	movs	r0, #0
 800c08a:	f04f 0c0a 	mov.w	ip, #10
 800c08e:	4621      	mov	r1, r4
 800c090:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c094:	3b30      	subs	r3, #48	; 0x30
 800c096:	2b09      	cmp	r3, #9
 800c098:	d94d      	bls.n	800c136 <_vfiprintf_r+0x1a6>
 800c09a:	b1b0      	cbz	r0, 800c0ca <_vfiprintf_r+0x13a>
 800c09c:	9207      	str	r2, [sp, #28]
 800c09e:	e014      	b.n	800c0ca <_vfiprintf_r+0x13a>
 800c0a0:	eba0 0308 	sub.w	r3, r0, r8
 800c0a4:	fa09 f303 	lsl.w	r3, r9, r3
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	9304      	str	r3, [sp, #16]
 800c0ac:	46a2      	mov	sl, r4
 800c0ae:	e7d2      	b.n	800c056 <_vfiprintf_r+0xc6>
 800c0b0:	9b03      	ldr	r3, [sp, #12]
 800c0b2:	1d19      	adds	r1, r3, #4
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	9103      	str	r1, [sp, #12]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	bfbb      	ittet	lt
 800c0bc:	425b      	neglt	r3, r3
 800c0be:	f042 0202 	orrlt.w	r2, r2, #2
 800c0c2:	9307      	strge	r3, [sp, #28]
 800c0c4:	9307      	strlt	r3, [sp, #28]
 800c0c6:	bfb8      	it	lt
 800c0c8:	9204      	strlt	r2, [sp, #16]
 800c0ca:	7823      	ldrb	r3, [r4, #0]
 800c0cc:	2b2e      	cmp	r3, #46	; 0x2e
 800c0ce:	d10c      	bne.n	800c0ea <_vfiprintf_r+0x15a>
 800c0d0:	7863      	ldrb	r3, [r4, #1]
 800c0d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c0d4:	d134      	bne.n	800c140 <_vfiprintf_r+0x1b0>
 800c0d6:	9b03      	ldr	r3, [sp, #12]
 800c0d8:	1d1a      	adds	r2, r3, #4
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	9203      	str	r2, [sp, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	bfb8      	it	lt
 800c0e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c0e6:	3402      	adds	r4, #2
 800c0e8:	9305      	str	r3, [sp, #20]
 800c0ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c1c0 <_vfiprintf_r+0x230>
 800c0ee:	7821      	ldrb	r1, [r4, #0]
 800c0f0:	2203      	movs	r2, #3
 800c0f2:	4650      	mov	r0, sl
 800c0f4:	f7f4 f86c 	bl	80001d0 <memchr>
 800c0f8:	b138      	cbz	r0, 800c10a <_vfiprintf_r+0x17a>
 800c0fa:	9b04      	ldr	r3, [sp, #16]
 800c0fc:	eba0 000a 	sub.w	r0, r0, sl
 800c100:	2240      	movs	r2, #64	; 0x40
 800c102:	4082      	lsls	r2, r0
 800c104:	4313      	orrs	r3, r2
 800c106:	3401      	adds	r4, #1
 800c108:	9304      	str	r3, [sp, #16]
 800c10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c10e:	4829      	ldr	r0, [pc, #164]	; (800c1b4 <_vfiprintf_r+0x224>)
 800c110:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c114:	2206      	movs	r2, #6
 800c116:	f7f4 f85b 	bl	80001d0 <memchr>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d03f      	beq.n	800c19e <_vfiprintf_r+0x20e>
 800c11e:	4b26      	ldr	r3, [pc, #152]	; (800c1b8 <_vfiprintf_r+0x228>)
 800c120:	bb1b      	cbnz	r3, 800c16a <_vfiprintf_r+0x1da>
 800c122:	9b03      	ldr	r3, [sp, #12]
 800c124:	3307      	adds	r3, #7
 800c126:	f023 0307 	bic.w	r3, r3, #7
 800c12a:	3308      	adds	r3, #8
 800c12c:	9303      	str	r3, [sp, #12]
 800c12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c130:	443b      	add	r3, r7
 800c132:	9309      	str	r3, [sp, #36]	; 0x24
 800c134:	e768      	b.n	800c008 <_vfiprintf_r+0x78>
 800c136:	fb0c 3202 	mla	r2, ip, r2, r3
 800c13a:	460c      	mov	r4, r1
 800c13c:	2001      	movs	r0, #1
 800c13e:	e7a6      	b.n	800c08e <_vfiprintf_r+0xfe>
 800c140:	2300      	movs	r3, #0
 800c142:	3401      	adds	r4, #1
 800c144:	9305      	str	r3, [sp, #20]
 800c146:	4619      	mov	r1, r3
 800c148:	f04f 0c0a 	mov.w	ip, #10
 800c14c:	4620      	mov	r0, r4
 800c14e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c152:	3a30      	subs	r2, #48	; 0x30
 800c154:	2a09      	cmp	r2, #9
 800c156:	d903      	bls.n	800c160 <_vfiprintf_r+0x1d0>
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d0c6      	beq.n	800c0ea <_vfiprintf_r+0x15a>
 800c15c:	9105      	str	r1, [sp, #20]
 800c15e:	e7c4      	b.n	800c0ea <_vfiprintf_r+0x15a>
 800c160:	fb0c 2101 	mla	r1, ip, r1, r2
 800c164:	4604      	mov	r4, r0
 800c166:	2301      	movs	r3, #1
 800c168:	e7f0      	b.n	800c14c <_vfiprintf_r+0x1bc>
 800c16a:	ab03      	add	r3, sp, #12
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	462a      	mov	r2, r5
 800c170:	4b12      	ldr	r3, [pc, #72]	; (800c1bc <_vfiprintf_r+0x22c>)
 800c172:	a904      	add	r1, sp, #16
 800c174:	4630      	mov	r0, r6
 800c176:	f3af 8000 	nop.w
 800c17a:	4607      	mov	r7, r0
 800c17c:	1c78      	adds	r0, r7, #1
 800c17e:	d1d6      	bne.n	800c12e <_vfiprintf_r+0x19e>
 800c180:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c182:	07d9      	lsls	r1, r3, #31
 800c184:	d405      	bmi.n	800c192 <_vfiprintf_r+0x202>
 800c186:	89ab      	ldrh	r3, [r5, #12]
 800c188:	059a      	lsls	r2, r3, #22
 800c18a:	d402      	bmi.n	800c192 <_vfiprintf_r+0x202>
 800c18c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c18e:	f7ff fed5 	bl	800bf3c <__retarget_lock_release_recursive>
 800c192:	89ab      	ldrh	r3, [r5, #12]
 800c194:	065b      	lsls	r3, r3, #25
 800c196:	f53f af1d 	bmi.w	800bfd4 <_vfiprintf_r+0x44>
 800c19a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c19c:	e71c      	b.n	800bfd8 <_vfiprintf_r+0x48>
 800c19e:	ab03      	add	r3, sp, #12
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	462a      	mov	r2, r5
 800c1a4:	4b05      	ldr	r3, [pc, #20]	; (800c1bc <_vfiprintf_r+0x22c>)
 800c1a6:	a904      	add	r1, sp, #16
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f000 f919 	bl	800c3e0 <_printf_i>
 800c1ae:	e7e4      	b.n	800c17a <_vfiprintf_r+0x1ea>
 800c1b0:	0800d284 	.word	0x0800d284
 800c1b4:	0800d28e 	.word	0x0800d28e
 800c1b8:	00000000 	.word	0x00000000
 800c1bc:	0800bf6d 	.word	0x0800bf6d
 800c1c0:	0800d28a 	.word	0x0800d28a

0800c1c4 <sbrk_aligned>:
 800c1c4:	b570      	push	{r4, r5, r6, lr}
 800c1c6:	4e0e      	ldr	r6, [pc, #56]	; (800c200 <sbrk_aligned+0x3c>)
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	6831      	ldr	r1, [r6, #0]
 800c1cc:	4605      	mov	r5, r0
 800c1ce:	b911      	cbnz	r1, 800c1d6 <sbrk_aligned+0x12>
 800c1d0:	f000 fc72 	bl	800cab8 <_sbrk_r>
 800c1d4:	6030      	str	r0, [r6, #0]
 800c1d6:	4621      	mov	r1, r4
 800c1d8:	4628      	mov	r0, r5
 800c1da:	f000 fc6d 	bl	800cab8 <_sbrk_r>
 800c1de:	1c43      	adds	r3, r0, #1
 800c1e0:	d00a      	beq.n	800c1f8 <sbrk_aligned+0x34>
 800c1e2:	1cc4      	adds	r4, r0, #3
 800c1e4:	f024 0403 	bic.w	r4, r4, #3
 800c1e8:	42a0      	cmp	r0, r4
 800c1ea:	d007      	beq.n	800c1fc <sbrk_aligned+0x38>
 800c1ec:	1a21      	subs	r1, r4, r0
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	f000 fc62 	bl	800cab8 <_sbrk_r>
 800c1f4:	3001      	adds	r0, #1
 800c1f6:	d101      	bne.n	800c1fc <sbrk_aligned+0x38>
 800c1f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	bd70      	pop	{r4, r5, r6, pc}
 800c200:	20006048 	.word	0x20006048

0800c204 <_malloc_r>:
 800c204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c208:	1ccd      	adds	r5, r1, #3
 800c20a:	f025 0503 	bic.w	r5, r5, #3
 800c20e:	3508      	adds	r5, #8
 800c210:	2d0c      	cmp	r5, #12
 800c212:	bf38      	it	cc
 800c214:	250c      	movcc	r5, #12
 800c216:	2d00      	cmp	r5, #0
 800c218:	4607      	mov	r7, r0
 800c21a:	db01      	blt.n	800c220 <_malloc_r+0x1c>
 800c21c:	42a9      	cmp	r1, r5
 800c21e:	d905      	bls.n	800c22c <_malloc_r+0x28>
 800c220:	230c      	movs	r3, #12
 800c222:	603b      	str	r3, [r7, #0]
 800c224:	2600      	movs	r6, #0
 800c226:	4630      	mov	r0, r6
 800c228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c22c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c300 <_malloc_r+0xfc>
 800c230:	f000 faa6 	bl	800c780 <__malloc_lock>
 800c234:	f8d8 3000 	ldr.w	r3, [r8]
 800c238:	461c      	mov	r4, r3
 800c23a:	bb5c      	cbnz	r4, 800c294 <_malloc_r+0x90>
 800c23c:	4629      	mov	r1, r5
 800c23e:	4638      	mov	r0, r7
 800c240:	f7ff ffc0 	bl	800c1c4 <sbrk_aligned>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	4604      	mov	r4, r0
 800c248:	d155      	bne.n	800c2f6 <_malloc_r+0xf2>
 800c24a:	f8d8 4000 	ldr.w	r4, [r8]
 800c24e:	4626      	mov	r6, r4
 800c250:	2e00      	cmp	r6, #0
 800c252:	d145      	bne.n	800c2e0 <_malloc_r+0xdc>
 800c254:	2c00      	cmp	r4, #0
 800c256:	d048      	beq.n	800c2ea <_malloc_r+0xe6>
 800c258:	6823      	ldr	r3, [r4, #0]
 800c25a:	4631      	mov	r1, r6
 800c25c:	4638      	mov	r0, r7
 800c25e:	eb04 0903 	add.w	r9, r4, r3
 800c262:	f000 fc29 	bl	800cab8 <_sbrk_r>
 800c266:	4581      	cmp	r9, r0
 800c268:	d13f      	bne.n	800c2ea <_malloc_r+0xe6>
 800c26a:	6821      	ldr	r1, [r4, #0]
 800c26c:	1a6d      	subs	r5, r5, r1
 800c26e:	4629      	mov	r1, r5
 800c270:	4638      	mov	r0, r7
 800c272:	f7ff ffa7 	bl	800c1c4 <sbrk_aligned>
 800c276:	3001      	adds	r0, #1
 800c278:	d037      	beq.n	800c2ea <_malloc_r+0xe6>
 800c27a:	6823      	ldr	r3, [r4, #0]
 800c27c:	442b      	add	r3, r5
 800c27e:	6023      	str	r3, [r4, #0]
 800c280:	f8d8 3000 	ldr.w	r3, [r8]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d038      	beq.n	800c2fa <_malloc_r+0xf6>
 800c288:	685a      	ldr	r2, [r3, #4]
 800c28a:	42a2      	cmp	r2, r4
 800c28c:	d12b      	bne.n	800c2e6 <_malloc_r+0xe2>
 800c28e:	2200      	movs	r2, #0
 800c290:	605a      	str	r2, [r3, #4]
 800c292:	e00f      	b.n	800c2b4 <_malloc_r+0xb0>
 800c294:	6822      	ldr	r2, [r4, #0]
 800c296:	1b52      	subs	r2, r2, r5
 800c298:	d41f      	bmi.n	800c2da <_malloc_r+0xd6>
 800c29a:	2a0b      	cmp	r2, #11
 800c29c:	d917      	bls.n	800c2ce <_malloc_r+0xca>
 800c29e:	1961      	adds	r1, r4, r5
 800c2a0:	42a3      	cmp	r3, r4
 800c2a2:	6025      	str	r5, [r4, #0]
 800c2a4:	bf18      	it	ne
 800c2a6:	6059      	strne	r1, [r3, #4]
 800c2a8:	6863      	ldr	r3, [r4, #4]
 800c2aa:	bf08      	it	eq
 800c2ac:	f8c8 1000 	streq.w	r1, [r8]
 800c2b0:	5162      	str	r2, [r4, r5]
 800c2b2:	604b      	str	r3, [r1, #4]
 800c2b4:	4638      	mov	r0, r7
 800c2b6:	f104 060b 	add.w	r6, r4, #11
 800c2ba:	f000 fa67 	bl	800c78c <__malloc_unlock>
 800c2be:	f026 0607 	bic.w	r6, r6, #7
 800c2c2:	1d23      	adds	r3, r4, #4
 800c2c4:	1af2      	subs	r2, r6, r3
 800c2c6:	d0ae      	beq.n	800c226 <_malloc_r+0x22>
 800c2c8:	1b9b      	subs	r3, r3, r6
 800c2ca:	50a3      	str	r3, [r4, r2]
 800c2cc:	e7ab      	b.n	800c226 <_malloc_r+0x22>
 800c2ce:	42a3      	cmp	r3, r4
 800c2d0:	6862      	ldr	r2, [r4, #4]
 800c2d2:	d1dd      	bne.n	800c290 <_malloc_r+0x8c>
 800c2d4:	f8c8 2000 	str.w	r2, [r8]
 800c2d8:	e7ec      	b.n	800c2b4 <_malloc_r+0xb0>
 800c2da:	4623      	mov	r3, r4
 800c2dc:	6864      	ldr	r4, [r4, #4]
 800c2de:	e7ac      	b.n	800c23a <_malloc_r+0x36>
 800c2e0:	4634      	mov	r4, r6
 800c2e2:	6876      	ldr	r6, [r6, #4]
 800c2e4:	e7b4      	b.n	800c250 <_malloc_r+0x4c>
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	e7cc      	b.n	800c284 <_malloc_r+0x80>
 800c2ea:	230c      	movs	r3, #12
 800c2ec:	603b      	str	r3, [r7, #0]
 800c2ee:	4638      	mov	r0, r7
 800c2f0:	f000 fa4c 	bl	800c78c <__malloc_unlock>
 800c2f4:	e797      	b.n	800c226 <_malloc_r+0x22>
 800c2f6:	6025      	str	r5, [r4, #0]
 800c2f8:	e7dc      	b.n	800c2b4 <_malloc_r+0xb0>
 800c2fa:	605b      	str	r3, [r3, #4]
 800c2fc:	deff      	udf	#255	; 0xff
 800c2fe:	bf00      	nop
 800c300:	20006044 	.word	0x20006044

0800c304 <_printf_common>:
 800c304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c308:	4616      	mov	r6, r2
 800c30a:	4699      	mov	r9, r3
 800c30c:	688a      	ldr	r2, [r1, #8]
 800c30e:	690b      	ldr	r3, [r1, #16]
 800c310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c314:	4293      	cmp	r3, r2
 800c316:	bfb8      	it	lt
 800c318:	4613      	movlt	r3, r2
 800c31a:	6033      	str	r3, [r6, #0]
 800c31c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c320:	4607      	mov	r7, r0
 800c322:	460c      	mov	r4, r1
 800c324:	b10a      	cbz	r2, 800c32a <_printf_common+0x26>
 800c326:	3301      	adds	r3, #1
 800c328:	6033      	str	r3, [r6, #0]
 800c32a:	6823      	ldr	r3, [r4, #0]
 800c32c:	0699      	lsls	r1, r3, #26
 800c32e:	bf42      	ittt	mi
 800c330:	6833      	ldrmi	r3, [r6, #0]
 800c332:	3302      	addmi	r3, #2
 800c334:	6033      	strmi	r3, [r6, #0]
 800c336:	6825      	ldr	r5, [r4, #0]
 800c338:	f015 0506 	ands.w	r5, r5, #6
 800c33c:	d106      	bne.n	800c34c <_printf_common+0x48>
 800c33e:	f104 0a19 	add.w	sl, r4, #25
 800c342:	68e3      	ldr	r3, [r4, #12]
 800c344:	6832      	ldr	r2, [r6, #0]
 800c346:	1a9b      	subs	r3, r3, r2
 800c348:	42ab      	cmp	r3, r5
 800c34a:	dc26      	bgt.n	800c39a <_printf_common+0x96>
 800c34c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c350:	1e13      	subs	r3, r2, #0
 800c352:	6822      	ldr	r2, [r4, #0]
 800c354:	bf18      	it	ne
 800c356:	2301      	movne	r3, #1
 800c358:	0692      	lsls	r2, r2, #26
 800c35a:	d42b      	bmi.n	800c3b4 <_printf_common+0xb0>
 800c35c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c360:	4649      	mov	r1, r9
 800c362:	4638      	mov	r0, r7
 800c364:	47c0      	blx	r8
 800c366:	3001      	adds	r0, #1
 800c368:	d01e      	beq.n	800c3a8 <_printf_common+0xa4>
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	6922      	ldr	r2, [r4, #16]
 800c36e:	f003 0306 	and.w	r3, r3, #6
 800c372:	2b04      	cmp	r3, #4
 800c374:	bf02      	ittt	eq
 800c376:	68e5      	ldreq	r5, [r4, #12]
 800c378:	6833      	ldreq	r3, [r6, #0]
 800c37a:	1aed      	subeq	r5, r5, r3
 800c37c:	68a3      	ldr	r3, [r4, #8]
 800c37e:	bf0c      	ite	eq
 800c380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c384:	2500      	movne	r5, #0
 800c386:	4293      	cmp	r3, r2
 800c388:	bfc4      	itt	gt
 800c38a:	1a9b      	subgt	r3, r3, r2
 800c38c:	18ed      	addgt	r5, r5, r3
 800c38e:	2600      	movs	r6, #0
 800c390:	341a      	adds	r4, #26
 800c392:	42b5      	cmp	r5, r6
 800c394:	d11a      	bne.n	800c3cc <_printf_common+0xc8>
 800c396:	2000      	movs	r0, #0
 800c398:	e008      	b.n	800c3ac <_printf_common+0xa8>
 800c39a:	2301      	movs	r3, #1
 800c39c:	4652      	mov	r2, sl
 800c39e:	4649      	mov	r1, r9
 800c3a0:	4638      	mov	r0, r7
 800c3a2:	47c0      	blx	r8
 800c3a4:	3001      	adds	r0, #1
 800c3a6:	d103      	bne.n	800c3b0 <_printf_common+0xac>
 800c3a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3b0:	3501      	adds	r5, #1
 800c3b2:	e7c6      	b.n	800c342 <_printf_common+0x3e>
 800c3b4:	18e1      	adds	r1, r4, r3
 800c3b6:	1c5a      	adds	r2, r3, #1
 800c3b8:	2030      	movs	r0, #48	; 0x30
 800c3ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3be:	4422      	add	r2, r4
 800c3c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3c8:	3302      	adds	r3, #2
 800c3ca:	e7c7      	b.n	800c35c <_printf_common+0x58>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	4622      	mov	r2, r4
 800c3d0:	4649      	mov	r1, r9
 800c3d2:	4638      	mov	r0, r7
 800c3d4:	47c0      	blx	r8
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	d0e6      	beq.n	800c3a8 <_printf_common+0xa4>
 800c3da:	3601      	adds	r6, #1
 800c3dc:	e7d9      	b.n	800c392 <_printf_common+0x8e>
	...

0800c3e0 <_printf_i>:
 800c3e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3e4:	7e0f      	ldrb	r7, [r1, #24]
 800c3e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3e8:	2f78      	cmp	r7, #120	; 0x78
 800c3ea:	4691      	mov	r9, r2
 800c3ec:	4680      	mov	r8, r0
 800c3ee:	460c      	mov	r4, r1
 800c3f0:	469a      	mov	sl, r3
 800c3f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c3f6:	d807      	bhi.n	800c408 <_printf_i+0x28>
 800c3f8:	2f62      	cmp	r7, #98	; 0x62
 800c3fa:	d80a      	bhi.n	800c412 <_printf_i+0x32>
 800c3fc:	2f00      	cmp	r7, #0
 800c3fe:	f000 80d4 	beq.w	800c5aa <_printf_i+0x1ca>
 800c402:	2f58      	cmp	r7, #88	; 0x58
 800c404:	f000 80c0 	beq.w	800c588 <_printf_i+0x1a8>
 800c408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c40c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c410:	e03a      	b.n	800c488 <_printf_i+0xa8>
 800c412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c416:	2b15      	cmp	r3, #21
 800c418:	d8f6      	bhi.n	800c408 <_printf_i+0x28>
 800c41a:	a101      	add	r1, pc, #4	; (adr r1, 800c420 <_printf_i+0x40>)
 800c41c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c420:	0800c479 	.word	0x0800c479
 800c424:	0800c48d 	.word	0x0800c48d
 800c428:	0800c409 	.word	0x0800c409
 800c42c:	0800c409 	.word	0x0800c409
 800c430:	0800c409 	.word	0x0800c409
 800c434:	0800c409 	.word	0x0800c409
 800c438:	0800c48d 	.word	0x0800c48d
 800c43c:	0800c409 	.word	0x0800c409
 800c440:	0800c409 	.word	0x0800c409
 800c444:	0800c409 	.word	0x0800c409
 800c448:	0800c409 	.word	0x0800c409
 800c44c:	0800c591 	.word	0x0800c591
 800c450:	0800c4b9 	.word	0x0800c4b9
 800c454:	0800c54b 	.word	0x0800c54b
 800c458:	0800c409 	.word	0x0800c409
 800c45c:	0800c409 	.word	0x0800c409
 800c460:	0800c5b3 	.word	0x0800c5b3
 800c464:	0800c409 	.word	0x0800c409
 800c468:	0800c4b9 	.word	0x0800c4b9
 800c46c:	0800c409 	.word	0x0800c409
 800c470:	0800c409 	.word	0x0800c409
 800c474:	0800c553 	.word	0x0800c553
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	1d1a      	adds	r2, r3, #4
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	602a      	str	r2, [r5, #0]
 800c480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c488:	2301      	movs	r3, #1
 800c48a:	e09f      	b.n	800c5cc <_printf_i+0x1ec>
 800c48c:	6820      	ldr	r0, [r4, #0]
 800c48e:	682b      	ldr	r3, [r5, #0]
 800c490:	0607      	lsls	r7, r0, #24
 800c492:	f103 0104 	add.w	r1, r3, #4
 800c496:	6029      	str	r1, [r5, #0]
 800c498:	d501      	bpl.n	800c49e <_printf_i+0xbe>
 800c49a:	681e      	ldr	r6, [r3, #0]
 800c49c:	e003      	b.n	800c4a6 <_printf_i+0xc6>
 800c49e:	0646      	lsls	r6, r0, #25
 800c4a0:	d5fb      	bpl.n	800c49a <_printf_i+0xba>
 800c4a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c4a6:	2e00      	cmp	r6, #0
 800c4a8:	da03      	bge.n	800c4b2 <_printf_i+0xd2>
 800c4aa:	232d      	movs	r3, #45	; 0x2d
 800c4ac:	4276      	negs	r6, r6
 800c4ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4b2:	485a      	ldr	r0, [pc, #360]	; (800c61c <_printf_i+0x23c>)
 800c4b4:	230a      	movs	r3, #10
 800c4b6:	e012      	b.n	800c4de <_printf_i+0xfe>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	6820      	ldr	r0, [r4, #0]
 800c4bc:	1d19      	adds	r1, r3, #4
 800c4be:	6029      	str	r1, [r5, #0]
 800c4c0:	0605      	lsls	r5, r0, #24
 800c4c2:	d501      	bpl.n	800c4c8 <_printf_i+0xe8>
 800c4c4:	681e      	ldr	r6, [r3, #0]
 800c4c6:	e002      	b.n	800c4ce <_printf_i+0xee>
 800c4c8:	0641      	lsls	r1, r0, #25
 800c4ca:	d5fb      	bpl.n	800c4c4 <_printf_i+0xe4>
 800c4cc:	881e      	ldrh	r6, [r3, #0]
 800c4ce:	4853      	ldr	r0, [pc, #332]	; (800c61c <_printf_i+0x23c>)
 800c4d0:	2f6f      	cmp	r7, #111	; 0x6f
 800c4d2:	bf0c      	ite	eq
 800c4d4:	2308      	moveq	r3, #8
 800c4d6:	230a      	movne	r3, #10
 800c4d8:	2100      	movs	r1, #0
 800c4da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4de:	6865      	ldr	r5, [r4, #4]
 800c4e0:	60a5      	str	r5, [r4, #8]
 800c4e2:	2d00      	cmp	r5, #0
 800c4e4:	bfa2      	ittt	ge
 800c4e6:	6821      	ldrge	r1, [r4, #0]
 800c4e8:	f021 0104 	bicge.w	r1, r1, #4
 800c4ec:	6021      	strge	r1, [r4, #0]
 800c4ee:	b90e      	cbnz	r6, 800c4f4 <_printf_i+0x114>
 800c4f0:	2d00      	cmp	r5, #0
 800c4f2:	d04b      	beq.n	800c58c <_printf_i+0x1ac>
 800c4f4:	4615      	mov	r5, r2
 800c4f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c4fa:	fb03 6711 	mls	r7, r3, r1, r6
 800c4fe:	5dc7      	ldrb	r7, [r0, r7]
 800c500:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c504:	4637      	mov	r7, r6
 800c506:	42bb      	cmp	r3, r7
 800c508:	460e      	mov	r6, r1
 800c50a:	d9f4      	bls.n	800c4f6 <_printf_i+0x116>
 800c50c:	2b08      	cmp	r3, #8
 800c50e:	d10b      	bne.n	800c528 <_printf_i+0x148>
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	07de      	lsls	r6, r3, #31
 800c514:	d508      	bpl.n	800c528 <_printf_i+0x148>
 800c516:	6923      	ldr	r3, [r4, #16]
 800c518:	6861      	ldr	r1, [r4, #4]
 800c51a:	4299      	cmp	r1, r3
 800c51c:	bfde      	ittt	le
 800c51e:	2330      	movle	r3, #48	; 0x30
 800c520:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c524:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c528:	1b52      	subs	r2, r2, r5
 800c52a:	6122      	str	r2, [r4, #16]
 800c52c:	f8cd a000 	str.w	sl, [sp]
 800c530:	464b      	mov	r3, r9
 800c532:	aa03      	add	r2, sp, #12
 800c534:	4621      	mov	r1, r4
 800c536:	4640      	mov	r0, r8
 800c538:	f7ff fee4 	bl	800c304 <_printf_common>
 800c53c:	3001      	adds	r0, #1
 800c53e:	d14a      	bne.n	800c5d6 <_printf_i+0x1f6>
 800c540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c544:	b004      	add	sp, #16
 800c546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	f043 0320 	orr.w	r3, r3, #32
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	4833      	ldr	r0, [pc, #204]	; (800c620 <_printf_i+0x240>)
 800c554:	2778      	movs	r7, #120	; 0x78
 800c556:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	6829      	ldr	r1, [r5, #0]
 800c55e:	061f      	lsls	r7, r3, #24
 800c560:	f851 6b04 	ldr.w	r6, [r1], #4
 800c564:	d402      	bmi.n	800c56c <_printf_i+0x18c>
 800c566:	065f      	lsls	r7, r3, #25
 800c568:	bf48      	it	mi
 800c56a:	b2b6      	uxthmi	r6, r6
 800c56c:	07df      	lsls	r7, r3, #31
 800c56e:	bf48      	it	mi
 800c570:	f043 0320 	orrmi.w	r3, r3, #32
 800c574:	6029      	str	r1, [r5, #0]
 800c576:	bf48      	it	mi
 800c578:	6023      	strmi	r3, [r4, #0]
 800c57a:	b91e      	cbnz	r6, 800c584 <_printf_i+0x1a4>
 800c57c:	6823      	ldr	r3, [r4, #0]
 800c57e:	f023 0320 	bic.w	r3, r3, #32
 800c582:	6023      	str	r3, [r4, #0]
 800c584:	2310      	movs	r3, #16
 800c586:	e7a7      	b.n	800c4d8 <_printf_i+0xf8>
 800c588:	4824      	ldr	r0, [pc, #144]	; (800c61c <_printf_i+0x23c>)
 800c58a:	e7e4      	b.n	800c556 <_printf_i+0x176>
 800c58c:	4615      	mov	r5, r2
 800c58e:	e7bd      	b.n	800c50c <_printf_i+0x12c>
 800c590:	682b      	ldr	r3, [r5, #0]
 800c592:	6826      	ldr	r6, [r4, #0]
 800c594:	6961      	ldr	r1, [r4, #20]
 800c596:	1d18      	adds	r0, r3, #4
 800c598:	6028      	str	r0, [r5, #0]
 800c59a:	0635      	lsls	r5, r6, #24
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	d501      	bpl.n	800c5a4 <_printf_i+0x1c4>
 800c5a0:	6019      	str	r1, [r3, #0]
 800c5a2:	e002      	b.n	800c5aa <_printf_i+0x1ca>
 800c5a4:	0670      	lsls	r0, r6, #25
 800c5a6:	d5fb      	bpl.n	800c5a0 <_printf_i+0x1c0>
 800c5a8:	8019      	strh	r1, [r3, #0]
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	6123      	str	r3, [r4, #16]
 800c5ae:	4615      	mov	r5, r2
 800c5b0:	e7bc      	b.n	800c52c <_printf_i+0x14c>
 800c5b2:	682b      	ldr	r3, [r5, #0]
 800c5b4:	1d1a      	adds	r2, r3, #4
 800c5b6:	602a      	str	r2, [r5, #0]
 800c5b8:	681d      	ldr	r5, [r3, #0]
 800c5ba:	6862      	ldr	r2, [r4, #4]
 800c5bc:	2100      	movs	r1, #0
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f7f3 fe06 	bl	80001d0 <memchr>
 800c5c4:	b108      	cbz	r0, 800c5ca <_printf_i+0x1ea>
 800c5c6:	1b40      	subs	r0, r0, r5
 800c5c8:	6060      	str	r0, [r4, #4]
 800c5ca:	6863      	ldr	r3, [r4, #4]
 800c5cc:	6123      	str	r3, [r4, #16]
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5d4:	e7aa      	b.n	800c52c <_printf_i+0x14c>
 800c5d6:	6923      	ldr	r3, [r4, #16]
 800c5d8:	462a      	mov	r2, r5
 800c5da:	4649      	mov	r1, r9
 800c5dc:	4640      	mov	r0, r8
 800c5de:	47d0      	blx	sl
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	d0ad      	beq.n	800c540 <_printf_i+0x160>
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	079b      	lsls	r3, r3, #30
 800c5e8:	d413      	bmi.n	800c612 <_printf_i+0x232>
 800c5ea:	68e0      	ldr	r0, [r4, #12]
 800c5ec:	9b03      	ldr	r3, [sp, #12]
 800c5ee:	4298      	cmp	r0, r3
 800c5f0:	bfb8      	it	lt
 800c5f2:	4618      	movlt	r0, r3
 800c5f4:	e7a6      	b.n	800c544 <_printf_i+0x164>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	4632      	mov	r2, r6
 800c5fa:	4649      	mov	r1, r9
 800c5fc:	4640      	mov	r0, r8
 800c5fe:	47d0      	blx	sl
 800c600:	3001      	adds	r0, #1
 800c602:	d09d      	beq.n	800c540 <_printf_i+0x160>
 800c604:	3501      	adds	r5, #1
 800c606:	68e3      	ldr	r3, [r4, #12]
 800c608:	9903      	ldr	r1, [sp, #12]
 800c60a:	1a5b      	subs	r3, r3, r1
 800c60c:	42ab      	cmp	r3, r5
 800c60e:	dcf2      	bgt.n	800c5f6 <_printf_i+0x216>
 800c610:	e7eb      	b.n	800c5ea <_printf_i+0x20a>
 800c612:	2500      	movs	r5, #0
 800c614:	f104 0619 	add.w	r6, r4, #25
 800c618:	e7f5      	b.n	800c606 <_printf_i+0x226>
 800c61a:	bf00      	nop
 800c61c:	0800d295 	.word	0x0800d295
 800c620:	0800d2a6 	.word	0x0800d2a6

0800c624 <__sflush_r>:
 800c624:	898a      	ldrh	r2, [r1, #12]
 800c626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c62a:	4605      	mov	r5, r0
 800c62c:	0710      	lsls	r0, r2, #28
 800c62e:	460c      	mov	r4, r1
 800c630:	d458      	bmi.n	800c6e4 <__sflush_r+0xc0>
 800c632:	684b      	ldr	r3, [r1, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	dc05      	bgt.n	800c644 <__sflush_r+0x20>
 800c638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	dc02      	bgt.n	800c644 <__sflush_r+0x20>
 800c63e:	2000      	movs	r0, #0
 800c640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c646:	2e00      	cmp	r6, #0
 800c648:	d0f9      	beq.n	800c63e <__sflush_r+0x1a>
 800c64a:	2300      	movs	r3, #0
 800c64c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c650:	682f      	ldr	r7, [r5, #0]
 800c652:	6a21      	ldr	r1, [r4, #32]
 800c654:	602b      	str	r3, [r5, #0]
 800c656:	d032      	beq.n	800c6be <__sflush_r+0x9a>
 800c658:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c65a:	89a3      	ldrh	r3, [r4, #12]
 800c65c:	075a      	lsls	r2, r3, #29
 800c65e:	d505      	bpl.n	800c66c <__sflush_r+0x48>
 800c660:	6863      	ldr	r3, [r4, #4]
 800c662:	1ac0      	subs	r0, r0, r3
 800c664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c666:	b10b      	cbz	r3, 800c66c <__sflush_r+0x48>
 800c668:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c66a:	1ac0      	subs	r0, r0, r3
 800c66c:	2300      	movs	r3, #0
 800c66e:	4602      	mov	r2, r0
 800c670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c672:	6a21      	ldr	r1, [r4, #32]
 800c674:	4628      	mov	r0, r5
 800c676:	47b0      	blx	r6
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	89a3      	ldrh	r3, [r4, #12]
 800c67c:	d106      	bne.n	800c68c <__sflush_r+0x68>
 800c67e:	6829      	ldr	r1, [r5, #0]
 800c680:	291d      	cmp	r1, #29
 800c682:	d82b      	bhi.n	800c6dc <__sflush_r+0xb8>
 800c684:	4a29      	ldr	r2, [pc, #164]	; (800c72c <__sflush_r+0x108>)
 800c686:	410a      	asrs	r2, r1
 800c688:	07d6      	lsls	r6, r2, #31
 800c68a:	d427      	bmi.n	800c6dc <__sflush_r+0xb8>
 800c68c:	2200      	movs	r2, #0
 800c68e:	6062      	str	r2, [r4, #4]
 800c690:	04d9      	lsls	r1, r3, #19
 800c692:	6922      	ldr	r2, [r4, #16]
 800c694:	6022      	str	r2, [r4, #0]
 800c696:	d504      	bpl.n	800c6a2 <__sflush_r+0x7e>
 800c698:	1c42      	adds	r2, r0, #1
 800c69a:	d101      	bne.n	800c6a0 <__sflush_r+0x7c>
 800c69c:	682b      	ldr	r3, [r5, #0]
 800c69e:	b903      	cbnz	r3, 800c6a2 <__sflush_r+0x7e>
 800c6a0:	6560      	str	r0, [r4, #84]	; 0x54
 800c6a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6a4:	602f      	str	r7, [r5, #0]
 800c6a6:	2900      	cmp	r1, #0
 800c6a8:	d0c9      	beq.n	800c63e <__sflush_r+0x1a>
 800c6aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6ae:	4299      	cmp	r1, r3
 800c6b0:	d002      	beq.n	800c6b8 <__sflush_r+0x94>
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	f000 fa22 	bl	800cafc <_free_r>
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	6360      	str	r0, [r4, #52]	; 0x34
 800c6bc:	e7c0      	b.n	800c640 <__sflush_r+0x1c>
 800c6be:	2301      	movs	r3, #1
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	47b0      	blx	r6
 800c6c4:	1c41      	adds	r1, r0, #1
 800c6c6:	d1c8      	bne.n	800c65a <__sflush_r+0x36>
 800c6c8:	682b      	ldr	r3, [r5, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d0c5      	beq.n	800c65a <__sflush_r+0x36>
 800c6ce:	2b1d      	cmp	r3, #29
 800c6d0:	d001      	beq.n	800c6d6 <__sflush_r+0xb2>
 800c6d2:	2b16      	cmp	r3, #22
 800c6d4:	d101      	bne.n	800c6da <__sflush_r+0xb6>
 800c6d6:	602f      	str	r7, [r5, #0]
 800c6d8:	e7b1      	b.n	800c63e <__sflush_r+0x1a>
 800c6da:	89a3      	ldrh	r3, [r4, #12]
 800c6dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6e0:	81a3      	strh	r3, [r4, #12]
 800c6e2:	e7ad      	b.n	800c640 <__sflush_r+0x1c>
 800c6e4:	690f      	ldr	r7, [r1, #16]
 800c6e6:	2f00      	cmp	r7, #0
 800c6e8:	d0a9      	beq.n	800c63e <__sflush_r+0x1a>
 800c6ea:	0793      	lsls	r3, r2, #30
 800c6ec:	680e      	ldr	r6, [r1, #0]
 800c6ee:	bf08      	it	eq
 800c6f0:	694b      	ldreq	r3, [r1, #20]
 800c6f2:	600f      	str	r7, [r1, #0]
 800c6f4:	bf18      	it	ne
 800c6f6:	2300      	movne	r3, #0
 800c6f8:	eba6 0807 	sub.w	r8, r6, r7
 800c6fc:	608b      	str	r3, [r1, #8]
 800c6fe:	f1b8 0f00 	cmp.w	r8, #0
 800c702:	dd9c      	ble.n	800c63e <__sflush_r+0x1a>
 800c704:	6a21      	ldr	r1, [r4, #32]
 800c706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c708:	4643      	mov	r3, r8
 800c70a:	463a      	mov	r2, r7
 800c70c:	4628      	mov	r0, r5
 800c70e:	47b0      	blx	r6
 800c710:	2800      	cmp	r0, #0
 800c712:	dc06      	bgt.n	800c722 <__sflush_r+0xfe>
 800c714:	89a3      	ldrh	r3, [r4, #12]
 800c716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c71a:	81a3      	strh	r3, [r4, #12]
 800c71c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c720:	e78e      	b.n	800c640 <__sflush_r+0x1c>
 800c722:	4407      	add	r7, r0
 800c724:	eba8 0800 	sub.w	r8, r8, r0
 800c728:	e7e9      	b.n	800c6fe <__sflush_r+0xda>
 800c72a:	bf00      	nop
 800c72c:	dfbffffe 	.word	0xdfbffffe

0800c730 <_fflush_r>:
 800c730:	b538      	push	{r3, r4, r5, lr}
 800c732:	690b      	ldr	r3, [r1, #16]
 800c734:	4605      	mov	r5, r0
 800c736:	460c      	mov	r4, r1
 800c738:	b913      	cbnz	r3, 800c740 <_fflush_r+0x10>
 800c73a:	2500      	movs	r5, #0
 800c73c:	4628      	mov	r0, r5
 800c73e:	bd38      	pop	{r3, r4, r5, pc}
 800c740:	b118      	cbz	r0, 800c74a <_fflush_r+0x1a>
 800c742:	6a03      	ldr	r3, [r0, #32]
 800c744:	b90b      	cbnz	r3, 800c74a <_fflush_r+0x1a>
 800c746:	f7ff fb0f 	bl	800bd68 <__sinit>
 800c74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d0f3      	beq.n	800c73a <_fflush_r+0xa>
 800c752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c754:	07d0      	lsls	r0, r2, #31
 800c756:	d404      	bmi.n	800c762 <_fflush_r+0x32>
 800c758:	0599      	lsls	r1, r3, #22
 800c75a:	d402      	bmi.n	800c762 <_fflush_r+0x32>
 800c75c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c75e:	f7ff fbec 	bl	800bf3a <__retarget_lock_acquire_recursive>
 800c762:	4628      	mov	r0, r5
 800c764:	4621      	mov	r1, r4
 800c766:	f7ff ff5d 	bl	800c624 <__sflush_r>
 800c76a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c76c:	07da      	lsls	r2, r3, #31
 800c76e:	4605      	mov	r5, r0
 800c770:	d4e4      	bmi.n	800c73c <_fflush_r+0xc>
 800c772:	89a3      	ldrh	r3, [r4, #12]
 800c774:	059b      	lsls	r3, r3, #22
 800c776:	d4e1      	bmi.n	800c73c <_fflush_r+0xc>
 800c778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c77a:	f7ff fbdf 	bl	800bf3c <__retarget_lock_release_recursive>
 800c77e:	e7dd      	b.n	800c73c <_fflush_r+0xc>

0800c780 <__malloc_lock>:
 800c780:	4801      	ldr	r0, [pc, #4]	; (800c788 <__malloc_lock+0x8>)
 800c782:	f7ff bbda 	b.w	800bf3a <__retarget_lock_acquire_recursive>
 800c786:	bf00      	nop
 800c788:	20006040 	.word	0x20006040

0800c78c <__malloc_unlock>:
 800c78c:	4801      	ldr	r0, [pc, #4]	; (800c794 <__malloc_unlock+0x8>)
 800c78e:	f7ff bbd5 	b.w	800bf3c <__retarget_lock_release_recursive>
 800c792:	bf00      	nop
 800c794:	20006040 	.word	0x20006040

0800c798 <__sread>:
 800c798:	b510      	push	{r4, lr}
 800c79a:	460c      	mov	r4, r1
 800c79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7a0:	f000 f978 	bl	800ca94 <_read_r>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	bfab      	itete	ge
 800c7a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7aa:	89a3      	ldrhlt	r3, [r4, #12]
 800c7ac:	181b      	addge	r3, r3, r0
 800c7ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c7b2:	bfac      	ite	ge
 800c7b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7b6:	81a3      	strhlt	r3, [r4, #12]
 800c7b8:	bd10      	pop	{r4, pc}

0800c7ba <__swrite>:
 800c7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7be:	461f      	mov	r7, r3
 800c7c0:	898b      	ldrh	r3, [r1, #12]
 800c7c2:	05db      	lsls	r3, r3, #23
 800c7c4:	4605      	mov	r5, r0
 800c7c6:	460c      	mov	r4, r1
 800c7c8:	4616      	mov	r6, r2
 800c7ca:	d505      	bpl.n	800c7d8 <__swrite+0x1e>
 800c7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f000 f94c 	bl	800ca70 <_lseek_r>
 800c7d8:	89a3      	ldrh	r3, [r4, #12]
 800c7da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7e2:	81a3      	strh	r3, [r4, #12]
 800c7e4:	4632      	mov	r2, r6
 800c7e6:	463b      	mov	r3, r7
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ee:	f000 b973 	b.w	800cad8 <_write_r>

0800c7f2 <__sseek>:
 800c7f2:	b510      	push	{r4, lr}
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7fa:	f000 f939 	bl	800ca70 <_lseek_r>
 800c7fe:	1c43      	adds	r3, r0, #1
 800c800:	89a3      	ldrh	r3, [r4, #12]
 800c802:	bf15      	itete	ne
 800c804:	6560      	strne	r0, [r4, #84]	; 0x54
 800c806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c80a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c80e:	81a3      	strheq	r3, [r4, #12]
 800c810:	bf18      	it	ne
 800c812:	81a3      	strhne	r3, [r4, #12]
 800c814:	bd10      	pop	{r4, pc}

0800c816 <__sclose>:
 800c816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c81a:	f000 b8f7 	b.w	800ca0c <_close_r>

0800c81e <__swbuf_r>:
 800c81e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c820:	460e      	mov	r6, r1
 800c822:	4614      	mov	r4, r2
 800c824:	4605      	mov	r5, r0
 800c826:	b118      	cbz	r0, 800c830 <__swbuf_r+0x12>
 800c828:	6a03      	ldr	r3, [r0, #32]
 800c82a:	b90b      	cbnz	r3, 800c830 <__swbuf_r+0x12>
 800c82c:	f7ff fa9c 	bl	800bd68 <__sinit>
 800c830:	69a3      	ldr	r3, [r4, #24]
 800c832:	60a3      	str	r3, [r4, #8]
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	071a      	lsls	r2, r3, #28
 800c838:	d525      	bpl.n	800c886 <__swbuf_r+0x68>
 800c83a:	6923      	ldr	r3, [r4, #16]
 800c83c:	b31b      	cbz	r3, 800c886 <__swbuf_r+0x68>
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	6922      	ldr	r2, [r4, #16]
 800c842:	1a98      	subs	r0, r3, r2
 800c844:	6963      	ldr	r3, [r4, #20]
 800c846:	b2f6      	uxtb	r6, r6
 800c848:	4283      	cmp	r3, r0
 800c84a:	4637      	mov	r7, r6
 800c84c:	dc04      	bgt.n	800c858 <__swbuf_r+0x3a>
 800c84e:	4621      	mov	r1, r4
 800c850:	4628      	mov	r0, r5
 800c852:	f7ff ff6d 	bl	800c730 <_fflush_r>
 800c856:	b9e0      	cbnz	r0, 800c892 <__swbuf_r+0x74>
 800c858:	68a3      	ldr	r3, [r4, #8]
 800c85a:	3b01      	subs	r3, #1
 800c85c:	60a3      	str	r3, [r4, #8]
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	1c5a      	adds	r2, r3, #1
 800c862:	6022      	str	r2, [r4, #0]
 800c864:	701e      	strb	r6, [r3, #0]
 800c866:	6962      	ldr	r2, [r4, #20]
 800c868:	1c43      	adds	r3, r0, #1
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d004      	beq.n	800c878 <__swbuf_r+0x5a>
 800c86e:	89a3      	ldrh	r3, [r4, #12]
 800c870:	07db      	lsls	r3, r3, #31
 800c872:	d506      	bpl.n	800c882 <__swbuf_r+0x64>
 800c874:	2e0a      	cmp	r6, #10
 800c876:	d104      	bne.n	800c882 <__swbuf_r+0x64>
 800c878:	4621      	mov	r1, r4
 800c87a:	4628      	mov	r0, r5
 800c87c:	f7ff ff58 	bl	800c730 <_fflush_r>
 800c880:	b938      	cbnz	r0, 800c892 <__swbuf_r+0x74>
 800c882:	4638      	mov	r0, r7
 800c884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c886:	4621      	mov	r1, r4
 800c888:	4628      	mov	r0, r5
 800c88a:	f000 f805 	bl	800c898 <__swsetup_r>
 800c88e:	2800      	cmp	r0, #0
 800c890:	d0d5      	beq.n	800c83e <__swbuf_r+0x20>
 800c892:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c896:	e7f4      	b.n	800c882 <__swbuf_r+0x64>

0800c898 <__swsetup_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4b2a      	ldr	r3, [pc, #168]	; (800c944 <__swsetup_r+0xac>)
 800c89c:	4605      	mov	r5, r0
 800c89e:	6818      	ldr	r0, [r3, #0]
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	b118      	cbz	r0, 800c8ac <__swsetup_r+0x14>
 800c8a4:	6a03      	ldr	r3, [r0, #32]
 800c8a6:	b90b      	cbnz	r3, 800c8ac <__swsetup_r+0x14>
 800c8a8:	f7ff fa5e 	bl	800bd68 <__sinit>
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8b2:	0718      	lsls	r0, r3, #28
 800c8b4:	d422      	bmi.n	800c8fc <__swsetup_r+0x64>
 800c8b6:	06d9      	lsls	r1, r3, #27
 800c8b8:	d407      	bmi.n	800c8ca <__swsetup_r+0x32>
 800c8ba:	2309      	movs	r3, #9
 800c8bc:	602b      	str	r3, [r5, #0]
 800c8be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8c2:	81a3      	strh	r3, [r4, #12]
 800c8c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8c8:	e034      	b.n	800c934 <__swsetup_r+0x9c>
 800c8ca:	0758      	lsls	r0, r3, #29
 800c8cc:	d512      	bpl.n	800c8f4 <__swsetup_r+0x5c>
 800c8ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8d0:	b141      	cbz	r1, 800c8e4 <__swsetup_r+0x4c>
 800c8d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8d6:	4299      	cmp	r1, r3
 800c8d8:	d002      	beq.n	800c8e0 <__swsetup_r+0x48>
 800c8da:	4628      	mov	r0, r5
 800c8dc:	f000 f90e 	bl	800cafc <_free_r>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	6363      	str	r3, [r4, #52]	; 0x34
 800c8e4:	89a3      	ldrh	r3, [r4, #12]
 800c8e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8ea:	81a3      	strh	r3, [r4, #12]
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	6063      	str	r3, [r4, #4]
 800c8f0:	6923      	ldr	r3, [r4, #16]
 800c8f2:	6023      	str	r3, [r4, #0]
 800c8f4:	89a3      	ldrh	r3, [r4, #12]
 800c8f6:	f043 0308 	orr.w	r3, r3, #8
 800c8fa:	81a3      	strh	r3, [r4, #12]
 800c8fc:	6923      	ldr	r3, [r4, #16]
 800c8fe:	b94b      	cbnz	r3, 800c914 <__swsetup_r+0x7c>
 800c900:	89a3      	ldrh	r3, [r4, #12]
 800c902:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c90a:	d003      	beq.n	800c914 <__swsetup_r+0x7c>
 800c90c:	4621      	mov	r1, r4
 800c90e:	4628      	mov	r0, r5
 800c910:	f000 f840 	bl	800c994 <__smakebuf_r>
 800c914:	89a0      	ldrh	r0, [r4, #12]
 800c916:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c91a:	f010 0301 	ands.w	r3, r0, #1
 800c91e:	d00a      	beq.n	800c936 <__swsetup_r+0x9e>
 800c920:	2300      	movs	r3, #0
 800c922:	60a3      	str	r3, [r4, #8]
 800c924:	6963      	ldr	r3, [r4, #20]
 800c926:	425b      	negs	r3, r3
 800c928:	61a3      	str	r3, [r4, #24]
 800c92a:	6923      	ldr	r3, [r4, #16]
 800c92c:	b943      	cbnz	r3, 800c940 <__swsetup_r+0xa8>
 800c92e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c932:	d1c4      	bne.n	800c8be <__swsetup_r+0x26>
 800c934:	bd38      	pop	{r3, r4, r5, pc}
 800c936:	0781      	lsls	r1, r0, #30
 800c938:	bf58      	it	pl
 800c93a:	6963      	ldrpl	r3, [r4, #20]
 800c93c:	60a3      	str	r3, [r4, #8]
 800c93e:	e7f4      	b.n	800c92a <__swsetup_r+0x92>
 800c940:	2000      	movs	r0, #0
 800c942:	e7f7      	b.n	800c934 <__swsetup_r+0x9c>
 800c944:	200000b8 	.word	0x200000b8

0800c948 <__swhatbuf_r>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	460c      	mov	r4, r1
 800c94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c950:	2900      	cmp	r1, #0
 800c952:	b096      	sub	sp, #88	; 0x58
 800c954:	4615      	mov	r5, r2
 800c956:	461e      	mov	r6, r3
 800c958:	da0d      	bge.n	800c976 <__swhatbuf_r+0x2e>
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c960:	f04f 0100 	mov.w	r1, #0
 800c964:	bf0c      	ite	eq
 800c966:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c96a:	2340      	movne	r3, #64	; 0x40
 800c96c:	2000      	movs	r0, #0
 800c96e:	6031      	str	r1, [r6, #0]
 800c970:	602b      	str	r3, [r5, #0]
 800c972:	b016      	add	sp, #88	; 0x58
 800c974:	bd70      	pop	{r4, r5, r6, pc}
 800c976:	466a      	mov	r2, sp
 800c978:	f000 f858 	bl	800ca2c <_fstat_r>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	dbec      	blt.n	800c95a <__swhatbuf_r+0x12>
 800c980:	9901      	ldr	r1, [sp, #4]
 800c982:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c986:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c98a:	4259      	negs	r1, r3
 800c98c:	4159      	adcs	r1, r3
 800c98e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c992:	e7eb      	b.n	800c96c <__swhatbuf_r+0x24>

0800c994 <__smakebuf_r>:
 800c994:	898b      	ldrh	r3, [r1, #12]
 800c996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c998:	079d      	lsls	r5, r3, #30
 800c99a:	4606      	mov	r6, r0
 800c99c:	460c      	mov	r4, r1
 800c99e:	d507      	bpl.n	800c9b0 <__smakebuf_r+0x1c>
 800c9a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	6123      	str	r3, [r4, #16]
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	6163      	str	r3, [r4, #20]
 800c9ac:	b002      	add	sp, #8
 800c9ae:	bd70      	pop	{r4, r5, r6, pc}
 800c9b0:	ab01      	add	r3, sp, #4
 800c9b2:	466a      	mov	r2, sp
 800c9b4:	f7ff ffc8 	bl	800c948 <__swhatbuf_r>
 800c9b8:	9900      	ldr	r1, [sp, #0]
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f7ff fc21 	bl	800c204 <_malloc_r>
 800c9c2:	b948      	cbnz	r0, 800c9d8 <__smakebuf_r+0x44>
 800c9c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c8:	059a      	lsls	r2, r3, #22
 800c9ca:	d4ef      	bmi.n	800c9ac <__smakebuf_r+0x18>
 800c9cc:	f023 0303 	bic.w	r3, r3, #3
 800c9d0:	f043 0302 	orr.w	r3, r3, #2
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	e7e3      	b.n	800c9a0 <__smakebuf_r+0xc>
 800c9d8:	89a3      	ldrh	r3, [r4, #12]
 800c9da:	6020      	str	r0, [r4, #0]
 800c9dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e0:	81a3      	strh	r3, [r4, #12]
 800c9e2:	9b00      	ldr	r3, [sp, #0]
 800c9e4:	6163      	str	r3, [r4, #20]
 800c9e6:	9b01      	ldr	r3, [sp, #4]
 800c9e8:	6120      	str	r0, [r4, #16]
 800c9ea:	b15b      	cbz	r3, 800ca04 <__smakebuf_r+0x70>
 800c9ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	f000 f82d 	bl	800ca50 <_isatty_r>
 800c9f6:	b128      	cbz	r0, 800ca04 <__smakebuf_r+0x70>
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	f023 0303 	bic.w	r3, r3, #3
 800c9fe:	f043 0301 	orr.w	r3, r3, #1
 800ca02:	81a3      	strh	r3, [r4, #12]
 800ca04:	89a3      	ldrh	r3, [r4, #12]
 800ca06:	431d      	orrs	r5, r3
 800ca08:	81a5      	strh	r5, [r4, #12]
 800ca0a:	e7cf      	b.n	800c9ac <__smakebuf_r+0x18>

0800ca0c <_close_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	4d06      	ldr	r5, [pc, #24]	; (800ca28 <_close_r+0x1c>)
 800ca10:	2300      	movs	r3, #0
 800ca12:	4604      	mov	r4, r0
 800ca14:	4608      	mov	r0, r1
 800ca16:	602b      	str	r3, [r5, #0]
 800ca18:	f7f5 fcc7 	bl	80023aa <_close>
 800ca1c:	1c43      	adds	r3, r0, #1
 800ca1e:	d102      	bne.n	800ca26 <_close_r+0x1a>
 800ca20:	682b      	ldr	r3, [r5, #0]
 800ca22:	b103      	cbz	r3, 800ca26 <_close_r+0x1a>
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	bd38      	pop	{r3, r4, r5, pc}
 800ca28:	2000604c 	.word	0x2000604c

0800ca2c <_fstat_r>:
 800ca2c:	b538      	push	{r3, r4, r5, lr}
 800ca2e:	4d07      	ldr	r5, [pc, #28]	; (800ca4c <_fstat_r+0x20>)
 800ca30:	2300      	movs	r3, #0
 800ca32:	4604      	mov	r4, r0
 800ca34:	4608      	mov	r0, r1
 800ca36:	4611      	mov	r1, r2
 800ca38:	602b      	str	r3, [r5, #0]
 800ca3a:	f7f5 fcc2 	bl	80023c2 <_fstat>
 800ca3e:	1c43      	adds	r3, r0, #1
 800ca40:	d102      	bne.n	800ca48 <_fstat_r+0x1c>
 800ca42:	682b      	ldr	r3, [r5, #0]
 800ca44:	b103      	cbz	r3, 800ca48 <_fstat_r+0x1c>
 800ca46:	6023      	str	r3, [r4, #0]
 800ca48:	bd38      	pop	{r3, r4, r5, pc}
 800ca4a:	bf00      	nop
 800ca4c:	2000604c 	.word	0x2000604c

0800ca50 <_isatty_r>:
 800ca50:	b538      	push	{r3, r4, r5, lr}
 800ca52:	4d06      	ldr	r5, [pc, #24]	; (800ca6c <_isatty_r+0x1c>)
 800ca54:	2300      	movs	r3, #0
 800ca56:	4604      	mov	r4, r0
 800ca58:	4608      	mov	r0, r1
 800ca5a:	602b      	str	r3, [r5, #0]
 800ca5c:	f7f5 fcc1 	bl	80023e2 <_isatty>
 800ca60:	1c43      	adds	r3, r0, #1
 800ca62:	d102      	bne.n	800ca6a <_isatty_r+0x1a>
 800ca64:	682b      	ldr	r3, [r5, #0]
 800ca66:	b103      	cbz	r3, 800ca6a <_isatty_r+0x1a>
 800ca68:	6023      	str	r3, [r4, #0]
 800ca6a:	bd38      	pop	{r3, r4, r5, pc}
 800ca6c:	2000604c 	.word	0x2000604c

0800ca70 <_lseek_r>:
 800ca70:	b538      	push	{r3, r4, r5, lr}
 800ca72:	4d07      	ldr	r5, [pc, #28]	; (800ca90 <_lseek_r+0x20>)
 800ca74:	4604      	mov	r4, r0
 800ca76:	4608      	mov	r0, r1
 800ca78:	4611      	mov	r1, r2
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	602a      	str	r2, [r5, #0]
 800ca7e:	461a      	mov	r2, r3
 800ca80:	f7f5 fcba 	bl	80023f8 <_lseek>
 800ca84:	1c43      	adds	r3, r0, #1
 800ca86:	d102      	bne.n	800ca8e <_lseek_r+0x1e>
 800ca88:	682b      	ldr	r3, [r5, #0]
 800ca8a:	b103      	cbz	r3, 800ca8e <_lseek_r+0x1e>
 800ca8c:	6023      	str	r3, [r4, #0]
 800ca8e:	bd38      	pop	{r3, r4, r5, pc}
 800ca90:	2000604c 	.word	0x2000604c

0800ca94 <_read_r>:
 800ca94:	b538      	push	{r3, r4, r5, lr}
 800ca96:	4d07      	ldr	r5, [pc, #28]	; (800cab4 <_read_r+0x20>)
 800ca98:	4604      	mov	r4, r0
 800ca9a:	4608      	mov	r0, r1
 800ca9c:	4611      	mov	r1, r2
 800ca9e:	2200      	movs	r2, #0
 800caa0:	602a      	str	r2, [r5, #0]
 800caa2:	461a      	mov	r2, r3
 800caa4:	f7f5 fc48 	bl	8002338 <_read>
 800caa8:	1c43      	adds	r3, r0, #1
 800caaa:	d102      	bne.n	800cab2 <_read_r+0x1e>
 800caac:	682b      	ldr	r3, [r5, #0]
 800caae:	b103      	cbz	r3, 800cab2 <_read_r+0x1e>
 800cab0:	6023      	str	r3, [r4, #0]
 800cab2:	bd38      	pop	{r3, r4, r5, pc}
 800cab4:	2000604c 	.word	0x2000604c

0800cab8 <_sbrk_r>:
 800cab8:	b538      	push	{r3, r4, r5, lr}
 800caba:	4d06      	ldr	r5, [pc, #24]	; (800cad4 <_sbrk_r+0x1c>)
 800cabc:	2300      	movs	r3, #0
 800cabe:	4604      	mov	r4, r0
 800cac0:	4608      	mov	r0, r1
 800cac2:	602b      	str	r3, [r5, #0]
 800cac4:	f7f5 fca6 	bl	8002414 <_sbrk>
 800cac8:	1c43      	adds	r3, r0, #1
 800caca:	d102      	bne.n	800cad2 <_sbrk_r+0x1a>
 800cacc:	682b      	ldr	r3, [r5, #0]
 800cace:	b103      	cbz	r3, 800cad2 <_sbrk_r+0x1a>
 800cad0:	6023      	str	r3, [r4, #0]
 800cad2:	bd38      	pop	{r3, r4, r5, pc}
 800cad4:	2000604c 	.word	0x2000604c

0800cad8 <_write_r>:
 800cad8:	b538      	push	{r3, r4, r5, lr}
 800cada:	4d07      	ldr	r5, [pc, #28]	; (800caf8 <_write_r+0x20>)
 800cadc:	4604      	mov	r4, r0
 800cade:	4608      	mov	r0, r1
 800cae0:	4611      	mov	r1, r2
 800cae2:	2200      	movs	r2, #0
 800cae4:	602a      	str	r2, [r5, #0]
 800cae6:	461a      	mov	r2, r3
 800cae8:	f7f5 fc43 	bl	8002372 <_write>
 800caec:	1c43      	adds	r3, r0, #1
 800caee:	d102      	bne.n	800caf6 <_write_r+0x1e>
 800caf0:	682b      	ldr	r3, [r5, #0]
 800caf2:	b103      	cbz	r3, 800caf6 <_write_r+0x1e>
 800caf4:	6023      	str	r3, [r4, #0]
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	2000604c 	.word	0x2000604c

0800cafc <_free_r>:
 800cafc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cafe:	2900      	cmp	r1, #0
 800cb00:	d044      	beq.n	800cb8c <_free_r+0x90>
 800cb02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb06:	9001      	str	r0, [sp, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	f1a1 0404 	sub.w	r4, r1, #4
 800cb0e:	bfb8      	it	lt
 800cb10:	18e4      	addlt	r4, r4, r3
 800cb12:	f7ff fe35 	bl	800c780 <__malloc_lock>
 800cb16:	4a1e      	ldr	r2, [pc, #120]	; (800cb90 <_free_r+0x94>)
 800cb18:	9801      	ldr	r0, [sp, #4]
 800cb1a:	6813      	ldr	r3, [r2, #0]
 800cb1c:	b933      	cbnz	r3, 800cb2c <_free_r+0x30>
 800cb1e:	6063      	str	r3, [r4, #4]
 800cb20:	6014      	str	r4, [r2, #0]
 800cb22:	b003      	add	sp, #12
 800cb24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb28:	f7ff be30 	b.w	800c78c <__malloc_unlock>
 800cb2c:	42a3      	cmp	r3, r4
 800cb2e:	d908      	bls.n	800cb42 <_free_r+0x46>
 800cb30:	6825      	ldr	r5, [r4, #0]
 800cb32:	1961      	adds	r1, r4, r5
 800cb34:	428b      	cmp	r3, r1
 800cb36:	bf01      	itttt	eq
 800cb38:	6819      	ldreq	r1, [r3, #0]
 800cb3a:	685b      	ldreq	r3, [r3, #4]
 800cb3c:	1949      	addeq	r1, r1, r5
 800cb3e:	6021      	streq	r1, [r4, #0]
 800cb40:	e7ed      	b.n	800cb1e <_free_r+0x22>
 800cb42:	461a      	mov	r2, r3
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	b10b      	cbz	r3, 800cb4c <_free_r+0x50>
 800cb48:	42a3      	cmp	r3, r4
 800cb4a:	d9fa      	bls.n	800cb42 <_free_r+0x46>
 800cb4c:	6811      	ldr	r1, [r2, #0]
 800cb4e:	1855      	adds	r5, r2, r1
 800cb50:	42a5      	cmp	r5, r4
 800cb52:	d10b      	bne.n	800cb6c <_free_r+0x70>
 800cb54:	6824      	ldr	r4, [r4, #0]
 800cb56:	4421      	add	r1, r4
 800cb58:	1854      	adds	r4, r2, r1
 800cb5a:	42a3      	cmp	r3, r4
 800cb5c:	6011      	str	r1, [r2, #0]
 800cb5e:	d1e0      	bne.n	800cb22 <_free_r+0x26>
 800cb60:	681c      	ldr	r4, [r3, #0]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	6053      	str	r3, [r2, #4]
 800cb66:	440c      	add	r4, r1
 800cb68:	6014      	str	r4, [r2, #0]
 800cb6a:	e7da      	b.n	800cb22 <_free_r+0x26>
 800cb6c:	d902      	bls.n	800cb74 <_free_r+0x78>
 800cb6e:	230c      	movs	r3, #12
 800cb70:	6003      	str	r3, [r0, #0]
 800cb72:	e7d6      	b.n	800cb22 <_free_r+0x26>
 800cb74:	6825      	ldr	r5, [r4, #0]
 800cb76:	1961      	adds	r1, r4, r5
 800cb78:	428b      	cmp	r3, r1
 800cb7a:	bf04      	itt	eq
 800cb7c:	6819      	ldreq	r1, [r3, #0]
 800cb7e:	685b      	ldreq	r3, [r3, #4]
 800cb80:	6063      	str	r3, [r4, #4]
 800cb82:	bf04      	itt	eq
 800cb84:	1949      	addeq	r1, r1, r5
 800cb86:	6021      	streq	r1, [r4, #0]
 800cb88:	6054      	str	r4, [r2, #4]
 800cb8a:	e7ca      	b.n	800cb22 <_free_r+0x26>
 800cb8c:	b003      	add	sp, #12
 800cb8e:	bd30      	pop	{r4, r5, pc}
 800cb90:	20006044 	.word	0x20006044

0800cb94 <_init>:
 800cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb96:	bf00      	nop
 800cb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb9a:	bc08      	pop	{r3}
 800cb9c:	469e      	mov	lr, r3
 800cb9e:	4770      	bx	lr

0800cba0 <_fini>:
 800cba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba2:	bf00      	nop
 800cba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba6:	bc08      	pop	{r3}
 800cba8:	469e      	mov	lr, r3
 800cbaa:	4770      	bx	lr
