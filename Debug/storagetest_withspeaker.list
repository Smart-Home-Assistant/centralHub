
storagetest_withspeaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009934  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08009ac4  08009ac4  00019ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a104  0800a104  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800a104  0800a104  0001a104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a10c  0800a10c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a10c  0800a10c  0001a10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a110  0800a110  0001a110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047cc  20000094  0800a1a8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00005200  20004860  0800a1a8  00024860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ee77  00000000  00000000  00020107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f6a  00000000  00000000  0004ef7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  00053ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002f0e  00000000  00000000  00055510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e874  00000000  00000000  0005841e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033463  00000000  00000000  00086c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010c360  00000000  00000000  000ba0f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054d8  00000000  00000000  001c6458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0001f87e  00000000  00000000  001cb930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001eb1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009aac 	.word	0x08009aac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08009aac 	.word	0x08009aac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800088c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000890:	f000 b970 	b.w	8000b74 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9e08      	ldr	r6, [sp, #32]
 80008b2:	460d      	mov	r5, r1
 80008b4:	4604      	mov	r4, r0
 80008b6:	460f      	mov	r7, r1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d14a      	bne.n	8000952 <__udivmoddi4+0xa6>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4694      	mov	ip, r2
 80008c0:	d965      	bls.n	800098e <__udivmoddi4+0xe2>
 80008c2:	fab2 f382 	clz	r3, r2
 80008c6:	b143      	cbz	r3, 80008da <__udivmoddi4+0x2e>
 80008c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008cc:	f1c3 0220 	rsb	r2, r3, #32
 80008d0:	409f      	lsls	r7, r3
 80008d2:	fa20 f202 	lsr.w	r2, r0, r2
 80008d6:	4317      	orrs	r7, r2
 80008d8:	409c      	lsls	r4, r3
 80008da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008de:	fa1f f58c 	uxth.w	r5, ip
 80008e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008e6:	0c22      	lsrs	r2, r4, #16
 80008e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008f0:	fb01 f005 	mul.w	r0, r1, r5
 80008f4:	4290      	cmp	r0, r2
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x62>
 80008f8:	eb1c 0202 	adds.w	r2, ip, r2
 80008fc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000900:	f080 811c 	bcs.w	8000b3c <__udivmoddi4+0x290>
 8000904:	4290      	cmp	r0, r2
 8000906:	f240 8119 	bls.w	8000b3c <__udivmoddi4+0x290>
 800090a:	3902      	subs	r1, #2
 800090c:	4462      	add	r2, ip
 800090e:	1a12      	subs	r2, r2, r0
 8000910:	b2a4      	uxth	r4, r4
 8000912:	fbb2 f0fe 	udiv	r0, r2, lr
 8000916:	fb0e 2210 	mls	r2, lr, r0, r2
 800091a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800091e:	fb00 f505 	mul.w	r5, r0, r5
 8000922:	42a5      	cmp	r5, r4
 8000924:	d90a      	bls.n	800093c <__udivmoddi4+0x90>
 8000926:	eb1c 0404 	adds.w	r4, ip, r4
 800092a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800092e:	f080 8107 	bcs.w	8000b40 <__udivmoddi4+0x294>
 8000932:	42a5      	cmp	r5, r4
 8000934:	f240 8104 	bls.w	8000b40 <__udivmoddi4+0x294>
 8000938:	4464      	add	r4, ip
 800093a:	3802      	subs	r0, #2
 800093c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000940:	1b64      	subs	r4, r4, r5
 8000942:	2100      	movs	r1, #0
 8000944:	b11e      	cbz	r6, 800094e <__udivmoddi4+0xa2>
 8000946:	40dc      	lsrs	r4, r3
 8000948:	2300      	movs	r3, #0
 800094a:	e9c6 4300 	strd	r4, r3, [r6]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	428b      	cmp	r3, r1
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0xbc>
 8000956:	2e00      	cmp	r6, #0
 8000958:	f000 80ed 	beq.w	8000b36 <__udivmoddi4+0x28a>
 800095c:	2100      	movs	r1, #0
 800095e:	e9c6 0500 	strd	r0, r5, [r6]
 8000962:	4608      	mov	r0, r1
 8000964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000968:	fab3 f183 	clz	r1, r3
 800096c:	2900      	cmp	r1, #0
 800096e:	d149      	bne.n	8000a04 <__udivmoddi4+0x158>
 8000970:	42ab      	cmp	r3, r5
 8000972:	d302      	bcc.n	800097a <__udivmoddi4+0xce>
 8000974:	4282      	cmp	r2, r0
 8000976:	f200 80f8 	bhi.w	8000b6a <__udivmoddi4+0x2be>
 800097a:	1a84      	subs	r4, r0, r2
 800097c:	eb65 0203 	sbc.w	r2, r5, r3
 8000980:	2001      	movs	r0, #1
 8000982:	4617      	mov	r7, r2
 8000984:	2e00      	cmp	r6, #0
 8000986:	d0e2      	beq.n	800094e <__udivmoddi4+0xa2>
 8000988:	e9c6 4700 	strd	r4, r7, [r6]
 800098c:	e7df      	b.n	800094e <__udivmoddi4+0xa2>
 800098e:	b902      	cbnz	r2, 8000992 <__udivmoddi4+0xe6>
 8000990:	deff      	udf	#255	; 0xff
 8000992:	fab2 f382 	clz	r3, r2
 8000996:	2b00      	cmp	r3, #0
 8000998:	f040 8090 	bne.w	8000abc <__udivmoddi4+0x210>
 800099c:	1a8a      	subs	r2, r1, r2
 800099e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a2:	fa1f fe8c 	uxth.w	lr, ip
 80009a6:	2101      	movs	r1, #1
 80009a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009ac:	fb07 2015 	mls	r0, r7, r5, r2
 80009b0:	0c22      	lsrs	r2, r4, #16
 80009b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009b6:	fb0e f005 	mul.w	r0, lr, r5
 80009ba:	4290      	cmp	r0, r2
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x124>
 80009be:	eb1c 0202 	adds.w	r2, ip, r2
 80009c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x122>
 80009c8:	4290      	cmp	r0, r2
 80009ca:	f200 80cb 	bhi.w	8000b64 <__udivmoddi4+0x2b8>
 80009ce:	4645      	mov	r5, r8
 80009d0:	1a12      	subs	r2, r2, r0
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d8:	fb07 2210 	mls	r2, r7, r0, r2
 80009dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e0:	fb0e fe00 	mul.w	lr, lr, r0
 80009e4:	45a6      	cmp	lr, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x14e>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80009f0:	d202      	bcs.n	80009f8 <__udivmoddi4+0x14c>
 80009f2:	45a6      	cmp	lr, r4
 80009f4:	f200 80bb 	bhi.w	8000b6e <__udivmoddi4+0x2c2>
 80009f8:	4610      	mov	r0, r2
 80009fa:	eba4 040e 	sub.w	r4, r4, lr
 80009fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a02:	e79f      	b.n	8000944 <__udivmoddi4+0x98>
 8000a04:	f1c1 0720 	rsb	r7, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a12:	fa05 f401 	lsl.w	r4, r5, r1
 8000a16:	fa20 f307 	lsr.w	r3, r0, r7
 8000a1a:	40fd      	lsrs	r5, r7
 8000a1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a20:	4323      	orrs	r3, r4
 8000a22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a26:	fa1f fe8c 	uxth.w	lr, ip
 8000a2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a2e:	0c1c      	lsrs	r4, r3, #16
 8000a30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a34:	fb08 f50e 	mul.w	r5, r8, lr
 8000a38:	42a5      	cmp	r5, r4
 8000a3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b0>
 8000a44:	eb1c 0404 	adds.w	r4, ip, r4
 8000a48:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a4c:	f080 8088 	bcs.w	8000b60 <__udivmoddi4+0x2b4>
 8000a50:	42a5      	cmp	r5, r4
 8000a52:	f240 8085 	bls.w	8000b60 <__udivmoddi4+0x2b4>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	4464      	add	r4, ip
 8000a5c:	1b64      	subs	r4, r4, r5
 8000a5e:	b29d      	uxth	r5, r3
 8000a60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a64:	fb09 4413 	mls	r4, r9, r3, r4
 8000a68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a70:	45a6      	cmp	lr, r4
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1da>
 8000a74:	eb1c 0404 	adds.w	r4, ip, r4
 8000a78:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000a7c:	d26c      	bcs.n	8000b58 <__udivmoddi4+0x2ac>
 8000a7e:	45a6      	cmp	lr, r4
 8000a80:	d96a      	bls.n	8000b58 <__udivmoddi4+0x2ac>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	4464      	add	r4, ip
 8000a86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a8e:	eba4 040e 	sub.w	r4, r4, lr
 8000a92:	42ac      	cmp	r4, r5
 8000a94:	46c8      	mov	r8, r9
 8000a96:	46ae      	mov	lr, r5
 8000a98:	d356      	bcc.n	8000b48 <__udivmoddi4+0x29c>
 8000a9a:	d053      	beq.n	8000b44 <__udivmoddi4+0x298>
 8000a9c:	b156      	cbz	r6, 8000ab4 <__udivmoddi4+0x208>
 8000a9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000aa2:	eb64 040e 	sbc.w	r4, r4, lr
 8000aa6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aaa:	40ca      	lsrs	r2, r1
 8000aac:	40cc      	lsrs	r4, r1
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abc:	f1c3 0120 	rsb	r1, r3, #32
 8000ac0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ac4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac8:	fa25 f101 	lsr.w	r1, r5, r1
 8000acc:	409d      	lsls	r5, r3
 8000ace:	432a      	orrs	r2, r5
 8000ad0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000adc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ae0:	0c11      	lsrs	r1, r2, #16
 8000ae2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ae6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aea:	428d      	cmp	r5, r1
 8000aec:	fa04 f403 	lsl.w	r4, r4, r3
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x258>
 8000af2:	eb1c 0101 	adds.w	r1, ip, r1
 8000af6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000afa:	d22f      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000afc:	428d      	cmp	r5, r1
 8000afe:	d92d      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b00:	3802      	subs	r0, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	1b49      	subs	r1, r1, r5
 8000b06:	b292      	uxth	r2, r2
 8000b08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b14:	fb05 f10e 	mul.w	r1, r5, lr
 8000b18:	4291      	cmp	r1, r2
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x282>
 8000b1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b20:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b24:	d216      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000b26:	4291      	cmp	r1, r2
 8000b28:	d914      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000b2a:	3d02      	subs	r5, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a52      	subs	r2, r2, r1
 8000b30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b34:	e738      	b.n	80009a8 <__udivmoddi4+0xfc>
 8000b36:	4631      	mov	r1, r6
 8000b38:	4630      	mov	r0, r6
 8000b3a:	e708      	b.n	800094e <__udivmoddi4+0xa2>
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e6e6      	b.n	800090e <__udivmoddi4+0x62>
 8000b40:	4610      	mov	r0, r2
 8000b42:	e6fb      	b.n	800093c <__udivmoddi4+0x90>
 8000b44:	4548      	cmp	r0, r9
 8000b46:	d2a9      	bcs.n	8000a9c <__udivmoddi4+0x1f0>
 8000b48:	ebb9 0802 	subs.w	r8, r9, r2
 8000b4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b50:	3b01      	subs	r3, #1
 8000b52:	e7a3      	b.n	8000a9c <__udivmoddi4+0x1f0>
 8000b54:	4645      	mov	r5, r8
 8000b56:	e7ea      	b.n	8000b2e <__udivmoddi4+0x282>
 8000b58:	462b      	mov	r3, r5
 8000b5a:	e794      	b.n	8000a86 <__udivmoddi4+0x1da>
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	e7d1      	b.n	8000b04 <__udivmoddi4+0x258>
 8000b60:	46d0      	mov	r8, sl
 8000b62:	e77b      	b.n	8000a5c <__udivmoddi4+0x1b0>
 8000b64:	3d02      	subs	r5, #2
 8000b66:	4462      	add	r2, ip
 8000b68:	e732      	b.n	80009d0 <__udivmoddi4+0x124>
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e70a      	b.n	8000984 <__udivmoddi4+0xd8>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	e742      	b.n	80009fa <__udivmoddi4+0x14e>

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <__NVIC_EnableIRQ+0x38>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db12      	blt.n	8000c08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	490a      	ldr	r1, [pc, #40]	; (8000c14 <__NVIC_DisableIRQ+0x44>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	3320      	adds	r3, #32
 8000bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bfc:	f3bf 8f4f 	dsb	sy
}
 8000c00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c02:	f3bf 8f6f 	isb	sy
}
 8000c06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f043 0201 	orr.w	r2, r3, #1
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 0201 	bic.w	r2, r3, #1
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	601a      	str	r2, [r3, #0]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000d44:	f023 0307 	bic.w	r3, r3, #7
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	431a      	orrs	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	605a      	str	r2, [r3, #4]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	609a      	str	r2, [r3, #8]
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	f043 0201 	orr.w	r2, r3, #1
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60da      	str	r2, [r3, #12]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4013      	ands	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000

08000df4 <mount_SD_card>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void mount_SD_card(void){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0

    //Mount the SD Card
	fres = f_mount(&FatFs, "", 1);    //1=mount now
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	492a      	ldr	r1, [pc, #168]	; (8000ea8 <mount_SD_card+0xb4>)
 8000dfe:	482b      	ldr	r0, [pc, #172]	; (8000eac <mount_SD_card+0xb8>)
 8000e00:	f007 fa6c 	bl	80082dc <f_mount>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <mount_SD_card+0xbc>)
 8000e0a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <mount_SD_card+0xbc>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <mount_SD_card+0x2e>
		printf("No SD Card found : (%i)\r\n", fres);
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <mount_SD_card+0xbc>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4826      	ldr	r0, [pc, #152]	; (8000eb4 <mount_SD_card+0xc0>)
 8000e1c:	f007 ff66 	bl	8008cec <iprintf>
 8000e20:	e03f      	b.n	8000ea2 <mount_SD_card+0xae>
        return;
	}
	printf("SD Card Mounted Successfully\r\n");
 8000e22:	4825      	ldr	r0, [pc, #148]	; (8000eb8 <mount_SD_card+0xc4>)
 8000e24:	f007 ffc8 	bl	8008db8 <puts>

    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;

    f_getfree("", &fre_clust, &pfs);
 8000e28:	1d3a      	adds	r2, r7, #4
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481e      	ldr	r0, [pc, #120]	; (8000ea8 <mount_SD_card+0xb4>)
 8000e30:	f007 fd9c 	bl	800896c <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	3b02      	subs	r3, #2
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	8952      	ldrh	r2, [r2, #10]
 8000e3e:	fb02 f303 	mul.w	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fc80 	bl	8000748 <__aeabi_ui2d>
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <mount_SD_card+0xc8>)
 8000e4e:	f7ff fa0f 	bl	8000270 <__aeabi_dmul>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4610      	mov	r0, r2
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f7ff fcef 	bl	800083c <__aeabi_d2uiz>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <mount_SD_card+0xcc>)
 8000e62:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	895b      	ldrh	r3, [r3, #10]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	fb02 f303 	mul.w	r3, r2, r3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fc69 	bl	8000748 <__aeabi_ui2d>
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <mount_SD_card+0xc8>)
 8000e7c:	f7ff f9f8 	bl	8000270 <__aeabi_dmul>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fcd8 	bl	800083c <__aeabi_d2uiz>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <mount_SD_card+0xd0>)
 8000e90:	6013      	str	r3, [r2, #0]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\r\n", totalSpace, freeSpace);
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <mount_SD_card+0xcc>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <mount_SD_card+0xd0>)
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <mount_SD_card+0xd4>)
 8000e9e:	f007 ff25 	bl	8008cec <iprintf>

}
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	08009ad8 	.word	0x08009ad8
 8000eac:	200023e8 	.word	0x200023e8
 8000eb0:	20003420 	.word	0x20003420
 8000eb4:	08009adc 	.word	0x08009adc
 8000eb8:	08009af8 	.word	0x08009af8
 8000ebc:	3fe00000 	.word	0x3fe00000
 8000ec0:	20004454 	.word	0x20004454
 8000ec4:	20004458 	.word	0x20004458
 8000ec8:	08009b18 	.word	0x08009b18

08000ecc <read_SD_card_song_initial>:
void unmount_SD_card(void){
	f_mount(NULL, "", 0);
	printf("SD Card Unmounted Successfully\r\n");
}

void read_SD_card_song_initial(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
    if (f_read(&file, &playback_buffer[0], AUDIO_BUFFER_SIZE*2*2, &bytesRead) == FR_OK) {
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <read_SD_card_song_initial+0x40>)
 8000ed2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ed6:	490e      	ldr	r1, [pc, #56]	; (8000f10 <read_SD_card_song_initial+0x44>)
 8000ed8:	480e      	ldr	r0, [pc, #56]	; (8000f14 <read_SD_card_song_initial+0x48>)
 8000eda:	f007 fba9 	bl	8008630 <f_read>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d110      	bne.n	8000f06 <read_SD_card_song_initial+0x3a>
            // Check if the expected number of bytes were read
    	if (bytesRead == AUDIO_BUFFER_SIZE*2*2) {
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <read_SD_card_song_initial+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000eec:	d10b      	bne.n	8000f06 <read_SD_card_song_initial+0x3a>
            	printf("Audio Loaded, %d bytes.\r\n", bytesRead);
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <read_SD_card_song_initial+0x40>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4808      	ldr	r0, [pc, #32]	; (8000f18 <read_SD_card_song_initial+0x4c>)
 8000ef6:	f007 fef9 	bl	8008cec <iprintf>
            	audio_position += AUDIO_BUFFER_SIZE*2*2;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <read_SD_card_song_initial+0x50>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8000f02:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <read_SD_card_song_initial+0x50>)
 8000f04:	6013      	str	r3, [r2, #0]
    	} else {
                // Handle the case where not all bytes were read
    	}
	}

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200023e4 	.word	0x200023e4
 8000f10:	20001444 	.word	0x20001444
 8000f14:	20003424 	.word	0x20003424
 8000f18:	08009b68 	.word	0x08009b68
 8000f1c:	20001430 	.word	0x20001430

08000f20 <read_SD_card_song_at_position>:

void read_SD_card_song_at_position(int buffer_position){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if ( audio_position + AUDIO_BUFFER_SIZE * 2 <= song_length_total){
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <read_SD_card_song_at_position+0x50>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f203 72cf 	addw	r2, r3, #1999	; 0x7cf
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <read_SD_card_song_at_position+0x54>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	da17      	bge.n	8000f68 <read_SD_card_song_at_position+0x48>
		if (f_read(&file, &playback_buffer[buffer_position], bytes_to_read, &bytesRead) == FR_OK) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <read_SD_card_song_at_position+0x58>)
 8000f3e:	1899      	adds	r1, r3, r2
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <read_SD_card_song_at_position+0x5c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <read_SD_card_song_at_position+0x60>)
 8000f46:	480f      	ldr	r0, [pc, #60]	; (8000f84 <read_SD_card_song_at_position+0x64>)
 8000f48:	f007 fb72 	bl	8008630 <f_read>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10a      	bne.n	8000f68 <read_SD_card_song_at_position+0x48>
						// Check if the expected number of bytes were read
			if (bytesRead == AUDIO_BUFFER_SIZE * 2) {
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <read_SD_card_song_at_position+0x60>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f5a:	d105      	bne.n	8000f68 <read_SD_card_song_at_position+0x48>
				audio_position += AUDIO_BUFFER_SIZE*2;
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <read_SD_card_song_at_position+0x50>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f64:	4a02      	ldr	r2, [pc, #8]	; (8000f70 <read_SD_card_song_at_position+0x50>)
 8000f66:	6013      	str	r3, [r2, #0]
			} else {
							// Handle the case where not all bytes were read
			}
		}
	}
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20001430 	.word	0x20001430
 8000f74:	20001438 	.word	0x20001438
 8000f78:	20001444 	.word	0x20001444
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	200023e4 	.word	0x200023e4
 8000f84:	20003424 	.word	0x20003424

08000f88 <open_SD_card_song>:


void open_SD_card_song(const char *mypath){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0ca      	sub	sp, #296	; 0x128
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f92:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f96:	6018      	str	r0, [r3, #0]

	FILINFO fileInfo;
	const TCHAR *songpath = _T(mypath);
 8000f98:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	fres = f_open(&file, songpath, FA_READ);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8000fac:	481a      	ldr	r0, [pc, #104]	; (8001018 <open_SD_card_song+0x90>)
 8000fae:	f007 f9d7 	bl	8008360 <f_open>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <open_SD_card_song+0x94>)
 8000fb8:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <open_SD_card_song+0x94>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d125      	bne.n	800100e <open_SD_card_song+0x86>
		return;
	}

    fres = f_stat(songpath, &fileInfo);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8000fcc:	f007 fcac 	bl	8008928 <f_stat>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <open_SD_card_song+0x94>)
 8000fd6:	701a      	strb	r2, [r3, #0]
    if (fres == FR_OK) {
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <open_SD_card_song+0x94>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d110      	bne.n	8001002 <open_SD_card_song+0x7a>
        // Print file size
    	printf("File size: %lu bytes\r\n", fileInfo.fsize);
 8000fe0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fe4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <open_SD_card_song+0x98>)
 8000fee:	f007 fe7d 	bl	8008cec <iprintf>
    	song_length = fileInfo.fsize;
 8000ff2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ff6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <open_SD_card_song+0x9c>)
 8001000:	601a      	str	r2, [r3, #0]
    }
    printf("path: %s\r\n", songpath);
 8001002:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001006:	4808      	ldr	r0, [pc, #32]	; (8001028 <open_SD_card_song+0xa0>)
 8001008:	f007 fe70 	bl	8008cec <iprintf>
 800100c:	e000      	b.n	8001010 <open_SD_card_song+0x88>
		return;
 800100e:	bf00      	nop

}
 8001010:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20003424 	.word	0x20003424
 800101c:	20003420 	.word	0x20003420
 8001020:	08009b84 	.word	0x08009b84
 8001024:	20001434 	.word	0x20001434
 8001028:	08009b9c 	.word	0x08009b9c

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f001 f8d1 	bl	80021d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f915 	bl	8001264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 fba9 	bl	8001790 <MX_GPIO_Init>
  MX_DMA_Init();
 800103e:	f000 fb89 	bl	8001754 <MX_DMA_Init>
  MX_SPI2_Init();
 8001042:	f000 f9f7 	bl	8001434 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001046:	f000 fb25 	bl	8001694 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800104a:	f004 fc05 	bl	8005858 <MX_FATFS_Init>
  MX_DAC1_Init();
 800104e:	f000 f95b 	bl	8001308 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001052:	f000 fa2d 	bl	80014b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001056:	f000 fa6d 	bl	8001534 <MX_TIM3_Init>
  MX_UART4_Init();
 800105a:	f000 fabb 	bl	80015d4 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800105e:	f000 fb49 	bl	80016f4 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001062:	f000 fae7 	bl	8001634 <MX_USART1_UART_Init>
  MX_DFSDM1_Init();
 8001066:	f000 f981 	bl	800136c <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */


  // UART Interrupt Init
  // LIGHT
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, data, 64);
 800106a:	2240      	movs	r2, #64	; 0x40
 800106c:	4969      	ldr	r1, [pc, #420]	; (8001214 <main+0x1e8>)
 800106e:	486a      	ldr	r0, [pc, #424]	; (8001218 <main+0x1ec>)
 8001070:	f004 fb78 	bl	8005764 <HAL_UARTEx_ReceiveToIdle_IT>

  // DOOR
  HAL_UARTEx_ReceiveToIdle_IT(&huart3, data, 64);
 8001074:	2240      	movs	r2, #64	; 0x40
 8001076:	4967      	ldr	r1, [pc, #412]	; (8001214 <main+0x1e8>)
 8001078:	4868      	ldr	r0, [pc, #416]	; (800121c <main+0x1f0>)
 800107a:	f004 fb73 	bl	8005764 <HAL_UARTEx_ReceiveToIdle_IT>


  HAL_UARTEx_ReceiveToIdle_IT(&huart1, data, 64);
 800107e:	2240      	movs	r2, #64	; 0x40
 8001080:	4964      	ldr	r1, [pc, #400]	; (8001214 <main+0x1e8>)
 8001082:	4867      	ldr	r0, [pc, #412]	; (8001220 <main+0x1f4>)
 8001084:	f004 fb6e 	bl	8005764 <HAL_UARTEx_ReceiveToIdle_IT>

  // set status of light to off on start (Opposite than LED due to relay)
  HAL_GPIO_WritePin(lightStatus_GPIO_Port, lightStatus_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2102      	movs	r1, #2
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f001 fdec 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(doorStatus_GPIO_Port, doorStatus_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2101      	movs	r1, #1
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f001 fde6 	bl	8002c6c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Initilize SD Card and Play start up Sound*/

  mount_SD_card();
 80010a0:	f7ff fea8 	bl	8000df4 <mount_SD_card>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80010a4:	2100      	movs	r1, #0
 80010a6:	485f      	ldr	r0, [pc, #380]	; (8001224 <main+0x1f8>)
 80010a8:	f001 f958 	bl	800235c <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x7FF);
 80010ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	485b      	ldr	r0, [pc, #364]	; (8001224 <main+0x1f8>)
 80010b6:	f001 f97f 	bl	80023b8 <HAL_DAC_SetValue>

  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (recording_audio){
 80010ba:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <main+0x1fc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d06e      	beq.n	80011a0 <main+0x174>
		  if ((transfer_position == RECORDING_SIZE_MIC)){
 80010c2:	4b5a      	ldr	r3, [pc, #360]	; (800122c <main+0x200>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b0a      	cmp	r3, #10
 80010c8:	d109      	bne.n	80010de <main+0xb2>
			  __HAL_DMA_DISABLE(&hdma_dfsdm1_flt1);
 80010ca:	4b59      	ldr	r3, [pc, #356]	; (8001230 <main+0x204>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b57      	ldr	r3, [pc, #348]	; (8001230 <main+0x204>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0201 	bic.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
				  printf("%04X ", ((recording[i] & 0xFF) << 8) | ((recording[i] >> 8) & 0xFF));
			  }
			  printf("\r\n\n");
			  */

			  return 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	e095      	b.n	800120a <main+0x1de>
		  }
		  if(mic_half_transfer){
 80010de:	4b55      	ldr	r3, [pc, #340]	; (8001234 <main+0x208>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d02b      	beq.n	800113e <main+0x112>
			  for (i = 0; i < DFSDM_BUFFER_SIZE; i++){
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	e021      	b.n	8001130 <main+0x104>
				  recording[transfer_position] = SaturaLH((dfsdm_buffer[i] >> 8), -32768, 32767);
 80010ec:	4a52      	ldr	r2, [pc, #328]	; (8001238 <main+0x20c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f4:	121b      	asrs	r3, r3, #8
 80010f6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80010fa:	db0b      	blt.n	8001114 <main+0xe8>
 80010fc:	4a4e      	ldr	r2, [pc, #312]	; (8001238 <main+0x20c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	121b      	asrs	r3, r3, #8
 8001106:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800110a:	4293      	cmp	r3, r2
 800110c:	bfa8      	it	ge
 800110e:	4613      	movge	r3, r2
 8001110:	b21a      	sxth	r2, r3
 8001112:	e000      	b.n	8001116 <main+0xea>
 8001114:	4a49      	ldr	r2, [pc, #292]	; (800123c <main+0x210>)
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <main+0x200>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4949      	ldr	r1, [pc, #292]	; (8001240 <main+0x214>)
 800111c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				  transfer_position ++;
 8001120:	4b42      	ldr	r3, [pc, #264]	; (800122c <main+0x200>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	4a41      	ldr	r2, [pc, #260]	; (800122c <main+0x200>)
 8001128:	6013      	str	r3, [r2, #0]
			  for (i = 0; i < DFSDM_BUFFER_SIZE; i++){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3301      	adds	r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001136:	d3d9      	bcc.n	80010ec <main+0xc0>
			  }
			  mic_half_transfer = 0;
 8001138:	4b3e      	ldr	r3, [pc, #248]	; (8001234 <main+0x208>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
		  }
		  if (mic_transfer_complete){
 800113e:	4b41      	ldr	r3, [pc, #260]	; (8001244 <main+0x218>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d02c      	beq.n	80011a0 <main+0x174>
			  for (i = DFSDM_BUFFER_SIZE; i < DFSDM_BUFFER_SIZE * 2; i++){
 8001146:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	e021      	b.n	8001192 <main+0x166>
				  recording[transfer_position] = SaturaLH((dfsdm_buffer[i] >> 8), -32768, 32767);
 800114e:	4a3a      	ldr	r2, [pc, #232]	; (8001238 <main+0x20c>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001156:	121b      	asrs	r3, r3, #8
 8001158:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800115c:	db0b      	blt.n	8001176 <main+0x14a>
 800115e:	4a36      	ldr	r2, [pc, #216]	; (8001238 <main+0x20c>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001166:	121b      	asrs	r3, r3, #8
 8001168:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800116c:	4293      	cmp	r3, r2
 800116e:	bfa8      	it	ge
 8001170:	4613      	movge	r3, r2
 8001172:	b21a      	sxth	r2, r3
 8001174:	e000      	b.n	8001178 <main+0x14c>
 8001176:	4a31      	ldr	r2, [pc, #196]	; (800123c <main+0x210>)
 8001178:	4b2c      	ldr	r3, [pc, #176]	; (800122c <main+0x200>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4930      	ldr	r1, [pc, #192]	; (8001240 <main+0x214>)
 800117e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				  transfer_position ++;
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <main+0x200>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	4a28      	ldr	r2, [pc, #160]	; (800122c <main+0x200>)
 800118a:	6013      	str	r3, [r2, #0]
			  for (i = DFSDM_BUFFER_SIZE; i < DFSDM_BUFFER_SIZE * 2; i++){
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3301      	adds	r3, #1
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001198:	d3d9      	bcc.n	800114e <main+0x122>
			  }
			  mic_transfer_complete = 0;
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <main+0x218>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if (audio_playing){
 80011a0:	4b29      	ldr	r3, [pc, #164]	; (8001248 <main+0x21c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d088      	beq.n	80010ba <main+0x8e>
		  if (samples_played >= song_length_total/2){
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <main+0x220>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0fda      	lsrs	r2, r3, #31
 80011ae:	4413      	add	r3, r2
 80011b0:	105b      	asrs	r3, r3, #1
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <main+0x224>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dc0f      	bgt.n	80011dc <main+0x1b0>
			  NVIC_DisableIRQ(TIM2_IRQn);
 80011bc:	201c      	movs	r0, #28
 80011be:	f7ff fd07 	bl	8000bd0 <__NVIC_DisableIRQ>
			  LL_TIM_DisableCounter(TIM2);
 80011c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011c6:	f7ff fd94 	bl	8000cf2 <LL_TIM_DisableCounter>
			  printf("Song Finished at %d\r\n", audio_position);
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <main+0x228>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4821      	ldr	r0, [pc, #132]	; (8001258 <main+0x22c>)
 80011d2:	f007 fd8b 	bl	8008cec <iprintf>
			  audio_playing = 0;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <main+0x21c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
		  }
		  if (buffer_half){
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <main+0x230>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <main+0x1c4>
			  read_SD_card_song_at_position(0);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fe9b 	bl	8000f20 <read_SD_card_song_at_position>
			  buffer_half = 0;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <main+0x230>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
		  }
		  if (buffer_complete){
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <main+0x234>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f43f af60 	beq.w	80010ba <main+0x8e>
			  read_SD_card_song_at_position(AUDIO_BUFFER_SIZE);
 80011fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011fe:	f7ff fe8f 	bl	8000f20 <read_SD_card_song_at_position>
			  buffer_complete = 0;
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <main+0x234>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
	  if (recording_audio){
 8001208:	e757      	b.n	80010ba <main+0x8e>
	  }

  }
  unmount_SD_card();
  /* USER CODE END 3 */
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000445c 	.word	0x2000445c
 8001218:	20000248 	.word	0x20000248
 800121c:	200003e0 	.word	0x200003e0
 8001220:	200002d0 	.word	0x200002d0
 8001224:	200000b0 	.word	0x200000b0
 8001228:	20000468 	.word	0x20000468
 800122c:	20001428 	.word	0x20001428
 8001230:	20000150 	.word	0x20000150
 8001234:	20001424 	.word	0x20001424
 8001238:	20000480 	.word	0x20000480
 800123c:	ffff8000 	.word	0xffff8000
 8001240:	2000046c 	.word	0x2000046c
 8001244:	20001420 	.word	0x20001420
 8001248:	2000142c 	.word	0x2000142c
 800124c:	20001438 	.word	0x20001438
 8001250:	20000000 	.word	0x20000000
 8001254:	20001430 	.word	0x20001430
 8001258:	08009ba8 	.word	0x08009ba8
 800125c:	2000143c 	.word	0x2000143c
 8001260:	20001440 	.word	0x20001440

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b096      	sub	sp, #88	; 0x58
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2244      	movs	r2, #68	; 0x44
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f007 fdba 	bl	8008dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001286:	f44f 7000 	mov.w	r0, #512	; 0x200
 800128a:	f001 fd09 	bl	8002ca0 <HAL_PWREx_ControlVoltageScaling>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001294:	f000 fba4 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001298:	2310      	movs	r3, #16
 800129a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800129c:	2301      	movs	r3, #1
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012a4:	2360      	movs	r3, #96	; 0x60
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a8:	2302      	movs	r3, #2
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012ac:	2301      	movs	r3, #1
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 80012b4:	2320      	movs	r3, #32
 80012b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012b8:	2307      	movs	r3, #7
 80012ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012bc:	2302      	movs	r3, #2
 80012be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fdcb 	bl	8002e64 <HAL_RCC_OscConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80012d4:	f000 fb84 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d8:	230f      	movs	r3, #15
 80012da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012dc:	2303      	movs	r3, #3
 80012de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	2103      	movs	r1, #3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 f89f 	bl	8003434 <HAL_RCC_ClockConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012fc:	f000 fb70 	bl	80019e0 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3758      	adds	r7, #88	; 0x58
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2224      	movs	r2, #36	; 0x24
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f007 fd69 	bl	8008dec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_DAC1_Init+0x5c>)
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <MX_DAC1_Init+0x60>)
 800131e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001320:	4810      	ldr	r0, [pc, #64]	; (8001364 <MX_DAC1_Init+0x5c>)
 8001322:	f001 f805 	bl	8002330 <HAL_DAC_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800132c:	f000 fb58 	bl	80019e0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	4619      	mov	r1, r3
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <MX_DAC1_Init+0x5c>)
 800134c:	f001 f882 	bl	8002454 <HAL_DAC_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001356:	f000 fb43 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200000b0 	.word	0x200000b0
 8001368:	40007400 	.word	0x40007400

0800136c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8001370:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <MX_DFSDM1_Init+0xb8>)
 8001372:	4a2d      	ldr	r2, [pc, #180]	; (8001428 <MX_DFSDM1_Init+0xbc>)
 8001374:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <MX_DFSDM1_Init+0xb8>)
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 800137c:	4b29      	ldr	r3, [pc, #164]	; (8001424 <MX_DFSDM1_Init+0xb8>)
 800137e:	2201      	movs	r2, #1
 8001380:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <MX_DFSDM1_Init+0xb8>)
 8001384:	2201      	movs	r2, #1
 8001386:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001388:	4b26      	ldr	r3, [pc, #152]	; (8001424 <MX_DFSDM1_Init+0xb8>)
 800138a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800138e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 125;
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <MX_DFSDM1_Init+0xb8>)
 8001392:	227d      	movs	r2, #125	; 0x7d
 8001394:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <MX_DFSDM1_Init+0xb8>)
 8001398:	2201      	movs	r2, #1
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 800139c:	4821      	ldr	r0, [pc, #132]	; (8001424 <MX_DFSDM1_Init+0xb8>)
 800139e:	f001 f9b7 	bl	8002710 <HAL_DFSDM_FilterInit>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80013a8:	f000 fb1a 	bl	80019e0 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013ae:	4a20      	ldr	r2, [pc, #128]	; (8001430 <MX_DFSDM1_Init+0xc4>)
 80013b0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 31;
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013c0:	221f      	movs	r2, #31
 80013c2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013de:	2204      	movs	r2, #4
 80013e0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x02;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80013fa:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_DFSDM1_Init+0xc0>)
 80013fc:	f001 f8c2 	bl	8002584 <HAL_DFSDM_ChannelInit>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8001406:	f000 faeb 	bl	80019e0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800140a:	2201      	movs	r2, #1
 800140c:	2101      	movs	r1, #1
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_DFSDM1_Init+0xb8>)
 8001410:	f001 f9f6 	bl	8002800 <HAL_DFSDM_FilterConfigRegChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 800141a:	f000 fae1 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200000c4 	.word	0x200000c4
 8001428:	40016180 	.word	0x40016180
 800142c:	20000118 	.word	0x20000118
 8001430:	40016000 	.word	0x40016000

08001434 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_SPI2_Init+0x74>)
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <MX_SPI2_Init+0x78>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001440:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001444:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_SPI2_Init+0x74>)
 800144e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001452:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MX_SPI2_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001466:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_SPI2_Init+0x74>)
 800146a:	2208      	movs	r2, #8
 800146c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_SPI2_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001482:	2207      	movs	r2, #7
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_SPI2_Init+0x74>)
 800148e:	2208      	movs	r2, #8
 8001490:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001494:	f002 fcee 	bl	8003e74 <HAL_SPI_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800149e:	f000 fa9f 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000198 	.word	0x20000198
 80014ac:	40003800 	.word	0x40003800

080014b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80014c4:	2001      	movs	r0, #1
 80014c6:	f7ff fc7d 	bl	8000dc4 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014ca:	f7ff fb55 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fbc9 	bl	8000c6c <NVIC_EncodePriority>
 80014da:	4603      	mov	r3, r0
 80014dc:	4619      	mov	r1, r3
 80014de:	201c      	movs	r0, #28
 80014e0:	f7ff fb9a 	bl	8000c18 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80014e4:	201c      	movs	r0, #28
 80014e6:	f7ff fb55 	bl	8000b94 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 2000;
 80014f2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80014f6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001504:	f004 f950 	bl	80057a8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001508:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800150c:	f7ff fc01 	bl	8000d12 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001510:	2100      	movs	r1, #0
 8001512:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001516:	f7ff fc0c 	bl	8000d32 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800151a:	2100      	movs	r1, #0
 800151c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001520:	f7ff fc1c 	bl	8000d5c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001524:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001528:	f7ff fc2b 	bl	8000d82 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_TIM3_Init+0x98>)
 8001554:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <MX_TIM3_Init+0x9c>)
 8001556:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_TIM3_Init+0x98>)
 800155a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800155e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_TIM3_Init+0x98>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_TIM3_Init+0x98>)
 8001568:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800156c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_TIM3_Init+0x98>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <MX_TIM3_Init+0x98>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800157a:	4814      	ldr	r0, [pc, #80]	; (80015cc <MX_TIM3_Init+0x98>)
 800157c:	f002 ffae 	bl	80044dc <HAL_TIM_Base_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001586:	f000 fa2b 	bl	80019e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4619      	mov	r1, r3
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_TIM3_Init+0x98>)
 8001598:	f003 f844 	bl	8004624 <HAL_TIM_ConfigClockSource>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80015a2:	f000 fa1d 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_TIM3_Init+0x98>)
 80015b4:	f003 f99a 	bl	80048ec <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80015be:	f000 fa0f 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200001fc 	.word	0x200001fc
 80015d0:	40000400 	.word	0x40000400

080015d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_UART4_Init+0x58>)
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <MX_UART4_Init+0x5c>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_UART4_Init+0x58>)
 80015e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_UART4_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_UART4_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_UART4_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_UART4_Init+0x58>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <MX_UART4_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_UART4_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <MX_UART4_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_UART4_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_UART4_Init+0x58>)
 8001618:	f004 f80a 	bl	8005630 <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001622:	f000 f9dd 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000248 	.word	0x20000248
 8001630:	40004c00 	.word	0x40004c00

08001634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <MX_USART1_UART_Init+0x58>)
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <MX_USART1_UART_Init+0x5c>)
 800163c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <MX_USART1_UART_Init+0x58>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_USART1_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <MX_USART1_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_USART1_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_USART1_UART_Init+0x58>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <MX_USART1_UART_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_USART1_UART_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <MX_USART1_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_USART1_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_USART1_UART_Init+0x58>)
 8001678:	f003 ffda 	bl	8005630 <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001682:	f000 f9ad 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200002d0 	.word	0x200002d0
 8001690:	40013800 	.word	0x40013800

08001694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_USART2_UART_Init+0x58>)
 800169a:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <MX_USART2_UART_Init+0x5c>)
 800169c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_USART2_UART_Init+0x58>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_USART2_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_USART2_UART_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_USART2_UART_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_USART2_UART_Init+0x58>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_USART2_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_USART2_UART_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_USART2_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_USART2_UART_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_USART2_UART_Init+0x58>)
 80016d8:	f003 ffaa 	bl	8005630 <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016e2:	f000 f97d 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000358 	.word	0x20000358
 80016f0:	40004400 	.word	0x40004400

080016f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_USART3_UART_Init+0x58>)
 80016fa:	4a15      	ldr	r2, [pc, #84]	; (8001750 <MX_USART3_UART_Init+0x5c>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <MX_USART3_UART_Init+0x58>)
 8001700:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_USART3_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_USART3_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_USART3_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_USART3_UART_Init+0x58>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_USART3_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_USART3_UART_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_USART3_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_USART3_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_USART3_UART_Init+0x58>)
 8001738:	f003 ff7a 	bl	8005630 <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001742:	f000 f94d 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200003e0 	.word	0x200003e0
 8001750:	40004800 	.word	0x40004800

08001754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_DMA_Init+0x38>)
 800175c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <MX_DMA_Init+0x38>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6493      	str	r3, [r2, #72]	; 0x48
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_DMA_Init+0x38>)
 8001768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	200f      	movs	r0, #15
 8001778:	f000 fd74 	bl	8002264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800177c:	200f      	movs	r0, #15
 800177e:	f000 fdaf 	bl	80022e0 <HAL_NVIC_EnableIRQ>

}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	4b3a      	ldr	r3, [pc, #232]	; (8001890 <MX_GPIO_Init+0x100>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	4a39      	ldr	r2, [pc, #228]	; (8001890 <MX_GPIO_Init+0x100>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b2:	4b37      	ldr	r3, [pc, #220]	; (8001890 <MX_GPIO_Init+0x100>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <MX_GPIO_Init+0x100>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	4a33      	ldr	r2, [pc, #204]	; (8001890 <MX_GPIO_Init+0x100>)
 80017c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <MX_GPIO_Init+0x100>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <MX_GPIO_Init+0x100>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	4a2d      	ldr	r2, [pc, #180]	; (8001890 <MX_GPIO_Init+0x100>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e2:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <MX_GPIO_Init+0x100>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	4b28      	ldr	r3, [pc, #160]	; (8001890 <MX_GPIO_Init+0x100>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	4a27      	ldr	r2, [pc, #156]	; (8001890 <MX_GPIO_Init+0x100>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fa:	4b25      	ldr	r3, [pc, #148]	; (8001890 <MX_GPIO_Init+0x100>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, doorStatus_Pin|lightStatus_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2103      	movs	r1, #3
 800180a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180e:	f001 fa2d 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ChipSelectSD_GPIO_Port, ChipSelectSD_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001818:	481e      	ldr	r0, [pc, #120]	; (8001894 <MX_GPIO_Init+0x104>)
 800181a:	f001 fa27 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userControl_Pin */
  GPIO_InitStruct.Pin = userControl_Pin;
 800181e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001824:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(userControl_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4818      	ldr	r0, [pc, #96]	; (8001898 <MX_GPIO_Init+0x108>)
 8001836:	f001 f917 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : doorStatus_Pin lightStatus_Pin */
  GPIO_InitStruct.Pin = doorStatus_Pin|lightStatus_Pin;
 800183a:	2303      	movs	r3, #3
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001854:	f001 f908 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ChipSelectSD_Pin */
  GPIO_InitStruct.Pin = ChipSelectSD_Pin;
 8001858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ChipSelectSD_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4808      	ldr	r0, [pc, #32]	; (8001894 <MX_GPIO_Init+0x104>)
 8001872:	f001 f8f9 	bl	8002a68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2102      	movs	r1, #2
 800187a:	2028      	movs	r0, #40	; 0x28
 800187c:	f000 fcf2 	bl	8002264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001880:	2028      	movs	r0, #40	; 0x28
 8001882:	f000 fd2d 	bl	80022e0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	; 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	48000400 	.word	0x48000400
 8001898:	48000800 	.word	0x48000800

0800189c <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80018a4:	1d39      	adds	r1, r7, #4
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018aa:	2201      	movs	r2, #1
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <__io_putchar+0x20>)
 80018ae:	f003 f86d 	bl	800498c <HAL_UART_Transmit>
  return ch;
 80018b2:	687b      	ldr	r3, [r7, #4]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000358 	.word	0x20000358

080018c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
	  open_SD_card_song(recordingPath);
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_GPIO_EXTI_Callback+0x44>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fb5a 	bl	8000f88 <open_SD_card_song>
	  read_SD_card_song_initial();
 80018d4:	f7ff fafa 	bl	8000ecc <read_SD_card_song_initial>
	  printf("Starting Playback \r\n");
 80018d8:	480b      	ldr	r0, [pc, #44]	; (8001908 <HAL_GPIO_EXTI_Callback+0x48>)
 80018da:	f007 fa6d 	bl	8008db8 <puts>
	  audio_playing = 1;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_GPIO_EXTI_Callback+0x4c>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
	  song_length_total = song_length;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_GPIO_EXTI_Callback+0x50>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_GPIO_EXTI_Callback+0x54>)
 80018ea:	6013      	str	r3, [r2, #0]
	  LL_TIM_EnableIT_UPDATE(TIM2);
 80018ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018f0:	f7ff fa57 	bl	8000da2 <LL_TIM_EnableIT_UPDATE>
	  LL_TIM_EnableCounter(TIM2);
 80018f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018f8:	f7ff f9eb 	bl	8000cd2 <LL_TIM_EnableCounter>

}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000004 	.word	0x20000004
 8001908:	08009bc0 	.word	0x08009bc0
 800190c:	2000142c 	.word	0x2000142c
 8001910:	20001434 	.word	0x20001434
 8001914:	20001438 	.word	0x20001438

08001918 <HAL_UARTEx_RxEventCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
	mic_transfer_complete = 1;
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
	if (strncmp((char*)data, "LIGHT_ON\r\n", strlen("LIGHT_ON\r\n")) == 0) {
 8001924:	220a      	movs	r2, #10
 8001926:	4923      	ldr	r1, [pc, #140]	; (80019b4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8001928:	4823      	ldr	r0, [pc, #140]	; (80019b8 <HAL_UARTEx_RxEventCallback+0xa0>)
 800192a:	f007 fa4d 	bl	8008dc8 <strncmp>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d107      	bne.n	8001944 <HAL_UARTEx_RxEventCallback+0x2c>
	        HAL_UART_Transmit(&huart4, (uint8_t*)"ON", strlen("ON"), HAL_MAX_DELAY);
 8001934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001938:	2202      	movs	r2, #2
 800193a:	4920      	ldr	r1, [pc, #128]	; (80019bc <HAL_UARTEx_RxEventCallback+0xa4>)
 800193c:	4820      	ldr	r0, [pc, #128]	; (80019c0 <HAL_UARTEx_RxEventCallback+0xa8>)
 800193e:	f003 f825 	bl	800498c <HAL_UART_Transmit>
 8001942:	e00e      	b.n	8001962 <HAL_UARTEx_RxEventCallback+0x4a>
	}

	else if (strncmp((char*)data, "LIGHT_OFF\r\n", strlen("LIGHT_OFF\r\n")) == 0) {
 8001944:	220b      	movs	r2, #11
 8001946:	491f      	ldr	r1, [pc, #124]	; (80019c4 <HAL_UARTEx_RxEventCallback+0xac>)
 8001948:	481b      	ldr	r0, [pc, #108]	; (80019b8 <HAL_UARTEx_RxEventCallback+0xa0>)
 800194a:	f007 fa3d 	bl	8008dc8 <strncmp>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d106      	bne.n	8001962 <HAL_UARTEx_RxEventCallback+0x4a>
	        HAL_UART_Transmit(&huart4, (uint8_t *)"OFF", strlen("OFF"), HAL_MAX_DELAY);
 8001954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001958:	2203      	movs	r2, #3
 800195a:	491b      	ldr	r1, [pc, #108]	; (80019c8 <HAL_UARTEx_RxEventCallback+0xb0>)
 800195c:	4818      	ldr	r0, [pc, #96]	; (80019c0 <HAL_UARTEx_RxEventCallback+0xa8>)
 800195e:	f003 f815 	bl	800498c <HAL_UART_Transmit>
	}

	if (strncmp((char*)data, "DOOR_OPEN\r\n", strlen("DOOR_OPEN\r\n")) == 0) {
 8001962:	220b      	movs	r2, #11
 8001964:	4919      	ldr	r1, [pc, #100]	; (80019cc <HAL_UARTEx_RxEventCallback+0xb4>)
 8001966:	4814      	ldr	r0, [pc, #80]	; (80019b8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8001968:	f007 fa2e 	bl	8008dc8 <strncmp>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <HAL_UARTEx_RxEventCallback+0x6a>
	    HAL_UART_Transmit(&huart3, (uint8_t *)"OPEN", strlen("OPEN"), HAL_MAX_DELAY);
 8001972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001976:	2204      	movs	r2, #4
 8001978:	4915      	ldr	r1, [pc, #84]	; (80019d0 <HAL_UARTEx_RxEventCallback+0xb8>)
 800197a:	4816      	ldr	r0, [pc, #88]	; (80019d4 <HAL_UARTEx_RxEventCallback+0xbc>)
 800197c:	f003 f806 	bl	800498c <HAL_UART_Transmit>
 8001980:	e00e      	b.n	80019a0 <HAL_UARTEx_RxEventCallback+0x88>
	}

	else if (strncmp((char*)data, "DOOR_CLOSE\r\n", strlen("DOOR_CLOSE\r\n")) == 0) {
 8001982:	220c      	movs	r2, #12
 8001984:	4914      	ldr	r1, [pc, #80]	; (80019d8 <HAL_UARTEx_RxEventCallback+0xc0>)
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8001988:	f007 fa1e 	bl	8008dc8 <strncmp>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_UARTEx_RxEventCallback+0x88>
	    HAL_UART_Transmit(&huart3, (uint8_t *)"CLOSE", strlen("CLOSE"), HAL_MAX_DELAY);
 8001992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001996:	2205      	movs	r2, #5
 8001998:	4910      	ldr	r1, [pc, #64]	; (80019dc <HAL_UARTEx_RxEventCallback+0xc4>)
 800199a:	480e      	ldr	r0, [pc, #56]	; (80019d4 <HAL_UARTEx_RxEventCallback+0xbc>)
 800199c:	f002 fff6 	bl	800498c <HAL_UART_Transmit>
	}


	    HAL_UARTEx_ReceiveToIdle_IT(huart, data, 64);
 80019a0:	2240      	movs	r2, #64	; 0x40
 80019a2:	4905      	ldr	r1, [pc, #20]	; (80019b8 <HAL_UARTEx_RxEventCallback+0xa0>)
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f003 fedd 	bl	8005764 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	08009bd4 	.word	0x08009bd4
 80019b8:	2000445c 	.word	0x2000445c
 80019bc:	08009be0 	.word	0x08009be0
 80019c0:	20000248 	.word	0x20000248
 80019c4:	08009be4 	.word	0x08009be4
 80019c8:	08009bf0 	.word	0x08009bf0
 80019cc:	08009bf4 	.word	0x08009bf4
 80019d0:	08009c00 	.word	0x08009c00
 80019d4:	200003e0 	.word	0x200003e0
 80019d8:	08009c08 	.word	0x08009c08
 80019dc:	08009c18 	.word	0x08009c18

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <Error_Handler+0x8>
	...

080019ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_MspInit+0x2c>)
 80019ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019f0:	f042 0201 	orr.w	r2, r2, #1
 80019f4:	661a      	str	r2, [r3, #96]	; 0x60
 80019f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80019f8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	f002 0201 	and.w	r2, r2, #1
 80019fe:	9200      	str	r2, [sp, #0]
 8001a00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a08:	659a      	str	r2, [r3, #88]	; 0x58
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a14:	b002      	add	sp, #8
 8001a16:	4770      	bx	lr
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a1c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_DAC_MspInit+0x6c>)
 8001a20:	6802      	ldr	r2, [r0, #0]
{
 8001a22:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	2400      	movs	r4, #0
  if(hdac->Instance==DAC1)
 8001a26:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001a2c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001a30:	9406      	str	r4, [sp, #24]
  if(hdac->Instance==DAC1)
 8001a32:	d001      	beq.n	8001a38 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001a34:	b008      	add	sp, #32
 8001a36:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001a38:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001a3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a40:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a44:	659a      	str	r2, [r3, #88]	; 0x58
 8001a46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a48:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001a4c:	9200      	str	r2, [sp, #0]
 8001a4e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a60:	2210      	movs	r2, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f000 fffb 	bl	8002a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a72:	4622      	mov	r2, r4
 8001a74:	4621      	mov	r1, r4
 8001a76:	2036      	movs	r0, #54	; 0x36
 8001a78:	f000 fbf4 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a7c:	2036      	movs	r0, #54	; 0x36
 8001a7e:	f000 fc2f 	bl	80022e0 <HAL_NVIC_EnableIRQ>
}
 8001a82:	b008      	add	sp, #32
 8001a84:	bd10      	pop	{r4, pc}
 8001a86:	bf00      	nop
 8001a88:	40007400 	.word	0x40007400

08001a8c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001a8c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
  if(DFSDM1_Init == 0)
 8001a90:	4d43      	ldr	r5, [pc, #268]	; (8001ba0 <HAL_DFSDM_FilterMspInit+0x114>)
{
 8001a92:	b0ac      	sub	sp, #176	; 0xb0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a96:	2288      	movs	r2, #136	; 0x88
{
 8001a98:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a9a:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001aa0:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001aa4:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa6:	f007 f9a1 	bl	8008dec <memset>
  if(DFSDM1_Init == 0)
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	b133      	cbz	r3, 8001abc <HAL_DFSDM_FilterMspInit+0x30>
  DFSDM1_Init++;
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 8001aae:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <HAL_DFSDM_FilterMspInit+0x118>)
 8001ab0:	6822      	ldr	r2, [r4, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d04f      	beq.n	8001b56 <HAL_DFSDM_FilterMspInit+0xca>
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
  }

}
 8001ab6:	b02c      	add	sp, #176	; 0xb0
 8001ab8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001ac2:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac4:	f001 fea2 	bl	800380c <HAL_RCCEx_PeriphCLKConfig>
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d162      	bne.n	8001b92 <HAL_DFSDM_FilterMspInit+0x106>
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001acc:	4a36      	ldr	r2, [pc, #216]	; (8001ba8 <HAL_DFSDM_FilterMspInit+0x11c>)
 8001ace:	6813      	ldr	r3, [r2, #0]
 8001ad0:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001ad2:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001ad4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001ad6:	d109      	bne.n	8001aec <HAL_DFSDM_FilterMspInit+0x60>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001ad8:	4b34      	ldr	r3, [pc, #208]	; (8001bac <HAL_DFSDM_FilterMspInit+0x120>)
 8001ada:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001adc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001ae0:	661a      	str	r2, [r3, #96]	; 0x60
 8001ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aec:	4b2f      	ldr	r3, [pc, #188]	; (8001bac <HAL_DFSDM_FilterMspInit+0x120>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aee:	4830      	ldr	r0, [pc, #192]	; (8001bb0 <HAL_DFSDM_FilterMspInit+0x124>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001af2:	f042 0204 	orr.w	r2, r2, #4
 8001af6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001af8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001afa:	f002 0204 	and.w	r2, r2, #4
 8001afe:	9202      	str	r2, [sp, #8]
 8001b00:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b04:	f042 0202 	orr.w	r2, r2, #2
 8001b08:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b12:	2204      	movs	r2, #4
 8001b14:	2302      	movs	r3, #2
 8001b16:	f04f 0800 	mov.w	r8, #0
 8001b1a:	f04f 0900 	mov.w	r9, #0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b1e:	2606      	movs	r6, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b26:	e9cd 8906 	strd	r8, r9, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b2c:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	f000 ff9b 	bl	8002a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b32:	2202      	movs	r2, #2
 8001b34:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	481f      	ldr	r0, [pc, #124]	; (8001bb4 <HAL_DFSDM_FilterMspInit+0x128>)
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b38:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b40:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f000 ff90 	bl	8002a68 <HAL_GPIO_Init>
  DFSDM1_Init++;
 8001b48:	682b      	ldr	r3, [r5, #0]
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 8001b4a:	6822      	ldr	r2, [r4, #0]
  DFSDM1_Init++;
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	602b      	str	r3, [r5, #0]
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <HAL_DFSDM_FilterMspInit+0x118>)
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d1af      	bne.n	8001ab6 <HAL_DFSDM_FilterMspInit+0x2a>
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8001b56:	4d18      	ldr	r5, [pc, #96]	; (8001bb8 <HAL_DFSDM_FilterMspInit+0x12c>)
 8001b58:	4918      	ldr	r1, [pc, #96]	; (8001bbc <HAL_DFSDM_FilterMspInit+0x130>)
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e9c5 1300 	strd	r1, r3, [r5]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8001b60:	2280      	movs	r2, #128	; 0x80
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b62:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b6a:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8001b72:	2220      	movs	r2, #32
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8001b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8001b78:	4628      	mov	r0, r5
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8001b7a:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8001b7e:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8001b80:	f000 fe66 	bl	8002850 <HAL_DMA_Init>
 8001b84:	b940      	cbnz	r0, 8001b98 <HAL_DFSDM_FilterMspInit+0x10c>
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
 8001b86:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
 8001b8a:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8001b8c:	b02c      	add	sp, #176	; 0xb0
 8001b8e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      Error_Handler();
 8001b92:	f7ff ff25 	bl	80019e0 <Error_Handler>
 8001b96:	e799      	b.n	8001acc <HAL_DFSDM_FilterMspInit+0x40>
      Error_Handler();
 8001b98:	f7ff ff22 	bl	80019e0 <Error_Handler>
 8001b9c:	e7f3      	b.n	8001b86 <HAL_DFSDM_FilterMspInit+0xfa>
 8001b9e:	bf00      	nop
 8001ba0:	2000449c 	.word	0x2000449c
 8001ba4:	40016180 	.word	0x40016180
 8001ba8:	200044a0 	.word	0x200044a0
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	48000800 	.word	0x48000800
 8001bb4:	48000400 	.word	0x48000400
 8001bb8:	20000150 	.word	0x20000150
 8001bbc:	40020058 	.word	0x40020058

08001bc0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
  if(DFSDM1_Init == 0)
 8001bc2:	4c2e      	ldr	r4, [pc, #184]	; (8001c7c <HAL_DFSDM_ChannelMspInit+0xbc>)
{
 8001bc4:	b0ad      	sub	sp, #180	; 0xb4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc8:	2288      	movs	r2, #136	; 0x88
 8001bca:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001bd0:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001bd4:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd6:	f007 f909 	bl	8008dec <memset>
  if(DFSDM1_Init == 0)
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	b10b      	cbz	r3, 8001be2 <HAL_DFSDM_ChannelMspInit+0x22>

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
  }

}
 8001bde:	b02d      	add	sp, #180	; 0xb4
 8001be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001be2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be6:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001be8:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bea:	f001 fe0f 	bl	800380c <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	d140      	bne.n	8001c74 <HAL_DFSDM_ChannelMspInit+0xb4>
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001bf2:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bf4:	6813      	ldr	r3, [r2, #0]
 8001bf6:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001bf8:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001bfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001bfc:	d109      	bne.n	8001c12 <HAL_DFSDM_ChannelMspInit+0x52>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001c00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c02:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001c06:	661a      	str	r2, [r3, #96]	; 0x60
 8001c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <HAL_DFSDM_ChannelMspInit+0xc4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c14:	481c      	ldr	r0, [pc, #112]	; (8001c88 <HAL_DFSDM_ChannelMspInit+0xc8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c18:	f042 0204 	orr.w	r2, r2, #4
 8001c1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c20:	f002 0204 	and.w	r2, r2, #4
 8001c24:	9202      	str	r2, [sp, #8]
 8001c26:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c2a:	f042 0202 	orr.w	r2, r2, #2
 8001c2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c38:	2506      	movs	r5, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	2600      	movs	r6, #0
 8001c40:	2700      	movs	r7, #0
 8001c42:	2302      	movs	r3, #2
 8001c44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c48:	e9cd 6706 	strd	r6, r7, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c4e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c50:	f000 ff0a 	bl	8002a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c54:	2202      	movs	r2, #2
 8001c56:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	480c      	ldr	r0, [pc, #48]	; (8001c8c <HAL_DFSDM_ChannelMspInit+0xcc>)
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c5a:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c62:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	f000 feff 	bl	8002a68 <HAL_GPIO_Init>
  DFSDM1_Init++;
 8001c6a:	6823      	ldr	r3, [r4, #0]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	6023      	str	r3, [r4, #0]
}
 8001c70:	b02d      	add	sp, #180	; 0xb4
 8001c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001c74:	f7ff feb4 	bl	80019e0 <Error_Handler>
 8001c78:	e7bb      	b.n	8001bf2 <HAL_DFSDM_ChannelMspInit+0x32>
 8001c7a:	bf00      	nop
 8001c7c:	2000449c 	.word	0x2000449c
 8001c80:	200044a0 	.word	0x200044a0
 8001c84:	40021000 	.word	0x40021000
 8001c88:	48000800 	.word	0x48000800
 8001c8c:	48000400 	.word	0x48000400

08001c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c90:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8001c92:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_SPI_MspInit+0x70>)
 8001c94:	6801      	ldr	r1, [r0, #0]
{
 8001c96:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	2300      	movs	r3, #0
  if(hspi->Instance==SPI2)
 8001c9a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001ca0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001ca4:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI2)
 8001ca6:	d001      	beq.n	8001cac <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ca8:	b008      	add	sp, #32
 8001caa:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cb0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001cb4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001cf8 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cc0:	659a      	str	r2, [r3, #88]	; 0x58
 8001cc2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cc4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001cc8:	9200      	str	r2, [sp, #0]
 8001cca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ccc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cce:	f042 0202 	orr.w	r2, r2, #2
 8001cd2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cde:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ce2:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f000 febc 	bl	8002a68 <HAL_GPIO_Init>
}
 8001cf0:	b008      	add	sp, #32
 8001cf2:	bd10      	pop	{r4, pc}
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	0000e000 	.word	0x0000e000
 8001cfc:	00000002 	.word	0x00000002
 8001d00:	40003800 	.word	0x40003800
 8001d04:	48000400 	.word	0x48000400

08001d08 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_TIM_Base_MspInit+0x3c>)
 8001d0a:	6802      	ldr	r2, [r0, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d000      	beq.n	8001d12 <HAL_TIM_Base_MspInit+0xa>
 8001d10:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d12:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
{
 8001d16:	b500      	push	{lr}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d18:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8001d1a:	f041 0102 	orr.w	r1, r1, #2
 8001d1e:	6599      	str	r1, [r3, #88]	; 0x58
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8001d22:	b083      	sub	sp, #12
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d24:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d2c:	201d      	movs	r0, #29
 8001d2e:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d30:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d32:	f000 fa97 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d36:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d38:	b003      	add	sp, #12
 8001d3a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d3e:	f000 bacf 	b.w	80022e0 <HAL_NVIC_EnableIRQ>
 8001d42:	bf00      	nop
 8001d44:	40000400 	.word	0x40000400

08001d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d48:	b510      	push	{r4, lr}
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	b0b0      	sub	sp, #192	; 0xc0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d50:	2288      	movs	r2, #136	; 0x88
 8001d52:	a80e      	add	r0, sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8001d58:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 8001d5c:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d5e:	f007 f845 	bl	8008dec <memset>
  if(huart->Instance==UART4)
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	4a78      	ldr	r2, [pc, #480]	; (8001f48 <HAL_UART_MspInit+0x200>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d03d      	beq.n	8001de6 <HAL_UART_MspInit+0x9e>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 8001d6a:	4a78      	ldr	r2, [pc, #480]	; (8001f4c <HAL_UART_MspInit+0x204>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d06d      	beq.n	8001e4c <HAL_UART_MspInit+0x104>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8001d70:	4a77      	ldr	r2, [pc, #476]	; (8001f50 <HAL_UART_MspInit+0x208>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	f000 809d 	beq.w	8001eb2 <HAL_UART_MspInit+0x16a>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8001d78:	4a76      	ldr	r2, [pc, #472]	; (8001f54 <HAL_UART_MspInit+0x20c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d001      	beq.n	8001d82 <HAL_UART_MspInit+0x3a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d7e:	b030      	add	sp, #192	; 0xc0
 8001d80:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d82:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d84:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d86:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d88:	f001 fd40 	bl	800380c <HAL_RCCEx_PeriphCLKConfig>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	f040 80c3 	bne.w	8001f18 <HAL_UART_MspInit+0x1d0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d92:	4b71      	ldr	r3, [pc, #452]	; (8001f58 <HAL_UART_MspInit+0x210>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d94:	4871      	ldr	r0, [pc, #452]	; (8001f5c <HAL_UART_MspInit+0x214>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d98:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d9c:	659a      	str	r2, [r3, #88]	; 0x58
 8001d9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001da0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001da4:	9206      	str	r2, [sp, #24]
 8001da6:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001daa:	ed9f 7b5d 	vldr	d7, [pc, #372]	; 8001f20 <HAL_UART_MspInit+0x1d8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	f042 0204 	orr.w	r2, r2, #4
 8001db2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001db6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001dba:	ed9f 7b5b 	vldr	d7, [pc, #364]	; 8001f28 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc4:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dc6:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001dc8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dcc:	9a07      	ldr	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dce:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd0:	f000 fe4a 	bl	8002a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2027      	movs	r0, #39	; 0x27
 8001dd8:	4611      	mov	r1, r2
 8001dda:	f000 fa43 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dde:	2027      	movs	r0, #39	; 0x27
 8001de0:	f000 fa7e 	bl	80022e0 <HAL_NVIC_EnableIRQ>
}
 8001de4:	e7cb      	b.n	8001d7e <HAL_UART_MspInit+0x36>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001de6:	2308      	movs	r3, #8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001de8:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001dea:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dec:	f001 fd0e 	bl	800380c <HAL_RCCEx_PeriphCLKConfig>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	f040 8088 	bne.w	8001f06 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001df6:	4b58      	ldr	r3, [pc, #352]	; (8001f58 <HAL_UART_MspInit+0x210>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df8:	4858      	ldr	r0, [pc, #352]	; (8001f5c <HAL_UART_MspInit+0x214>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8001dfa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dfc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e00:	659a      	str	r2, [r3, #88]	; 0x58
 8001e02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e04:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001e08:	9200      	str	r2, [sp, #0]
 8001e0a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e0e:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8001f30 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e12:	f042 0204 	orr.w	r2, r2, #4
 8001e16:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e1a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001e1e:	ed9f 7b42 	vldr	d7, [pc, #264]	; 8001f28 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e28:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e2a:	2308      	movs	r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e30:	930c      	str	r3, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e32:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e34:	f000 fe18 	bl	8002a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	2034      	movs	r0, #52	; 0x34
 8001e3e:	f000 fa11 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e42:	2034      	movs	r0, #52	; 0x34
 8001e44:	f000 fa4c 	bl	80022e0 <HAL_NVIC_EnableIRQ>
}
 8001e48:	b030      	add	sp, #192	; 0xc0
 8001e4a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e4c:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4e:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e50:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e52:	f001 fcdb 	bl	800380c <HAL_RCCEx_PeriphCLKConfig>
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d158      	bne.n	8001f0c <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <HAL_UART_MspInit+0x210>)
 8001e5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e62:	661a      	str	r2, [r3, #96]	; 0x60
 8001e64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e66:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e6a:	9202      	str	r2, [sp, #8]
 8001e6c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e70:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8001f38 <HAL_UART_MspInit+0x1f0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e7c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001e80:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8001f28 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e8c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e92:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e96:	930c      	str	r3, [sp, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f000 fde5 	bl	8002a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	2025      	movs	r0, #37	; 0x25
 8001ea4:	f000 f9de 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ea8:	2025      	movs	r0, #37	; 0x25
 8001eaa:	f000 fa19 	bl	80022e0 <HAL_NVIC_EnableIRQ>
}
 8001eae:	b030      	add	sp, #192	; 0xc0
 8001eb0:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001eb2:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb4:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001eb6:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb8:	f001 fca8 	bl	800380c <HAL_RCCEx_PeriphCLKConfig>
 8001ebc:	bb48      	cbnz	r0, 8001f12 <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_UART_MspInit+0x210>)
 8001ec0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ec2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ec6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ec8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001eca:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001ece:	9204      	str	r2, [sp, #16]
 8001ed0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ed4:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8001f40 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ee0:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001ee4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001f28 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ef0:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ef6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001efc:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f000 fdb3 	bl	8002a68 <HAL_GPIO_Init>
}
 8001f02:	b030      	add	sp, #192	; 0xc0
 8001f04:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001f06:	f7ff fd6b 	bl	80019e0 <Error_Handler>
 8001f0a:	e774      	b.n	8001df6 <HAL_UART_MspInit+0xae>
      Error_Handler();
 8001f0c:	f7ff fd68 	bl	80019e0 <Error_Handler>
 8001f10:	e7a3      	b.n	8001e5a <HAL_UART_MspInit+0x112>
      Error_Handler();
 8001f12:	f7ff fd65 	bl	80019e0 <Error_Handler>
 8001f16:	e7d2      	b.n	8001ebe <HAL_UART_MspInit+0x176>
      Error_Handler();
 8001f18:	f7ff fd62 	bl	80019e0 <Error_Handler>
 8001f1c:	e739      	b.n	8001d92 <HAL_UART_MspInit+0x4a>
 8001f1e:	bf00      	nop
 8001f20:	00000030 	.word	0x00000030
 8001f24:	00000002 	.word	0x00000002
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	00000003 	.word	0x00000003
 8001f30:	00000c00 	.word	0x00000c00
 8001f34:	00000002 	.word	0x00000002
 8001f38:	00000600 	.word	0x00000600
 8001f3c:	00000002 	.word	0x00000002
 8001f40:	0000000c 	.word	0x0000000c
 8001f44:	00000002 	.word	0x00000002
 8001f48:	40004c00 	.word	0x40004c00
 8001f4c:	40013800 	.word	0x40013800
 8001f50:	40004400 	.word	0x40004400
 8001f54:	40004800 	.word	0x40004800
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000800 	.word	0x48000800

08001f60 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <NMI_Handler>
 8001f62:	bf00      	nop

08001f64 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <HardFault_Handler>
 8001f66:	bf00      	nop

08001f68 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <MemManage_Handler>
 8001f6a:	bf00      	nop

08001f6c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <BusFault_Handler>
 8001f6e:	bf00      	nop

08001f70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <UsageFault_Handler>
 8001f72:	bf00      	nop

08001f74 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop

08001f78 <DebugMon_Handler>:
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop

08001f7c <PendSV_Handler>:
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop

08001f80 <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001f80:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <SysTick_Handler+0x18>)
 8001f82:	8813      	ldrh	r3, [r2, #0]
 8001f84:	b10b      	cbz	r3, 8001f8a <SysTick_Handler+0xa>
	  Timer1--;
 8001f86:	3b01      	subs	r3, #1
 8001f88:	8013      	strh	r3, [r2, #0]
	if(Timer2 > 0)
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <SysTick_Handler+0x1c>)
 8001f8c:	8813      	ldrh	r3, [r2, #0]
 8001f8e:	b10b      	cbz	r3, 8001f94 <SysTick_Handler+0x14>
	  Timer2--;
 8001f90:	3b01      	subs	r3, #1
 8001f92:	8013      	strh	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f94:	f000 b930 	b.w	80021f8 <HAL_IncTick>
 8001f98:	200044dc 	.word	0x200044dc
 8001f9c:	200044de 	.word	0x200044de

08001fa0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001fa0:	4801      	ldr	r0, [pc, #4]	; (8001fa8 <DMA1_Channel5_IRQHandler+0x8>)
 8001fa2:	f000 bd13 	b.w	80029cc <HAL_DMA_IRQHandler>
 8001fa6:	bf00      	nop
 8001fa8:	20000150 	.word	0x20000150

08001fac <TIM2_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	07d2      	lsls	r2, r2, #31
 8001fb4:	d525      	bpl.n	8002002 <TIM2_IRQHandler+0x56>

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fb6:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if (LL_TIM_IsActiveFlag_UPDATE(TIM2)){
		LL_TIM_ClearFlag_UPDATE(TIM2);
		newSample.uShort = (uint16_t)32768 + playback_buffer[sample_position];
 8001fb8:	4c14      	ldr	r4, [pc, #80]	; (800200c <TIM2_IRQHandler+0x60>)
 8001fba:	4815      	ldr	r0, [pc, #84]	; (8002010 <TIM2_IRQHandler+0x64>)
 8001fbc:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001fbe:	f06f 0201 	mvn.w	r2, #1
 8001fc2:	611a      	str	r2, [r3, #16]
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <TIM2_IRQHandler+0x68>)
 8001fc6:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (newSample.uShort>>4));
 8001fca:	2200      	movs	r2, #0
		newSample.uShort = (uint16_t)32768 + playback_buffer[sample_position];
 8001fcc:	f481 4100 	eor.w	r1, r1, #32768	; 0x8000
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (newSample.uShort>>4));
 8001fd0:	090b      	lsrs	r3, r1, #4
		newSample.uShort = (uint16_t)32768 + playback_buffer[sample_position];
 8001fd2:	8001      	strh	r1, [r0, #0]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (newSample.uShort>>4));
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4810      	ldr	r0, [pc, #64]	; (8002018 <TIM2_IRQHandler+0x6c>)
 8001fd8:	f000 f9ee 	bl	80023b8 <HAL_DAC_SetValue>

		sample_position++;
		samples_played++;
 8001fdc:	490f      	ldr	r1, [pc, #60]	; (800201c <TIM2_IRQHandler+0x70>)
		sample_position++;
 8001fde:	6823      	ldr	r3, [r4, #0]
		samples_played++;
 8001fe0:	680a      	ldr	r2, [r1, #0]
		sample_position++;
 8001fe2:	3301      	adds	r3, #1
		samples_played++;
 8001fe4:	3201      	adds	r2, #1

		if (sample_position == AUDIO_BUFFER_SIZE){
 8001fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		sample_position++;
 8001fea:	6023      	str	r3, [r4, #0]
		samples_played++;
 8001fec:	600a      	str	r2, [r1, #0]
		if (sample_position == AUDIO_BUFFER_SIZE){
 8001fee:	d009      	beq.n	8002004 <TIM2_IRQHandler+0x58>
			buffer_half = 1;
		}
		if (sample_position == AUDIO_BUFFER_SIZE * 2){
 8001ff0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ff4:	d104      	bne.n	8002000 <TIM2_IRQHandler+0x54>
			buffer_complete = 1;
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <TIM2_IRQHandler+0x74>)
 8001ff8:	2101      	movs	r1, #1
			sample_position = 0;
 8001ffa:	2300      	movs	r3, #0
			buffer_complete = 1;
 8001ffc:	6011      	str	r1, [r2, #0]
			sample_position = 0;
 8001ffe:	6023      	str	r3, [r4, #0]
	return;
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002000:	bd10      	pop	{r4, pc}
 8002002:	4770      	bx	lr
			buffer_half = 1;
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <TIM2_IRQHandler+0x78>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
}
 800200a:	bd10      	pop	{r4, pc}
 800200c:	20000010 	.word	0x20000010
 8002010:	200044a4 	.word	0x200044a4
 8002014:	20001444 	.word	0x20001444
 8002018:	200000b0 	.word	0x200000b0
 800201c:	20000000 	.word	0x20000000
 8002020:	20001440 	.word	0x20001440
 8002024:	2000143c 	.word	0x2000143c

08002028 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002028:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  if(!buttonReady){
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <TIM3_IRQHandler+0x24>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	b90a      	cbnz	r2, 8002034 <TIM3_IRQHandler+0xc>
	buttonReady = 1;
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002034:	4806      	ldr	r0, [pc, #24]	; (8002050 <TIM3_IRQHandler+0x28>)
 8002036:	f002 fbaf 	bl	8004798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK) {
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <TIM3_IRQHandler+0x28>)
 800203c:	f002 fada 	bl	80045f4 <HAL_TIM_Base_Stop_IT>
 8002040:	b900      	cbnz	r0, 8002044 <TIM3_IRQHandler+0x1c>
    Error_Handler();
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8002042:	bd08      	pop	{r3, pc}
 8002044:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002048:	f7ff bcca 	b.w	80019e0 <Error_Handler>
 800204c:	2000000c 	.word	0x2000000c
 8002050:	200001fc 	.word	0x200001fc

08002054 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002054:	4801      	ldr	r0, [pc, #4]	; (800205c <USART1_IRQHandler+0x8>)
 8002056:	f002 bdd9 	b.w	8004c0c <HAL_UART_IRQHandler>
 800205a:	bf00      	nop
 800205c:	200002d0 	.word	0x200002d0

08002060 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002060:	4801      	ldr	r0, [pc, #4]	; (8002068 <USART3_IRQHandler+0x8>)
 8002062:	f002 bdd3 	b.w	8004c0c <HAL_UART_IRQHandler>
 8002066:	bf00      	nop
 8002068:	200003e0 	.word	0x200003e0

0800206c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userControl_Pin);
 800206c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002070:	f000 be02 	b.w	8002c78 <HAL_GPIO_EXTI_IRQHandler>

08002074 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002074:	4801      	ldr	r0, [pc, #4]	; (800207c <UART4_IRQHandler+0x8>)
 8002076:	f002 bdc9 	b.w	8004c0c <HAL_UART_IRQHandler>
 800207a:	bf00      	nop
 800207c:	20000248 	.word	0x20000248

08002080 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002080:	4801      	ldr	r0, [pc, #4]	; (8002088 <TIM6_DAC_IRQHandler+0x8>)
 8002082:	f000 b9b3 	b.w	80023ec <HAL_DAC_IRQHandler>
 8002086:	bf00      	nop
 8002088:	200000b0 	.word	0x200000b0

0800208c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800208c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208e:	1e16      	subs	r6, r2, #0
 8002090:	dd07      	ble.n	80020a2 <_read+0x16>
 8002092:	460c      	mov	r4, r1
 8002094:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8002096:	f3af 8000 	nop.w
 800209a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209e:	42a5      	cmp	r5, r4
 80020a0:	d1f9      	bne.n	8002096 <_read+0xa>
  }

  return len;
}
 80020a2:	4630      	mov	r0, r6
 80020a4:	bd70      	pop	{r4, r5, r6, pc}
 80020a6:	bf00      	nop

080020a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020a8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020aa:	1e16      	subs	r6, r2, #0
 80020ac:	dd07      	ble.n	80020be <_write+0x16>
 80020ae:	460c      	mov	r4, r1
 80020b0:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80020b2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80020b6:	f7ff fbf1 	bl	800189c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	42ac      	cmp	r4, r5
 80020bc:	d1f9      	bne.n	80020b2 <_write+0xa>
  }
  return len;
}
 80020be:	4630      	mov	r0, r6
 80020c0:	bd70      	pop	{r4, r5, r6, pc}
 80020c2:	bf00      	nop

080020c4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop

080020cc <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80020cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d0:	604b      	str	r3, [r1, #4]
  return 0;
}
 80020d2:	2000      	movs	r0, #0
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop

080020d8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80020d8:	2001      	movs	r0, #1
 80020da:	4770      	bx	lr

080020dc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80020dc:	2000      	movs	r0, #0
 80020de:	4770      	bx	lr

080020e0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e2:	4a0d      	ldr	r2, [pc, #52]	; (8002118 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80020e4:	680b      	ldr	r3, [r1, #0]
{
 80020e6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e8:	4c0c      	ldr	r4, [pc, #48]	; (800211c <_sbrk+0x3c>)
 80020ea:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80020ec:	b12b      	cbz	r3, 80020fa <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ee:	4418      	add	r0, r3
 80020f0:	4290      	cmp	r0, r2
 80020f2:	d807      	bhi.n	8002104 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80020f4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <_sbrk+0x40>)
 80020fc:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80020fe:	4418      	add	r0, r3
 8002100:	4290      	cmp	r0, r2
 8002102:	d9f7      	bls.n	80020f4 <_sbrk+0x14>
    errno = ENOMEM;
 8002104:	f006 fe7a 	bl	8008dfc <__errno>
 8002108:	230c      	movs	r3, #12
 800210a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800210c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd10      	pop	{r4, pc}
 8002114:	200044a8 	.word	0x200044a8
 8002118:	20018000 	.word	0x20018000
 800211c:	00005000 	.word	0x00005000
 8002120:	20004860 	.word	0x20004860

08002124 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002124:	4a03      	ldr	r2, [pc, #12]	; (8002134 <SystemInit+0x10>)
 8002126:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800212a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800212e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002170 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800213c:	f7ff fff2 	bl	8002124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002140:	480c      	ldr	r0, [pc, #48]	; (8002174 <LoopForever+0x6>)
  ldr r1, =_edata
 8002142:	490d      	ldr	r1, [pc, #52]	; (8002178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <LoopForever+0xe>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002148:	e002      	b.n	8002150 <LoopCopyDataInit>

0800214a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800214c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214e:	3304      	adds	r3, #4

08002150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002154:	d3f9      	bcc.n	800214a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002158:	4c0a      	ldr	r4, [pc, #40]	; (8002184 <LoopForever+0x16>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800215c:	e001      	b.n	8002162 <LoopFillZerobss>

0800215e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002160:	3204      	adds	r2, #4

08002162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002164:	d3fb      	bcc.n	800215e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002166:	f006 fe4f 	bl	8008e08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800216a:	f7fe ff5f 	bl	800102c <main>

0800216e <LoopForever>:

LoopForever:
    b LoopForever
 800216e:	e7fe      	b.n	800216e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002170:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002178:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800217c:	0800a114 	.word	0x0800a114
  ldr r2, =_sbss
 8002180:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002184:	20004860 	.word	0x20004860

08002188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC1_2_IRQHandler>
	...

0800218c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800218c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_InitTick+0x40>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b90b      	cbnz	r3, 8002198 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002194:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002196:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002198:	490d      	ldr	r1, [pc, #52]	; (80021d0 <HAL_InitTick+0x44>)
 800219a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800219e:	4605      	mov	r5, r0
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	6808      	ldr	r0, [r1, #0]
 80021a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80021aa:	f000 f8a7 	bl	80022fc <HAL_SYSTICK_Config>
 80021ae:	4604      	mov	r4, r0
 80021b0:	2800      	cmp	r0, #0
 80021b2:	d1ef      	bne.n	8002194 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b4:	2d0f      	cmp	r5, #15
 80021b6:	d8ed      	bhi.n	8002194 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b8:	4602      	mov	r2, r0
 80021ba:	4629      	mov	r1, r5
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c0:	f000 f850 	bl	8002264 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <HAL_InitTick+0x48>)
 80021c6:	4620      	mov	r0, r4
 80021c8:	601d      	str	r5, [r3, #0]
}
 80021ca:	bd38      	pop	{r3, r4, r5, pc}
 80021cc:	20000018 	.word	0x20000018
 80021d0:	20000014 	.word	0x20000014
 80021d4:	2000001c 	.word	0x2000001c

080021d8 <HAL_Init>:
{
 80021d8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021da:	2003      	movs	r0, #3
 80021dc:	f000 f830 	bl	8002240 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021e0:	2001      	movs	r0, #1
 80021e2:	f7ff ffd3 	bl	800218c <HAL_InitTick>
 80021e6:	b110      	cbz	r0, 80021ee <HAL_Init+0x16>
    status = HAL_ERROR;
 80021e8:	2401      	movs	r4, #1
}
 80021ea:	4620      	mov	r0, r4
 80021ec:	bd10      	pop	{r4, pc}
 80021ee:	4604      	mov	r4, r0
    HAL_MspInit();
 80021f0:	f7ff fbfc 	bl	80019ec <HAL_MspInit>
}
 80021f4:	4620      	mov	r0, r4
 80021f6:	bd10      	pop	{r4, pc}

080021f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80021f8:	4a03      	ldr	r2, [pc, #12]	; (8002208 <HAL_IncTick+0x10>)
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_IncTick+0x14>)
 80021fc:	6811      	ldr	r1, [r2, #0]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	440b      	add	r3, r1
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	200044ac 	.word	0x200044ac
 800220c:	20000018 	.word	0x20000018

08002210 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002210:	4b01      	ldr	r3, [pc, #4]	; (8002218 <HAL_GetTick+0x8>)
 8002212:	6818      	ldr	r0, [r3, #0]
}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	200044ac 	.word	0x200044ac

0800221c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800221c:	b538      	push	{r3, r4, r5, lr}
 800221e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002220:	f7ff fff6 	bl	8002210 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002224:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002226:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002228:	d002      	beq.n	8002230 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <HAL_Delay+0x20>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002230:	f7ff ffee 	bl	8002210 <HAL_GetTick>
 8002234:	1b43      	subs	r3, r0, r5
 8002236:	42a3      	cmp	r3, r4
 8002238:	d3fa      	bcc.n	8002230 <HAL_Delay+0x14>
  {
  }
}
 800223a:	bd38      	pop	{r3, r4, r5, pc}
 800223c:	20000018 	.word	0x20000018

08002240 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4907      	ldr	r1, [pc, #28]	; (8002260 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002242:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002244:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002252:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800225a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <HAL_NVIC_SetPriority+0x74>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800226e:	f1c3 0e07 	rsb	lr, r3, #7
 8002272:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002276:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800227a:	bf28      	it	cs
 800227c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002280:	f1bc 0f06 	cmp.w	ip, #6
 8002284:	d91b      	bls.n	80022be <HAL_NVIC_SetPriority+0x5a>
 8002286:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002288:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800228c:	fa0c fc03 	lsl.w	ip, ip, r3
 8002290:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002298:	fa0c fc0e 	lsl.w	ip, ip, lr
 800229c:	ea21 010c 	bic.w	r1, r1, ip
 80022a0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80022a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80022a8:	db0c      	blt.n	80022c4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80022ae:	0109      	lsls	r1, r1, #4
 80022b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80022b4:	b2c9      	uxtb	r1, r1
 80022b6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80022ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80022be:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c0:	4613      	mov	r3, r2
 80022c2:	e7e7      	b.n	8002294 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_NVIC_SetPriority+0x78>)
 80022c6:	f000 000f 	and.w	r0, r0, #15
 80022ca:	0109      	lsls	r1, r1, #4
 80022cc:	4403      	add	r3, r0
 80022ce:	b2c9      	uxtb	r1, r1
 80022d0:	7619      	strb	r1, [r3, #24]
 80022d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80022d6:	bf00      	nop
 80022d8:	e000ed00 	.word	0xe000ed00
 80022dc:	e000ecfc 	.word	0xe000ecfc

080022e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80022e0:	2800      	cmp	r0, #0
 80022e2:	db07      	blt.n	80022f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <HAL_NVIC_EnableIRQ+0x18>)
 80022e6:	0941      	lsrs	r1, r0, #5
 80022e8:	2301      	movs	r3, #1
 80022ea:	f000 001f 	and.w	r0, r0, #31
 80022ee:	4083      	lsls	r3, r0
 80022f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100

080022fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022fc:	3801      	subs	r0, #1
 80022fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002302:	d210      	bcs.n	8002326 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002304:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	4c08      	ldr	r4, [pc, #32]	; (800232c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800230c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8002312:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002316:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002318:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800231a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800231c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800231e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002322:	6119      	str	r1, [r3, #16]
 8002324:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002326:	2001      	movs	r0, #1
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8002330:	b188      	cbz	r0, 8002356 <HAL_DAC_Init+0x26>
{
 8002332:	b510      	push	{r4, lr}
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002334:	7903      	ldrb	r3, [r0, #4]
 8002336:	4604      	mov	r4, r0
 8002338:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800233c:	b13b      	cbz	r3, 800234e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800233e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002340:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002342:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002344:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002346:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002348:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800234a:	4618      	mov	r0, r3
}
 800234c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800234e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8002350:	f7ff fb64 	bl	8001a1c <HAL_DAC_MspInit>
 8002354:	e7f3      	b.n	800233e <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8002356:	2001      	movs	r0, #1
}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop

0800235c <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800235c:	7943      	ldrb	r3, [r0, #5]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d027      	beq.n	80023b2 <HAL_DAC_Start+0x56>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002362:	6802      	ldr	r2, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002364:	2302      	movs	r3, #2
{
 8002366:	b410      	push	{r4}
  hdac->State = HAL_DAC_STATE_BUSY;
 8002368:	7103      	strb	r3, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 800236a:	6814      	ldr	r4, [r2, #0]
 800236c:	f001 0c10 	and.w	ip, r1, #16
 8002370:	2301      	movs	r3, #1
 8002372:	fa03 f30c 	lsl.w	r3, r3, ip
 8002376:	4323      	orrs	r3, r4
 8002378:	6013      	str	r3, [r2, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800237a:	6813      	ldr	r3, [r2, #0]
  if(Channel == DAC_CHANNEL_1)
 800237c:	b979      	cbnz	r1, 800239e <HAL_DAC_Start+0x42>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800237e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002382:	2b04      	cmp	r3, #4
 8002384:	d103      	bne.n	800238e <HAL_DAC_Start+0x32>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002386:	6853      	ldr	r3, [r2, #4]
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6053      	str	r3, [r2, #4]
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800238e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002390:	2201      	movs	r2, #1
 8002392:	7102      	strb	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8002394:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
}
 8002396:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800239a:	4618      	mov	r0, r3
}
 800239c:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800239e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023a6:	d1f2      	bne.n	800238e <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80023a8:	6853      	ldr	r3, [r2, #4]
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	6053      	str	r3, [r2, #4]
 80023b0:	e7ed      	b.n	800238e <HAL_DAC_Start+0x32>
  __HAL_LOCK(hdac);
 80023b2:	2002      	movs	r0, #2
}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop

080023b8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80023b8:	b410      	push	{r4}
 80023ba:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80023bc:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0;
 80023be:	2400      	movs	r4, #0
 80023c0:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 80023c2:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80023c4:	b951      	cbnz	r1, 80023dc <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80023c6:	9901      	ldr	r1, [sp, #4]
 80023c8:	3108      	adds	r1, #8
 80023ca:	440a      	add	r2, r1
 80023cc:	9201      	str	r2, [sp, #4]
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80023ce:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 80023d0:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80023d2:	6013      	str	r3, [r2, #0]
}
 80023d4:	b003      	add	sp, #12
 80023d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023da:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80023dc:	9901      	ldr	r1, [sp, #4]
 80023de:	3114      	adds	r1, #20
 80023e0:	440a      	add	r2, r1
 80023e2:	9201      	str	r2, [sp, #4]
 80023e4:	e7f3      	b.n	80023ce <HAL_DAC_SetValue+0x16>
 80023e6:	bf00      	nop

080023e8 <HAL_DAC_DMAUnderrunCallbackCh1>:
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop

080023ec <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80023ec:	6803      	ldr	r3, [r0, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	0491      	lsls	r1, r2, #18
{
 80023f2:	b510      	push	{r4, lr}
 80023f4:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80023f6:	d502      	bpl.n	80023fe <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80023f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023fa:	0492      	lsls	r2, r2, #18
 80023fc:	d418      	bmi.n	8002430 <HAL_DAC_IRQHandler+0x44>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	0091      	lsls	r1, r2, #2
 8002402:	d502      	bpl.n	800240a <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002406:	0092      	lsls	r2, r2, #2
 8002408:	d400      	bmi.n	800240c <HAL_DAC_IRQHandler+0x20>
}
 800240a:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 800240c:	2204      	movs	r2, #4
 800240e:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002410:	6922      	ldr	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002412:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002416:	f042 0202 	orr.w	r2, r2, #2
 800241a:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800241c:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002424:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002426:	601a      	str	r2, [r3, #0]
}
 8002428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800242c:	f000 b8a8 	b.w	8002580 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002430:	2204      	movs	r2, #4
 8002432:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002434:	6902      	ldr	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002440:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002448:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800244a:	f7ff ffcd 	bl	80023e8 <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	e7d5      	b.n	80023fe <HAL_DAC_IRQHandler+0x12>
 8002452:	bf00      	nop

08002454 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002456:	7943      	ldrb	r3, [r0, #5]
 8002458:	2b01      	cmp	r3, #1
{
 800245a:	460e      	mov	r6, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800245c:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 800245e:	f000 8085 	beq.w	800256c <HAL_DAC_ConfigChannel+0x118>
 8002462:	2301      	movs	r3, #1
 8002464:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002466:	2904      	cmp	r1, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8002468:	f04f 0302 	mov.w	r3, #2
 800246c:	4605      	mov	r5, r0
 800246e:	4614      	mov	r4, r2
 8002470:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002472:	d038      	beq.n	80024e6 <HAL_DAC_ConfigChannel+0x92>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002474:	6800      	ldr	r0, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002476:	f002 0210 	and.w	r2, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800247a:	6933      	ldr	r3, [r6, #16]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d108      	bne.n	8002492 <HAL_DAC_ConfigChannel+0x3e>
    tmpreg1 = hdac->Instance->CCR;
 8002480:	6b84      	ldr	r4, [r0, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002482:	6973      	ldr	r3, [r6, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002484:	271f      	movs	r7, #31
 8002486:	4097      	lsls	r7, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002488:	4093      	lsls	r3, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800248a:	ea24 0407 	bic.w	r4, r4, r7
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800248e:	4323      	orrs	r3, r4
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002490:	6383      	str	r3, [r0, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002492:	e9d6 3402 	ldrd	r3, r4, [r6, #8]
 8002496:	4323      	orrs	r3, r4
 8002498:	430b      	orrs	r3, r1
  tmpreg1 = hdac->Instance->MCR;
 800249a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800249c:	6871      	ldr	r1, [r6, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800249e:	2607      	movs	r6, #7
 80024a0:	4096      	lsls	r6, r2
 80024a2:	ea24 0406 	bic.w	r4, r4, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024a6:	4093      	lsls	r3, r2
 80024a8:	4323      	orrs	r3, r4
  hdac->Instance->MCR = tmpreg1;
 80024aa:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80024ac:	6803      	ldr	r3, [r0, #0]
 80024ae:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 80024b2:	4094      	lsls	r4, r2
 80024b4:	ea23 0304 	bic.w	r3, r3, r4
 80024b8:	6003      	str	r3, [r0, #0]
  tmpreg1 = hdac->Instance->CR;
 80024ba:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80024bc:	f640 74fc 	movw	r4, #4092	; 0xffc
 80024c0:	4094      	lsls	r4, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024c2:	4091      	lsls	r1, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80024c4:	ea23 0304 	bic.w	r3, r3, r4
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024c8:	430b      	orrs	r3, r1
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024ca:	6003      	str	r3, [r0, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80024cc:	6803      	ldr	r3, [r0, #0]
 80024ce:	21c0      	movs	r1, #192	; 0xc0
 80024d0:	fa01 f202 	lsl.w	r2, r1, r2
 80024d4:	ea23 0302 	bic.w	r3, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024d8:	2100      	movs	r1, #0
  hdac->State = HAL_DAC_STATE_READY;
 80024da:	2201      	movs	r2, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80024dc:	6003      	str	r3, [r0, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80024de:	712a      	strb	r2, [r5, #4]
  __HAL_UNLOCK(hdac);
 80024e0:	7169      	strb	r1, [r5, #5]

  /* Return function status */
  return HAL_OK;
 80024e2:	4608      	mov	r0, r1
}
 80024e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tickstart = HAL_GetTick();
 80024e6:	f7ff fe93 	bl	8002210 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024ea:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80024ec:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (Channel == DAC_CHANNEL_1)
 80024f0:	b154      	cbz	r4, 8002508 <HAL_DAC_ConfigChannel+0xb4>
 80024f2:	e01c      	b.n	800252e <HAL_DAC_ConfigChannel+0xda>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80024f4:	f7ff fe8c 	bl	8002210 <HAL_GetTick>
 80024f8:	1bc3      	subs	r3, r0, r7
 80024fa:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024fc:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80024fe:	d902      	bls.n	8002506 <HAL_DAC_ConfigChannel+0xb2>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002502:	0412      	lsls	r2, r2, #16
 8002504:	d434      	bmi.n	8002570 <HAL_DAC_ConfigChannel+0x11c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	d4f3      	bmi.n	80024f4 <HAL_DAC_ConfigChannel+0xa0>
      HAL_Delay(1);
 800250c:	2001      	movs	r0, #1
 800250e:	f7ff fe85 	bl	800221c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002512:	6828      	ldr	r0, [r5, #0]
 8002514:	69b3      	ldr	r3, [r6, #24]
 8002516:	6403      	str	r3, [r0, #64]	; 0x40
 8002518:	e011      	b.n	800253e <HAL_DAC_ConfigChannel+0xea>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800251a:	f7ff fe79 	bl	8002210 <HAL_GetTick>
 800251e:	1bc3      	subs	r3, r0, r7
 8002520:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002522:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002524:	d902      	bls.n	800252c <HAL_DAC_ConfigChannel+0xd8>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002528:	2a00      	cmp	r2, #0
 800252a:	db21      	blt.n	8002570 <HAL_DAC_ConfigChannel+0x11c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800252c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252e:	2b00      	cmp	r3, #0
 8002530:	dbf3      	blt.n	800251a <HAL_DAC_ConfigChannel+0xc6>
      HAL_Delay(1U);
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff fe72 	bl	800221c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002538:	6828      	ldr	r0, [r5, #0]
 800253a:	69b3      	ldr	r3, [r6, #24]
 800253c:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800253e:	f004 0210 	and.w	r2, r4, #16
 8002542:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002544:	69f1      	ldr	r1, [r6, #28]
 8002546:	f240 34ff 	movw	r4, #1023	; 0x3ff
 800254a:	4094      	lsls	r4, r2
 800254c:	4091      	lsls	r1, r2
 800254e:	ea23 0304 	bic.w	r3, r3, r4
 8002552:	430b      	orrs	r3, r1
 8002554:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002556:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002558:	6a31      	ldr	r1, [r6, #32]
 800255a:	24ff      	movs	r4, #255	; 0xff
 800255c:	4094      	lsls	r4, r2
 800255e:	4091      	lsls	r1, r2
 8002560:	ea23 0304 	bic.w	r3, r3, r4
 8002564:	430b      	orrs	r3, r1
 8002566:	64c3      	str	r3, [r0, #76]	; 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002568:	6831      	ldr	r1, [r6, #0]
 800256a:	e786      	b.n	800247a <HAL_DAC_ConfigChannel+0x26>
  __HAL_LOCK(hdac);
 800256c:	2002      	movs	r0, #2
}
 800256e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002570:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002572:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002574:	f043 0308 	orr.w	r3, r3, #8
 8002578:	612b      	str	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800257a:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 800257c:	4610      	mov	r0, r2
}
 800257e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002580 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop

08002584 <HAL_DFSDM_ChannelInit>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002584:	2800      	cmp	r0, #0
 8002586:	f000 80a6 	beq.w	80026d6 <HAL_DFSDM_ChannelInit+0x152>
{
 800258a:	b538      	push	{r3, r4, r5, lr}
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800258c:	4a5b      	ldr	r2, [pc, #364]	; (80026fc <HAL_DFSDM_ChannelInit+0x178>)
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800258e:	6803      	ldr	r3, [r0, #0]
  if (Instance == DFSDM1_Channel0)
 8002590:	4293      	cmp	r3, r2
 8002592:	4604      	mov	r4, r0
 8002594:	d077      	beq.n	8002686 <HAL_DFSDM_ChannelInit+0x102>
  {
    channel = 0;
  }
  else if (Instance == DFSDM1_Channel1)
 8002596:	3220      	adds	r2, #32
 8002598:	4293      	cmp	r3, r2
 800259a:	d07c      	beq.n	8002696 <HAL_DFSDM_ChannelInit+0x112>
  {
    channel = 1;
  }
  else if (Instance == DFSDM1_Channel2)
 800259c:	3220      	adds	r2, #32
 800259e:	4293      	cmp	r3, r2
 80025a0:	f000 809b 	beq.w	80026da <HAL_DFSDM_ChannelInit+0x156>
    channel = 2;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80025a4:	3240      	adds	r2, #64	; 0x40
 80025a6:	4293      	cmp	r3, r2
 80025a8:	f000 8099 	beq.w	80026de <HAL_DFSDM_ChannelInit+0x15a>
  {
    channel = 4;
  }
  else if (Instance == DFSDM1_Channel5)
 80025ac:	3220      	adds	r2, #32
 80025ae:	4293      	cmp	r3, r2
 80025b0:	f000 8099 	beq.w	80026e6 <HAL_DFSDM_ChannelInit+0x162>
  {
    channel = 5;
  }
  else if (Instance == DFSDM1_Channel6)
 80025b4:	3220      	adds	r2, #32
 80025b6:	4293      	cmp	r3, r2
 80025b8:	f000 8093 	beq.w	80026e2 <HAL_DFSDM_ChannelInit+0x15e>
  {
    channel = 6;
  }
  else if (Instance == DFSDM1_Channel7)
 80025bc:	3220      	adds	r2, #32
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80025be:	4d50      	ldr	r5, [pc, #320]	; (8002700 <HAL_DFSDM_ChannelInit+0x17c>)
    channel = 7;
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80025c0:	4293      	cmp	r3, r2
 80025c2:	bf0c      	ite	eq
 80025c4:	2307      	moveq	r3, #7
 80025c6:	2303      	movne	r3, #3
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80025c8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d160      	bne.n	8002692 <HAL_DFSDM_ChannelInit+0x10e>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80025d0:	4620      	mov	r0, r4
 80025d2:	f7ff faf5 	bl	8001bc0 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 80025d6:	4b4b      	ldr	r3, [pc, #300]	; (8002704 <HAL_DFSDM_ChannelInit+0x180>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	3201      	adds	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d05a      	beq.n	800269a <HAL_DFSDM_ChannelInit+0x116>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80025e4:	6823      	ldr	r3, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80025e6:	6922      	ldr	r2, [r4, #16]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80025e8:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80025ea:	6960      	ldr	r0, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80025ec:	f421 4171 	bic.w	r1, r1, #61696	; 0xf100
 80025f0:	6019      	str	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80025f2:	4302      	orrs	r2, r0
                                        hdfsdm_channel->Init.Input.DataPacking |
 80025f4:	69a0      	ldr	r0, [r4, #24]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80025f6:	6819      	ldr	r1, [r3, #0]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80025f8:	4302      	orrs	r2, r0
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80025fe:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002600:	69e2      	ldr	r2, [r4, #28]
 8002602:	6a20      	ldr	r0, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002604:	f021 010f 	bic.w	r1, r1, #15
 8002608:	6019      	str	r1, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	4302      	orrs	r2, r0
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002612:	689a      	ldr	r2, [r3, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002614:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002616:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002618:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800261c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800261e:	689a      	ldr	r2, [r3, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002620:	3901      	subs	r1, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002622:	4302      	orrs	r2, r0
 8002624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002628:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800262a:	685a      	ldr	r2, [r3, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800262c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (Instance == DFSDM1_Channel0)
 800262e:	4833      	ldr	r0, [pc, #204]	; (80026fc <HAL_DFSDM_ChannelInit+0x178>)
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002630:	f002 0207 	and.w	r2, r2, #7
 8002634:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800263c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800263e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002642:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002644:	6819      	ldr	r1, [r3, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002646:	2201      	movs	r2, #1
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002648:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  if (Instance == DFSDM1_Channel0)
 800264c:	4283      	cmp	r3, r0
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800264e:	6019      	str	r1, [r3, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002650:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if (Instance == DFSDM1_Channel0)
 8002654:	d03d      	beq.n	80026d2 <HAL_DFSDM_ChannelInit+0x14e>
  else if (Instance == DFSDM1_Channel1)
 8002656:	492c      	ldr	r1, [pc, #176]	; (8002708 <HAL_DFSDM_ChannelInit+0x184>)
 8002658:	428b      	cmp	r3, r1
 800265a:	d010      	beq.n	800267e <HAL_DFSDM_ChannelInit+0xfa>
  else if (Instance == DFSDM1_Channel2)
 800265c:	4a2b      	ldr	r2, [pc, #172]	; (800270c <HAL_DFSDM_ChannelInit+0x188>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d043      	beq.n	80026ea <HAL_DFSDM_ChannelInit+0x166>
  else if (Instance == DFSDM1_Channel4)
 8002662:	3240      	adds	r2, #64	; 0x40
 8002664:	4293      	cmp	r3, r2
 8002666:	d042      	beq.n	80026ee <HAL_DFSDM_ChannelInit+0x16a>
  else if (Instance == DFSDM1_Channel5)
 8002668:	3220      	adds	r2, #32
 800266a:	4293      	cmp	r3, r2
 800266c:	d041      	beq.n	80026f2 <HAL_DFSDM_ChannelInit+0x16e>
  else if (Instance == DFSDM1_Channel6)
 800266e:	3220      	adds	r2, #32
 8002670:	4293      	cmp	r3, r2
 8002672:	d040      	beq.n	80026f6 <HAL_DFSDM_ChannelInit+0x172>
  else if (Instance == DFSDM1_Channel7)
 8002674:	3220      	adds	r2, #32
    channel = 3;
 8002676:	4293      	cmp	r3, r2
 8002678:	bf0c      	ite	eq
 800267a:	2207      	moveq	r2, #7
 800267c:	2203      	movne	r2, #3
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800267e:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
  return HAL_OK;
 8002682:	2000      	movs	r0, #0
}
 8002684:	bd38      	pop	{r3, r4, r5, pc}
    channel = 0;
 8002686:	2300      	movs	r3, #0
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002688:	4d1d      	ldr	r5, [pc, #116]	; (8002700 <HAL_DFSDM_ChannelInit+0x17c>)
 800268a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d09e      	beq.n	80025d0 <HAL_DFSDM_ChannelInit+0x4c>
    return HAL_ERROR;
 8002692:	2001      	movs	r0, #1
}
 8002694:	bd38      	pop	{r3, r4, r5, pc}
    channel = 1;
 8002696:	2301      	movs	r3, #1
 8002698:	e7f6      	b.n	8002688 <HAL_DFSDM_ChannelInit+0x104>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_DFSDM_ChannelInit+0x178>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80026a2:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68a1      	ldr	r1, [r4, #8]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80026b2:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80026b4:	7922      	ldrb	r2, [r4, #4]
 80026b6:	2a01      	cmp	r2, #1
 80026b8:	d105      	bne.n	80026c6 <HAL_DFSDM_ChannelInit+0x142>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80026ba:	68e1      	ldr	r1, [r4, #12]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	3901      	subs	r1, #1
 80026c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026c4:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80026c6:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <HAL_DFSDM_ChannelInit+0x178>)
 80026c8:	6813      	ldr	r3, [r2, #0]
 80026ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	e788      	b.n	80025e4 <HAL_DFSDM_ChannelInit+0x60>
    channel = 0;
 80026d2:	2200      	movs	r2, #0
 80026d4:	e7d3      	b.n	800267e <HAL_DFSDM_ChannelInit+0xfa>
    return HAL_ERROR;
 80026d6:	2001      	movs	r0, #1
}
 80026d8:	4770      	bx	lr
    channel = 2;
 80026da:	2302      	movs	r3, #2
 80026dc:	e7d4      	b.n	8002688 <HAL_DFSDM_ChannelInit+0x104>
    channel = 4;
 80026de:	2304      	movs	r3, #4
 80026e0:	e7d2      	b.n	8002688 <HAL_DFSDM_ChannelInit+0x104>
    channel = 6;
 80026e2:	2306      	movs	r3, #6
 80026e4:	e7d0      	b.n	8002688 <HAL_DFSDM_ChannelInit+0x104>
    channel = 5;
 80026e6:	2305      	movs	r3, #5
 80026e8:	e7ce      	b.n	8002688 <HAL_DFSDM_ChannelInit+0x104>
    channel = 2;
 80026ea:	2202      	movs	r2, #2
 80026ec:	e7c7      	b.n	800267e <HAL_DFSDM_ChannelInit+0xfa>
    channel = 4;
 80026ee:	2204      	movs	r2, #4
 80026f0:	e7c5      	b.n	800267e <HAL_DFSDM_ChannelInit+0xfa>
    channel = 5;
 80026f2:	2205      	movs	r2, #5
 80026f4:	e7c3      	b.n	800267e <HAL_DFSDM_ChannelInit+0xfa>
    channel = 6;
 80026f6:	2206      	movs	r2, #6
 80026f8:	e7c1      	b.n	800267e <HAL_DFSDM_ChannelInit+0xfa>
 80026fa:	bf00      	nop
 80026fc:	40016000 	.word	0x40016000
 8002700:	200044b0 	.word	0x200044b0
 8002704:	200044d0 	.word	0x200044d0
 8002708:	40016020 	.word	0x40016020
 800270c:	40016040 	.word	0x40016040

08002710 <HAL_DFSDM_FilterInit>:
  if (hdfsdm_filter == NULL)
 8002710:	2800      	cmp	r0, #0
 8002712:	d070      	beq.n	80027f6 <HAL_DFSDM_FilterInit+0xe6>
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002714:	4b39      	ldr	r3, [pc, #228]	; (80027fc <HAL_DFSDM_FilterInit+0xec>)
 8002716:	6802      	ldr	r2, [r0, #0]
 8002718:	429a      	cmp	r2, r3
{
 800271a:	b510      	push	{r4, lr}
 800271c:	4604      	mov	r4, r0
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800271e:	d05e      	beq.n	80027de <HAL_DFSDM_FilterInit+0xce>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002720:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002722:	2201      	movs	r2, #1
  hdfsdm_filter->InjConvRemaining    = 1;
 8002724:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002728:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800272a:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800272c:	4620      	mov	r0, r4
 800272e:	f7ff f9ad 	bl	8001a8c <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800273a:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800273c:	7a22      	ldrb	r2, [r4, #8]
 800273e:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	bf0c      	ite	eq
 8002744:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002748:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 800274c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800274e:	7a62      	ldrb	r2, [r4, #9]
 8002750:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	bf0c      	ite	eq
 8002756:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800275a:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 800275e:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002760:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002762:	68e1      	ldr	r1, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002764:	f422 42ce 	bic.w	r2, r2, #26368	; 0x6700
 8002768:	f022 0208 	bic.w	r2, r2, #8
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800276c:	2902      	cmp	r1, #2
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800276e:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002770:	d03c      	beq.n	80027ec <HAL_DFSDM_FilterInit+0xdc>
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002772:	f894 c010 	ldrb.w	ip, [r4, #16]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002776:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002778:	f1bc 0f01 	cmp.w	ip, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800277c:	bf0c      	ite	eq
 800277e:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002782:	f022 0210 	bicne.w	r2, r2, #16
 8002786:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002788:	7c62      	ldrb	r2, [r4, #17]
 800278a:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	bf0c      	ite	eq
 8002790:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002794:	f022 0220 	bicne.w	r2, r2, #32
 8002798:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 80027a0:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80027a4:	615a      	str	r2, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80027a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80027a8:	6958      	ldr	r0, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80027aa:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80027ac:	4302      	orrs	r2, r0
 80027ae:	69e0      	ldr	r0, [r4, #28]
 80027b0:	4302      	orrs	r2, r0
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80027b2:	6a20      	ldr	r0, [r4, #32]
 80027b4:	3801      	subs	r0, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80027b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80027ba:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80027bc:	f884 c040 	strb.w	ip, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80027c0:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80027c2:	6860      	ldr	r0, [r4, #4]
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80027c4:	f042 0201 	orr.w	r2, r2, #1
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80027c8:	e9c4 010d 	strd	r0, r1, [r4, #52]	; 0x34
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80027cc:	f04f 0c01 	mov.w	ip, #1
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80027d0:	69a1      	ldr	r1, [r4, #24]
 80027d2:	63e1      	str	r1, [r4, #60]	; 0x3c
  return HAL_OK;
 80027d4:	2000      	movs	r0, #0
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80027d6:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80027d8:	f884 c04c 	strb.w	ip, [r4, #76]	; 0x4c
}
 80027dc:	bd10      	pop	{r4, pc}
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80027de:	6840      	ldr	r0, [r0, #4]
 80027e0:	2801      	cmp	r0, #1
 80027e2:	d0fb      	beq.n	80027dc <HAL_DFSDM_FilterInit+0xcc>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80027e4:	68e0      	ldr	r0, [r4, #12]
 80027e6:	2801      	cmp	r0, #1
 80027e8:	d19a      	bne.n	8002720 <HAL_DFSDM_FilterInit+0x10>
 80027ea:	e7f7      	b.n	80027dc <HAL_DFSDM_FilterInit+0xcc>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	6960      	ldr	r0, [r4, #20]
 80027f0:	4302      	orrs	r2, r0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	e7bd      	b.n	8002772 <HAL_DFSDM_FilterInit+0x62>
    return HAL_ERROR;
 80027f6:	2001      	movs	r0, #1
}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40016100 	.word	0x40016100

08002800 <HAL_DFSDM_FilterConfigRegChannel>:
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002800:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8002804:	3b01      	subs	r3, #1
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2bfd      	cmp	r3, #253	; 0xfd
 800280a:	d813      	bhi.n	8002834 <HAL_DFSDM_FilterConfigRegChannel+0x34>
{
 800280c:	b430      	push	{r4, r5}
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800280e:	6804      	ldr	r4, [r0, #0]
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800281a:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800281c:	6023      	str	r3, [r4, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800281e:	d00b      	beq.n	8002838 <HAL_DFSDM_FilterConfigRegChannel+0x38>
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	0209      	lsls	r1, r1, #8
 8002824:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8002828:	4319      	orrs	r1, r3
 800282a:	6021      	str	r1, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800282c:	6302      	str	r2, [r0, #48]	; 0x30
}
 800282e:	bc30      	pop	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;
 8002830:	2000      	movs	r0, #0
}
 8002832:	4770      	bx	lr
    status = HAL_ERROR;
 8002834:	2001      	movs	r0, #1
}
 8002836:	4770      	bx	lr
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002838:	6825      	ldr	r5, [r4, #0]
 800283a:	0209      	lsls	r1, r1, #8
 800283c:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 8002840:	432b      	orrs	r3, r5
 8002842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002846:	6023      	str	r3, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002848:	6302      	str	r2, [r0, #48]	; 0x30
}
 800284a:	bc30      	pop	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;
 800284c:	2000      	movs	r0, #0
}
 800284e:	4770      	bx	lr

08002850 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002850:	2800      	cmp	r0, #0
 8002852:	d04f      	beq.n	80028f4 <HAL_DMA_Init+0xa4>
{
 8002854:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002856:	4b31      	ldr	r3, [pc, #196]	; (800291c <HAL_DMA_Init+0xcc>)
 8002858:	6804      	ldr	r4, [r0, #0]
 800285a:	429c      	cmp	r4, r3
 800285c:	d941      	bls.n	80028e2 <HAL_DMA_Init+0x92>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800285e:	4a30      	ldr	r2, [pc, #192]	; (8002920 <HAL_DMA_Init+0xd0>)
 8002860:	4b30      	ldr	r3, [pc, #192]	; (8002924 <HAL_DMA_Init+0xd4>)
    hdma->DmaBaseAddress = DMA2;
 8002862:	4d31      	ldr	r5, [pc, #196]	; (8002928 <HAL_DMA_Init+0xd8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002864:	4422      	add	r2, r4
 8002866:	fba3 3202 	umull	r3, r2, r3, r2
 800286a:	0912      	lsrs	r2, r2, #4
 800286c:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800286e:	2302      	movs	r3, #2
 8002870:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002874:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002878:	6907      	ldr	r7, [r0, #16]
  tmp = hdma->Instance->CCR;
 800287a:	6821      	ldr	r1, [r4, #0]
 800287c:	6405      	str	r5, [r0, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 800287e:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002880:	433b      	orrs	r3, r7
 8002882:	6947      	ldr	r7, [r0, #20]
 8002884:	6442      	str	r2, [r0, #68]	; 0x44
 8002886:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002888:	6987      	ldr	r7, [r0, #24]
 800288a:	433b      	orrs	r3, r7
 800288c:	69c7      	ldr	r7, [r0, #28]
 800288e:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8002890:	6a07      	ldr	r7, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002892:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8002896:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800289a:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 800289c:	430b      	orrs	r3, r1
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800289e:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80028a2:	6023      	str	r3, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028a4:	d013      	beq.n	80028ce <HAL_DMA_Init+0x7e>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80028a6:	4b21      	ldr	r3, [pc, #132]	; (800292c <HAL_DMA_Init+0xdc>)
 80028a8:	429d      	cmp	r5, r3
 80028aa:	d025      	beq.n	80028f8 <HAL_DMA_Init+0xa8>
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028ac:	f8d3 14a8 	ldr.w	r1, [r3, #1192]	; 0x4a8
 80028b0:	f002 021c 	and.w	r2, r2, #28
 80028b4:	240f      	movs	r4, #15
 80028b6:	4094      	lsls	r4, r2
 80028b8:	ea21 0104 	bic.w	r1, r1, r4
 80028bc:	f8c3 14a8 	str.w	r1, [r3, #1192]	; 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028c0:	6841      	ldr	r1, [r0, #4]
 80028c2:	f8d3 44a8 	ldr.w	r4, [r3, #1192]	; 0x4a8
 80028c6:	4091      	lsls	r1, r2
 80028c8:	4321      	orrs	r1, r4
 80028ca:	f8c3 14a8 	str.w	r1, [r3, #1192]	; 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ce:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028d0:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d2:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028d4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 80028d8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
}
 80028dc:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80028de:	4618      	mov	r0, r3
}
 80028e0:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028e2:	4a13      	ldr	r2, [pc, #76]	; (8002930 <HAL_DMA_Init+0xe0>)
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <HAL_DMA_Init+0xd4>)
    hdma->DmaBaseAddress = DMA1;
 80028e6:	4d11      	ldr	r5, [pc, #68]	; (800292c <HAL_DMA_Init+0xdc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028e8:	4422      	add	r2, r4
 80028ea:	fba3 3202 	umull	r3, r2, r3, r2
 80028ee:	0912      	lsrs	r2, r2, #4
 80028f0:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 80028f2:	e7bc      	b.n	800286e <HAL_DMA_Init+0x1e>
    return HAL_ERROR;
 80028f4:	2001      	movs	r0, #1
}
 80028f6:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028f8:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 80028fc:	f002 021c 	and.w	r2, r2, #28
 8002900:	210f      	movs	r1, #15
 8002902:	4091      	lsls	r1, r2
 8002904:	ea23 0301 	bic.w	r3, r3, r1
 8002908:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800290c:	6843      	ldr	r3, [r0, #4]
 800290e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8002912:	4093      	lsls	r3, r2
 8002914:	430b      	orrs	r3, r1
 8002916:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 800291a:	e7d8      	b.n	80028ce <HAL_DMA_Init+0x7e>
 800291c:	40020407 	.word	0x40020407
 8002920:	bffdfbf8 	.word	0xbffdfbf8
 8002924:	cccccccd 	.word	0xcccccccd
 8002928:	40020400 	.word	0x40020400
 800292c:	40020000 	.word	0x40020000
 8002930:	bffdfff8 	.word	0xbffdfff8

08002934 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002934:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002938:	2a02      	cmp	r2, #2
{
 800293a:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800293c:	d006      	beq.n	800294c <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293e:	2204      	movs	r2, #4
 8002940:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002942:	2200      	movs	r2, #0

    return HAL_ERROR;
 8002944:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 800294a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800294c:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800294e:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002950:	6808      	ldr	r0, [r1, #0]
 8002952:	f020 000e 	bic.w	r0, r0, #14
 8002956:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002958:	6808      	ldr	r0, [r1, #0]
 800295a:	f020 0001 	bic.w	r0, r0, #1
 800295e:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002960:	f04f 0c01 	mov.w	ip, #1
 8002964:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002966:	f002 021c 	and.w	r2, r2, #28
 800296a:	fa0c f202 	lsl.w	r2, ip, r2
 800296e:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002970:	2200      	movs	r2, #0
    return status;
 8002972:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002974:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop

08002980 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002980:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002984:	2a02      	cmp	r2, #2
 8002986:	d003      	beq.n	8002990 <HAL_DMA_Abort_IT+0x10>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002988:	2204      	movs	r2, #4
 800298a:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800298c:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 800298e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002990:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002992:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8002994:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002996:	680c      	ldr	r4, [r1, #0]
 8002998:	f024 040e 	bic.w	r4, r4, #14
 800299c:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800299e:	680c      	ldr	r4, [r1, #0]
 80029a0:	f024 0401 	bic.w	r4, r4, #1
 80029a4:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029a6:	f002 021c 	and.w	r2, r2, #28
 80029aa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80029ac:	2101      	movs	r1, #1
 80029ae:	fa01 f202 	lsl.w	r2, r1, r2
 80029b2:	6062      	str	r2, [r4, #4]
    if (hdma->XferAbortCallback != NULL)
 80029b4:	6b82      	ldr	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80029b6:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80029ba:	2400      	movs	r4, #0
 80029bc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80029c0:	b112      	cbz	r2, 80029c8 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80029c2:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80029c4:	4620      	mov	r0, r4
}
 80029c6:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80029c8:	4610      	mov	r0, r2
}
 80029ca:	bd10      	pop	{r4, pc}

080029cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029cc:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029d0:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80029d2:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029d4:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80029d6:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029d8:	f003 031c 	and.w	r3, r3, #28
 80029dc:	2204      	movs	r2, #4
 80029de:	409a      	lsls	r2, r3
 80029e0:	420a      	tst	r2, r1
 80029e2:	d00e      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x36>
 80029e4:	f014 0f04 	tst.w	r4, #4
 80029e8:	d00b      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x36>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ea:	682b      	ldr	r3, [r5, #0]
 80029ec:	069b      	lsls	r3, r3, #26
 80029ee:	d403      	bmi.n	80029f8 <HAL_DMA_IRQHandler+0x2c>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029f0:	682b      	ldr	r3, [r5, #0]
 80029f2:	f023 0304 	bic.w	r3, r3, #4
 80029f6:	602b      	str	r3, [r5, #0]
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029fa:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80029fc:	b1cb      	cbz	r3, 8002a32 <HAL_DMA_IRQHandler+0x66>
  else
  {
    /* Nothing To Do */
  }
  return;
}
 80029fe:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8002a00:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a02:	2202      	movs	r2, #2
 8002a04:	409a      	lsls	r2, r3
 8002a06:	420a      	tst	r2, r1
 8002a08:	d015      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x6a>
 8002a0a:	f014 0f02 	tst.w	r4, #2
 8002a0e:	d012      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	0699      	lsls	r1, r3, #26
 8002a14:	d406      	bmi.n	8002a24 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a16:	682b      	ldr	r3, [r5, #0]
 8002a18:	f023 030a 	bic.w	r3, r3, #10
 8002a1c:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8002a24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a26:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8002a28:	2100      	movs	r1, #0
 8002a2a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1e5      	bne.n	80029fe <HAL_DMA_IRQHandler+0x32>
}
 8002a32:	bc70      	pop	{r4, r5, r6}
 8002a34:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a36:	2208      	movs	r2, #8
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	420a      	tst	r2, r1
 8002a3c:	d0f9      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x66>
 8002a3e:	0722      	lsls	r2, r4, #28
 8002a40:	d5f7      	bpl.n	8002a32 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a42:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8002a44:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a46:	f022 020e 	bic.w	r2, r2, #14
 8002a4a:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8002a52:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a54:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a56:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002a58:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8002a5c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8002a60:	2900      	cmp	r1, #0
 8002a62:	d0e6      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x66>
}
 8002a64:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002a66:	4708      	bx	r1

08002a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a6c:	680c      	ldr	r4, [r1, #0]
{
 8002a6e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a70:	2c00      	cmp	r4, #0
 8002a72:	f000 808e 	beq.w	8002b92 <HAL_GPIO_Init+0x12a>
 8002a76:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a7a:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8002c68 <HAL_GPIO_Init+0x200>
  uint32_t position = 0x00u;
 8002a7e:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a80:	f04f 0a01 	mov.w	sl, #1
 8002a84:	4688      	mov	r8, r1
 8002a86:	fa0a f603 	lsl.w	r6, sl, r3
    if (iocurrent != 0x00u)
 8002a8a:	ea16 0904 	ands.w	r9, r6, r4
 8002a8e:	d079      	beq.n	8002b84 <HAL_GPIO_Init+0x11c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8002a94:	f001 0203 	and.w	r2, r1, #3
 8002a98:	1e55      	subs	r5, r2, #1
 8002a9a:	2d01      	cmp	r5, #1
 8002a9c:	d97c      	bls.n	8002b98 <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a9e:	2a03      	cmp	r2, #3
 8002aa0:	f040 80b7 	bne.w	8002c12 <HAL_GPIO_Init+0x1aa>
        temp = GPIOx->ASCR;
 8002aa4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002aa6:	ea25 0606 	bic.w	r6, r5, r6
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002aaa:	f3c1 05c0 	ubfx	r5, r1, #3, #1
 8002aae:	409d      	lsls	r5, r3
 8002ab0:	4335      	orrs	r5, r6
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ab2:	fa02 f20c 	lsl.w	r2, r2, ip
        GPIOx->ASCR = temp;
 8002ab6:	62c5      	str	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ab8:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8002aba:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002abc:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002abe:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ac0:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002ac4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ac6:	d05d      	beq.n	8002b84 <HAL_GPIO_Init+0x11c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac8:	4d60      	ldr	r5, [pc, #384]	; (8002c4c <HAL_GPIO_Init+0x1e4>)
 8002aca:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	662a      	str	r2, [r5, #96]	; 0x60
 8002ad2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002ad4:	f002 0201 	and.w	r2, r2, #1
 8002ad8:	9203      	str	r2, [sp, #12]
 8002ada:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002adc:	f023 0203 	bic.w	r2, r3, #3
 8002ae0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002ae4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ae8:	f003 0603 	and.w	r6, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8002aec:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aee:	00b6      	lsls	r6, r6, #2
 8002af0:	270f      	movs	r7, #15
 8002af2:	40b7      	lsls	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002af4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002af8:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002afc:	d01b      	beq.n	8002b36 <HAL_GPIO_Init+0xce>
 8002afe:	4f54      	ldr	r7, [pc, #336]	; (8002c50 <HAL_GPIO_Init+0x1e8>)
 8002b00:	42b8      	cmp	r0, r7
 8002b02:	f000 8090 	beq.w	8002c26 <HAL_GPIO_Init+0x1be>
 8002b06:	4f53      	ldr	r7, [pc, #332]	; (8002c54 <HAL_GPIO_Init+0x1ec>)
 8002b08:	42b8      	cmp	r0, r7
 8002b0a:	f000 8090 	beq.w	8002c2e <HAL_GPIO_Init+0x1c6>
 8002b0e:	4f52      	ldr	r7, [pc, #328]	; (8002c58 <HAL_GPIO_Init+0x1f0>)
 8002b10:	42b8      	cmp	r0, r7
 8002b12:	f000 8083 	beq.w	8002c1c <HAL_GPIO_Init+0x1b4>
 8002b16:	4f51      	ldr	r7, [pc, #324]	; (8002c5c <HAL_GPIO_Init+0x1f4>)
 8002b18:	42b8      	cmp	r0, r7
 8002b1a:	f000 808d 	beq.w	8002c38 <HAL_GPIO_Init+0x1d0>
 8002b1e:	4f50      	ldr	r7, [pc, #320]	; (8002c60 <HAL_GPIO_Init+0x1f8>)
 8002b20:	42b8      	cmp	r0, r7
 8002b22:	f000 808e 	beq.w	8002c42 <HAL_GPIO_Init+0x1da>
 8002b26:	4f4f      	ldr	r7, [pc, #316]	; (8002c64 <HAL_GPIO_Init+0x1fc>)
 8002b28:	42b8      	cmp	r0, r7
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2706      	moveq	r7, #6
 8002b2e:	2707      	movne	r7, #7
 8002b30:	fa07 f606 	lsl.w	r6, r7, r6
 8002b34:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b36:	6095      	str	r5, [r2, #8]
        temp = EXTI->RTSR1;
 8002b38:	f8db 2008 	ldr.w	r2, [fp, #8]
        temp &= ~(iocurrent);
 8002b3c:	ea6f 0509 	mvn.w	r5, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b40:	02ce      	lsls	r6, r1, #11
        temp &= ~(iocurrent);
 8002b42:	bf54      	ite	pl
 8002b44:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8002b46:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = temp;
 8002b4a:	f8cb 2008 	str.w	r2, [fp, #8]

        temp = EXTI->FTSR1;
 8002b4e:	f8db 200c 	ldr.w	r2, [fp, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b52:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8002b54:	bf54      	ite	pl
 8002b56:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8002b58:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->FTSR1 = temp;
 8002b5c:	f8cb 200c 	str.w	r2, [fp, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b60:	f8db 2004 	ldr.w	r2, [fp, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b64:	038e      	lsls	r6, r1, #14
        temp &= ~(iocurrent);
 8002b66:	bf54      	ite	pl
 8002b68:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8002b6a:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR1 = temp;
 8002b6e:	f8cb 2004 	str.w	r2, [fp, #4]

        temp = EXTI->IMR1;
 8002b72:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b76:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8002b78:	bf54      	ite	pl
 8002b7a:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8002b7c:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = temp;
 8002b80:	f8cb 2000 	str.w	r2, [fp]
      }
    }

    position++;
 8002b84:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b86:	fa34 f203 	lsrs.w	r2, r4, r3
 8002b8a:	f10c 0c02 	add.w	ip, ip, #2
 8002b8e:	f47f af7a 	bne.w	8002a86 <HAL_GPIO_Init+0x1e>
  }
}
 8002b92:	b005      	add	sp, #20
 8002b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002b98:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b9c:	f8d8 500c 	ldr.w	r5, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ba0:	2703      	movs	r7, #3
 8002ba2:	fa07 f70c 	lsl.w	r7, r7, ip
 8002ba6:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002baa:	fa05 f50c 	lsl.w	r5, r5, ip
 8002bae:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OSPEEDR = temp;
 8002bb2:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bb4:	43fd      	mvns	r5, r7
        temp = GPIOx->OTYPER;
 8002bb6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bb8:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bbc:	f3c1 1600 	ubfx	r6, r1, #4, #1
 8002bc0:	409e      	lsls	r6, r3
 8002bc2:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8002bc4:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002bc6:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc8:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bcc:	402f      	ands	r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bce:	fa06 f60c 	lsl.w	r6, r6, ip
 8002bd2:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd4:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002bd6:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd8:	fa02 f20c 	lsl.w	r2, r2, ip
 8002bdc:	f47f af6d 	bne.w	8002aba <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3u];
 8002be0:	08df      	lsrs	r7, r3, #3
 8002be2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002be6:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002bea:	6a3e      	ldr	r6, [r7, #32]
 8002bec:	9600      	str	r6, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bee:	f8d8 6010 	ldr.w	r6, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bf2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bf6:	fa06 f60e 	lsl.w	r6, r6, lr
 8002bfa:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bfc:	260f      	movs	r6, #15
 8002bfe:	fa06 fe0e 	lsl.w	lr, r6, lr
 8002c02:	9e00      	ldr	r6, [sp, #0]
 8002c04:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c08:	9e01      	ldr	r6, [sp, #4]
 8002c0a:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002c0e:	623e      	str	r6, [r7, #32]
 8002c10:	e753      	b.n	8002aba <HAL_GPIO_Init+0x52>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c12:	2503      	movs	r5, #3
 8002c14:	fa05 f50c 	lsl.w	r5, r5, ip
 8002c18:	43ed      	mvns	r5, r5
 8002c1a:	e7d4      	b.n	8002bc6 <HAL_GPIO_Init+0x15e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c1c:	2703      	movs	r7, #3
 8002c1e:	fa07 f606 	lsl.w	r6, r7, r6
 8002c22:	4335      	orrs	r5, r6
 8002c24:	e787      	b.n	8002b36 <HAL_GPIO_Init+0xce>
 8002c26:	fa0a f606 	lsl.w	r6, sl, r6
 8002c2a:	4335      	orrs	r5, r6
 8002c2c:	e783      	b.n	8002b36 <HAL_GPIO_Init+0xce>
 8002c2e:	2702      	movs	r7, #2
 8002c30:	fa07 f606 	lsl.w	r6, r7, r6
 8002c34:	4335      	orrs	r5, r6
 8002c36:	e77e      	b.n	8002b36 <HAL_GPIO_Init+0xce>
 8002c38:	2704      	movs	r7, #4
 8002c3a:	fa07 f606 	lsl.w	r6, r7, r6
 8002c3e:	4335      	orrs	r5, r6
 8002c40:	e779      	b.n	8002b36 <HAL_GPIO_Init+0xce>
 8002c42:	2705      	movs	r7, #5
 8002c44:	fa07 f606 	lsl.w	r6, r7, r6
 8002c48:	4335      	orrs	r5, r6
 8002c4a:	e774      	b.n	8002b36 <HAL_GPIO_Init+0xce>
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	48000400 	.word	0x48000400
 8002c54:	48000800 	.word	0x48000800
 8002c58:	48000c00 	.word	0x48000c00
 8002c5c:	48001000 	.word	0x48001000
 8002c60:	48001400 	.word	0x48001400
 8002c64:	48001800 	.word	0x48001800
 8002c68:	40010400 	.word	0x40010400

08002c6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c6c:	b10a      	cbz	r2, 8002c72 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c6e:	6181      	str	r1, [r0, #24]
 8002c70:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c72:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop

08002c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c78:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002c7a:	6951      	ldr	r1, [r2, #20]
 8002c7c:	4201      	tst	r1, r0
 8002c7e:	d100      	bne.n	8002c82 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002c80:	4770      	bx	lr
{
 8002c82:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c84:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c86:	f7fe fe1b 	bl	80018c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c8a:	bd08      	pop	{r3, pc}
 8002c8c:	40010400 	.word	0x40010400

08002c90 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c90:	4b02      	ldr	r3, [pc, #8]	; (8002c9c <HAL_PWREx_GetVoltageRange+0xc>)
 8002c92:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002c94:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40007000 	.word	0x40007000

08002ca0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002ca4:	d00e      	beq.n	8002cc4 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002ca8:	6813      	ldr	r3, [r2, #0]
 8002caa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb2:	d02d      	beq.n	8002d10 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cb4:	6813      	ldr	r3, [r2, #0]
 8002cb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cbe:	2000      	movs	r0, #0
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cc4:	4914      	ldr	r1, [pc, #80]	; (8002d18 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002cc6:	680b      	ldr	r3, [r1, #0]
 8002cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd0:	d01e      	beq.n	8002d10 <HAL_PWREx_ControlVoltageScaling+0x70>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cd2:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cd4:	4a11      	ldr	r2, [pc, #68]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x7c>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cde:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ce0:	6813      	ldr	r3, [r2, #0]
 8002ce2:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002ce4:	2032      	movs	r0, #50	; 0x32
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cea:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf2:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cf4:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf8:	d506      	bpl.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0x68>
 8002cfa:	e000      	b.n	8002cfe <HAL_PWREx_ControlVoltageScaling+0x5e>
 8002cfc:	b123      	cbz	r3, 8002d08 <HAL_PWREx_ControlVoltageScaling+0x68>
 8002cfe:	694a      	ldr	r2, [r1, #20]
 8002d00:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8002d02:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d06:	d4f9      	bmi.n	8002cfc <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	055b      	lsls	r3, r3, #21
 8002d0e:	d401      	bmi.n	8002d14 <HAL_PWREx_ControlVoltageScaling+0x74>
  return HAL_OK;
 8002d10:	2000      	movs	r0, #0
 8002d12:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002d14:	2003      	movs	r0, #3
}
 8002d16:	4770      	bx	lr
 8002d18:	40007000 	.word	0x40007000
 8002d1c:	20000014 	.word	0x20000014
 8002d20:	431bde83 	.word	0x431bde83

08002d24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d24:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d26:	4d20      	ldr	r5, [pc, #128]	; (8002da8 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002d28:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002d2a:	00db      	lsls	r3, r3, #3
{
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d30:	d51c      	bpl.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d32:	f7ff ffad 	bl	8002c90 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d36:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002d3a:	d029      	beq.n	8002d90 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d3c:	2c80      	cmp	r4, #128	; 0x80
 8002d3e:	d813      	bhi.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x44>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d40:	d02f      	beq.n	8002da2 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d42:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 8002d46:	fab4 f484 	clz	r4, r4
 8002d4a:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d4c:	4917      	ldr	r1, [pc, #92]	; (8002dac <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002d4e:	680b      	ldr	r3, [r1, #0]
 8002d50:	f023 0307 	bic.w	r3, r3, #7
 8002d54:	4323      	orrs	r3, r4
 8002d56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d58:	6808      	ldr	r0, [r1, #0]
 8002d5a:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002d5e:	1b00      	subs	r0, r0, r4
 8002d60:	bf18      	it	ne
 8002d62:	2001      	movne	r0, #1
 8002d64:	b003      	add	sp, #12
 8002d66:	bd30      	pop	{r4, r5, pc}
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d68:	2403      	movs	r4, #3
 8002d6a:	e7ef      	b.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d6c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d72:	65ab      	str	r3, [r5, #88]	; 0x58
 8002d74:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002d7e:	f7ff ff87 	bl	8002c90 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d82:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d84:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d8e:	d1d5      	bne.n	8002d3c <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8002d90:	2c80      	cmp	r4, #128	; 0x80
 8002d92:	d904      	bls.n	8002d9e <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d94:	2ca0      	cmp	r4, #160	; 0xa0
 8002d96:	bf8c      	ite	hi
 8002d98:	2402      	movhi	r4, #2
 8002d9a:	2401      	movls	r4, #1
 8002d9c:	e7d6      	b.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d9e:	2400      	movs	r4, #0
 8002da0:	e7d4      	b.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002da2:	2402      	movs	r4, #2
 8002da4:	e7d2      	b.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0x28>
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40022000 	.word	0x40022000

08002db0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db0:	4a28      	ldr	r2, [pc, #160]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002db2:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db4:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002db6:	f013 030c 	ands.w	r3, r3, #12
 8002dba:	d008      	beq.n	8002dce <HAL_RCC_GetSysClockFreq+0x1e>
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d038      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d034      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	4824      	ldr	r0, [pc, #144]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002dc8:	bf18      	it	ne
 8002dca:	2000      	movne	r0, #0
 8002dcc:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dce:	4a21      	ldr	r2, [pc, #132]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dd0:	6811      	ldr	r1, [r2, #0]
 8002dd2:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dd4:	bf54      	ite	pl
 8002dd6:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dda:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8002ddc:	491f      	ldr	r1, [pc, #124]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dde:	bf54      	ite	pl
 8002de0:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002de4:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8002de8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dec:	b303      	cbz	r3, 8002e30 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dee:	2b0c      	cmp	r3, #12
 8002df0:	d12d      	bne.n	8002e4e <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002df2:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d025      	beq.n	8002e4a <HAL_RCC_GetSysClockFreq+0x9a>
 8002dfe:	4a16      	ldr	r2, [pc, #88]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	bf08      	it	eq
 8002e04:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e08:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e0a:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e12:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e16:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e1a:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e1c:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e20:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e22:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e24:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002e28:	fbb2 f0f3 	udiv	r0, r2, r3
 8002e2c:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002e2e:	480c      	ldr	r0, [pc, #48]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 8002e30:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e32:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e36:	2a01      	cmp	r2, #1
 8002e38:	d0c9      	beq.n	8002dce <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002e42:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e44:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8002e48:	d1d9      	bne.n	8002dfe <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8002e4a:	4805      	ldr	r0, [pc, #20]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e4c:	e7db      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x56>
 8002e4e:	2000      	movs	r0, #0
  return sysclockfreq;
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	007a1200 	.word	0x007a1200
 8002e5c:	08009c38 	.word	0x08009c38
 8002e60:	00f42400 	.word	0x00f42400

08002e64 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002e64:	2800      	cmp	r0, #0
 8002e66:	f000 824a 	beq.w	80032fe <HAL_RCC_OscConfig+0x49a>
{
 8002e6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e6e:	4aa8      	ldr	r2, [pc, #672]	; (8003110 <HAL_RCC_OscConfig+0x2ac>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e70:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e72:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e74:	68d6      	ldr	r6, [r2, #12]
 8002e76:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e78:	06d8      	lsls	r0, r3, #27
{
 8002e7a:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e7c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e80:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e84:	d52e      	bpl.n	8002ee4 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e86:	2d00      	cmp	r5, #0
 8002e88:	f000 8103 	beq.w	8003092 <HAL_RCC_OscConfig+0x22e>
 8002e8c:	2d0c      	cmp	r5, #12
 8002e8e:	f000 80fd 	beq.w	800308c <HAL_RCC_OscConfig+0x228>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e92:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8002e94:	4f9e      	ldr	r7, [pc, #632]	; (8003110 <HAL_RCC_OscConfig+0x2ac>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 81d7 	beq.w	800324a <HAL_RCC_OscConfig+0x3e6>
        __HAL_RCC_MSI_ENABLE();
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002ea4:	f7ff f9b4 	bl	8002210 <HAL_GetTick>
 8002ea8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eaa:	e006      	b.n	8002eba <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eac:	f7ff f9b0 	bl	8002210 <HAL_GetTick>
 8002eb0:	eba0 0008 	sub.w	r0, r0, r8
 8002eb4:	2802      	cmp	r0, #2
 8002eb6:	f200 81d9 	bhi.w	800326c <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	079b      	lsls	r3, r3, #30
 8002ebe:	d5f5      	bpl.n	8002eac <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f043 0308 	orr.w	r3, r3, #8
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6a22      	ldr	r2, [r4, #32]
 8002ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69e2      	ldr	r2, [r4, #28]
 8002ed8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002edc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ee0:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	07d9      	lsls	r1, r3, #31
 8002ee6:	f100 80a6 	bmi.w	8003036 <HAL_RCC_OscConfig+0x1d2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eea:	0799      	lsls	r1, r3, #30
 8002eec:	d523      	bpl.n	8002f36 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002eee:	2d04      	cmp	r5, #4
 8002ef0:	f000 819a 	beq.w	8003228 <HAL_RCC_OscConfig+0x3c4>
 8002ef4:	2d0c      	cmp	r5, #12
 8002ef6:	f000 8194 	beq.w	8003222 <HAL_RCC_OscConfig+0x3be>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002efa:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002efc:	4e84      	ldr	r6, [pc, #528]	; (8003110 <HAL_RCC_OscConfig+0x2ac>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 81cf 	beq.w	80032a2 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_HSI_ENABLE();
 8002f04:	6833      	ldr	r3, [r6, #0]
 8002f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002f0c:	f7ff f980 	bl	8002210 <HAL_GetTick>
 8002f10:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f12:	e005      	b.n	8002f20 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f14:	f7ff f97c 	bl	8002210 <HAL_GetTick>
 8002f18:	1bc0      	subs	r0, r0, r7
 8002f1a:	2802      	cmp	r0, #2
 8002f1c:	f200 81a6 	bhi.w	800326c <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f20:	6833      	ldr	r3, [r6, #0]
 8002f22:	055b      	lsls	r3, r3, #21
 8002f24:	d5f6      	bpl.n	8002f14 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f26:	6873      	ldr	r3, [r6, #4]
 8002f28:	6922      	ldr	r2, [r4, #16]
 8002f2a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002f2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f32:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	0719      	lsls	r1, r3, #28
 8002f38:	d519      	bpl.n	8002f6e <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f3a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002f3c:	4e74      	ldr	r6, [pc, #464]	; (8003110 <HAL_RCC_OscConfig+0x2ac>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 815b 	beq.w	80031fa <HAL_RCC_OscConfig+0x396>
      __HAL_RCC_LSI_ENABLE();
 8002f44:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002f50:	f7ff f95e 	bl	8002210 <HAL_GetTick>
 8002f54:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f56:	e005      	b.n	8002f64 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f58:	f7ff f95a 	bl	8002210 <HAL_GetTick>
 8002f5c:	1bc0      	subs	r0, r0, r7
 8002f5e:	2802      	cmp	r0, #2
 8002f60:	f200 8184 	bhi.w	800326c <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f64:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002f68:	079a      	lsls	r2, r3, #30
 8002f6a:	d5f5      	bpl.n	8002f58 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	075f      	lsls	r7, r3, #29
 8002f70:	d53e      	bpl.n	8002ff0 <HAL_RCC_OscConfig+0x18c>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f72:	4b67      	ldr	r3, [pc, #412]	; (8003110 <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f76:	00d6      	lsls	r6, r2, #3
 8002f78:	f100 8191 	bmi.w	800329e <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f82:	659a      	str	r2, [r3, #88]	; 0x58
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f8e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f90:	4f60      	ldr	r7, [pc, #384]	; (8003114 <HAL_RCC_OscConfig+0x2b0>)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	05d8      	lsls	r0, r3, #23
 8002f96:	f140 81cc 	bpl.w	8003332 <HAL_RCC_OscConfig+0x4ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f9a:	68a3      	ldr	r3, [r4, #8]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	f000 8192 	beq.w	80032c6 <HAL_RCC_OscConfig+0x462>
 8002fa2:	2b05      	cmp	r3, #5
 8002fa4:	f000 81f0 	beq.w	8003388 <HAL_RCC_OscConfig+0x524>
 8002fa8:	4f59      	ldr	r7, [pc, #356]	; (8003110 <HAL_RCC_OscConfig+0x2ac>)
 8002faa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002fb6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002fba:	f022 0204 	bic.w	r2, r2, #4
 8002fbe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 8186 	bne.w	80032d4 <HAL_RCC_OscConfig+0x470>
      tickstart = HAL_GetTick();
 8002fc8:	f7ff f922 	bl	8002210 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fcc:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002fd0:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fd2:	e006      	b.n	8002fe2 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7ff f91c 	bl	8002210 <HAL_GetTick>
 8002fd8:	eba0 0008 	sub.w	r0, r0, r8
 8002fdc:	4548      	cmp	r0, r9
 8002fde:	f200 8145 	bhi.w	800326c <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fe6:	079b      	lsls	r3, r3, #30
 8002fe8:	d4f4      	bmi.n	8002fd4 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8002fea:	2e00      	cmp	r6, #0
 8002fec:	f040 81b3 	bne.w	8003356 <HAL_RCC_OscConfig+0x4f2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ff0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80f0 	beq.w	80031d8 <HAL_RCC_OscConfig+0x374>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	f000 809c 	beq.w	8003136 <HAL_RCC_OscConfig+0x2d2>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ffe:	2d0c      	cmp	r5, #12
 8003000:	f000 8095 	beq.w	800312e <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_PLL_DISABLE();
 8003004:	4c42      	ldr	r4, [pc, #264]	; (8003110 <HAL_RCC_OscConfig+0x2ac>)
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800300c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800300e:	f7ff f8ff 	bl	8002210 <HAL_GetTick>
 8003012:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003014:	e005      	b.n	8003022 <HAL_RCC_OscConfig+0x1be>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003016:	f7ff f8fb 	bl	8002210 <HAL_GetTick>
 800301a:	1b40      	subs	r0, r0, r5
 800301c:	2802      	cmp	r0, #2
 800301e:	f200 8125 	bhi.w	800326c <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003028:	d1f5      	bne.n	8003016 <HAL_RCC_OscConfig+0x1b2>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800302a:	68e1      	ldr	r1, [r4, #12]
 800302c:	4a3a      	ldr	r2, [pc, #232]	; (8003118 <HAL_RCC_OscConfig+0x2b4>)
 800302e:	400a      	ands	r2, r1
  return HAL_OK;
 8003030:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003032:	60e2      	str	r2, [r4, #12]
 8003034:	e0d1      	b.n	80031da <HAL_RCC_OscConfig+0x376>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003036:	2d08      	cmp	r5, #8
 8003038:	f000 80d5 	beq.w	80031e6 <HAL_RCC_OscConfig+0x382>
 800303c:	2d0c      	cmp	r5, #12
 800303e:	f000 80cf 	beq.w	80031e0 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003042:	6863      	ldr	r3, [r4, #4]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	f000 8114 	beq.w	8003274 <HAL_RCC_OscConfig+0x410>
 800304c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003050:	f000 818d 	beq.w	800336e <HAL_RCC_OscConfig+0x50a>
 8003054:	4f2e      	ldr	r7, [pc, #184]	; (8003110 <HAL_RCC_OscConfig+0x2ac>)
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800305c:	603a      	str	r2, [r7, #0]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003064:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 8109 	bne.w	800327e <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 800306c:	f7ff f8d0 	bl	8002210 <HAL_GetTick>
 8003070:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003072:	e006      	b.n	8003082 <HAL_RCC_OscConfig+0x21e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7ff f8cc 	bl	8002210 <HAL_GetTick>
 8003078:	eba0 0008 	sub.w	r0, r0, r8
 800307c:	2864      	cmp	r0, #100	; 0x64
 800307e:	f200 80f5 	bhi.w	800326c <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	0398      	lsls	r0, r3, #14
 8003086:	d4f5      	bmi.n	8003074 <HAL_RCC_OscConfig+0x210>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	e72e      	b.n	8002eea <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800308c:	2e01      	cmp	r6, #1
 800308e:	f47f af00 	bne.w	8002e92 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003092:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	0799      	lsls	r1, r3, #30
 8003098:	d446      	bmi.n	8003128 <HAL_RCC_OscConfig+0x2c4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800309a:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	6a20      	ldr	r0, [r4, #32]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	0712      	lsls	r2, r2, #28
 80030a2:	bf56      	itet	pl
 80030a4:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80030a8:	681b      	ldrmi	r3, [r3, #0]
 80030aa:	091b      	lsrpl	r3, r3, #4
 80030ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b0:	4298      	cmp	r0, r3
 80030b2:	f200 8126 	bhi.w	8003302 <HAL_RCC_OscConfig+0x49e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b6:	4b16      	ldr	r3, [pc, #88]	; (8003110 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	f042 0208 	orr.w	r2, r2, #8
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030c6:	4302      	orrs	r2, r0
 80030c8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	69e1      	ldr	r1, [r4, #28]
 80030ce:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80030d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030d6:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030d8:	2d00      	cmp	r5, #0
 80030da:	f000 8142 	beq.w	8003362 <HAL_RCC_OscConfig+0x4fe>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030de:	f7ff fe67 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	4a0d      	ldr	r2, [pc, #52]	; (800311c <HAL_RCC_OscConfig+0x2b8>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030ec:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 80030ee:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <HAL_RCC_OscConfig+0x2bc>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 80030f8:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030fa:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_RCC_OscConfig+0x2c0>)
 80030fc:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 80030fe:	f7ff f845 	bl	800218c <HAL_InitTick>
        if(status != HAL_OK)
 8003102:	2800      	cmp	r0, #0
 8003104:	d169      	bne.n	80031da <HAL_RCC_OscConfig+0x376>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	07d9      	lsls	r1, r3, #31
 800310a:	f57f aeee 	bpl.w	8002eea <HAL_RCC_OscConfig+0x86>
 800310e:	e792      	b.n	8003036 <HAL_RCC_OscConfig+0x1d2>
 8003110:	40021000 	.word	0x40021000
 8003114:	40007000 	.word	0x40007000
 8003118:	feeefffc 	.word	0xfeeefffc
 800311c:	08009c20 	.word	0x08009c20
 8003120:	2000001c 	.word	0x2000001c
 8003124:	20000014 	.word	0x20000014
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003128:	69a3      	ldr	r3, [r4, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1b5      	bne.n	800309a <HAL_RCC_OscConfig+0x236>
    return HAL_ERROR;
 800312e:	2001      	movs	r0, #1
}
 8003130:	b003      	add	sp, #12
 8003132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      pll_config = RCC->PLLCFGR;
 8003136:	4e9b      	ldr	r6, [pc, #620]	; (80033a4 <HAL_RCC_OscConfig+0x540>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003138:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 800313a:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800313c:	f003 0103 	and.w	r1, r3, #3
 8003140:	4291      	cmp	r1, r2
 8003142:	f000 8133 	beq.w	80033ac <HAL_RCC_OscConfig+0x548>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003146:	2d0c      	cmp	r5, #12
 8003148:	d0f1      	beq.n	800312e <HAL_RCC_OscConfig+0x2ca>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800314a:	4d96      	ldr	r5, [pc, #600]	; (80033a4 <HAL_RCC_OscConfig+0x540>)
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	015f      	lsls	r7, r3, #5
 8003150:	d4ed      	bmi.n	800312e <HAL_RCC_OscConfig+0x2ca>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003152:	682b      	ldr	r3, [r5, #0]
 8003154:	00de      	lsls	r6, r3, #3
 8003156:	d4ea      	bmi.n	800312e <HAL_RCC_OscConfig+0x2ca>
            __HAL_RCC_PLL_DISABLE();
 8003158:	682b      	ldr	r3, [r5, #0]
 800315a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800315e:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8003160:	f7ff f856 	bl	8002210 <HAL_GetTick>
 8003164:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003166:	e004      	b.n	8003172 <HAL_RCC_OscConfig+0x30e>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003168:	f7ff f852 	bl	8002210 <HAL_GetTick>
 800316c:	1b80      	subs	r0, r0, r6
 800316e:	2802      	cmp	r0, #2
 8003170:	d87c      	bhi.n	800326c <HAL_RCC_OscConfig+0x408>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003172:	682b      	ldr	r3, [r5, #0]
 8003174:	0198      	lsls	r0, r3, #6
 8003176:	d4f7      	bmi.n	8003168 <HAL_RCC_OscConfig+0x304>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003178:	68e9      	ldr	r1, [r5, #12]
 800317a:	4b8b      	ldr	r3, [pc, #556]	; (80033a8 <HAL_RCC_OscConfig+0x544>)
 800317c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317e:	4e89      	ldr	r6, [pc, #548]	; (80033a4 <HAL_RCC_OscConfig+0x540>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003180:	400b      	ands	r3, r1
 8003182:	4313      	orrs	r3, r2
 8003184:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	; 0x30
 8003188:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800318c:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8003190:	3a01      	subs	r2, #1
 8003192:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003196:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003198:	0900      	lsrs	r0, r0, #4
 800319a:	0849      	lsrs	r1, r1, #1
 800319c:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80031a0:	3901      	subs	r1, #1
 80031a2:	0852      	lsrs	r2, r2, #1
 80031a4:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80031a8:	3a01      	subs	r2, #1
 80031aa:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80031ae:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80031b0:	682b      	ldr	r3, [r5, #0]
 80031b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b6:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031b8:	68eb      	ldr	r3, [r5, #12]
 80031ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031be:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80031c0:	f7ff f826 	bl	8002210 <HAL_GetTick>
 80031c4:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c6:	e004      	b.n	80031d2 <HAL_RCC_OscConfig+0x36e>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c8:	f7ff f822 	bl	8002210 <HAL_GetTick>
 80031cc:	1b00      	subs	r0, r0, r4
 80031ce:	2802      	cmp	r0, #2
 80031d0:	d84c      	bhi.n	800326c <HAL_RCC_OscConfig+0x408>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d2:	6833      	ldr	r3, [r6, #0]
 80031d4:	0199      	lsls	r1, r3, #6
 80031d6:	d5f7      	bpl.n	80031c8 <HAL_RCC_OscConfig+0x364>
  return HAL_OK;
 80031d8:	2000      	movs	r0, #0
}
 80031da:	b003      	add	sp, #12
 80031dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031e0:	2e03      	cmp	r6, #3
 80031e2:	f47f af2e 	bne.w	8003042 <HAL_RCC_OscConfig+0x1de>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e6:	4a6f      	ldr	r2, [pc, #444]	; (80033a4 <HAL_RCC_OscConfig+0x540>)
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	0392      	lsls	r2, r2, #14
 80031ec:	f57f ae7d 	bpl.w	8002eea <HAL_RCC_OscConfig+0x86>
 80031f0:	6862      	ldr	r2, [r4, #4]
 80031f2:	2a00      	cmp	r2, #0
 80031f4:	f47f ae79 	bne.w	8002eea <HAL_RCC_OscConfig+0x86>
 80031f8:	e799      	b.n	800312e <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_LSI_DISABLE();
 80031fa:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80031fe:	f023 0301 	bic.w	r3, r3, #1
 8003202:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003206:	f7ff f803 	bl	8002210 <HAL_GetTick>
 800320a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800320c:	e004      	b.n	8003218 <HAL_RCC_OscConfig+0x3b4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320e:	f7fe ffff 	bl	8002210 <HAL_GetTick>
 8003212:	1bc0      	subs	r0, r0, r7
 8003214:	2802      	cmp	r0, #2
 8003216:	d829      	bhi.n	800326c <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003218:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800321c:	079b      	lsls	r3, r3, #30
 800321e:	d4f6      	bmi.n	800320e <HAL_RCC_OscConfig+0x3aa>
 8003220:	e6a4      	b.n	8002f6c <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003222:	2e02      	cmp	r6, #2
 8003224:	f47f ae69 	bne.w	8002efa <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003228:	4a5e      	ldr	r2, [pc, #376]	; (80033a4 <HAL_RCC_OscConfig+0x540>)
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	0552      	lsls	r2, r2, #21
 800322e:	d503      	bpl.n	8003238 <HAL_RCC_OscConfig+0x3d4>
 8003230:	68e2      	ldr	r2, [r4, #12]
 8003232:	2a00      	cmp	r2, #0
 8003234:	f43f af7b 	beq.w	800312e <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	495a      	ldr	r1, [pc, #360]	; (80033a4 <HAL_RCC_OscConfig+0x540>)
 800323a:	6920      	ldr	r0, [r4, #16]
 800323c:	684a      	ldr	r2, [r1, #4]
 800323e:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 8003242:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8003246:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003248:	e675      	b.n	8002f36 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003252:	f7fe ffdd 	bl	8002210 <HAL_GetTick>
 8003256:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	0798      	lsls	r0, r3, #30
 800325c:	f57f af53 	bpl.w	8003106 <HAL_RCC_OscConfig+0x2a2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003260:	f7fe ffd6 	bl	8002210 <HAL_GetTick>
 8003264:	eba0 0008 	sub.w	r0, r0, r8
 8003268:	2802      	cmp	r0, #2
 800326a:	d9f5      	bls.n	8003258 <HAL_RCC_OscConfig+0x3f4>
            return HAL_TIMEOUT;
 800326c:	2003      	movs	r0, #3
}
 800326e:	b003      	add	sp, #12
 8003270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003274:	4a4b      	ldr	r2, [pc, #300]	; (80033a4 <HAL_RCC_OscConfig+0x540>)
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800327e:	f7fe ffc7 	bl	8002210 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003282:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80033a4 <HAL_RCC_OscConfig+0x540>
        tickstart = HAL_GetTick();
 8003286:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003288:	e004      	b.n	8003294 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800328a:	f7fe ffc1 	bl	8002210 <HAL_GetTick>
 800328e:	1bc0      	subs	r0, r0, r7
 8003290:	2864      	cmp	r0, #100	; 0x64
 8003292:	d8eb      	bhi.n	800326c <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003294:	f8d8 3000 	ldr.w	r3, [r8]
 8003298:	039b      	lsls	r3, r3, #14
 800329a:	d5f6      	bpl.n	800328a <HAL_RCC_OscConfig+0x426>
 800329c:	e6f4      	b.n	8003088 <HAL_RCC_OscConfig+0x224>
    FlagStatus       pwrclkchanged = RESET;
 800329e:	2600      	movs	r6, #0
 80032a0:	e676      	b.n	8002f90 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80032a2:	6833      	ldr	r3, [r6, #0]
 80032a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80032aa:	f7fe ffb1 	bl	8002210 <HAL_GetTick>
 80032ae:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032b0:	e004      	b.n	80032bc <HAL_RCC_OscConfig+0x458>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b2:	f7fe ffad 	bl	8002210 <HAL_GetTick>
 80032b6:	1bc0      	subs	r0, r0, r7
 80032b8:	2802      	cmp	r0, #2
 80032ba:	d8d7      	bhi.n	800326c <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032bc:	6833      	ldr	r3, [r6, #0]
 80032be:	0558      	lsls	r0, r3, #21
 80032c0:	d4f7      	bmi.n	80032b2 <HAL_RCC_OscConfig+0x44e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	e637      	b.n	8002f36 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c6:	4a37      	ldr	r2, [pc, #220]	; (80033a4 <HAL_RCC_OscConfig+0x540>)
 80032c8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80032d4:	f7fe ff9c 	bl	8002210 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80033a4 <HAL_RCC_OscConfig+0x540>
      tickstart = HAL_GetTick();
 80032dc:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e2:	e004      	b.n	80032ee <HAL_RCC_OscConfig+0x48a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fe ff94 	bl	8002210 <HAL_GetTick>
 80032e8:	1bc0      	subs	r0, r0, r7
 80032ea:	4548      	cmp	r0, r9
 80032ec:	d8be      	bhi.n	800326c <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ee:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 80032f2:	079a      	lsls	r2, r3, #30
 80032f4:	d5f6      	bpl.n	80032e4 <HAL_RCC_OscConfig+0x480>
    if(pwrclkchanged == SET)
 80032f6:	2e00      	cmp	r6, #0
 80032f8:	f43f ae7a 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x18c>
 80032fc:	e02b      	b.n	8003356 <HAL_RCC_OscConfig+0x4f2>
    return HAL_ERROR;
 80032fe:	2001      	movs	r0, #1
}
 8003300:	4770      	bx	lr
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003302:	f7ff fd0f 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 8003306:	2800      	cmp	r0, #0
 8003308:	f47f af11 	bne.w	800312e <HAL_RCC_OscConfig+0x2ca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800330c:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_RCC_OscConfig+0x540>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	f042 0208 	orr.w	r2, r2, #8
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	6a21      	ldr	r1, [r4, #32]
 800331a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800331e:	430a      	orrs	r2, r1
 8003320:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	69e1      	ldr	r1, [r4, #28]
 8003326:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800332a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	e6d5      	b.n	80030de <HAL_RCC_OscConfig+0x27a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800333a:	f7fe ff69 	bl	8002210 <HAL_GetTick>
 800333e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	05d9      	lsls	r1, r3, #23
 8003344:	f53f ae29 	bmi.w	8002f9a <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003348:	f7fe ff62 	bl	8002210 <HAL_GetTick>
 800334c:	eba0 0008 	sub.w	r0, r0, r8
 8003350:	2802      	cmp	r0, #2
 8003352:	d9f5      	bls.n	8003340 <HAL_RCC_OscConfig+0x4dc>
 8003354:	e78a      	b.n	800326c <HAL_RCC_OscConfig+0x408>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003356:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <HAL_RCC_OscConfig+0x540>)
 8003358:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800335a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335e:	6593      	str	r3, [r2, #88]	; 0x58
 8003360:	e646      	b.n	8002ff0 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003362:	f7ff fcdf 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 8003366:	2800      	cmp	r0, #0
 8003368:	f43f aeb9 	beq.w	80030de <HAL_RCC_OscConfig+0x27a>
 800336c:	e6df      	b.n	800312e <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003372:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003384:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003386:	e77a      	b.n	800327e <HAL_RCC_OscConfig+0x41a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_RCC_OscConfig+0x540>)
 800338a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800338e:	f042 0204 	orr.w	r2, r2, #4
 8003392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003396:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a2:	e797      	b.n	80032d4 <HAL_RCC_OscConfig+0x470>
 80033a4:	40021000 	.word	0x40021000
 80033a8:	f99d808c 	.word	0xf99d808c
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80033ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033b2:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80033b8:	f47f aec5 	bne.w	8003146 <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033c2:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80033c6:	f47f aebe 	bne.w	8003146 <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80033cc:	3a07      	subs	r2, #7
 80033ce:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80033d2:	bf18      	it	ne
 80033d4:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d6:	4291      	cmp	r1, r2
 80033d8:	f47f aeb5 	bne.w	8003146 <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80033de:	0852      	lsrs	r2, r2, #1
 80033e0:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80033e4:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033e6:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80033ea:	f47f aeac 	bne.w	8003146 <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80033f0:	0852      	lsrs	r2, r2, #1
 80033f2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80033f6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80033fc:	f47f aea3 	bne.w	8003146 <HAL_RCC_OscConfig+0x2e2>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003400:	6833      	ldr	r3, [r6, #0]
 8003402:	019a      	lsls	r2, r3, #6
 8003404:	f53f aee8 	bmi.w	80031d8 <HAL_RCC_OscConfig+0x374>
          __HAL_RCC_PLL_ENABLE();
 8003408:	6833      	ldr	r3, [r6, #0]
 800340a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800340e:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003410:	68f3      	ldr	r3, [r6, #12]
 8003412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003416:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8003418:	f7fe fefa 	bl	8002210 <HAL_GetTick>
 800341c:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341e:	e005      	b.n	800342c <HAL_RCC_OscConfig+0x5c8>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003420:	f7fe fef6 	bl	8002210 <HAL_GetTick>
 8003424:	1b00      	subs	r0, r0, r4
 8003426:	2802      	cmp	r0, #2
 8003428:	f63f af20 	bhi.w	800326c <HAL_RCC_OscConfig+0x408>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342c:	6833      	ldr	r3, [r6, #0]
 800342e:	019b      	lsls	r3, r3, #6
 8003430:	d5f6      	bpl.n	8003420 <HAL_RCC_OscConfig+0x5bc>
 8003432:	e6d1      	b.n	80031d8 <HAL_RCC_OscConfig+0x374>

08003434 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003434:	2800      	cmp	r0, #0
 8003436:	f000 809f 	beq.w	8003578 <HAL_RCC_ClockConfig+0x144>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800343a:	4a53      	ldr	r2, [pc, #332]	; (8003588 <HAL_RCC_ClockConfig+0x154>)
 800343c:	6813      	ldr	r3, [r2, #0]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	428b      	cmp	r3, r1
{
 8003444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003448:	460d      	mov	r5, r1
 800344a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800344c:	d20c      	bcs.n	8003468 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	6813      	ldr	r3, [r2, #0]
 8003450:	f023 0307 	bic.w	r3, r3, #7
 8003454:	430b      	orrs	r3, r1
 8003456:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003458:	6813      	ldr	r3, [r2, #0]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	428b      	cmp	r3, r1
 8003460:	d002      	beq.n	8003468 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003462:	2001      	movs	r0, #1
}
 8003464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	079e      	lsls	r6, r3, #30
 800346c:	d571      	bpl.n	8003552 <HAL_RCC_ClockConfig+0x11e>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800346e:	4847      	ldr	r0, [pc, #284]	; (800358c <HAL_RCC_ClockConfig+0x158>)
 8003470:	68a1      	ldr	r1, [r4, #8]
 8003472:	6882      	ldr	r2, [r0, #8]
 8003474:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003478:	4291      	cmp	r1, r2
 800347a:	d904      	bls.n	8003486 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347c:	6882      	ldr	r2, [r0, #8]
 800347e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003482:	430a      	orrs	r2, r1
 8003484:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003486:	07da      	lsls	r2, r3, #31
 8003488:	d526      	bpl.n	80034d8 <HAL_RCC_ClockConfig+0xa4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348a:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348c:	4b3f      	ldr	r3, [pc, #252]	; (800358c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003490:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003492:	d065      	beq.n	8003560 <HAL_RCC_ClockConfig+0x12c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003494:	2a02      	cmp	r2, #2
 8003496:	d06c      	beq.n	8003572 <HAL_RCC_ClockConfig+0x13e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003498:	2a00      	cmp	r2, #0
 800349a:	d171      	bne.n	8003580 <HAL_RCC_ClockConfig+0x14c>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800349c:	079b      	lsls	r3, r3, #30
 800349e:	d5e0      	bpl.n	8003462 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034a0:	4e3a      	ldr	r6, [pc, #232]	; (800358c <HAL_RCC_ClockConfig+0x158>)
 80034a2:	68b3      	ldr	r3, [r6, #8]
 80034a4:	f023 0303 	bic.w	r3, r3, #3
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80034ac:	f7fe feb0 	bl	8002210 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80034b4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	e004      	b.n	80034c2 <HAL_RCC_ClockConfig+0x8e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b8:	f7fe feaa 	bl	8002210 <HAL_GetTick>
 80034bc:	1bc0      	subs	r0, r0, r7
 80034be:	4540      	cmp	r0, r8
 80034c0:	d85c      	bhi.n	800357c <HAL_RCC_ClockConfig+0x148>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	68b3      	ldr	r3, [r6, #8]
 80034c4:	6862      	ldr	r2, [r4, #4]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80034ce:	d1f3      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	079e      	lsls	r6, r3, #30
 80034d4:	d506      	bpl.n	80034e4 <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034d6:	68a1      	ldr	r1, [r4, #8]
 80034d8:	482c      	ldr	r0, [pc, #176]	; (800358c <HAL_RCC_ClockConfig+0x158>)
 80034da:	6882      	ldr	r2, [r0, #8]
 80034dc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80034e0:	428a      	cmp	r2, r1
 80034e2:	d840      	bhi.n	8003566 <HAL_RCC_ClockConfig+0x132>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e4:	4928      	ldr	r1, [pc, #160]	; (8003588 <HAL_RCC_ClockConfig+0x154>)
 80034e6:	680a      	ldr	r2, [r1, #0]
 80034e8:	f002 0207 	and.w	r2, r2, #7
 80034ec:	42aa      	cmp	r2, r5
 80034ee:	d909      	bls.n	8003504 <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f0:	680a      	ldr	r2, [r1, #0]
 80034f2:	f022 0207 	bic.w	r2, r2, #7
 80034f6:	432a      	orrs	r2, r5
 80034f8:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	680a      	ldr	r2, [r1, #0]
 80034fc:	f002 0207 	and.w	r2, r2, #7
 8003500:	42aa      	cmp	r2, r5
 8003502:	d1ae      	bne.n	8003462 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	075d      	lsls	r5, r3, #29
 8003506:	d506      	bpl.n	8003516 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003508:	4920      	ldr	r1, [pc, #128]	; (800358c <HAL_RCC_ClockConfig+0x158>)
 800350a:	68e0      	ldr	r0, [r4, #12]
 800350c:	688a      	ldr	r2, [r1, #8]
 800350e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003512:	4302      	orrs	r2, r0
 8003514:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003516:	0718      	lsls	r0, r3, #28
 8003518:	d507      	bpl.n	800352a <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800351a:	4a1c      	ldr	r2, [pc, #112]	; (800358c <HAL_RCC_ClockConfig+0x158>)
 800351c:	6921      	ldr	r1, [r4, #16]
 800351e:	6893      	ldr	r3, [r2, #8]
 8003520:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003524:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003528:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800352a:	f7ff fc41 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
 800352e:	4a17      	ldr	r2, [pc, #92]	; (800358c <HAL_RCC_ClockConfig+0x158>)
 8003530:	4c17      	ldr	r4, [pc, #92]	; (8003590 <HAL_RCC_ClockConfig+0x15c>)
 8003532:	6892      	ldr	r2, [r2, #8]
 8003534:	4917      	ldr	r1, [pc, #92]	; (8003594 <HAL_RCC_ClockConfig+0x160>)
 8003536:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800353a:	4603      	mov	r3, r0
 800353c:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 800353e:	4816      	ldr	r0, [pc, #88]	; (8003598 <HAL_RCC_ClockConfig+0x164>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003540:	f002 021f 	and.w	r2, r2, #31
 8003544:	40d3      	lsrs	r3, r2
}
 8003546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800354a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800354c:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 800354e:	f7fe be1d 	b.w	800218c <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003552:	07d9      	lsls	r1, r3, #31
 8003554:	d5c6      	bpl.n	80034e4 <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003556:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355e:	d199      	bne.n	8003494 <HAL_RCC_ClockConfig+0x60>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003560:	0198      	lsls	r0, r3, #6
 8003562:	d49d      	bmi.n	80034a0 <HAL_RCC_ClockConfig+0x6c>
 8003564:	e77d      	b.n	8003462 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003566:	6882      	ldr	r2, [r0, #8]
 8003568:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800356c:	430a      	orrs	r2, r1
 800356e:	6082      	str	r2, [r0, #8]
 8003570:	e7b8      	b.n	80034e4 <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003572:	0399      	lsls	r1, r3, #14
 8003574:	d494      	bmi.n	80034a0 <HAL_RCC_ClockConfig+0x6c>
 8003576:	e774      	b.n	8003462 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003578:	2001      	movs	r0, #1
}
 800357a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800357c:	2003      	movs	r0, #3
 800357e:	e771      	b.n	8003464 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003580:	055f      	lsls	r7, r3, #21
 8003582:	f57f af6e 	bpl.w	8003462 <HAL_RCC_ClockConfig+0x2e>
 8003586:	e78b      	b.n	80034a0 <HAL_RCC_ClockConfig+0x6c>
 8003588:	40022000 	.word	0x40022000
 800358c:	40021000 	.word	0x40021000
 8003590:	08009c20 	.word	0x08009c20
 8003594:	20000014 	.word	0x20000014
 8003598:	2000001c 	.word	0x2000001c

0800359c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 800359e:	4a06      	ldr	r2, [pc, #24]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80035a0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80035a2:	4906      	ldr	r1, [pc, #24]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035a4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80035a8:	6808      	ldr	r0, [r1, #0]
 80035aa:	5cd3      	ldrb	r3, [r2, r3]
 80035ac:	f003 031f 	and.w	r3, r3, #31
}
 80035b0:	40d8      	lsrs	r0, r3
 80035b2:	4770      	bx	lr
 80035b4:	40021000 	.word	0x40021000
 80035b8:	08009c30 	.word	0x08009c30
 80035bc:	20000014 	.word	0x20000014

080035c0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80035c2:	4a06      	ldr	r2, [pc, #24]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80035c4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80035c6:	4906      	ldr	r1, [pc, #24]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035c8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80035cc:	6808      	ldr	r0, [r1, #0]
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	f003 031f 	and.w	r3, r3, #31
}
 80035d4:	40d8      	lsrs	r0, r3
 80035d6:	4770      	bx	lr
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08009c30 	.word	0x08009c30
 80035e0:	20000014 	.word	0x20000014

080035e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035e6:	4b47      	ldr	r3, [pc, #284]	; (8003704 <RCCEx_PLLSAI1_Config+0x120>)
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	0792      	lsls	r2, r2, #30
{
 80035ec:	4604      	mov	r4, r0
 80035ee:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035f0:	d007      	beq.n	8003602 <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	6801      	ldr	r1, [r0, #0]
 80035f6:	f002 0203 	and.w	r2, r2, #3
 80035fa:	428a      	cmp	r2, r1
 80035fc:	d04c      	beq.n	8003698 <RCCEx_PLLSAI1_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80035fe:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8003602:	6800      	ldr	r0, [r0, #0]
 8003604:	2802      	cmp	r0, #2
 8003606:	d058      	beq.n	80036ba <RCCEx_PLLSAI1_Config+0xd6>
 8003608:	2803      	cmp	r0, #3
 800360a:	d04f      	beq.n	80036ac <RCCEx_PLLSAI1_Config+0xc8>
 800360c:	2801      	cmp	r0, #1
 800360e:	d1f6      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	079b      	lsls	r3, r3, #30
 8003614:	d5f4      	bpl.n	8003600 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003616:	493b      	ldr	r1, [pc, #236]	; (8003704 <RCCEx_PLLSAI1_Config+0x120>)
 8003618:	6862      	ldr	r2, [r4, #4]
 800361a:	68cb      	ldr	r3, [r1, #12]
 800361c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003620:	4303      	orrs	r3, r0
 8003622:	3a01      	subs	r2, #1
 8003624:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003628:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 800362a:	4d36      	ldr	r5, [pc, #216]	; (8003704 <RCCEx_PLLSAI1_Config+0x120>)
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003632:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003634:	f7fe fdec 	bl	8002210 <HAL_GetTick>
 8003638:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800363a:	e004      	b.n	8003646 <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800363c:	f7fe fde8 	bl	8002210 <HAL_GetTick>
 8003640:	1b83      	subs	r3, r0, r6
 8003642:	2b02      	cmp	r3, #2
 8003644:	d83d      	bhi.n	80036c2 <RCCEx_PLLSAI1_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003646:	682b      	ldr	r3, [r5, #0]
 8003648:	011a      	lsls	r2, r3, #4
 800364a:	d4f7      	bmi.n	800363c <RCCEx_PLLSAI1_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 800364c:	2f00      	cmp	r7, #0
 800364e:	d13a      	bne.n	80036c6 <RCCEx_PLLSAI1_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003650:	692b      	ldr	r3, [r5, #16]
 8003652:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8003656:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800365a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003662:	0912      	lsrs	r2, r2, #4
 8003664:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003668:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800366a:	4d26      	ldr	r5, [pc, #152]	; (8003704 <RCCEx_PLLSAI1_Config+0x120>)
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003672:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003674:	f7fe fdcc 	bl	8002210 <HAL_GetTick>
 8003678:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800367a:	e004      	b.n	8003686 <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800367c:	f7fe fdc8 	bl	8002210 <HAL_GetTick>
 8003680:	1b83      	subs	r3, r0, r6
 8003682:	2b02      	cmp	r3, #2
 8003684:	d81d      	bhi.n	80036c2 <RCCEx_PLLSAI1_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003686:	682b      	ldr	r3, [r5, #0]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	d5f7      	bpl.n	800367c <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800368c:	692b      	ldr	r3, [r5, #16]
 800368e:	69a2      	ldr	r2, [r4, #24]
 8003690:	4313      	orrs	r3, r2
 8003692:	2000      	movs	r0, #0
 8003694:	612b      	str	r3, [r5, #16]
}
 8003696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8003698:	2a00      	cmp	r2, #0
 800369a:	d0b0      	beq.n	80035fe <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800369c:	68db      	ldr	r3, [r3, #12]
       ||
 800369e:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036a0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80036a4:	3301      	adds	r3, #1
       ||
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d1a9      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0x1a>
 80036aa:	e7be      	b.n	800362a <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	0395      	lsls	r5, r2, #14
 80036b0:	d4b1      	bmi.n	8003616 <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0359      	lsls	r1, r3, #13
 80036b6:	d5a2      	bpl.n	80035fe <RCCEx_PLLSAI1_Config+0x1a>
 80036b8:	e7ad      	b.n	8003616 <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	055e      	lsls	r6, r3, #21
 80036be:	d59e      	bpl.n	80035fe <RCCEx_PLLSAI1_Config+0x1a>
 80036c0:	e7a9      	b.n	8003616 <RCCEx_PLLSAI1_Config+0x32>
    switch(PllSai1->PLLSAI1Source)
 80036c2:	2003      	movs	r0, #3
}
 80036c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 80036c6:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c8:	692b      	ldr	r3, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 80036ca:	d00d      	beq.n	80036e8 <RCCEx_PLLSAI1_Config+0x104>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036cc:	6962      	ldr	r2, [r4, #20]
 80036ce:	68a1      	ldr	r1, [r4, #8]
 80036d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036d4:	0852      	lsrs	r2, r2, #1
 80036d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036da:	3a01      	subs	r2, #1
 80036dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80036e0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80036e4:	612b      	str	r3, [r5, #16]
 80036e6:	e7c0      	b.n	800366a <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e8:	6922      	ldr	r2, [r4, #16]
 80036ea:	68a1      	ldr	r1, [r4, #8]
 80036ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036f0:	0852      	lsrs	r2, r2, #1
 80036f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036f6:	3a01      	subs	r2, #1
 80036f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80036fc:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003700:	612b      	str	r3, [r5, #16]
 8003702:	e7b2      	b.n	800366a <RCCEx_PLLSAI1_Config+0x86>
 8003704:	40021000 	.word	0x40021000

08003708 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800370a:	4b3f      	ldr	r3, [pc, #252]	; (8003808 <RCCEx_PLLSAI2_Config+0x100>)
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	0792      	lsls	r2, r2, #30
{
 8003710:	4604      	mov	r4, r0
 8003712:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003714:	d007      	beq.n	8003726 <RCCEx_PLLSAI2_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	6801      	ldr	r1, [r0, #0]
 800371a:	f002 0203 	and.w	r2, r2, #3
 800371e:	428a      	cmp	r2, r1
 8003720:	d04c      	beq.n	80037bc <RCCEx_PLLSAI2_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003722:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 8003726:	6800      	ldr	r0, [r0, #0]
 8003728:	2802      	cmp	r0, #2
 800372a:	d058      	beq.n	80037de <RCCEx_PLLSAI2_Config+0xd6>
 800372c:	2803      	cmp	r0, #3
 800372e:	d04f      	beq.n	80037d0 <RCCEx_PLLSAI2_Config+0xc8>
 8003730:	2801      	cmp	r0, #1
 8003732:	d1f6      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	079b      	lsls	r3, r3, #30
 8003738:	d5f4      	bpl.n	8003724 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800373a:	4933      	ldr	r1, [pc, #204]	; (8003808 <RCCEx_PLLSAI2_Config+0x100>)
 800373c:	6862      	ldr	r2, [r4, #4]
 800373e:	68cb      	ldr	r3, [r1, #12]
 8003740:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003744:	4303      	orrs	r3, r0
 8003746:	3a01      	subs	r2, #1
 8003748:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800374c:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 800374e:	4d2e      	ldr	r5, [pc, #184]	; (8003808 <RCCEx_PLLSAI2_Config+0x100>)
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003756:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003758:	f7fe fd5a 	bl	8002210 <HAL_GetTick>
 800375c:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800375e:	e004      	b.n	800376a <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003760:	f7fe fd56 	bl	8002210 <HAL_GetTick>
 8003764:	1b83      	subs	r3, r0, r6
 8003766:	2b02      	cmp	r3, #2
 8003768:	d83d      	bhi.n	80037e6 <RCCEx_PLLSAI2_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800376a:	682b      	ldr	r3, [r5, #0]
 800376c:	009a      	lsls	r2, r3, #2
 800376e:	d4f7      	bmi.n	8003760 <RCCEx_PLLSAI2_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 8003770:	2f00      	cmp	r7, #0
 8003772:	d13a      	bne.n	80037ea <RCCEx_PLLSAI2_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003774:	696b      	ldr	r3, [r5, #20]
 8003776:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800377a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800377e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003782:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003786:	0912      	lsrs	r2, r2, #4
 8003788:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800378c:	616b      	str	r3, [r5, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800378e:	4d1e      	ldr	r5, [pc, #120]	; (8003808 <RCCEx_PLLSAI2_Config+0x100>)
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003796:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003798:	f7fe fd3a 	bl	8002210 <HAL_GetTick>
 800379c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800379e:	e004      	b.n	80037aa <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037a0:	f7fe fd36 	bl	8002210 <HAL_GetTick>
 80037a4:	1b83      	subs	r3, r0, r6
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d81d      	bhi.n	80037e6 <RCCEx_PLLSAI2_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037aa:	682b      	ldr	r3, [r5, #0]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	d5f7      	bpl.n	80037a0 <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037b0:	696b      	ldr	r3, [r5, #20]
 80037b2:	6962      	ldr	r2, [r4, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	2000      	movs	r0, #0
 80037b8:	616b      	str	r3, [r5, #20]
}
 80037ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80037bc:	2a00      	cmp	r2, #0
 80037be:	d0b0      	beq.n	8003722 <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037c0:	68db      	ldr	r3, [r3, #12]
       ||
 80037c2:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037c4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80037c8:	3301      	adds	r3, #1
       ||
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d1a9      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0x1a>
 80037ce:	e7be      	b.n	800374e <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	0395      	lsls	r5, r2, #14
 80037d4:	d4b1      	bmi.n	800373a <RCCEx_PLLSAI2_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0359      	lsls	r1, r3, #13
 80037da:	d5a2      	bpl.n	8003722 <RCCEx_PLLSAI2_Config+0x1a>
 80037dc:	e7ad      	b.n	800373a <RCCEx_PLLSAI2_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	055e      	lsls	r6, r3, #21
 80037e2:	d59e      	bpl.n	8003722 <RCCEx_PLLSAI2_Config+0x1a>
 80037e4:	e7a9      	b.n	800373a <RCCEx_PLLSAI2_Config+0x32>
    switch(PllSai2->PLLSAI2Source)
 80037e6:	2003      	movs	r0, #3
}
 80037e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037ea:	696b      	ldr	r3, [r5, #20]
 80037ec:	6922      	ldr	r2, [r4, #16]
 80037ee:	68a1      	ldr	r1, [r4, #8]
 80037f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037f4:	0852      	lsrs	r2, r2, #1
 80037f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037fa:	3a01      	subs	r2, #1
 80037fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003800:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003804:	616b      	str	r3, [r5, #20]
 8003806:	e7c2      	b.n	800378e <RCCEx_PLLSAI2_Config+0x86>
 8003808:	40021000 	.word	0x40021000

0800380c <HAL_RCCEx_PeriphCLKConfig>:
{
 800380c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003810:	6803      	ldr	r3, [r0, #0]
 8003812:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
{
 8003816:	b083      	sub	sp, #12
 8003818:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800381a:	d020      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai1ClockSelection)
 800381c:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800381e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003822:	f000 81d4 	beq.w	8003bce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8003826:	f200 8122 	bhi.w	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x262>
 800382a:	2900      	cmp	r1, #0
 800382c:	f000 81ab 	beq.w	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003830:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8003834:	f040 811f 	bne.w	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003838:	2100      	movs	r1, #0
 800383a:	3020      	adds	r0, #32
 800383c:	f7ff ff64 	bl	8003708 <RCCEx_PLLSAI2_Config>
 8003840:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003842:	2d00      	cmp	r5, #0
 8003844:	f040 81d0 	bne.w	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003848:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800384a:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800384c:	48ae      	ldr	r0, [pc, #696]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800384e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003852:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003856:	430a      	orrs	r2, r1
 8003858:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 800385c:	2500      	movs	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800385e:	04d8      	lsls	r0, r3, #19
 8003860:	f140 810e 	bpl.w	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x274>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003864:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003866:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800386a:	f000 81b6 	beq.w	8003bda <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800386e:	f200 816c 	bhi.w	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003872:	2900      	cmp	r1, #0
 8003874:	f000 8181 	beq.w	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003878:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800387c:	f040 819a 	bne.w	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003880:	2100      	movs	r1, #0
 8003882:	f104 0020 	add.w	r0, r4, #32
 8003886:	f7ff ff3f 	bl	8003708 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800388a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800388c:	4680      	mov	r8, r0
    if(ret == HAL_OK)
 800388e:	f1b8 0f00 	cmp.w	r8, #0
 8003892:	f040 8162 	bne.w	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003896:	499c      	ldr	r1, [pc, #624]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003898:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800389a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800389e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038a2:	4302      	orrs	r2, r0
 80038a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038a8:	0399      	lsls	r1, r3, #14
 80038aa:	f100 80ed 	bmi.w	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ae:	07da      	lsls	r2, r3, #31
 80038b0:	d508      	bpl.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b2:	4995      	ldr	r1, [pc, #596]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80038b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80038b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038ba:	f022 0203 	bic.w	r2, r2, #3
 80038be:	4302      	orrs	r2, r0
 80038c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038c4:	079f      	lsls	r7, r3, #30
 80038c6:	d508      	bpl.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c8:	498f      	ldr	r1, [pc, #572]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80038ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80038cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038d0:	f022 020c 	bic.w	r2, r2, #12
 80038d4:	4302      	orrs	r2, r0
 80038d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038da:	075e      	lsls	r6, r3, #29
 80038dc:	d508      	bpl.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038de:	498a      	ldr	r1, [pc, #552]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80038e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80038e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038e6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80038ea:	4302      	orrs	r2, r0
 80038ec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038f0:	0718      	lsls	r0, r3, #28
 80038f2:	d508      	bpl.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038f4:	4984      	ldr	r1, [pc, #528]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80038f6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80038f8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038fc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003900:	4302      	orrs	r2, r0
 8003902:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003906:	06d9      	lsls	r1, r3, #27
 8003908:	d508      	bpl.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800390a:	497f      	ldr	r1, [pc, #508]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800390c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800390e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003912:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003916:	4302      	orrs	r2, r0
 8003918:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800391c:	069a      	lsls	r2, r3, #26
 800391e:	d508      	bpl.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003920:	4979      	ldr	r1, [pc, #484]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003922:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003924:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003928:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800392c:	4302      	orrs	r2, r0
 800392e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003932:	059f      	lsls	r7, r3, #22
 8003934:	d508      	bpl.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003936:	4974      	ldr	r1, [pc, #464]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003938:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800393a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800393e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003942:	4302      	orrs	r2, r0
 8003944:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003948:	055e      	lsls	r6, r3, #21
 800394a:	d508      	bpl.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800394c:	496e      	ldr	r1, [pc, #440]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800394e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003950:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003954:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003958:	4302      	orrs	r2, r0
 800395a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800395e:	0658      	lsls	r0, r3, #25
 8003960:	d508      	bpl.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003962:	4969      	ldr	r1, [pc, #420]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003964:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003966:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800396a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800396e:	4302      	orrs	r2, r0
 8003970:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003974:	0619      	lsls	r1, r3, #24
 8003976:	d508      	bpl.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003978:	4963      	ldr	r1, [pc, #396]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800397a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800397c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003980:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003984:	4302      	orrs	r2, r0
 8003986:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800398a:	05da      	lsls	r2, r3, #23
 800398c:	d508      	bpl.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800398e:	495e      	ldr	r1, [pc, #376]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003992:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003996:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800399a:	4302      	orrs	r2, r0
 800399c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039a0:	049f      	lsls	r7, r3, #18
 80039a2:	d510      	bpl.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039a4:	4958      	ldr	r1, [pc, #352]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80039a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80039a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80039ac:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80039b0:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039b2:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039ba:	f000 80f1 	beq.w	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x394>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039be:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 80039c2:	f000 8128 	beq.w	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039c6:	031e      	lsls	r6, r3, #12
 80039c8:	d510      	bpl.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039ca:	494f      	ldr	r1, [pc, #316]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80039cc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80039ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80039d2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80039d6:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039d8:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039e0:	f000 80e3 	beq.w	8003baa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039e4:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 80039e8:	f000 811f 	beq.w	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039ec:	0358      	lsls	r0, r3, #13
 80039ee:	d510      	bpl.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039f0:	4945      	ldr	r1, [pc, #276]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80039f2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80039f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80039f8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80039fc:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039fe:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a02:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a06:	f000 80c6 	beq.w	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a0a:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8003a0e:	f000 80f8 	beq.w	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a12:	0459      	lsls	r1, r3, #17
 8003a14:	d510      	bpl.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a16:	483c      	ldr	r0, [pc, #240]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a18:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003a1a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003a1e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a22:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a24:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a28:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a2c:	f000 80c5 	beq.w	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a30:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003a34:	f000 80da 	beq.w	8003bec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a38:	041a      	lsls	r2, r3, #16
 8003a3a:	d508      	bpl.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a3c:	4932      	ldr	r1, [pc, #200]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a3e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003a40:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003a44:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003a48:	4302      	orrs	r2, r0
 8003a4a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a4e:	03db      	lsls	r3, r3, #15
 8003a50:	d509      	bpl.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a52:	4a2d      	ldr	r2, [pc, #180]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a54:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003a58:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a60:	430b      	orrs	r3, r1
 8003a62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003a66:	4628      	mov	r0, r5
 8003a68:	b003      	add	sp, #12
 8003a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a6e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003a72:	f43f aeeb 	beq.w	800384c <HAL_RCCEx_PeriphCLKConfig+0x40>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a76:	04d8      	lsls	r0, r3, #19
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a78:	f04f 0501 	mov.w	r5, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a7c:	f53f aef2 	bmi.w	8003864 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003a80:	46a8      	mov	r8, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a82:	0399      	lsls	r1, r3, #14
 8003a84:	f57f af13 	bpl.w	80038ae <HAL_RCCEx_PeriphCLKConfig+0xa2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a88:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a8c:	00d2      	lsls	r2, r2, #3
 8003a8e:	d566      	bpl.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x352>
    FlagStatus       pwrclkchanged = RESET;
 8003a90:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a94:	4e1d      	ldr	r6, [pc, #116]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a96:	6833      	ldr	r3, [r6, #0]
 8003a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003a9e:	f7fe fbb7 	bl	8002210 <HAL_GetTick>
 8003aa2:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003aa4:	e004      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa6:	f7fe fbb3 	bl	8002210 <HAL_GetTick>
 8003aaa:	1bc3      	subs	r3, r0, r7
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d862      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ab0:	6833      	ldr	r3, [r6, #0]
 8003ab2:	05db      	lsls	r3, r3, #23
 8003ab4:	d5f7      	bpl.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    if(ret == HAL_OK)
 8003ab6:	f1b8 0f00 	cmp.w	r8, #0
 8003aba:	f040 80c0 	bne.w	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x432>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003abe:	4e12      	ldr	r6, [pc, #72]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003ac0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ac4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003ac8:	d02b      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003aca:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d029      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ad2:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ad6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ade:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ae2:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aea:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aee:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003af0:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        RCC->BDCR = tmpregister;
 8003af4:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003af8:	f140 80a3 	bpl.w	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x436>
        tickstart = HAL_GetTick();
 8003afc:	f7fe fb88 	bl	8002210 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b00:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003b04:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fe fb7e 	bl	8002210 <HAL_GetTick>
 8003b14:	1bc0      	subs	r0, r0, r7
 8003b16:	4540      	cmp	r0, r8
 8003b18:	d82d      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003b1e:	0799      	lsls	r1, r3, #30
 8003b20:	d5f6      	bpl.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x304>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b22:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003b26:	4948      	ldr	r1, [pc, #288]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003b28:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 8003b36:	f1b9 0f00 	cmp.w	r9, #0
 8003b3a:	d004      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3c:	4a42      	ldr	r2, [pc, #264]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003b3e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b44:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	e6b1      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xa2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003b4a:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003b4e:	d131      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003b50:	46a8      	mov	r8, r5
    if(ret == HAL_OK)
 8003b52:	f1b8 0f00 	cmp.w	r8, #0
 8003b56:	f43f ae9e 	beq.w	8003896 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8003b5a:	4645      	mov	r5, r8
 8003b5c:	e791      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x276>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b64:	659a      	str	r2, [r3, #88]	; 0x58
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b70:	f04f 0901 	mov.w	r9, #1
 8003b74:	e78e      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = HAL_TIMEOUT;
 8003b76:	2503      	movs	r5, #3
 8003b78:	e7dd      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x32a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b7a:	1d20      	adds	r0, r4, #4
 8003b7c:	f7ff fd32 	bl	80035e4 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b80:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b82:	4680      	mov	r8, r0
      break;
 8003b84:	e683      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x82>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b86:	3004      	adds	r0, #4
 8003b88:	f7ff fd2c 	bl	80035e4 <RCCEx_PLLSAI1_Config>
 8003b8c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b8e:	2d00      	cmp	r5, #0
 8003b90:	f43f ae5a 	beq.w	8003848 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003b94:	e028      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b96:	68ca      	ldr	r2, [r1, #12]
 8003b98:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b9c:	60ca      	str	r2, [r1, #12]
 8003b9e:	e738      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba0:	68ca      	ldr	r2, [r1, #12]
 8003ba2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ba6:	60ca      	str	r2, [r1, #12]
 8003ba8:	e70d      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003baa:	68ca      	ldr	r2, [r1, #12]
 8003bac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003bb0:	60ca      	str	r2, [r1, #12]
 8003bb2:	e71b      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003bb4:	2501      	movs	r5, #1
 8003bb6:	46a8      	mov	r8, r5
 8003bb8:	e763      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x276>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bba:	2102      	movs	r1, #2
 8003bbc:	1d20      	adds	r0, r4, #4
 8003bbe:	f7ff fd11 	bl	80035e4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bc2:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	f43f af37 	beq.w	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bca:	4605      	mov	r5, r0
 8003bcc:	e734      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bce:	481e      	ldr	r0, [pc, #120]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003bd0:	68c2      	ldr	r2, [r0, #12]
 8003bd2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003bd6:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8003bd8:	e638      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x40>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bda:	491b      	ldr	r1, [pc, #108]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003bdc:	68ca      	ldr	r2, [r1, #12]
 8003bde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003be2:	60ca      	str	r2, [r1, #12]
      break;
 8003be4:	46a8      	mov	r8, r5
 8003be6:	e652      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x82>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	e638      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x52>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003bec:	2102      	movs	r1, #2
 8003bee:	f104 0020 	add.w	r0, r4, #32
 8003bf2:	f7ff fd89 	bl	8003708 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bf6:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	f43f af1d 	beq.w	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bfe:	4605      	mov	r5, r0
 8003c00:	e71a      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c02:	2101      	movs	r1, #1
 8003c04:	1d20      	adds	r0, r4, #4
 8003c06:	f7ff fced 	bl	80035e4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c0a:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	f43f af00 	beq.w	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c12:	4605      	mov	r5, r0
 8003c14:	e6fd      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c16:	2101      	movs	r1, #1
 8003c18:	1d20      	adds	r0, r4, #4
 8003c1a:	f7ff fce3 	bl	80035e4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c1e:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8003c20:	2800      	cmp	r0, #0
 8003c22:	f43f aed0 	beq.w	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c26:	4605      	mov	r5, r0
 8003c28:	e6cd      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	1d20      	adds	r0, r4, #4
 8003c2e:	f7ff fcd9 	bl	80035e4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c32:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003c34:	2800      	cmp	r0, #0
 8003c36:	f43f aed9 	beq.w	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c3a:	4605      	mov	r5, r0
 8003c3c:	e6d6      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8003c3e:	4645      	mov	r5, r8
 8003c40:	e779      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003c42:	4613      	mov	r3, r2
 8003c44:	e76f      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8003c46:	bf00      	nop
 8003c48:	40021000 	.word	0x40021000

08003c4c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c50:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c52:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003c54:	4617      	mov	r7, r2
 8003c56:	460d      	mov	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 8003c58:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003c5c:	4606      	mov	r6, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c5e:	f7fe fad7 	bl	8002210 <HAL_GetTick>
 8003c62:	442f      	add	r7, r5
 8003c64:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8003c66:	f7fe fad3 	bl	8002210 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c6a:	4b31      	ldr	r3, [pc, #196]	; (8003d30 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c6c:	6834      	ldr	r4, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c74:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003c78:	0d1b      	lsrs	r3, r3, #20
 8003c7a:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8003c7e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c80:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c82:	4622      	mov	r2, r4
 8003c84:	1c69      	adds	r1, r5, #1
 8003c86:	6893      	ldr	r3, [r2, #8]
 8003c88:	d110      	bne.n	8003cac <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
 8003c8a:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8003c8e:	d009      	beq.n	8003ca4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c90:	7b23      	ldrb	r3, [r4, #12]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c98:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c9c:	6893      	ldr	r3, [r2, #8]
 8003c9e:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8003ca2:	d1f5      	bne.n	8003c90 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 8003ca4:	2000      	movs	r0, #0
}
 8003ca6:	b002      	add	sp, #8
 8003ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8003cac:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8003cb0:	d0f8      	beq.n	8003ca4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
      tmpreg8 = *ptmpreg8;
 8003cb2:	7b23      	ldrb	r3, [r4, #12]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8003cba:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cbe:	f7fe faa7 	bl	8002210 <HAL_GetTick>
 8003cc2:	eba0 0008 	sub.w	r0, r0, r8
 8003cc6:	42b8      	cmp	r0, r7
 8003cc8:	d209      	bcs.n	8003cde <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
      if (count == 0U)
 8003cca:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ccc:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 8003cce:	2b00      	cmp	r3, #0
      count--;
 8003cd0:	9b01      	ldr	r3, [sp, #4]
 8003cd2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8003cd6:	bf08      	it	eq
 8003cd8:	2700      	moveq	r7, #0
      count--;
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	e7d2      	b.n	8003c84 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cde:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ce2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ce8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cec:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cee:	d013      	beq.n	8003d18 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cf0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8003cf2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003cf6:	d107      	bne.n	8003d08 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbc>
          SPI_RESET_CRC(hspi);
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d06:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003d08:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8003d0a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8003d0c:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003d10:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003d14:	2003      	movs	r0, #3
 8003d16:	e7c6      	b.n	8003ca6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d18:	68b2      	ldr	r2, [r6, #8]
 8003d1a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003d1e:	d002      	beq.n	8003d26 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xda>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d20:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003d24:	d1e4      	bne.n	8003cf0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          __HAL_SPI_DISABLE(hspi);
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e7df      	b.n	8003cf0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
 8003d30:	20000014 	.word	0x20000014

08003d34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d38:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f88d 3007 	strb.w	r3, [sp, #7]
 8003d40:	eb01 0902 	add.w	r9, r1, r2
{
 8003d44:	460e      	mov	r6, r1
 8003d46:	4617      	mov	r7, r2
 8003d48:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d4a:	f7fe fa61 	bl	8002210 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d4e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8003e70 <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d52:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 8003d56:	f7fe fa5b 	bl	8002210 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d62:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003d66:	0d1b      	lsrs	r3, r3, #20
 8003d68:	fb0a f303 	mul.w	r3, sl, r3
  tmp_tickstart = HAL_GetTick();
 8003d6c:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d6e:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d70:	1c70      	adds	r0, r6, #1
 8003d72:	682c      	ldr	r4, [r5, #0]
 8003d74:	d120      	bne.n	8003db8 <SPI_EndRxTxTransaction+0x84>
 8003d76:	68a3      	ldr	r3, [r4, #8]
 8003d78:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8003d7c:	d1fb      	bne.n	8003d76 <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d7e:	f7fe fa47 	bl	8002210 <HAL_GetTick>
 8003d82:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8003d86:	f7fe fa43 	bl	8002210 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d8e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003d92:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 8003d96:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d98:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d9a:	1c71      	adds	r1, r6, #1
 8003d9c:	682c      	ldr	r4, [r5, #0]
 8003d9e:	d11f      	bne.n	8003de0 <SPI_EndRxTxTransaction+0xac>
 8003da0:	68a3      	ldr	r3, [r4, #8]
 8003da2:	061a      	lsls	r2, r3, #24
 8003da4:	d4fc      	bmi.n	8003da0 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003da6:	463a      	mov	r2, r7
 8003da8:	4631      	mov	r1, r6
 8003daa:	4628      	mov	r0, r5
 8003dac:	f7ff ff4e 	bl	8003c4c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003db0:	bb48      	cbnz	r0, 8003e06 <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8003db2:	b005      	add	sp, #20
 8003db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8003db8:	68a3      	ldr	r3, [r4, #8]
 8003dba:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8003dbe:	d0de      	beq.n	8003d7e <SPI_EndRxTxTransaction+0x4a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dc0:	f7fe fa26 	bl	8002210 <HAL_GetTick>
 8003dc4:	eba0 000b 	sub.w	r0, r0, fp
 8003dc8:	4550      	cmp	r0, sl
 8003dca:	d222      	bcs.n	8003e12 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8003dcc:	9a02      	ldr	r2, [sp, #8]
      count--;
 8003dce:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8003dd0:	2a00      	cmp	r2, #0
      count--;
 8003dd2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8003dd6:	bf08      	it	eq
 8003dd8:	f04f 0a00 	moveq.w	sl, #0
      count--;
 8003ddc:	9302      	str	r3, [sp, #8]
 8003dde:	e7c7      	b.n	8003d70 <SPI_EndRxTxTransaction+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003de0:	68a3      	ldr	r3, [r4, #8]
 8003de2:	061b      	lsls	r3, r3, #24
 8003de4:	d5df      	bpl.n	8003da6 <SPI_EndRxTxTransaction+0x72>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003de6:	f7fe fa13 	bl	8002210 <HAL_GetTick>
 8003dea:	eba0 0008 	sub.w	r0, r0, r8
 8003dee:	4548      	cmp	r0, r9
 8003df0:	d20f      	bcs.n	8003e12 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8003df2:	9a03      	ldr	r2, [sp, #12]
      count--;
 8003df4:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8003df6:	2a00      	cmp	r2, #0
      count--;
 8003df8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8003dfc:	bf08      	it	eq
 8003dfe:	f04f 0900 	moveq.w	r9, #0
      count--;
 8003e02:	9303      	str	r3, [sp, #12]
 8003e04:	e7c9      	b.n	8003d9a <SPI_EndRxTxTransaction+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e06:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003e08:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8003e0c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e0e:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e10:	e7cf      	b.n	8003db2 <SPI_EndRxTxTransaction+0x7e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e12:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e16:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e18:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e20:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e22:	d019      	beq.n	8003e58 <SPI_EndRxTxTransaction+0x124>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e24:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003e26:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003e2a:	d107      	bne.n	8003e3c <SPI_EndRxTxTransaction+0x108>
          SPI_RESET_CRC(hspi);
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e3a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e42:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8003e44:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e46:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8003e4a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8003e4c:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e50:	662b      	str	r3, [r5, #96]	; 0x60
}
 8003e52:	b005      	add	sp, #20
 8003e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e58:	68aa      	ldr	r2, [r5, #8]
 8003e5a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003e5e:	d002      	beq.n	8003e66 <SPI_EndRxTxTransaction+0x132>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e60:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003e64:	d1de      	bne.n	8003e24 <SPI_EndRxTxTransaction+0xf0>
          __HAL_SPI_DISABLE(hspi);
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e7d9      	b.n	8003e24 <SPI_EndRxTxTransaction+0xf0>
 8003e70:	20000014 	.word	0x20000014

08003e74 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d074      	beq.n	8003f62 <HAL_SPI_Init+0xee>
{
 8003e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7c:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e7e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d055      	beq.n	8003f30 <HAL_SPI_Init+0xbc>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e84:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e86:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e8a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e8e:	2200      	movs	r2, #0
 8003e90:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d056      	beq.n	8003f48 <HAL_SPI_Init+0xd4>
  __HAL_SPI_DISABLE(hspi);
 8003e9a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e9c:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003ea4:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ea6:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8003eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eae:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003eb0:	d944      	bls.n	8003f3c <HAL_SPI_Init+0xc8>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003eb2:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 8003eb6:	d156      	bne.n	8003f66 <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eb8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003eba:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ebe:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8003ec2:	6862      	ldr	r2, [r4, #4]
 8003ec4:	68a3      	ldr	r3, [r4, #8]
 8003ec6:	69a6      	ldr	r6, [r4, #24]
 8003ec8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ecc:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	6923      	ldr	r3, [r4, #16]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	6962      	ldr	r2, [r4, #20]
 8003edc:	f002 0201 	and.w	r2, r2, #1
 8003ee0:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ee4:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ef0:	69e3      	ldr	r3, [r4, #28]
 8003ef2:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8003ef6:	6a23      	ldr	r3, [r4, #32]
 8003ef8:	f003 0780 	and.w	r7, r3, #128	; 0x80
 8003efc:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8003f00:	4313      	orrs	r3, r2
 8003f02:	ea43 0308 	orr.w	r3, r3, r8
 8003f06:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f08:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f0a:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f0c:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f10:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f12:	f000 0010 	and.w	r0, r0, #16
 8003f16:	ea4e 0306 	orr.w	r3, lr, r6
 8003f1a:	4303      	orrs	r3, r0
 8003f1c:	ea43 030c 	orr.w	r3, r3, ip
 8003f20:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f22:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003f24:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f26:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f28:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f30:	6863      	ldr	r3, [r4, #4]
 8003f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f36:	d0a8      	beq.n	8003e8a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f38:	61e0      	str	r0, [r4, #28]
 8003f3a:	e7a6      	b.n	8003e8a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f3c:	d00b      	beq.n	8003f56 <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f3e:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f42:	2500      	movs	r5, #0
 8003f44:	62a5      	str	r5, [r4, #40]	; 0x28
 8003f46:	e7bc      	b.n	8003ec2 <HAL_SPI_Init+0x4e>
    HAL_SPI_MspInit(hspi);
 8003f48:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003f4a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003f4e:	f7fd fe9f 	bl	8001c90 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003f54:	e7a1      	b.n	8003e9a <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f56:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f58:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f5c:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8003f60:	e7af      	b.n	8003ec2 <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 8003f62:	2001      	movs	r0, #1
}
 8003f64:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f66:	f04f 0c00 	mov.w	ip, #0
 8003f6a:	e7ea      	b.n	8003f42 <HAL_SPI_Init+0xce>

08003f6c <HAL_SPI_Transmit>:
{
 8003f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f70:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003f72:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8003f76:	2801      	cmp	r0, #1
{
 8003f78:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8003f7a:	d07a      	beq.n	8004072 <HAL_SPI_Transmit+0x106>
 8003f7c:	461d      	mov	r5, r3
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003f84:	4689      	mov	r9, r1
 8003f86:	4690      	mov	r8, r2
 8003f88:	f7fe f942 	bl	8002210 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003f8c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003f90:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003f92:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003f94:	b2df      	uxtb	r7, r3
 8003f96:	d007      	beq.n	8003fa8 <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 8003f98:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4638      	mov	r0, r7
  __HAL_UNLOCK(hspi);
 8003f9e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003fa2:	b003      	add	sp, #12
 8003fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 8003fa8:	f1b9 0f00 	cmp.w	r9, #0
 8003fac:	d0f5      	beq.n	8003f9a <HAL_SPI_Transmit+0x2e>
 8003fae:	f1b8 0f00 	cmp.w	r8, #0
 8003fb2:	d0f2      	beq.n	8003f9a <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb4:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fb6:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fba:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fbc:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fbe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fc2:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->RxISR       = NULL;
 8003fc6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fca:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_DISABLE(hspi);
 8003fcc:	6822      	ldr	r2, [r4, #0]
  hspi->TxXferCount = Size;
 8003fce:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003fd2:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fd6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003fd8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003fdc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe0:	d070      	beq.n	80040c4 <HAL_SPI_Transmit+0x158>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fe2:	6813      	ldr	r3, [r2, #0]
 8003fe4:	0659      	lsls	r1, r3, #25
    __HAL_SPI_DISABLE(hspi);
 8003fe6:	4610      	mov	r0, r2
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fe8:	d403      	bmi.n	8003ff2 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8003fea:	6813      	ldr	r3, [r2, #0]
 8003fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ff2:	68e3      	ldr	r3, [r4, #12]
 8003ff4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ff8:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ffa:	d93f      	bls.n	800407c <HAL_SPI_Transmit+0x110>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80a4 	beq.w	800414a <HAL_SPI_Transmit+0x1de>
 8004002:	f1b8 0f01 	cmp.w	r8, #1
 8004006:	f000 80a0 	beq.w	800414a <HAL_SPI_Transmit+0x1de>
    while (hspi->TxXferCount > 0U)
 800400a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800400c:	b29b      	uxth	r3, r3
 800400e:	b1bb      	cbz	r3, 8004040 <HAL_SPI_Transmit+0xd4>
 8004010:	1c6b      	adds	r3, r5, #1
 8004012:	f040 808d 	bne.w	8004130 <HAL_SPI_Transmit+0x1c4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004016:	6893      	ldr	r3, [r2, #8]
 8004018:	0799      	lsls	r1, r3, #30
 800401a:	f140 80ae 	bpl.w	800417a <HAL_SPI_Transmit+0x20e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800401e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004020:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004024:	60d1      	str	r1, [r2, #12]
        hspi->TxXferCount--;
 8004026:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800402a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800402c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004030:	fa1f fc8c 	uxth.w	ip, ip
 8004034:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004038:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ea      	bne.n	8004016 <HAL_SPI_Transmit+0xaa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004040:	4632      	mov	r2, r6
 8004042:	4629      	mov	r1, r5
 8004044:	4620      	mov	r0, r4
 8004046:	f7ff fe75 	bl	8003d34 <SPI_EndRxTxTransaction>
 800404a:	b108      	cbz	r0, 8004050 <HAL_SPI_Transmit+0xe4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800404c:	2320      	movs	r3, #32
 800404e:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004050:	68a3      	ldr	r3, [r4, #8]
 8004052:	b933      	cbnz	r3, 8004062 <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004054:	6822      	ldr	r2, [r4, #0]
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	68d3      	ldr	r3, [r2, #12]
 800405a:	9301      	str	r3, [sp, #4]
 800405c:	6893      	ldr	r3, [r2, #8]
 800405e:	9301      	str	r3, [sp, #4]
 8004060:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004062:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004064:	2b00      	cmp	r3, #0
 8004066:	d198      	bne.n	8003f9a <HAL_SPI_Transmit+0x2e>
    hspi->State = HAL_SPI_STATE_READY;
 8004068:	2201      	movs	r2, #1
 800406a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 800406e:	461f      	mov	r7, r3
 8004070:	e793      	b.n	8003f9a <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8004072:	2702      	movs	r7, #2
}
 8004074:	4638      	mov	r0, r7
 8004076:	b003      	add	sp, #12
 8004078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800407c:	2b00      	cmp	r3, #0
 800407e:	d06e      	beq.n	800415e <HAL_SPI_Transmit+0x1f2>
 8004080:	f1b8 0f01 	cmp.w	r8, #1
 8004084:	d06b      	beq.n	800415e <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 8004086:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0d8      	beq.n	8004040 <HAL_SPI_Transmit+0xd4>
 800408e:	1c68      	adds	r0, r5, #1
 8004090:	d011      	beq.n	80040b6 <HAL_SPI_Transmit+0x14a>
 8004092:	e02c      	b.n	80040ee <HAL_SPI_Transmit+0x182>
        if (hspi->TxXferCount > 1U)
 8004094:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d977      	bls.n	800418c <HAL_SPI_Transmit+0x220>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800409e:	f831 3b02 	ldrh.w	r3, [r1], #2
 80040a2:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 80040a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a6:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80040a8:	3b02      	subs	r3, #2
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80040ae:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80040b0:	b289      	uxth	r1, r1
 80040b2:	2900      	cmp	r1, #0
 80040b4:	d0c4      	beq.n	8004040 <HAL_SPI_Transmit+0xd4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040b6:	6822      	ldr	r2, [r4, #0]
 80040b8:	6893      	ldr	r3, [r2, #8]
 80040ba:	0799      	lsls	r1, r3, #30
 80040bc:	d4ea      	bmi.n	8004094 <HAL_SPI_Transmit+0x128>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040be:	f7fe f8a7 	bl	8002210 <HAL_GetTick>
 80040c2:	e7f4      	b.n	80040ae <HAL_SPI_Transmit+0x142>
    __HAL_SPI_DISABLE(hspi);
 80040c4:	6813      	ldr	r3, [r2, #0]
 80040c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ca:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80040cc:	6813      	ldr	r3, [r2, #0]
 80040ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	e785      	b.n	8003fe2 <HAL_SPI_Transmit+0x76>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d6:	f832 1b02 	ldrh.w	r1, [r2], #2
 80040da:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 80040dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040de:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80040e0:	3b02      	subs	r3, #2
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80040e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0a8      	beq.n	8004040 <HAL_SPI_Transmit+0xd4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	0792      	lsls	r2, r2, #30
 80040f4:	d560      	bpl.n	80041b8 <HAL_SPI_Transmit+0x24c>
        if (hspi->TxXferCount > 1U)
 80040f6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80040f8:	b292      	uxth	r2, r2
 80040fa:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 80040fe:	d8ea      	bhi.n	80040d6 <HAL_SPI_Transmit+0x16a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004100:	7812      	ldrb	r2, [r2, #0]
 8004102:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8004104:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8004106:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8004108:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800410a:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800410c:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800410e:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8004110:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004112:	e7e8      	b.n	80040e6 <HAL_SPI_Transmit+0x17a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004114:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004116:	f832 3b02 	ldrh.w	r3, [r2], #2
 800411a:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 800411c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800411e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004120:	3b01      	subs	r3, #1
 8004122:	b29b      	uxth	r3, r3
 8004124:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004126:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d088      	beq.n	8004040 <HAL_SPI_Transmit+0xd4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800412e:	6820      	ldr	r0, [r4, #0]
 8004130:	6883      	ldr	r3, [r0, #8]
 8004132:	079b      	lsls	r3, r3, #30
 8004134:	d4ee      	bmi.n	8004114 <HAL_SPI_Transmit+0x1a8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004136:	f7fe f86b 	bl	8002210 <HAL_GetTick>
 800413a:	1b80      	subs	r0, r0, r6
 800413c:	42a8      	cmp	r0, r5
 800413e:	d3f2      	bcc.n	8004126 <HAL_SPI_Transmit+0x1ba>
          hspi->State = HAL_SPI_STATE_READY;
 8004140:	2301      	movs	r3, #1
 8004142:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8004146:	2703      	movs	r7, #3
          goto error;
 8004148:	e727      	b.n	8003f9a <HAL_SPI_Transmit+0x2e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800414a:	4649      	mov	r1, r9
 800414c:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004150:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8004152:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004154:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004156:	3b01      	subs	r3, #1
 8004158:	b29b      	uxth	r3, r3
 800415a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800415c:	e755      	b.n	800400a <HAL_SPI_Transmit+0x9e>
      if (hspi->TxXferCount > 1U)
 800415e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d91d      	bls.n	80041a2 <HAL_SPI_Transmit+0x236>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004166:	4649      	mov	r1, r9
 8004168:	f831 3b02 	ldrh.w	r3, [r1], #2
 800416c:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 800416e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004170:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004172:	3b02      	subs	r3, #2
 8004174:	b29b      	uxth	r3, r3
 8004176:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004178:	e785      	b.n	8004086 <HAL_SPI_Transmit+0x11a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800417a:	f7fe f849 	bl	8002210 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800417e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	f43f af5c 	beq.w	8004040 <HAL_SPI_Transmit+0xd4>
 8004188:	6822      	ldr	r2, [r4, #0]
 800418a:	e744      	b.n	8004016 <HAL_SPI_Transmit+0xaa>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800418c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8004192:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8004194:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8004196:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8004198:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800419a:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800419c:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800419e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80041a0:	e785      	b.n	80040ae <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a2:	f899 3000 	ldrb.w	r3, [r9]
 80041a6:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr ++;
 80041a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041aa:	3301      	adds	r3, #1
 80041ac:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80041ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80041b6:	e766      	b.n	8004086 <HAL_SPI_Transmit+0x11a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041b8:	f7fe f82a 	bl	8002210 <HAL_GetTick>
 80041bc:	1b80      	subs	r0, r0, r6
 80041be:	42a8      	cmp	r0, r5
 80041c0:	d391      	bcc.n	80040e6 <HAL_SPI_Transmit+0x17a>
 80041c2:	e7bd      	b.n	8004140 <HAL_SPI_Transmit+0x1d4>

080041c4 <HAL_SPI_TransmitReceive>:
{
 80041c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041c8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80041ca:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 80041ce:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 80041d0:	2801      	cmp	r0, #1
 80041d2:	f000 80f2 	beq.w	80043ba <HAL_SPI_TransmitReceive+0x1f6>
 80041d6:	461f      	mov	r7, r3
 80041d8:	2301      	movs	r3, #1
 80041da:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80041de:	4689      	mov	r9, r1
 80041e0:	4690      	mov	r8, r2
 80041e2:	f7fe f815 	bl	8002210 <HAL_GetTick>
 80041e6:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 80041e8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 80041ec:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041ee:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 80041f0:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041f2:	d00d      	beq.n	8004210 <HAL_SPI_TransmitReceive+0x4c>
 80041f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f8:	d005      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x42>
    errorcode = HAL_BUSY;
 80041fa:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80041fc:	2300      	movs	r3, #0
 80041fe:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004206:	68a2      	ldr	r2, [r4, #8]
 8004208:	2a00      	cmp	r2, #0
 800420a:	d1f6      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x36>
 800420c:	2904      	cmp	r1, #4
 800420e:	d1f4      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004210:	f1b9 0f00 	cmp.w	r9, #0
 8004214:	f000 80cf 	beq.w	80043b6 <HAL_SPI_TransmitReceive+0x1f2>
 8004218:	f1b8 0f00 	cmp.w	r8, #0
 800421c:	f000 80cb 	beq.w	80043b6 <HAL_SPI_TransmitReceive+0x1f2>
 8004220:	2f00      	cmp	r7, #0
 8004222:	f000 80c8 	beq.w	80043b6 <HAL_SPI_TransmitReceive+0x1f2>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004226:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800422a:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800422c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004230:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004232:	bf1c      	itt	ne
 8004234:	2205      	movne	r2, #5
 8004236:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800423a:	2200      	movs	r2, #0
 800423c:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800423e:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004242:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8004244:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004248:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 800424c:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800424e:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 8004250:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004254:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004258:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800425a:	d856      	bhi.n	800430a <HAL_SPI_TransmitReceive+0x146>
 800425c:	2f01      	cmp	r7, #1
 800425e:	f000 812a 	beq.w	80044b6 <HAL_SPI_TransmitReceive+0x2f2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004262:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8004266:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004268:	6811      	ldr	r1, [r2, #0]
 800426a:	0649      	lsls	r1, r1, #25
 800426c:	f100 80e9 	bmi.w	8004442 <HAL_SPI_TransmitReceive+0x27e>
    __HAL_SPI_ENABLE(hspi);
 8004270:	6811      	ldr	r1, [r2, #0]
 8004272:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004276:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80e5 	beq.w	8004448 <HAL_SPI_TransmitReceive+0x284>
 800427e:	2f01      	cmp	r7, #1
 8004280:	f000 80e2 	beq.w	8004448 <HAL_SPI_TransmitReceive+0x284>
        txallowed = 1U;
 8004284:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004286:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004288:	b29b      	uxth	r3, r3
 800428a:	b92b      	cbnz	r3, 8004298 <HAL_SPI_TransmitReceive+0xd4>
 800428c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8084 	beq.w	80043a0 <HAL_SPI_TransmitReceive+0x1dc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	6893      	ldr	r3, [r2, #8]
 800429c:	0799      	lsls	r1, r3, #30
 800429e:	d505      	bpl.n	80042ac <HAL_SPI_TransmitReceive+0xe8>
 80042a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	b113      	cbz	r3, 80042ac <HAL_SPI_TransmitReceive+0xe8>
 80042a6:	2f00      	cmp	r7, #0
 80042a8:	f040 80ea 	bne.w	8004480 <HAL_SPI_TransmitReceive+0x2bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042ac:	6893      	ldr	r3, [r2, #8]
 80042ae:	f013 0301 	ands.w	r3, r3, #1
 80042b2:	d01e      	beq.n	80042f2 <HAL_SPI_TransmitReceive+0x12e>
 80042b4:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80042b8:	b289      	uxth	r1, r1
 80042ba:	b1d1      	cbz	r1, 80042f2 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 80042bc:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80042c0:	b289      	uxth	r1, r1
 80042c2:	2901      	cmp	r1, #1
 80042c4:	f240 80ce 	bls.w	8004464 <HAL_SPI_TransmitReceive+0x2a0>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042c8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80042ca:	68d0      	ldr	r0, [r2, #12]
 80042cc:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80042d0:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80042d2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80042d6:	3902      	subs	r1, #2
 80042d8:	b289      	uxth	r1, r1
 80042da:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80042de:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80042e2:	b289      	uxth	r1, r1
 80042e4:	2901      	cmp	r1, #1
        txallowed = 1U;
 80042e6:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 80042e8:	d803      	bhi.n	80042f2 <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042ea:	6853      	ldr	r3, [r2, #4]
 80042ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042f0:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042f2:	f7fd ff8d 	bl	8002210 <HAL_GetTick>
 80042f6:	1b43      	subs	r3, r0, r5
 80042f8:	42b3      	cmp	r3, r6
 80042fa:	d3c4      	bcc.n	8004286 <HAL_SPI_TransmitReceive+0xc2>
 80042fc:	1c73      	adds	r3, r6, #1
 80042fe:	d0c2      	beq.n	8004286 <HAL_SPI_TransmitReceive+0xc2>
        hspi->State = HAL_SPI_STATE_READY;
 8004300:	2301      	movs	r3, #1
 8004302:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        errorcode = HAL_TIMEOUT;
 8004306:	2003      	movs	r0, #3
        goto error;
 8004308:	e778      	b.n	80041fc <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800430a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800430e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004310:	6811      	ldr	r1, [r2, #0]
 8004312:	0648      	lsls	r0, r1, #25
 8004314:	d403      	bmi.n	800431e <HAL_SPI_TransmitReceive+0x15a>
    __HAL_SPI_ENABLE(hspi);
 8004316:	6811      	ldr	r1, [r2, #0]
 8004318:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800431c:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800431e:	2b00      	cmp	r3, #0
 8004320:	d169      	bne.n	80043f6 <HAL_SPI_TransmitReceive+0x232>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004322:	4649      	mov	r1, r9
 8004324:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004328:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800432a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800432c:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800432e:	3b01      	subs	r3, #1
 8004330:	b29b      	uxth	r3, r3
 8004332:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004334:	1c72      	adds	r2, r6, #1
{
 8004336:	f04f 0701 	mov.w	r7, #1
 800433a:	d028      	beq.n	800438e <HAL_SPI_TransmitReceive+0x1ca>
 800433c:	e052      	b.n	80043e4 <HAL_SPI_TransmitReceive+0x220>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	6893      	ldr	r3, [r2, #8]
 8004342:	079b      	lsls	r3, r3, #30
 8004344:	d50d      	bpl.n	8004362 <HAL_SPI_TransmitReceive+0x19e>
 8004346:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004348:	b29b      	uxth	r3, r3
 800434a:	b153      	cbz	r3, 8004362 <HAL_SPI_TransmitReceive+0x19e>
 800434c:	b14f      	cbz	r7, 8004362 <HAL_SPI_TransmitReceive+0x19e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800434e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004350:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004354:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8004356:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004358:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800435a:	3b01      	subs	r3, #1
 800435c:	b29b      	uxth	r3, r3
        txallowed = 0U;
 800435e:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8004360:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004362:	6893      	ldr	r3, [r2, #8]
 8004364:	f013 0301 	ands.w	r3, r3, #1
 8004368:	d00f      	beq.n	800438a <HAL_SPI_TransmitReceive+0x1c6>
 800436a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800436e:	b289      	uxth	r1, r1
 8004370:	b159      	cbz	r1, 800438a <HAL_SPI_TransmitReceive+0x1c6>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004372:	68d1      	ldr	r1, [r2, #12]
 8004374:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004376:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 800437a:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 800437c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004380:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004382:	3b01      	subs	r3, #1
 8004384:	b29b      	uxth	r3, r3
 8004386:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800438a:	f7fd ff41 	bl	8002210 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800438e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1d3      	bne.n	800433e <HAL_SPI_TransmitReceive+0x17a>
 8004396:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1ce      	bne.n	800433e <HAL_SPI_TransmitReceive+0x17a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043a0:	462a      	mov	r2, r5
 80043a2:	4631      	mov	r1, r6
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7ff fcc5 	bl	8003d34 <SPI_EndRxTxTransaction>
 80043aa:	b110      	cbz	r0, 80043b2 <HAL_SPI_TransmitReceive+0x1ee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043ac:	2320      	movs	r3, #32
 80043ae:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80043b0:	2001      	movs	r0, #1
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043b4:	b1db      	cbz	r3, 80043ee <HAL_SPI_TransmitReceive+0x22a>
    errorcode = HAL_ERROR;
 80043b6:	2001      	movs	r0, #1
 80043b8:	e720      	b.n	80041fc <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80043ba:	2002      	movs	r0, #2
}
 80043bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043c0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0ea      	beq.n	80043a0 <HAL_SPI_TransmitReceive+0x1dc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043ca:	6822      	ldr	r2, [r4, #0]
 80043cc:	6893      	ldr	r3, [r2, #8]
 80043ce:	0798      	lsls	r0, r3, #30
 80043d0:	d426      	bmi.n	8004420 <HAL_SPI_TransmitReceive+0x25c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043d2:	6893      	ldr	r3, [r2, #8]
 80043d4:	f013 0301 	ands.w	r3, r3, #1
 80043d8:	d110      	bne.n	80043fc <HAL_SPI_TransmitReceive+0x238>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043da:	f7fd ff19 	bl	8002210 <HAL_GetTick>
 80043de:	1b40      	subs	r0, r0, r5
 80043e0:	42b0      	cmp	r0, r6
 80043e2:	d28d      	bcs.n	8004300 <HAL_SPI_TransmitReceive+0x13c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ee      	bne.n	80043ca <HAL_SPI_TransmitReceive+0x206>
 80043ec:	e7e8      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x1fc>
    hspi->State = HAL_SPI_STATE_READY;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 80043f4:	e702      	b.n	80041fc <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f6:	2f01      	cmp	r7, #1
 80043f8:	d19c      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x170>
 80043fa:	e792      	b.n	8004322 <HAL_SPI_TransmitReceive+0x15e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043fc:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8004400:	b289      	uxth	r1, r1
 8004402:	2900      	cmp	r1, #0
 8004404:	d0e9      	beq.n	80043da <HAL_SPI_TransmitReceive+0x216>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004406:	68d1      	ldr	r1, [r2, #12]
 8004408:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800440a:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 800440e:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8004410:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004414:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004416:	3b01      	subs	r3, #1
 8004418:	b29b      	uxth	r3, r3
 800441a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800441e:	e7dc      	b.n	80043da <HAL_SPI_TransmitReceive+0x216>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004420:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0d4      	beq.n	80043d2 <HAL_SPI_TransmitReceive+0x20e>
 8004428:	2f00      	cmp	r7, #0
 800442a:	d0d2      	beq.n	80043d2 <HAL_SPI_TransmitReceive+0x20e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800442c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800442e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004432:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004434:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004436:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004438:	3b01      	subs	r3, #1
 800443a:	b29b      	uxth	r3, r3
        txallowed = 0U;
 800443c:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 800443e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8004440:	e7c7      	b.n	80043d2 <HAL_SPI_TransmitReceive+0x20e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004442:	2b00      	cmp	r3, #0
 8004444:	f47f af1e 	bne.w	8004284 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 8004448:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b01      	cmp	r3, #1
 800444e:	d93a      	bls.n	80044c6 <HAL_SPI_TransmitReceive+0x302>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004450:	4649      	mov	r1, r9
 8004452:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004456:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8004458:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800445a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800445c:	3b02      	subs	r3, #2
 800445e:	b29b      	uxth	r3, r3
 8004460:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004462:	e70f      	b.n	8004284 <HAL_SPI_TransmitReceive+0xc0>
        txallowed = 1U;
 8004464:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004468:	7b12      	ldrb	r2, [r2, #12]
 800446a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800446c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800446e:	3301      	adds	r3, #1
 8004470:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8004472:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004476:	3b01      	subs	r3, #1
 8004478:	b29b      	uxth	r3, r3
 800447a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800447e:	e738      	b.n	80042f2 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 8004480:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004486:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8004488:	d909      	bls.n	800449e <HAL_SPI_TransmitReceive+0x2da>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800448a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800448e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004490:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004492:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004494:	3b02      	subs	r3, #2
 8004496:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8004498:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 800449a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800449c:	e706      	b.n	80042ac <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80044a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80044a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80044a6:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80044a8:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80044aa:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80044ac:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80044ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044b0:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 80044b2:	2700      	movs	r7, #0
 80044b4:	e6fa      	b.n	80042ac <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044b6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80044ba:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044bc:	6811      	ldr	r1, [r2, #0]
 80044be:	0649      	lsls	r1, r1, #25
 80044c0:	f57f aed6 	bpl.w	8004270 <HAL_SPI_TransmitReceive+0xac>
 80044c4:	e7c0      	b.n	8004448 <HAL_SPI_TransmitReceive+0x284>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044c6:	f899 3000 	ldrb.w	r3, [r9]
 80044ca:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80044cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80044ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80044d0:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80044d2:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80044d4:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80044d6:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80044d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80044da:	e6d3      	b.n	8004284 <HAL_SPI_TransmitReceive+0xc0>

080044dc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044dc:	2800      	cmp	r0, #0
 80044de:	f000 8085 	beq.w	80045ec <HAL_TIM_Base_Init+0x110>
{
 80044e2:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044e8:	4604      	mov	r4, r0
 80044ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d071      	beq.n	80045d6 <HAL_TIM_Base_Init+0xfa>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f2:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f4:	493e      	ldr	r1, [pc, #248]	; (80045f0 <HAL_TIM_Base_Init+0x114>)
  htim->State = HAL_TIM_STATE_BUSY;
 80044f6:	2302      	movs	r3, #2
 80044f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044fc:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80044fe:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004500:	d055      	beq.n	80045ae <HAL_TIM_Base_Init+0xd2>
 8004502:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004506:	d025      	beq.n	8004554 <HAL_TIM_Base_Init+0x78>
 8004508:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800450c:	428a      	cmp	r2, r1
 800450e:	d021      	beq.n	8004554 <HAL_TIM_Base_Init+0x78>
 8004510:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004514:	428a      	cmp	r2, r1
 8004516:	d01d      	beq.n	8004554 <HAL_TIM_Base_Init+0x78>
 8004518:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800451c:	428a      	cmp	r2, r1
 800451e:	d019      	beq.n	8004554 <HAL_TIM_Base_Init+0x78>
 8004520:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8004524:	428a      	cmp	r2, r1
 8004526:	d042      	beq.n	80045ae <HAL_TIM_Base_Init+0xd2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004528:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800452c:	428a      	cmp	r2, r1
 800452e:	d057      	beq.n	80045e0 <HAL_TIM_Base_Init+0x104>
 8004530:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004534:	428a      	cmp	r2, r1
 8004536:	d053      	beq.n	80045e0 <HAL_TIM_Base_Init+0x104>
 8004538:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800453c:	428a      	cmp	r2, r1
 800453e:	d04f      	beq.n	80045e0 <HAL_TIM_Base_Init+0x104>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004540:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004542:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004548:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800454a:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800454c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800454e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004550:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004552:	e010      	b.n	8004576 <HAL_TIM_Base_Init+0x9a>
    tmpcr1 |= Structure->CounterMode;
 8004554:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004556:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800455c:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800455e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004562:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004564:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800456a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800456c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800456e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004570:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004572:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004574:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004576:	2301      	movs	r3, #1
 8004578:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800457a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004582:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004586:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800458a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800458e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004596:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800459a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800459e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80045a2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80045a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80045aa:	2000      	movs	r0, #0
}
 80045ac:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80045ae:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80045b6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80045b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045bc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045be:	69a1      	ldr	r1, [r4, #24]
 80045c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80045c6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c8:	68e3      	ldr	r3, [r4, #12]
 80045ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80045cc:	6863      	ldr	r3, [r4, #4]
 80045ce:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80045d0:	6963      	ldr	r3, [r4, #20]
 80045d2:	6313      	str	r3, [r2, #48]	; 0x30
 80045d4:	e7cf      	b.n	8004576 <HAL_TIM_Base_Init+0x9a>
    htim->Lock = HAL_UNLOCKED;
 80045d6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80045da:	f7fd fb95 	bl	8001d08 <HAL_TIM_Base_MspInit>
 80045de:	e788      	b.n	80044f2 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045e0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80045e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045e8:	4303      	orrs	r3, r0
 80045ea:	e7e9      	b.n	80045c0 <HAL_TIM_Base_Init+0xe4>
    return HAL_ERROR;
 80045ec:	2001      	movs	r0, #1
}
 80045ee:	4770      	bx	lr
 80045f0:	40012c00 	.word	0x40012c00

080045f4 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80045f4:	6803      	ldr	r3, [r0, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80045fe:	6a1a      	ldr	r2, [r3, #32]
 8004600:	f241 1111 	movw	r1, #4369	; 0x1111
 8004604:	420a      	tst	r2, r1
 8004606:	d108      	bne.n	800461a <HAL_TIM_Base_Stop_IT+0x26>
 8004608:	6a19      	ldr	r1, [r3, #32]
 800460a:	f240 4244 	movw	r2, #1092	; 0x444
 800460e:	4211      	tst	r1, r2
 8004610:	d103      	bne.n	800461a <HAL_TIM_Base_Stop_IT+0x26>
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800461a:	2301      	movs	r3, #1
 800461c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004620:	2000      	movs	r0, #0
 8004622:	4770      	bx	lr

08004624 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004624:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d073      	beq.n	8004714 <HAL_TIM_ConfigClockSource+0xf0>
 800462c:	4602      	mov	r2, r0
{
 800462e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8004632:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004638:	2001      	movs	r0, #1
 800463a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800463e:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004640:	4b4f      	ldr	r3, [pc, #316]	; (8004780 <HAL_TIM_ConfigClockSource+0x15c>)
 8004642:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8004644:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8004646:	680b      	ldr	r3, [r1, #0]
 8004648:	2b60      	cmp	r3, #96	; 0x60
 800464a:	d065      	beq.n	8004718 <HAL_TIM_ConfigClockSource+0xf4>
 800464c:	d824      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x74>
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d07c      	beq.n	800474c <HAL_TIM_ConfigClockSource+0x128>
 8004652:	d94b      	bls.n	80046ec <HAL_TIM_ConfigClockSource+0xc8>
 8004654:	2b50      	cmp	r3, #80	; 0x50
 8004656:	d117      	bne.n	8004688 <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 8004658:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800465a:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800465c:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800465e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004662:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004664:	6a23      	ldr	r3, [r4, #32]
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800466c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800466e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004672:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004676:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004678:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800467a:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800467c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004680:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8004684:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004686:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004688:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800468a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800468c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004690:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004694:	bc30      	pop	{r4, r5}
 8004696:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469c:	d038      	beq.n	8004710 <HAL_TIM_ConfigClockSource+0xec>
 800469e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a2:	d110      	bne.n	80046c6 <HAL_TIM_ConfigClockSource+0xa2>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046a4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80046a8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046aa:	432b      	orrs	r3, r5
 80046ac:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ae:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80046b6:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b8:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046ba:	68a3      	ldr	r3, [r4, #8]
 80046bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 80046c0:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046c2:	60a3      	str	r3, [r4, #8]
      break;
 80046c4:	e7e0      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 80046c6:	2b70      	cmp	r3, #112	; 0x70
 80046c8:	d1de      	bne.n	8004688 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046ca:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80046ce:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046d0:	432b      	orrs	r3, r5
 80046d2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d4:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046d8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80046dc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80046de:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80046e0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 80046e8:	60a3      	str	r3, [r4, #8]
      break;
 80046ea:	e7cd      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d002      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0xd2>
 80046f0:	d90a      	bls.n	8004708 <HAL_TIM_ConfigClockSource+0xe4>
 80046f2:	2b30      	cmp	r3, #48	; 0x30
 80046f4:	d1c8      	bne.n	8004688 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 80046f6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80046f8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046fc:	430b      	orrs	r3, r1
 80046fe:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8004702:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004704:	60a3      	str	r3, [r4, #8]
}
 8004706:	e7bf      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8004708:	f033 0110 	bics.w	r1, r3, #16
 800470c:	d1bc      	bne.n	8004688 <HAL_TIM_ConfigClockSource+0x64>
 800470e:	e7f2      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0xd2>
  HAL_StatusTypeDef status = HAL_OK;
 8004710:	2000      	movs	r0, #0
 8004712:	e7b9      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8004714:	2002      	movs	r0, #2
}
 8004716:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8004718:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800471a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800471c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800471e:	6a21      	ldr	r1, [r4, #32]
 8004720:	f021 0110 	bic.w	r1, r1, #16
 8004724:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004726:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004728:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800472c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8004730:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004734:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004738:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800473a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800473c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004742:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8004746:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004748:	60a3      	str	r3, [r4, #8]
}
 800474a:	e79d      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 800474c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800474e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004750:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004752:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004756:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004758:	6a23      	ldr	r3, [r4, #32]
 800475a:	f023 0301 	bic.w	r3, r3, #1
 800475e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004760:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004766:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800476a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800476c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800476e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004774:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8004778:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 800477a:	60a3      	str	r3, [r4, #8]
}
 800477c:	e784      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x64>
 800477e:	bf00      	nop
 8004780:	fffe0088 	.word	0xfffe0088

08004784 <HAL_TIM_PeriodElapsedCallback>:
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop

08004788 <HAL_TIM_OC_DelayElapsedCallback>:
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop

0800478c <HAL_TIM_IC_CaptureCallback>:
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop

08004790 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop

08004794 <HAL_TIM_TriggerCallback>:
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop

08004798 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8004798:	6803      	ldr	r3, [r0, #0]
{
 800479a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800479c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800479e:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047a0:	07a1      	lsls	r1, r4, #30
{
 80047a2:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047a4:	d501      	bpl.n	80047aa <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047a6:	07b2      	lsls	r2, r6, #30
 80047a8:	d454      	bmi.n	8004854 <HAL_TIM_IRQHandler+0xbc>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047aa:	0762      	lsls	r2, r4, #29
 80047ac:	d501      	bpl.n	80047b2 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047ae:	0773      	lsls	r3, r6, #29
 80047b0:	d43d      	bmi.n	800482e <HAL_TIM_IRQHandler+0x96>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047b2:	0720      	lsls	r0, r4, #28
 80047b4:	d501      	bpl.n	80047ba <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047b6:	0731      	lsls	r1, r6, #28
 80047b8:	d427      	bmi.n	800480a <HAL_TIM_IRQHandler+0x72>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047ba:	06e3      	lsls	r3, r4, #27
 80047bc:	d501      	bpl.n	80047c2 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047be:	06f0      	lsls	r0, r6, #27
 80047c0:	d410      	bmi.n	80047e4 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047c2:	07e1      	lsls	r1, r4, #31
 80047c4:	d501      	bpl.n	80047ca <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047c6:	07f2      	lsls	r2, r6, #31
 80047c8:	d462      	bmi.n	8004890 <HAL_TIM_IRQHandler+0xf8>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047ca:	0623      	lsls	r3, r4, #24
 80047cc:	d552      	bpl.n	8004874 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047ce:	0630      	lsls	r0, r6, #24
 80047d0:	d466      	bmi.n	80048a0 <HAL_TIM_IRQHandler+0x108>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047d2:	0660      	lsls	r0, r4, #25
 80047d4:	d501      	bpl.n	80047da <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047d6:	0671      	lsls	r1, r6, #25
 80047d8:	d473      	bmi.n	80048c2 <HAL_TIM_IRQHandler+0x12a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047da:	06a2      	lsls	r2, r4, #26
 80047dc:	d501      	bpl.n	80047e2 <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047de:	06b3      	lsls	r3, r6, #26
 80047e0:	d44d      	bmi.n	800487e <HAL_TIM_IRQHandler+0xe6>
}
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	f06f 0210 	mvn.w	r2, #16
 80047ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ec:	2208      	movs	r2, #8
 80047ee:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80047f6:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047f8:	d174      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fa:	f7ff ffc5 	bl	8004788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fe:	4628      	mov	r0, r5
 8004800:	f7ff ffc6 	bl	8004790 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004804:	2300      	movs	r3, #0
 8004806:	772b      	strb	r3, [r5, #28]
 8004808:	e7db      	b.n	80047c2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800480a:	682b      	ldr	r3, [r5, #0]
 800480c:	f06f 0208 	mvn.w	r2, #8
 8004810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004812:	2204      	movs	r2, #4
 8004814:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	079a      	lsls	r2, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800481c:	d15f      	bne.n	80048de <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481e:	f7ff ffb3 	bl	8004788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004822:	4628      	mov	r0, r5
 8004824:	f7ff ffb4 	bl	8004790 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004828:	2300      	movs	r3, #0
 800482a:	772b      	strb	r3, [r5, #28]
 800482c:	e7c5      	b.n	80047ba <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800482e:	682b      	ldr	r3, [r5, #0]
 8004830:	f06f 0204 	mvn.w	r2, #4
 8004834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004836:	2202      	movs	r2, #2
 8004838:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004840:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004842:	d149      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004844:	f7ff ffa0 	bl	8004788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	4628      	mov	r0, r5
 800484a:	f7ff ffa1 	bl	8004790 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	2300      	movs	r3, #0
 8004850:	772b      	strb	r3, [r5, #28]
 8004852:	e7ae      	b.n	80047b2 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004854:	f06f 0202 	mvn.w	r2, #2
 8004858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800485a:	2201      	movs	r2, #1
 800485c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	0799      	lsls	r1, r3, #30
 8004862:	d136      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x13a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004864:	f7ff ff90 	bl	8004788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	4628      	mov	r0, r5
 800486a:	f7ff ff91 	bl	8004790 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	2300      	movs	r3, #0
 8004870:	772b      	strb	r3, [r5, #28]
 8004872:	e79a      	b.n	80047aa <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004874:	05e2      	lsls	r2, r4, #23
 8004876:	d5ac      	bpl.n	80047d2 <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004878:	0633      	lsls	r3, r6, #24
 800487a:	d41a      	bmi.n	80048b2 <HAL_TIM_IRQHandler+0x11a>
 800487c:	e7a9      	b.n	80047d2 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800487e:	682b      	ldr	r3, [r5, #0]
 8004880:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004884:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004886:	611a      	str	r2, [r3, #16]
}
 8004888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800488c:	f000 b878 	b.w	8004980 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	f06f 0201 	mvn.w	r2, #1
 8004896:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004898:	4628      	mov	r0, r5
 800489a:	f7ff ff73 	bl	8004784 <HAL_TIM_PeriodElapsedCallback>
 800489e:	e794      	b.n	80047ca <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80048a8:	4628      	mov	r0, r5
 80048aa:	f000 f86b 	bl	8004984 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80048ae:	05e1      	lsls	r1, r4, #23
 80048b0:	d58f      	bpl.n	80047d2 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048b2:	682b      	ldr	r3, [r5, #0]
 80048b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80048ba:	4628      	mov	r0, r5
 80048bc:	f000 f864 	bl	8004988 <HAL_TIMEx_Break2Callback>
 80048c0:	e787      	b.n	80047d2 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048c2:	682b      	ldr	r3, [r5, #0]
 80048c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80048ca:	4628      	mov	r0, r5
 80048cc:	f7ff ff62 	bl	8004794 <HAL_TIM_TriggerCallback>
 80048d0:	e783      	b.n	80047da <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	f7ff ff5b 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 80048d6:	e7ca      	b.n	800486e <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 80048d8:	f7ff ff58 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 80048dc:	e7b7      	b.n	800484e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	f7ff ff55 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 80048e2:	e7a1      	b.n	8004828 <HAL_TIM_IRQHandler+0x90>
        HAL_TIM_IC_CaptureCallback(htim);
 80048e4:	f7ff ff52 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 80048e8:	e78c      	b.n	8004804 <HAL_TIM_IRQHandler+0x6c>
 80048ea:	bf00      	nop

080048ec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d03e      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 80048f4:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048f6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048f8:	4d1f      	ldr	r5, [pc, #124]	; (8004978 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80048fa:	2302      	movs	r3, #2
 80048fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004900:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8004902:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004904:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004906:	d02a      	beq.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004908:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800490c:	42aa      	cmp	r2, r5
 800490e:	d026      	beq.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004910:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004916:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004918:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800491c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491e:	d010      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004920:	4b16      	ldr	r3, [pc, #88]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8004922:	429a      	cmp	r2, r3
 8004924:	d00d      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800492a:	429a      	cmp	r2, r3
 800492c:	d009      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800492e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004932:	429a      	cmp	r2, r3
 8004934:	d005      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004936:	42aa      	cmp	r2, r5
 8004938:	d003      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800493a:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 800493e:	429a      	cmp	r2, r3
 8004940:	d104      	bne.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004942:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004944:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004948:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800494a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800494c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800494e:	2201      	movs	r2, #1
 8004950:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004954:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004958:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800495a:	4618      	mov	r0, r3
}
 800495c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800495e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004960:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004964:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004966:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800496c:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800496e:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004970:	e7e7      	b.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  __HAL_LOCK(htim);
 8004972:	2002      	movs	r0, #2
}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40012c00 	.word	0x40012c00
 800497c:	40000400 	.word	0x40000400

08004980 <HAL_TIMEx_CommutCallback>:
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop

08004984 <HAL_TIMEx_BreakCallback>:
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop

08004988 <HAL_TIMEx_Break2Callback>:
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop

0800498c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004990:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004992:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8004994:	2820      	cmp	r0, #32
 8004996:	f040 8088 	bne.w	8004aaa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800499a:	4688      	mov	r8, r1
 800499c:	b109      	cbz	r1, 80049a2 <HAL_UART_Transmit+0x16>
 800499e:	4617      	mov	r7, r2
 80049a0:	b912      	cbnz	r2, 80049a8 <HAL_UART_Transmit+0x1c>
    {
      return  HAL_ERROR;
 80049a2:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80049a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049a8:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049aa:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ae:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b0:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049b4:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 80049b6:	f7fd fc2b 	bl	8002210 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ba:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80049bc:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80049c4:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    tickstart = HAL_GetTick();
 80049c8:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ca:	d071      	beq.n	8004ab0 <HAL_UART_Transmit+0x124>
    while (huart->TxXferCount > 0U)
 80049cc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d0:	6820      	ldr	r0, [r4, #0]
    while (huart->TxXferCount > 0U)
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	b1ab      	cbz	r3, 8004a02 <HAL_UART_Transmit+0x76>
 80049d6:	1c6a      	adds	r2, r5, #1
 80049d8:	d11c      	bne.n	8004a14 <HAL_UART_Transmit+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049da:	69c2      	ldr	r2, [r0, #28]
 80049dc:	0613      	lsls	r3, r2, #24
 80049de:	d5fc      	bpl.n	80049da <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 80049e0:	f1b8 0f00 	cmp.w	r8, #0
 80049e4:	d05c      	beq.n	8004aa0 <HAL_UART_Transmit+0x114>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049e6:	f818 3b01 	ldrb.w	r3, [r8], #1
 80049ea:	8503      	strh	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
 80049ec:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049f8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e9      	bne.n	80049d6 <HAL_UART_Transmit+0x4a>
 8004a02:	1c69      	adds	r1, r5, #1
 8004a04:	d15a      	bne.n	8004abc <HAL_UART_Transmit+0x130>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a06:	69c3      	ldr	r3, [r0, #28]
 8004a08:	065a      	lsls	r2, r3, #25
 8004a0a:	d5fc      	bpl.n	8004a06 <HAL_UART_Transmit+0x7a>
    huart->gState = HAL_UART_STATE_READY;
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8004a10:	2000      	movs	r0, #0
 8004a12:	e7c7      	b.n	80049a4 <HAL_UART_Transmit+0x18>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a14:	69c3      	ldr	r3, [r0, #28]
 8004a16:	061f      	lsls	r7, r3, #24
 8004a18:	d4e2      	bmi.n	80049e0 <HAL_UART_Transmit+0x54>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7fd fbf9 	bl	8002210 <HAL_GetTick>
 8004a1e:	1b80      	subs	r0, r0, r6
 8004a20:	4285      	cmp	r5, r0
 8004a22:	d338      	bcc.n	8004a96 <HAL_UART_Transmit+0x10a>
 8004a24:	2d00      	cmp	r5, #0
 8004a26:	d036      	beq.n	8004a96 <HAL_UART_Transmit+0x10a>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	0752      	lsls	r2, r2, #29
 8004a2e:	4618      	mov	r0, r3
 8004a30:	d5d1      	bpl.n	80049d6 <HAL_UART_Transmit+0x4a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	0717      	lsls	r7, r2, #28
 8004a36:	f100 8089 	bmi.w	8004b4c <HAL_UART_Transmit+0x1c0>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	0511      	lsls	r1, r2, #20
 8004a3e:	d5ca      	bpl.n	80049d6 <HAL_UART_Transmit+0x4a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a44:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	e853 2f00 	ldrex	r2, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4e:	e843 2100 	strex	r1, r2, [r3]
 8004a52:	b139      	cbz	r1, 8004a64 <HAL_UART_Transmit+0xd8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	e853 2f00 	ldrex	r2, [r3]
 8004a58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	e843 2100 	strex	r1, r2, [r3]
 8004a60:	2900      	cmp	r1, #0
 8004a62:	d1f7      	bne.n	8004a54 <HAL_UART_Transmit+0xc8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	f103 0208 	add.w	r2, r3, #8
 8004a68:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	f103 0008 	add.w	r0, r3, #8
 8004a74:	e840 2100 	strex	r1, r2, [r0]
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	d1f3      	bne.n	8004a64 <HAL_UART_Transmit+0xd8>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004a7e:	2a01      	cmp	r2, #1
 8004a80:	d05b      	beq.n	8004b3a <HAL_UART_Transmit+0x1ae>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a82:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004a84:	2220      	movs	r2, #32
 8004a86:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a8a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8c:	6623      	str	r3, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8004a8e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a92:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 8004a96:	2320      	movs	r3, #32
 8004a98:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8004a9a:	2003      	movs	r0, #3
}
 8004a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aa0:	f839 3b02 	ldrh.w	r3, [r9], #2
 8004aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa8:	e79f      	b.n	80049ea <HAL_UART_Transmit+0x5e>
    return HAL_BUSY;
 8004aaa:	2002      	movs	r0, #2
}
 8004aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab0:	6923      	ldr	r3, [r4, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d18a      	bne.n	80049cc <HAL_UART_Transmit+0x40>
 8004ab6:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8004ab8:	4698      	mov	r8, r3
 8004aba:	e787      	b.n	80049cc <HAL_UART_Transmit+0x40>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abc:	69c3      	ldr	r3, [r0, #28]
 8004abe:	065b      	lsls	r3, r3, #25
 8004ac0:	d4a4      	bmi.n	8004a0c <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac2:	f7fd fba5 	bl	8002210 <HAL_GetTick>
 8004ac6:	1b80      	subs	r0, r0, r6
 8004ac8:	4285      	cmp	r5, r0
 8004aca:	d3e4      	bcc.n	8004a96 <HAL_UART_Transmit+0x10a>
 8004acc:	2d00      	cmp	r5, #0
 8004ace:	d0e2      	beq.n	8004a96 <HAL_UART_Transmit+0x10a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	0751      	lsls	r1, r2, #29
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	d593      	bpl.n	8004a02 <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	0712      	lsls	r2, r2, #28
 8004ade:	d463      	bmi.n	8004ba8 <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ae0:	69da      	ldr	r2, [r3, #28]
 8004ae2:	0517      	lsls	r7, r2, #20
 8004ae4:	d58d      	bpl.n	8004a02 <HAL_UART_Transmit+0x76>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004aea:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004af0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	e843 2100 	strex	r1, r2, [r3]
 8004af8:	b139      	cbz	r1, 8004b0a <HAL_UART_Transmit+0x17e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	e853 2f00 	ldrex	r2, [r3]
 8004afe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	e843 2100 	strex	r1, r2, [r3]
 8004b06:	2900      	cmp	r1, #0
 8004b08:	d1f7      	bne.n	8004afa <HAL_UART_Transmit+0x16e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	f103 0208 	add.w	r2, r3, #8
 8004b0e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b12:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	f103 0008 	add.w	r0, r3, #8
 8004b1a:	e840 2100 	strex	r1, r2, [r0]
 8004b1e:	2900      	cmp	r1, #0
 8004b20:	d1f3      	bne.n	8004b0a <HAL_UART_Transmit+0x17e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b22:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004b24:	2a01      	cmp	r2, #1
 8004b26:	d1ac      	bne.n	8004a82 <HAL_UART_Transmit+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	e843 2100 	strex	r1, r2, [r3]
 8004b34:	2900      	cmp	r1, #0
 8004b36:	d1f7      	bne.n	8004b28 <HAL_UART_Transmit+0x19c>
 8004b38:	e7a3      	b.n	8004a82 <HAL_UART_Transmit+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	e853 2f00 	ldrex	r2, [r3]
 8004b3e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	e843 2100 	strex	r1, r2, [r3]
 8004b46:	2900      	cmp	r1, #0
 8004b48:	d1f7      	bne.n	8004b3a <HAL_UART_Transmit+0x1ae>
 8004b4a:	e79a      	b.n	8004a82 <HAL_UART_Transmit+0xf6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	e843 2100 	strex	r1, r2, [r3]
 8004b5c:	2900      	cmp	r1, #0
 8004b5e:	d1f7      	bne.n	8004b50 <HAL_UART_Transmit+0x1c4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	f103 0208 	add.w	r2, r3, #8
 8004b64:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b68:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	f103 0008 	add.w	r0, r3, #8
 8004b70:	e840 2100 	strex	r1, r2, [r0]
 8004b74:	2900      	cmp	r1, #0
 8004b76:	d1f3      	bne.n	8004b60 <HAL_UART_Transmit+0x1d4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b78:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004b7a:	2a01      	cmp	r2, #1
 8004b7c:	d00b      	beq.n	8004b96 <HAL_UART_Transmit+0x20a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004b80:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b82:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004b84:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8004b88:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8a:	6623      	str	r3, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8004b8c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b90:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          return HAL_ERROR;
 8004b94:	e77f      	b.n	8004a96 <HAL_UART_Transmit+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	e843 2100 	strex	r1, r2, [r3]
 8004ba2:	2900      	cmp	r1, #0
 8004ba4:	d1f7      	bne.n	8004b96 <HAL_UART_Transmit+0x20a>
 8004ba6:	e7ea      	b.n	8004b7e <HAL_UART_Transmit+0x1f2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ba8:	2208      	movs	r2, #8
 8004baa:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bb0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	e843 2100 	strex	r1, r2, [r3]
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	d1f7      	bne.n	8004bac <HAL_UART_Transmit+0x220>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	f103 0208 	add.w	r2, r3, #8
 8004bc0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	f103 0008 	add.w	r0, r3, #8
 8004bcc:	e840 2100 	strex	r1, r2, [r0]
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	d1f3      	bne.n	8004bbc <HAL_UART_Transmit+0x230>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004bd6:	2a01      	cmp	r2, #1
 8004bd8:	d1d1      	bne.n	8004b7e <HAL_UART_Transmit+0x1f2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bda:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bde:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	e843 2100 	strex	r1, r2, [r3]
 8004be6:	2900      	cmp	r1, #0
 8004be8:	d1f7      	bne.n	8004bda <HAL_UART_Transmit+0x24e>
 8004bea:	e7c8      	b.n	8004b7e <HAL_UART_Transmit+0x1f2>

08004bec <HAL_UART_TxCpltCallback>:
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop

08004bf0 <HAL_UART_RxCpltCallback>:
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop

08004bf4 <HAL_UART_ErrorCallback>:
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop

08004bf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bfa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c02:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c06:	f7ff fff5 	bl	8004bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c0a:	bd08      	pop	{r3, pc}

08004c0c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c0c:	6803      	ldr	r3, [r0, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c10:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c12:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8004c16:	ea12 0f0c 	tst.w	r2, ip
{
 8004c1a:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c1c:	689d      	ldr	r5, [r3, #8]
{
 8004c1e:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8004c20:	d150      	bne.n	8004cc4 <HAL_UART_IRQHandler+0xb8>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c22:	0696      	lsls	r6, r2, #26
 8004c24:	d502      	bpl.n	8004c2c <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c26:	068e      	lsls	r6, r1, #26
 8004c28:	f100 80e7 	bmi.w	8004dfa <HAL_UART_IRQHandler+0x1ee>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004c2e:	2801      	cmp	r0, #1
 8004c30:	d024      	beq.n	8004c7c <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c32:	02d6      	lsls	r6, r2, #11
 8004c34:	d502      	bpl.n	8004c3c <HAL_UART_IRQHandler+0x30>
 8004c36:	0268      	lsls	r0, r5, #9
 8004c38:	f100 80e4 	bmi.w	8004e04 <HAL_UART_IRQHandler+0x1f8>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c3c:	0616      	lsls	r6, r2, #24
 8004c3e:	d414      	bmi.n	8004c6a <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c40:	0650      	lsls	r0, r2, #25
 8004c42:	d501      	bpl.n	8004c48 <HAL_UART_IRQHandler+0x3c>
 8004c44:	064a      	lsls	r2, r1, #25
 8004c46:	d400      	bmi.n	8004c4a <HAL_UART_IRQHandler+0x3e>
}
 8004c48:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	e843 2100 	strex	r1, r2, [r3]
 8004c56:	2900      	cmp	r1, #0
 8004c58:	d1f7      	bne.n	8004c4a <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c5a:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c5c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004c5e:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->TxISR = NULL;
 8004c60:	66e3      	str	r3, [r4, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c62:	4620      	mov	r0, r4
 8004c64:	f7ff ffc2 	bl	8004bec <HAL_UART_TxCpltCallback>
}
 8004c68:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c6a:	060d      	lsls	r5, r1, #24
 8004c6c:	d5e8      	bpl.n	8004c40 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 8004c6e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0e9      	beq.n	8004c48 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8004c74:	4620      	mov	r0, r4
}
 8004c76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8004c7a:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c7c:	06d6      	lsls	r6, r2, #27
 8004c7e:	d5d8      	bpl.n	8004c32 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c80:	06c8      	lsls	r0, r1, #27
 8004c82:	d5d6      	bpl.n	8004c32 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c84:	2210      	movs	r2, #16
 8004c86:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	0651      	lsls	r1, r2, #25
 8004c8c:	f140 80d7 	bpl.w	8004e3e <HAL_UART_IRQHandler+0x232>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c90:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004c92:	6801      	ldr	r1, [r0, #0]
 8004c94:	684a      	ldr	r2, [r1, #4]
 8004c96:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004c98:	2a00      	cmp	r2, #0
 8004c9a:	d0d5      	beq.n	8004c48 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c9c:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 8004ca0:	4295      	cmp	r5, r2
 8004ca2:	d9d1      	bls.n	8004c48 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 8004ca4:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ca8:	680a      	ldr	r2, [r1, #0]
 8004caa:	0692      	lsls	r2, r2, #26
 8004cac:	f140 80fe 	bpl.w	8004eac <HAL_UART_IRQHandler+0x2a0>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cb4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8004cb8:	1ae9      	subs	r1, r5, r3
 8004cba:	4620      	mov	r0, r4
 8004cbc:	b289      	uxth	r1, r1
 8004cbe:	f7fc fe2b 	bl	8001918 <HAL_UARTEx_RxEventCallback>
}
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004cc4:	4895      	ldr	r0, [pc, #596]	; (8004f1c <HAL_UART_IRQHandler+0x310>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004cc6:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004cca:	4008      	ands	r0, r1
 8004ccc:	4330      	orrs	r0, r6
 8004cce:	d0ad      	beq.n	8004c2c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cd0:	07d5      	lsls	r5, r2, #31
 8004cd2:	d509      	bpl.n	8004ce8 <HAL_UART_IRQHandler+0xdc>
 8004cd4:	05c8      	lsls	r0, r1, #23
 8004cd6:	d507      	bpl.n	8004ce8 <HAL_UART_IRQHandler+0xdc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cd8:	2001      	movs	r0, #1
 8004cda:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cdc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004ce0:	f040 0001 	orr.w	r0, r0, #1
 8004ce4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ce8:	0795      	lsls	r5, r2, #30
 8004cea:	f140 8081 	bpl.w	8004df0 <HAL_UART_IRQHandler+0x1e4>
 8004cee:	b18e      	cbz	r6, 8004d14 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cf0:	2002      	movs	r0, #2
 8004cf2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cf4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004cf8:	f040 0004 	orr.w	r0, r0, #4
 8004cfc:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d00:	0750      	lsls	r0, r2, #29
 8004d02:	d507      	bpl.n	8004d14 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d04:	2004      	movs	r0, #4
 8004d06:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d08:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004d0c:	f040 0002 	orr.w	r0, r0, #2
 8004d10:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d14:	0710      	lsls	r0, r2, #28
 8004d16:	d50b      	bpl.n	8004d30 <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d18:	f001 0020 	and.w	r0, r1, #32
 8004d1c:	4330      	orrs	r0, r6
 8004d1e:	d007      	beq.n	8004d30 <HAL_UART_IRQHandler+0x124>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d20:	2008      	movs	r0, #8
 8004d22:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d24:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004d28:	f040 0008 	orr.w	r0, r0, #8
 8004d2c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d30:	0516      	lsls	r6, r2, #20
 8004d32:	d50a      	bpl.n	8004d4a <HAL_UART_IRQHandler+0x13e>
 8004d34:	014d      	lsls	r5, r1, #5
 8004d36:	d508      	bpl.n	8004d4a <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d38:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004d3c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d3e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004d42:	f040 0020 	orr.w	r0, r0, #32
 8004d46:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d4a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	f43f af7a 	beq.w	8004c48 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d54:	0690      	lsls	r0, r2, #26
 8004d56:	d506      	bpl.n	8004d66 <HAL_UART_IRQHandler+0x15a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d58:	0689      	lsls	r1, r1, #26
 8004d5a:	d504      	bpl.n	8004d66 <HAL_UART_IRQHandler+0x15a>
        if (huart->RxISR != NULL)
 8004d5c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004d5e:	b112      	cbz	r2, 8004d66 <HAL_UART_IRQHandler+0x15a>
          huart->RxISR(huart);
 8004d60:	4620      	mov	r0, r4
 8004d62:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d64:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8004d66:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d6a:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d6c:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d70:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004d74:	ea52 0501 	orrs.w	r5, r2, r1
 8004d78:	f000 80c9 	beq.w	8004f0e <HAL_UART_IRQHandler+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	e843 2100 	strex	r1, r2, [r3]
 8004d88:	2900      	cmp	r1, #0
 8004d8a:	d1f7      	bne.n	8004d7c <HAL_UART_IRQHandler+0x170>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	f103 0208 	add.w	r2, r3, #8
 8004d90:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d94:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	f103 0008 	add.w	r0, r3, #8
 8004d9c:	e840 2100 	strex	r1, r2, [r0]
 8004da0:	2900      	cmp	r1, #0
 8004da2:	d1f3      	bne.n	8004d8c <HAL_UART_IRQHandler+0x180>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004da6:	2a01      	cmp	r2, #1
 8004da8:	d034      	beq.n	8004e14 <HAL_UART_IRQHandler+0x208>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004daa:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004dac:	2120      	movs	r1, #32
 8004dae:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db2:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8004db6:	66a2      	str	r2, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db8:	064a      	lsls	r2, r1, #25
 8004dba:	d53c      	bpl.n	8004e36 <HAL_UART_IRQHandler+0x22a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	f103 0208 	add.w	r2, r3, #8
 8004dc0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	f103 0008 	add.w	r0, r3, #8
 8004dcc:	e840 2100 	strex	r1, r2, [r0]
 8004dd0:	2900      	cmp	r1, #0
 8004dd2:	d1f3      	bne.n	8004dbc <HAL_UART_IRQHandler+0x1b0>
          if (huart->hdmarx != NULL)
 8004dd4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004dd6:	b370      	cbz	r0, 8004e36 <HAL_UART_IRQHandler+0x22a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dd8:	4b51      	ldr	r3, [pc, #324]	; (8004f20 <HAL_UART_IRQHandler+0x314>)
 8004dda:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ddc:	f7fd fdd0 	bl	8002980 <HAL_DMA_Abort_IT>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	f43f af31 	beq.w	8004c48 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004de6:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 8004de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004dee:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004df0:	0755      	lsls	r5, r2, #29
 8004df2:	d58f      	bpl.n	8004d14 <HAL_UART_IRQHandler+0x108>
 8004df4:	2e00      	cmp	r6, #0
 8004df6:	d185      	bne.n	8004d04 <HAL_UART_IRQHandler+0xf8>
 8004df8:	e78c      	b.n	8004d14 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8004dfa:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f47f af3a 	bne.w	8004c76 <HAL_UART_IRQHandler+0x6a>
 8004e02:	e721      	b.n	8004c48 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8004e08:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e0a:	621a      	str	r2, [r3, #32]
}
 8004e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8004e10:	f000 bca6 	b.w	8005760 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e18:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	e843 2100 	strex	r1, r2, [r3]
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d0c2      	beq.n	8004daa <HAL_UART_IRQHandler+0x19e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	e853 2f00 	ldrex	r2, [r3]
 8004e28:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	e843 2100 	strex	r1, r2, [r3]
 8004e30:	2900      	cmp	r1, #0
 8004e32:	d1ef      	bne.n	8004e14 <HAL_UART_IRQHandler+0x208>
 8004e34:	e7b9      	b.n	8004daa <HAL_UART_IRQHandler+0x19e>
            HAL_UART_ErrorCallback(huart);
 8004e36:	4620      	mov	r0, r4
 8004e38:	f7ff fedc 	bl	8004bf4 <HAL_UART_ErrorCallback>
}
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e3e:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 8004e42:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e46:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8004e4a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e4c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004e4e:	2a00      	cmp	r2, #0
 8004e50:	f43f aefa 	beq.w	8004c48 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e54:	1a41      	subs	r1, r0, r1
 8004e56:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004e58:	2900      	cmp	r1, #0
 8004e5a:	f43f aef5 	beq.w	8004c48 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	e843 2000 	strex	r0, r2, [r3]
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d1f7      	bne.n	8004e5e <HAL_UART_IRQHandler+0x252>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	f103 0208 	add.w	r2, r3, #8
 8004e72:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e76:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	f103 0508 	add.w	r5, r3, #8
 8004e7e:	e845 2000 	strex	r0, r2, [r5]
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d1f3      	bne.n	8004e6e <HAL_UART_IRQHandler+0x262>
        huart->RxState = HAL_UART_STATE_READY;
 8004e86:	2220      	movs	r2, #32
 8004e88:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->RxISR = NULL;
 8004e8c:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8e:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e94:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	e843 2000 	strex	r0, r2, [r3]
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d1f7      	bne.n	8004e90 <HAL_UART_IRQHandler+0x284>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f7fc fd37 	bl	8001918 <HAL_UARTEx_RxEventCallback>
}
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	e843 2100 	strex	r1, r2, [r3]
 8004eb8:	2900      	cmp	r1, #0
 8004eba:	d1f7      	bne.n	8004eac <HAL_UART_IRQHandler+0x2a0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	f103 0208 	add.w	r2, r3, #8
 8004ec0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	f103 0508 	add.w	r5, r3, #8
 8004ecc:	e845 2100 	strex	r1, r2, [r5]
 8004ed0:	2900      	cmp	r1, #0
 8004ed2:	d1f3      	bne.n	8004ebc <HAL_UART_IRQHandler+0x2b0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	f103 0208 	add.w	r2, r3, #8
 8004ed8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	f103 0508 	add.w	r5, r3, #8
 8004ee4:	e845 2100 	strex	r1, r2, [r5]
 8004ee8:	2900      	cmp	r1, #0
 8004eea:	d1f3      	bne.n	8004ed4 <HAL_UART_IRQHandler+0x2c8>
          huart->RxState = HAL_UART_STATE_READY;
 8004eec:	2220      	movs	r2, #32
 8004eee:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef2:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efc:	e843 2100 	strex	r1, r2, [r3]
 8004f00:	2900      	cmp	r1, #0
 8004f02:	d1f7      	bne.n	8004ef4 <HAL_UART_IRQHandler+0x2e8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f04:	f7fd fd16 	bl	8002934 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f08:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 8004f0c:	e6d0      	b.n	8004cb0 <HAL_UART_IRQHandler+0xa4>
        HAL_UART_ErrorCallback(huart);
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f7ff fe70 	bl	8004bf4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f14:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8004f18:	bd70      	pop	{r4, r5, r6, pc}
 8004f1a:	bf00      	nop
 8004f1c:	04000120 	.word	0x04000120
 8004f20:	08004bf9 	.word	0x08004bf9

08004f24 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8004f24:	b510      	push	{r4, lr}
 8004f26:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	e843 2100 	strex	r1, r2, [r3]
 8004f34:	2900      	cmp	r1, #0
 8004f36:	d1f7      	bne.n	8004f28 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	f103 0208 	add.w	r2, r3, #8
 8004f3c:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f40:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	f103 0408 	add.w	r4, r3, #8
 8004f48:	e844 2100 	strex	r1, r2, [r4]
 8004f4c:	2900      	cmp	r1, #0
 8004f4e:	d1f3      	bne.n	8004f38 <UART_RxISR_16BIT.part.0+0x14>
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f50:	4a1a      	ldr	r2, [pc, #104]	; (8004fbc <UART_RxISR_16BIT.part.0+0x98>)
      huart->RxISR = NULL;
 8004f52:	6681      	str	r1, [r0, #104]	; 0x68
      huart->RxState = HAL_UART_STATE_READY;
 8004f54:	2420      	movs	r4, #32
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f56:	4293      	cmp	r3, r2
      huart->RxState = HAL_UART_STATE_READY;
 8004f58:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f5c:	6641      	str	r1, [r0, #100]	; 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f5e:	d002      	beq.n	8004f66 <UART_RxISR_16BIT.part.0+0x42>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	0211      	lsls	r1, r2, #8
 8004f64:	d416      	bmi.n	8004f94 <UART_RxISR_16BIT.part.0+0x70>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f66:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004f68:	2a01      	cmp	r2, #1
 8004f6a:	d124      	bne.n	8004fb6 <UART_RxISR_16BIT.part.0+0x92>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	6602      	str	r2, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f74:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	e843 2100 	strex	r1, r2, [r3]
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d1f7      	bne.n	8004f70 <UART_RxISR_16BIT.part.0+0x4c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f80:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f82:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f86:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f88:	bf44      	itt	mi
 8004f8a:	2210      	movmi	r2, #16
 8004f8c:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f8e:	f7fc fcc3 	bl	8001918 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f92:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f98:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	e843 2100 	strex	r1, r2, [r3]
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	d0e0      	beq.n	8004f66 <UART_RxISR_16BIT.part.0+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	e853 2f00 	ldrex	r2, [r3]
 8004fa8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	e843 2100 	strex	r1, r2, [r3]
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	d1ef      	bne.n	8004f94 <UART_RxISR_16BIT.part.0+0x70>
 8004fb4:	e7d7      	b.n	8004f66 <UART_RxISR_16BIT.part.0+0x42>
        HAL_UART_RxCpltCallback(huart);
 8004fb6:	f7ff fe1b 	bl	8004bf0 <HAL_UART_RxCpltCallback>
}
 8004fba:	bd10      	pop	{r4, pc}
 8004fbc:	40008000 	.word	0x40008000

08004fc0 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fc0:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 8004fc4:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fc8:	2922      	cmp	r1, #34	; 0x22
 8004fca:	d006      	beq.n	8004fda <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fcc:	6802      	ldr	r2, [r0, #0]
 8004fce:	8b13      	ldrh	r3, [r2, #24]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f043 0308 	orr.w	r3, r3, #8
 8004fd6:	8313      	strh	r3, [r2, #24]
 8004fd8:	4770      	bx	lr
{
 8004fda:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fdc:	6804      	ldr	r4, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004fde:	6d41      	ldr	r1, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fe0:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8004fe4:	ea02 020c 	and.w	r2, r2, ip
 8004fe8:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8004fec:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8004ff0:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8004ff2:	3a01      	subs	r2, #1
 8004ff4:	b292      	uxth	r2, r2
 8004ff6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8004ffa:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	b91b      	cbnz	r3, 800500a <UART_RxISR_16BIT+0x4a>
  }
}
 8005002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005006:	f7ff bf8d 	b.w	8004f24 <UART_RxISR_16BIT.part.0>
 800500a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800500e:	4770      	bx	lr

08005010 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005010:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 8005014:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005018:	2922      	cmp	r1, #34	; 0x22
 800501a:	d006      	beq.n	800502a <UART_RxISR_8BIT+0x1a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800501c:	6802      	ldr	r2, [r0, #0]
 800501e:	8b13      	ldrh	r3, [r2, #24]
 8005020:	b29b      	uxth	r3, r3
 8005022:	f043 0308 	orr.w	r3, r3, #8
 8005026:	8313      	strh	r3, [r2, #24]
 8005028:	4770      	bx	lr
{
 800502a:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800502c:	6804      	ldr	r4, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800502e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005030:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005034:	ea02 020c 	and.w	r2, r2, ip
 8005038:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 800503a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 800503e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005040:	3a01      	subs	r2, #1
 8005042:	b292      	uxth	r2, r2
 8005044:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8005048:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 800504c:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 800504e:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8005050:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 8005052:	b91a      	cbnz	r2, 800505c <UART_RxISR_8BIT+0x4c>
}
 8005054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005058:	f7ff bf64 	b.w	8004f24 <UART_RxISR_16BIT.part.0>
 800505c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop

08005064 <UART_SetConfig>:
{
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005068:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800506a:	6882      	ldr	r2, [r0, #8]
 800506c:	6900      	ldr	r0, [r0, #16]
 800506e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005070:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005072:	4302      	orrs	r2, r0
 8005074:	430a      	orrs	r2, r1
 8005076:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005078:	499f      	ldr	r1, [pc, #636]	; (80052f8 <UART_SetConfig+0x294>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800507a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800507c:	4029      	ands	r1, r5
 800507e:	430a      	orrs	r2, r1
 8005080:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	68e1      	ldr	r1, [r4, #12]
 8005086:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800508a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800508c:	499b      	ldr	r1, [pc, #620]	; (80052fc <UART_SetConfig+0x298>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800508e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005090:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005092:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005094:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005096:	d071      	beq.n	800517c <UART_SetConfig+0x118>
    tmpreg |= huart->Init.OneBitSampling;
 8005098:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800509a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800509e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050a0:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050a2:	4997      	ldr	r1, [pc, #604]	; (8005300 <UART_SetConfig+0x29c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050a4:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050a6:	428b      	cmp	r3, r1
 80050a8:	d024      	beq.n	80050f4 <UART_SetConfig+0x90>
 80050aa:	4a96      	ldr	r2, [pc, #600]	; (8005304 <UART_SetConfig+0x2a0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d043      	beq.n	8005138 <UART_SetConfig+0xd4>
 80050b0:	4a95      	ldr	r2, [pc, #596]	; (8005308 <UART_SetConfig+0x2a4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	f000 80d7 	beq.w	8005266 <UART_SetConfig+0x202>
 80050b8:	4a94      	ldr	r2, [pc, #592]	; (800530c <UART_SetConfig+0x2a8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	f000 80a1 	beq.w	8005202 <UART_SetConfig+0x19e>
 80050c0:	4a93      	ldr	r2, [pc, #588]	; (8005310 <UART_SetConfig+0x2ac>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d111      	bne.n	80050ea <UART_SetConfig+0x86>
 80050c6:	4b93      	ldr	r3, [pc, #588]	; (8005314 <UART_SetConfig+0x2b0>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d4:	f000 80ff 	beq.w	80052d6 <UART_SetConfig+0x272>
 80050d8:	f200 80be 	bhi.w	8005258 <UART_SetConfig+0x1f4>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80dc 	beq.w	800529a <UART_SetConfig+0x236>
 80050e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e6:	f000 8099 	beq.w	800521c <UART_SetConfig+0x1b8>
        ret = HAL_ERROR;
 80050ea:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80050ec:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 80050ee:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
}
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050f4:	4b87      	ldr	r3, [pc, #540]	; (8005314 <UART_SetConfig+0x2b0>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	3b01      	subs	r3, #1
 8005100:	2b02      	cmp	r3, #2
 8005102:	d978      	bls.n	80051f6 <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005104:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005108:	f000 80f0 	beq.w	80052ec <UART_SetConfig+0x288>
        pclk = HAL_RCC_GetPCLK2Freq();
 800510c:	f7fe fa58 	bl	80035c0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005110:	2800      	cmp	r0, #0
 8005112:	d048      	beq.n	80051a6 <UART_SetConfig+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005114:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005116:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800511a:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 800511e:	fbb0 f2f2 	udiv	r2, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005122:	f1a2 0310 	sub.w	r3, r2, #16
 8005126:	428b      	cmp	r3, r1
 8005128:	d8df      	bhi.n	80050ea <UART_SetConfig+0x86>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 800512e:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8005130:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
 8005134:	2000      	movs	r0, #0
}
 8005136:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005138:	4b76      	ldr	r3, [pc, #472]	; (8005314 <UART_SetConfig+0x2b0>)
 800513a:	4a77      	ldr	r2, [pc, #476]	; (8005318 <UART_SetConfig+0x2b4>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	f003 030c 	and.w	r3, r3, #12
 8005144:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005146:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800514a:	d06d      	beq.n	8005228 <UART_SetConfig+0x1c4>
    switch (clocksource)
 800514c:	2b08      	cmp	r3, #8
 800514e:	d8cc      	bhi.n	80050ea <UART_SetConfig+0x86>
 8005150:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <UART_SetConfig+0xf4>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	08005261 	.word	0x08005261
 800515c:	0800510d 	.word	0x0800510d
 8005160:	080052dd 	.word	0x080052dd
 8005164:	080050eb 	.word	0x080050eb
 8005168:	08005223 	.word	0x08005223
 800516c:	080050eb 	.word	0x080050eb
 8005170:	080050eb 	.word	0x080050eb
 8005174:	080050eb 	.word	0x080050eb
 8005178:	0800528b 	.word	0x0800528b
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800517c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005180:	4864      	ldr	r0, [pc, #400]	; (8005314 <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005182:	430a      	orrs	r2, r1
 8005184:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005186:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800518a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800518e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005192:	f000 8080 	beq.w	8005296 <UART_SetConfig+0x232>
 8005196:	d80b      	bhi.n	80051b0 <UART_SetConfig+0x14c>
 8005198:	b383      	cbz	r3, 80051fc <UART_SetConfig+0x198>
 800519a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519e:	d1a4      	bne.n	80050ea <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetSysClockFreq();
 80051a0:	f7fd fe06 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80051a4:	b948      	cbnz	r0, 80051ba <UART_SetConfig+0x156>
  huart->RxISR = NULL;
 80051a6:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 80051a8:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
 80051ac:	2000      	movs	r0, #0
}
 80051ae:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051b4:	d199      	bne.n	80050ea <UART_SetConfig+0x86>
        pclk = (uint32_t) LSE_VALUE;
 80051b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051ba:	6862      	ldr	r2, [r4, #4]
 80051bc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80051c0:	4283      	cmp	r3, r0
 80051c2:	d892      	bhi.n	80050ea <UART_SetConfig+0x86>
 80051c4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80051c8:	d88f      	bhi.n	80050ea <UART_SetConfig+0x86>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051ca:	2500      	movs	r5, #0
 80051cc:	0853      	lsrs	r3, r2, #1
 80051ce:	f44f 7c80 	mov.w	ip, #256	; 0x100
 80051d2:	4629      	mov	r1, r5
 80051d4:	fbe0 310c 	umlal	r3, r1, r0, ip
 80051d8:	4618      	mov	r0, r3
 80051da:	462b      	mov	r3, r5
 80051dc:	f7fb fb4e 	bl	800087c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051e0:	4a4e      	ldr	r2, [pc, #312]	; (800531c <UART_SetConfig+0x2b8>)
 80051e2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80051e6:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051e8:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051ea:	f63f af7e 	bhi.w	80050ea <UART_SetConfig+0x86>
          huart->Instance->BRR = usartdiv;
 80051ee:	6822      	ldr	r2, [r4, #0]
 80051f0:	4628      	mov	r0, r5
 80051f2:	60d3      	str	r3, [r2, #12]
 80051f4:	e77a      	b.n	80050ec <UART_SetConfig+0x88>
 80051f6:	4a4a      	ldr	r2, [pc, #296]	; (8005320 <UART_SetConfig+0x2bc>)
 80051f8:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80051fa:	e7a4      	b.n	8005146 <UART_SetConfig+0xe2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80051fc:	f7fe f9ce 	bl	800359c <HAL_RCC_GetPCLK1Freq>
        break;
 8005200:	e7d0      	b.n	80051a4 <UART_SetConfig+0x140>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005202:	4b44      	ldr	r3, [pc, #272]	; (8005314 <UART_SetConfig+0x2b0>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005208:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800520c:	2b80      	cmp	r3, #128	; 0x80
 800520e:	d062      	beq.n	80052d6 <UART_SetConfig+0x272>
 8005210:	d83e      	bhi.n	8005290 <UART_SetConfig+0x22c>
 8005212:	2b00      	cmp	r3, #0
 8005214:	d041      	beq.n	800529a <UART_SetConfig+0x236>
 8005216:	2b40      	cmp	r3, #64	; 0x40
 8005218:	f47f af67 	bne.w	80050ea <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005220:	d05e      	beq.n	80052e0 <UART_SetConfig+0x27c>
        pclk = HAL_RCC_GetSysClockFreq();
 8005222:	f7fd fdc5 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
        break;
 8005226:	e773      	b.n	8005110 <UART_SetConfig+0xac>
    switch (clocksource)
 8005228:	2b08      	cmp	r3, #8
 800522a:	f63f af5e 	bhi.w	80050ea <UART_SetConfig+0x86>
 800522e:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <UART_SetConfig+0x1d0>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	080052a1 	.word	0x080052a1
 8005238:	080052ed 	.word	0x080052ed
 800523c:	080052f3 	.word	0x080052f3
 8005240:	080050eb 	.word	0x080050eb
 8005244:	080052e1 	.word	0x080052e1
 8005248:	080050eb 	.word	0x080050eb
 800524c:	080050eb 	.word	0x080050eb
 8005250:	080050eb 	.word	0x080050eb
 8005254:	080052e7 	.word	0x080052e7
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800525c:	d012      	beq.n	8005284 <UART_SetConfig+0x220>
 800525e:	e744      	b.n	80050ea <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005260:	f7fe f99c 	bl	800359c <HAL_RCC_GetPCLK1Freq>
        break;
 8005264:	e754      	b.n	8005110 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005266:	4b2b      	ldr	r3, [pc, #172]	; (8005314 <UART_SetConfig+0x2b0>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005270:	2b20      	cmp	r3, #32
 8005272:	d030      	beq.n	80052d6 <UART_SetConfig+0x272>
 8005274:	d803      	bhi.n	800527e <UART_SetConfig+0x21a>
 8005276:	b183      	cbz	r3, 800529a <UART_SetConfig+0x236>
 8005278:	2b10      	cmp	r3, #16
 800527a:	d0cf      	beq.n	800521c <UART_SetConfig+0x1b8>
 800527c:	e735      	b.n	80050ea <UART_SetConfig+0x86>
 800527e:	2b30      	cmp	r3, #48	; 0x30
 8005280:	f47f af33 	bne.w	80050ea <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005284:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005288:	d02d      	beq.n	80052e6 <UART_SetConfig+0x282>
    switch (clocksource)
 800528a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800528e:	e741      	b.n	8005114 <UART_SetConfig+0xb0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005290:	2bc0      	cmp	r3, #192	; 0xc0
 8005292:	d0f7      	beq.n	8005284 <UART_SetConfig+0x220>
 8005294:	e729      	b.n	80050ea <UART_SetConfig+0x86>
 8005296:	4823      	ldr	r0, [pc, #140]	; (8005324 <UART_SetConfig+0x2c0>)
 8005298:	e78f      	b.n	80051ba <UART_SetConfig+0x156>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800529a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800529e:	d1df      	bne.n	8005260 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a0:	f7fe f97c 	bl	800359c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80052a4:	2800      	cmp	r0, #0
 80052a6:	f43f af7e 	beq.w	80051a6 <UART_SetConfig+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052aa:	0043      	lsls	r3, r0, #1
 80052ac:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ae:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052b2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80052b6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ba:	f1a3 0210 	sub.w	r2, r3, #16
 80052be:	428a      	cmp	r2, r1
 80052c0:	f63f af13 	bhi.w	80050ea <UART_SetConfig+0x86>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052c4:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80052c8:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052ca:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052cc:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60cb      	str	r3, [r1, #12]
 80052d4:	e767      	b.n	80051a6 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80052da:	d00a      	beq.n	80052f2 <UART_SetConfig+0x28e>
        pclk = (uint32_t) HSI_VALUE;
 80052dc:	4811      	ldr	r0, [pc, #68]	; (8005324 <UART_SetConfig+0x2c0>)
 80052de:	e719      	b.n	8005114 <UART_SetConfig+0xb0>
        pclk = HAL_RCC_GetSysClockFreq();
 80052e0:	f7fd fd66 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
        break;
 80052e4:	e7de      	b.n	80052a4 <UART_SetConfig+0x240>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052ea:	e7df      	b.n	80052ac <UART_SetConfig+0x248>
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ec:	f7fe f968 	bl	80035c0 <HAL_RCC_GetPCLK2Freq>
        break;
 80052f0:	e7d8      	b.n	80052a4 <UART_SetConfig+0x240>
    switch (clocksource)
 80052f2:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <UART_SetConfig+0x2c4>)
 80052f4:	e7da      	b.n	80052ac <UART_SetConfig+0x248>
 80052f6:	bf00      	nop
 80052f8:	efff69f3 	.word	0xefff69f3
 80052fc:	40008000 	.word	0x40008000
 8005300:	40013800 	.word	0x40013800
 8005304:	40004400 	.word	0x40004400
 8005308:	40004800 	.word	0x40004800
 800530c:	40004c00 	.word	0x40004c00
 8005310:	40005000 	.word	0x40005000
 8005314:	40021000 	.word	0x40021000
 8005318:	08009c6c 	.word	0x08009c6c
 800531c:	000ffcff 	.word	0x000ffcff
 8005320:	08009c68 	.word	0x08009c68
 8005324:	00f42400 	.word	0x00f42400
 8005328:	01e84800 	.word	0x01e84800

0800532c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800532c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800532e:	071a      	lsls	r2, r3, #28
{
 8005330:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005332:	d506      	bpl.n	8005342 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005334:	6801      	ldr	r1, [r0, #0]
 8005336:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005338:	684a      	ldr	r2, [r1, #4]
 800533a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800533e:	4322      	orrs	r2, r4
 8005340:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005342:	07dc      	lsls	r4, r3, #31
 8005344:	d506      	bpl.n	8005354 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005346:	6801      	ldr	r1, [r0, #0]
 8005348:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800534a:	684a      	ldr	r2, [r1, #4]
 800534c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005350:	4322      	orrs	r2, r4
 8005352:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005354:	0799      	lsls	r1, r3, #30
 8005356:	d506      	bpl.n	8005366 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005358:	6801      	ldr	r1, [r0, #0]
 800535a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800535c:	684a      	ldr	r2, [r1, #4]
 800535e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005362:	4322      	orrs	r2, r4
 8005364:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005366:	075a      	lsls	r2, r3, #29
 8005368:	d506      	bpl.n	8005378 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800536a:	6801      	ldr	r1, [r0, #0]
 800536c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800536e:	684a      	ldr	r2, [r1, #4]
 8005370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005374:	4322      	orrs	r2, r4
 8005376:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005378:	06dc      	lsls	r4, r3, #27
 800537a:	d506      	bpl.n	800538a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800537c:	6801      	ldr	r1, [r0, #0]
 800537e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005380:	688a      	ldr	r2, [r1, #8]
 8005382:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005386:	4322      	orrs	r2, r4
 8005388:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800538a:	0699      	lsls	r1, r3, #26
 800538c:	d506      	bpl.n	800539c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800538e:	6801      	ldr	r1, [r0, #0]
 8005390:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005392:	688a      	ldr	r2, [r1, #8]
 8005394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005398:	4322      	orrs	r2, r4
 800539a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800539c:	065a      	lsls	r2, r3, #25
 800539e:	d509      	bpl.n	80053b4 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053a0:	6801      	ldr	r1, [r0, #0]
 80053a2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80053a4:	684a      	ldr	r2, [r1, #4]
 80053a6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80053aa:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053b0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053b2:	d00b      	beq.n	80053cc <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053b4:	061b      	lsls	r3, r3, #24
 80053b6:	d506      	bpl.n	80053c6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053b8:	6802      	ldr	r2, [r0, #0]
 80053ba:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80053bc:	6853      	ldr	r3, [r2, #4]
 80053be:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80053c2:	430b      	orrs	r3, r1
 80053c4:	6053      	str	r3, [r2, #4]
}
 80053c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ca:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053cc:	684a      	ldr	r2, [r1, #4]
 80053ce:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80053d0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80053d4:	4322      	orrs	r2, r4
 80053d6:	604a      	str	r2, [r1, #4]
 80053d8:	e7ec      	b.n	80053b4 <UART_AdvFeatureConfig+0x88>
 80053da:	bf00      	nop

080053dc <UART_CheckIdleState>:
{
 80053dc:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053de:	2300      	movs	r3, #0
{
 80053e0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 80053e6:	f7fc ff13 	bl	8002210 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	6813      	ldr	r3, [r2, #0]
 80053ee:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 80053f0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053f2:	d40e      	bmi.n	8005412 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053f4:	6813      	ldr	r3, [r2, #0]
 80053f6:	0759      	lsls	r1, r3, #29
 80053f8:	d42f      	bmi.n	800545a <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fa:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80053fc:	2220      	movs	r2, #32
 80053fe:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8005400:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8005402:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005406:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005408:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 800540a:	2300      	movs	r3, #0
 800540c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8005410:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005412:	69d3      	ldr	r3, [r2, #28]
 8005414:	0298      	lsls	r0, r3, #10
 8005416:	d4ed      	bmi.n	80053f4 <UART_CheckIdleState+0x18>
 8005418:	e00c      	b.n	8005434 <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800541a:	6819      	ldr	r1, [r3, #0]
 800541c:	0749      	lsls	r1, r1, #29
 800541e:	461a      	mov	r2, r3
 8005420:	d505      	bpl.n	800542e <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005422:	69d9      	ldr	r1, [r3, #28]
 8005424:	0708      	lsls	r0, r1, #28
 8005426:	d44a      	bmi.n	80054be <UART_CheckIdleState+0xe2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005428:	69d9      	ldr	r1, [r3, #28]
 800542a:	0509      	lsls	r1, r1, #20
 800542c:	d475      	bmi.n	800551a <UART_CheckIdleState+0x13e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	0298      	lsls	r0, r3, #10
 8005432:	d4df      	bmi.n	80053f4 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005434:	f7fc feec 	bl	8002210 <HAL_GetTick>
 8005438:	1b43      	subs	r3, r0, r5
 800543a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	d3eb      	bcc.n	800541a <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005446:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	e843 2100 	strex	r1, r2, [r3]
 800544e:	2900      	cmp	r1, #0
 8005450:	d1f7      	bne.n	8005442 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 8005452:	2320      	movs	r3, #32
 8005454:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8005456:	2003      	movs	r0, #3
 8005458:	e7d7      	b.n	800540a <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800545a:	69d3      	ldr	r3, [r2, #28]
 800545c:	025b      	lsls	r3, r3, #9
 800545e:	d4cc      	bmi.n	80053fa <UART_CheckIdleState+0x1e>
 8005460:	e00d      	b.n	800547e <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	0750      	lsls	r0, r2, #29
 8005466:	d507      	bpl.n	8005478 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005468:	69da      	ldr	r2, [r3, #28]
 800546a:	0711      	lsls	r1, r2, #28
 800546c:	f100 8083 	bmi.w	8005576 <UART_CheckIdleState+0x19a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	0512      	lsls	r2, r2, #20
 8005474:	f100 80ad 	bmi.w	80055d2 <UART_CheckIdleState+0x1f6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	025b      	lsls	r3, r3, #9
 800547c:	d4bd      	bmi.n	80053fa <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547e:	f7fc fec7 	bl	8002210 <HAL_GetTick>
 8005482:	1b43      	subs	r3, r0, r5
 8005484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	d3ea      	bcc.n	8005462 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005490:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	e843 2100 	strex	r1, r2, [r3]
 8005498:	2900      	cmp	r1, #0
 800549a:	d1f7      	bne.n	800548c <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	f103 0208 	add.w	r2, r3, #8
 80054a0:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	f103 0008 	add.w	r0, r3, #8
 80054ac:	e840 2100 	strex	r1, r2, [r0]
 80054b0:	2900      	cmp	r1, #0
 80054b2:	d1f3      	bne.n	800549c <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 80054b4:	2320      	movs	r3, #32
 80054b6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 80054ba:	2003      	movs	r0, #3
 80054bc:	e7a5      	b.n	800540a <UART_CheckIdleState+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054be:	2208      	movs	r2, #8
 80054c0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	e843 2100 	strex	r1, r2, [r3]
 80054ce:	2900      	cmp	r1, #0
 80054d0:	d1f7      	bne.n	80054c2 <UART_CheckIdleState+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	f103 0208 	add.w	r2, r3, #8
 80054d6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054da:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	f103 0008 	add.w	r0, r3, #8
 80054e2:	e840 2100 	strex	r1, r2, [r0]
 80054e6:	2900      	cmp	r1, #0
 80054e8:	d1f3      	bne.n	80054d2 <UART_CheckIdleState+0xf6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ea:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80054ec:	2a01      	cmp	r2, #1
 80054ee:	d00b      	beq.n	8005508 <UART_CheckIdleState+0x12c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80054f2:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054f4:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80054f6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 80054fa:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fc:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 80054fe:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005502:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_ERROR;
 8005506:	e79c      	b.n	8005442 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800550c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	e843 2100 	strex	r1, r2, [r3]
 8005514:	2900      	cmp	r1, #0
 8005516:	d1f7      	bne.n	8005508 <UART_CheckIdleState+0x12c>
 8005518:	e7ea      	b.n	80054f0 <UART_CheckIdleState+0x114>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800551a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800551e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005524:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	e843 2100 	strex	r1, r2, [r3]
 800552c:	2900      	cmp	r1, #0
 800552e:	d1f7      	bne.n	8005520 <UART_CheckIdleState+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	f103 0208 	add.w	r2, r3, #8
 8005534:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005538:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	f103 0008 	add.w	r0, r3, #8
 8005540:	e840 2100 	strex	r1, r2, [r0]
 8005544:	2900      	cmp	r1, #0
 8005546:	d1f3      	bne.n	8005530 <UART_CheckIdleState+0x154>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005548:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800554a:	2a01      	cmp	r2, #1
 800554c:	d00a      	beq.n	8005564 <UART_CheckIdleState+0x188>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005550:	2120      	movs	r1, #32
 8005552:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8005556:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005558:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 800555a:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800555e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8005562:	e76e      	b.n	8005442 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005568:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	e843 2100 	strex	r1, r2, [r3]
 8005570:	2900      	cmp	r1, #0
 8005572:	d1f7      	bne.n	8005564 <UART_CheckIdleState+0x188>
 8005574:	e7eb      	b.n	800554e <UART_CheckIdleState+0x172>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005576:	2208      	movs	r2, #8
 8005578:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800557e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	e843 2100 	strex	r1, r2, [r3]
 8005586:	2900      	cmp	r1, #0
 8005588:	d1f7      	bne.n	800557a <UART_CheckIdleState+0x19e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	f103 0208 	add.w	r2, r3, #8
 800558e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005592:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	f103 0008 	add.w	r0, r3, #8
 800559a:	e840 2100 	strex	r1, r2, [r0]
 800559e:	2900      	cmp	r1, #0
 80055a0:	d1f3      	bne.n	800558a <UART_CheckIdleState+0x1ae>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80055a4:	2a01      	cmp	r2, #1
 80055a6:	d00b      	beq.n	80055c0 <UART_CheckIdleState+0x1e4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80055aa:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055ac:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80055ae:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 80055b2:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b4:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 80055b6:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055ba:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_ERROR;
 80055be:	e765      	b.n	800548c <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	e843 2100 	strex	r1, r2, [r3]
 80055cc:	2900      	cmp	r1, #0
 80055ce:	d1f7      	bne.n	80055c0 <UART_CheckIdleState+0x1e4>
 80055d0:	e7ea      	b.n	80055a8 <UART_CheckIdleState+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055d6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	e843 2100 	strex	r1, r2, [r3]
 80055e4:	2900      	cmp	r1, #0
 80055e6:	d1f7      	bne.n	80055d8 <UART_CheckIdleState+0x1fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	f103 0208 	add.w	r2, r3, #8
 80055ec:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	f103 0008 	add.w	r0, r3, #8
 80055f8:	e840 2100 	strex	r1, r2, [r0]
 80055fc:	2900      	cmp	r1, #0
 80055fe:	d1f3      	bne.n	80055e8 <UART_CheckIdleState+0x20c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005600:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005602:	2a01      	cmp	r2, #1
 8005604:	d00a      	beq.n	800561c <UART_CheckIdleState+0x240>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005606:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005608:	2120      	movs	r1, #32
 800560a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 800560e:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005610:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8005612:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005616:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 800561a:	e737      	b.n	800548c <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005620:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	e843 2100 	strex	r1, r2, [r3]
 8005628:	2900      	cmp	r1, #0
 800562a:	d1f7      	bne.n	800561c <UART_CheckIdleState+0x240>
 800562c:	e7eb      	b.n	8005606 <UART_CheckIdleState+0x22a>
 800562e:	bf00      	nop

08005630 <HAL_UART_Init>:
  if (huart == NULL)
 8005630:	b370      	cbz	r0, 8005690 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005632:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8005634:	b510      	push	{r4, lr}
 8005636:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005638:	b32b      	cbz	r3, 8005686 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 800563a:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800563c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 800563e:	2324      	movs	r3, #36	; 0x24
 8005640:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8005642:	6813      	ldr	r3, [r2, #0]
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800564a:	b9c1      	cbnz	r1, 800567e <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800564c:	4620      	mov	r0, r4
 800564e:	f7ff fd09 	bl	8005064 <UART_SetConfig>
 8005652:	2801      	cmp	r0, #1
 8005654:	d011      	beq.n	800567a <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800565e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005666:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800566e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005670:	601a      	str	r2, [r3, #0]
}
 8005672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005676:	f7ff beb1 	b.w	80053dc <UART_CheckIdleState>
}
 800567a:	2001      	movs	r0, #1
 800567c:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800567e:	4620      	mov	r0, r4
 8005680:	f7ff fe54 	bl	800532c <UART_AdvFeatureConfig>
 8005684:	e7e2      	b.n	800564c <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8005686:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 800568a:	f7fc fb5d 	bl	8001d48 <HAL_UART_MspInit>
 800568e:	e7d4      	b.n	800563a <HAL_UART_Init+0xa>
}
 8005690:	2001      	movs	r0, #1
 8005692:	4770      	bx	lr

08005694 <UART_Start_Receive_IT>:
{
 8005694:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 8005696:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 8005698:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 800569a:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 800569c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  huart->RxXferSize  = Size;
 80056a0:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 80056a4:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 80056a8:	6683      	str	r3, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 80056aa:	d04b      	beq.n	8005744 <UART_Start_Receive_IT+0xb0>
 80056ac:	bb6c      	cbnz	r4, 800570a <UART_Start_Receive_IT+0x76>
 80056ae:	6903      	ldr	r3, [r0, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bf14      	ite	ne
 80056b4:	237f      	movne	r3, #127	; 0x7f
 80056b6:	23ff      	moveq	r3, #255	; 0xff
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b8:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056ba:	2122      	movs	r1, #34	; 0x22
 80056bc:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056be:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  UART_MASK_COMPUTATION(huart);
 80056c2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056c6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ca:	f102 0308 	add.w	r3, r2, #8
 80056ce:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d2:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	f102 0408 	add.w	r4, r2, #8
 80056da:	e844 3100 	strex	r1, r3, [r4]
 80056de:	2900      	cmp	r1, #0
 80056e0:	d1f3      	bne.n	80056ca <UART_Start_Receive_IT+0x36>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e2:	6883      	ldr	r3, [r0, #8]
 80056e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e8:	6903      	ldr	r3, [r0, #16]
 80056ea:	d017      	beq.n	800571c <UART_Start_Receive_IT+0x88>
    huart->RxISR = UART_RxISR_8BIT;
 80056ec:	491a      	ldr	r1, [pc, #104]	; (8005758 <UART_Start_Receive_IT+0xc4>)
 80056ee:	6681      	str	r1, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 80056f0:	b1bb      	cbz	r3, 8005722 <UART_Start_Receive_IT+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80056f6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	e842 3100 	strex	r1, r3, [r2]
 80056fe:	2900      	cmp	r1, #0
 8005700:	d1f7      	bne.n	80056f2 <UART_Start_Receive_IT+0x5e>
}
 8005702:	2000      	movs	r0, #0
 8005704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005708:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800570a:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800570e:	d1d3      	bne.n	80056b8 <UART_Start_Receive_IT+0x24>
 8005710:	6903      	ldr	r3, [r0, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	bf0c      	ite	eq
 8005716:	237f      	moveq	r3, #127	; 0x7f
 8005718:	233f      	movne	r3, #63	; 0x3f
 800571a:	e7cd      	b.n	80056b8 <UART_Start_Receive_IT+0x24>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800571c:	b9cb      	cbnz	r3, 8005752 <UART_Start_Receive_IT+0xbe>
 800571e:	4b0f      	ldr	r3, [pc, #60]	; (800575c <UART_Start_Receive_IT+0xc8>)
 8005720:	6683      	str	r3, [r0, #104]	; 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005726:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	e842 3100 	strex	r1, r3, [r2]
 800572e:	2900      	cmp	r1, #0
 8005730:	d0e7      	beq.n	8005702 <UART_Start_Receive_IT+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	e852 3f00 	ldrex	r3, [r2]
 8005736:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	e842 3100 	strex	r1, r3, [r2]
 800573e:	2900      	cmp	r1, #0
 8005740:	d1ef      	bne.n	8005722 <UART_Start_Receive_IT+0x8e>
 8005742:	e7de      	b.n	8005702 <UART_Start_Receive_IT+0x6e>
  UART_MASK_COMPUTATION(huart);
 8005744:	6902      	ldr	r2, [r0, #16]
 8005746:	2a00      	cmp	r2, #0
 8005748:	f240 13ff 	movw	r3, #511	; 0x1ff
 800574c:	bf18      	it	ne
 800574e:	23ff      	movne	r3, #255	; 0xff
 8005750:	e7b2      	b.n	80056b8 <UART_Start_Receive_IT+0x24>
    huart->RxISR = UART_RxISR_8BIT;
 8005752:	4b01      	ldr	r3, [pc, #4]	; (8005758 <UART_Start_Receive_IT+0xc4>)
 8005754:	6683      	str	r3, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005756:	e7cc      	b.n	80056f2 <UART_Start_Receive_IT+0x5e>
 8005758:	08005011 	.word	0x08005011
 800575c:	08004fc1 	.word	0x08004fc1

08005760 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop

08005764 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005764:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005766:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 800576a:	2e20      	cmp	r6, #32
 800576c:	d103      	bne.n	8005776 <HAL_UARTEx_ReceiveToIdle_IT+0x12>
  {
    if ((pData == NULL) || (Size == 0U))
 800576e:	b101      	cbz	r1, 8005772 <HAL_UARTEx_ReceiveToIdle_IT+0xe>
 8005770:	b91a      	cbnz	r2, 800577a <HAL_UARTEx_ReceiveToIdle_IT+0x16>
    {
      return HAL_ERROR;
 8005772:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005774:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8005776:	2002      	movs	r0, #2
}
 8005778:	bd70      	pop	{r4, r5, r6, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800577a:	2301      	movs	r3, #1
 800577c:	6603      	str	r3, [r0, #96]	; 0x60
 800577e:	4604      	mov	r4, r0
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005780:	2300      	movs	r3, #0
 8005782:	6643      	str	r3, [r0, #100]	; 0x64
    (void)UART_Start_Receive_IT(huart, pData, Size);
 8005784:	f7ff ff86 	bl	8005694 <UART_Start_Receive_IT>
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005788:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800578a:	2b01      	cmp	r3, #1
 800578c:	d1f1      	bne.n	8005772 <HAL_UARTEx_ReceiveToIdle_IT+0xe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	2310      	movs	r3, #16
 8005792:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005798:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	e842 3100 	strex	r1, r3, [r2]
 80057a0:	2900      	cmp	r1, #0
 80057a2:	d1f7      	bne.n	8005794 <HAL_UARTEx_ReceiveToIdle_IT+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 80057a4:	2000      	movs	r0, #0
}
 80057a6:	bd70      	pop	{r4, r5, r6, pc}

080057a8 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a8:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <LL_TIM_Init+0xac>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80057aa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ac:	4290      	cmp	r0, r2
{
 80057ae:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b0:	d038      	beq.n	8005824 <LL_TIM_Init+0x7c>
 80057b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80057b6:	d021      	beq.n	80057fc <LL_TIM_Init+0x54>
 80057b8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80057bc:	4290      	cmp	r0, r2
 80057be:	d01d      	beq.n	80057fc <LL_TIM_Init+0x54>
 80057c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057c4:	4290      	cmp	r0, r2
 80057c6:	d019      	beq.n	80057fc <LL_TIM_Init+0x54>
 80057c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057cc:	4290      	cmp	r0, r2
 80057ce:	d015      	beq.n	80057fc <LL_TIM_Init+0x54>
 80057d0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80057d4:	4290      	cmp	r0, r2
 80057d6:	d037      	beq.n	8005848 <LL_TIM_Init+0xa0>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80057dc:	4290      	cmp	r0, r2
 80057de:	d031      	beq.n	8005844 <LL_TIM_Init+0x9c>
 80057e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057e4:	4290      	cmp	r0, r2
 80057e6:	d02d      	beq.n	8005844 <LL_TIM_Init+0x9c>
 80057e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057ec:	4290      	cmp	r0, r2
 80057ee:	d029      	beq.n	8005844 <LL_TIM_Init+0x9c>

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80057f0:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80057f2:	880a      	ldrh	r2, [r1, #0]
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80057f4:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80057f6:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80057f8:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057fa:	e00c      	b.n	8005816 <LL_TIM_Init+0x6e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80057fc:	684a      	ldr	r2, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80057fe:	68cd      	ldr	r5, [r1, #12]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005800:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005806:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800580c:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800580e:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005810:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005812:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8005814:	6282      	str	r2, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005816:	6943      	ldr	r3, [r0, #20]
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 800581e:	bc30      	pop	{r4, r5}
 8005820:	2000      	movs	r0, #0
 8005822:	4770      	bx	lr
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005824:	68ca      	ldr	r2, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005826:	684c      	ldr	r4, [r1, #4]
 8005828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800582e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005832:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005834:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005836:	688a      	ldr	r2, [r1, #8]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005838:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800583a:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 800583c:	6283      	str	r3, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800583e:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005840:	6303      	str	r3, [r0, #48]	; 0x30
}
 8005842:	e7e8      	b.n	8005816 <LL_TIM_Init+0x6e>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005844:	68ca      	ldr	r2, [r1, #12]
 8005846:	e7f2      	b.n	800582e <LL_TIM_Init+0x86>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005848:	684c      	ldr	r4, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800584a:	68ca      	ldr	r2, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800584c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005850:	e7ec      	b.n	800582c <LL_TIM_Init+0x84>
 8005852:	bf00      	nop
 8005854:	40012c00 	.word	0x40012c00

08005858 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005858:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800585a:	4903      	ldr	r1, [pc, #12]	; (8005868 <MX_FATFS_Init+0x10>)
 800585c:	4803      	ldr	r0, [pc, #12]	; (800586c <MX_FATFS_Init+0x14>)
 800585e:	f003 f8ef 	bl	8008a40 <FATFS_LinkDriver>
 8005862:	4b03      	ldr	r3, [pc, #12]	; (8005870 <MX_FATFS_Init+0x18>)
 8005864:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005866:	bd08      	pop	{r3, pc}
 8005868:	200044d4 	.word	0x200044d4
 800586c:	20000024 	.word	0x20000024
 8005870:	200044d8 	.word	0x200044d8

08005874 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8005874:	2000      	movs	r0, #0
 8005876:	4770      	bx	lr

08005878 <SD_PowerOn>:
  return res;
}

/* power on */
static void SD_PowerOn(void)
{
 8005878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800587c:	4836      	ldr	r0, [pc, #216]	; (8005958 <SD_PowerOn+0xe0>)
 800587e:	4d37      	ldr	r5, [pc, #220]	; (800595c <SD_PowerOn+0xe4>)
{
 8005880:	b086      	sub	sp, #24
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8005882:	2201      	movs	r2, #1
 8005884:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005888:	f7fd f9f0 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800588c:	2001      	movs	r0, #1
 800588e:	f7fc fcc5 	bl	800221c <HAL_Delay>
 8005892:	240a      	movs	r4, #10
 8005894:	26ff      	movs	r6, #255	; 0xff
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005896:	682a      	ldr	r2, [r5, #0]
 8005898:	f88d 600d 	strb.w	r6, [sp, #13]
 800589c:	6893      	ldr	r3, [r2, #8]
 800589e:	079f      	lsls	r7, r3, #30
 80058a0:	d5fc      	bpl.n	800589c <SD_PowerOn+0x24>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80058a2:	2364      	movs	r3, #100	; 0x64
 80058a4:	2201      	movs	r2, #1
 80058a6:	f10d 010d 	add.w	r1, sp, #13
 80058aa:	4628      	mov	r0, r5
 80058ac:	f7fe fb5e 	bl	8003f6c <HAL_SPI_Transmit>
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;

  /* transmit bytes to wake up */
  DESELECT();
  for(int i = 0; i < 10; i++)
 80058b0:	3c01      	subs	r4, #1
 80058b2:	d1f0      	bne.n	8005896 <SD_PowerOn+0x1e>
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80058b4:	4622      	mov	r2, r4
 80058b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058ba:	4827      	ldr	r0, [pc, #156]	; (8005958 <SD_PowerOn+0xe0>)
 80058bc:	f7fd f9d6 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80058c0:	2001      	movs	r0, #1
 80058c2:	f7fc fcab 	bl	800221c <HAL_Delay>

  /* slave select */
  SELECT();

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80058c6:	2140      	movs	r1, #64	; 0x40
  args[1] = 0;
  args[2] = 0;
  args[3] = 0;
  args[4] = 0;
 80058c8:	f44f 4315 	mov.w	r3, #38144	; 0x9500
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80058cc:	682a      	ldr	r2, [r5, #0]
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80058ce:	9104      	str	r1, [sp, #16]
  args[4] = 0;
 80058d0:	f8ad 3014 	strh.w	r3, [sp, #20]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80058d4:	6893      	ldr	r3, [r2, #8]
 80058d6:	0798      	lsls	r0, r3, #30
 80058d8:	d5fc      	bpl.n	80058d4 <SD_PowerOn+0x5c>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80058da:	4820      	ldr	r0, [pc, #128]	; (800595c <SD_PowerOn+0xe4>)
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80058dc:	4f1f      	ldr	r7, [pc, #124]	; (800595c <SD_PowerOn+0xe4>)
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80058de:	2364      	movs	r3, #100	; 0x64
 80058e0:	2206      	movs	r2, #6
 80058e2:	a904      	add	r1, sp, #16
 80058e4:	f7fe fb42 	bl	8003f6c <HAL_SPI_Transmit>
}
 80058e8:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  dummy = 0xFF;
 80058ec:	f04f 08ff 	mov.w	r8, #255	; 0xff
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80058f0:	2664      	movs	r6, #100	; 0x64
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80058f2:	682a      	ldr	r2, [r5, #0]
  dummy = 0xFF;
 80058f4:	f88d 800e 	strb.w	r8, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80058f8:	6893      	ldr	r3, [r2, #8]
 80058fa:	0799      	lsls	r1, r3, #30
 80058fc:	d5fc      	bpl.n	80058f8 <SD_PowerOn+0x80>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80058fe:	2301      	movs	r3, #1
 8005900:	9600      	str	r6, [sp, #0]
 8005902:	f10d 020f 	add.w	r2, sp, #15
 8005906:	f10d 010e 	add.w	r1, sp, #14
 800590a:	4638      	mov	r0, r7
 800590c:	f7fe fc5a 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 8005910:	f89d 300f 	ldrb.w	r3, [sp, #15]
  args[5] = 0x95;   /* CRC */

  SPI_TxBuffer(args, sizeof(args));

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8005914:	2b01      	cmp	r3, #1
 8005916:	d001      	beq.n	800591c <SD_PowerOn+0xa4>
 8005918:	3c01      	subs	r4, #1
 800591a:	d1ea      	bne.n	80058f2 <SD_PowerOn+0x7a>
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800591c:	2201      	movs	r2, #1
 800591e:	480e      	ldr	r0, [pc, #56]	; (8005958 <SD_PowerOn+0xe0>)
 8005920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005924:	f7fd f9a2 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005928:	2001      	movs	r0, #1
 800592a:	f7fc fc77 	bl	800221c <HAL_Delay>
static void SPI_TxByte(uint8_t data)
 800592e:	23ff      	movs	r3, #255	; 0xff
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005930:	682a      	ldr	r2, [r5, #0]
 8005932:	f88d 300f 	strb.w	r3, [sp, #15]
 8005936:	6893      	ldr	r3, [r2, #8]
 8005938:	079b      	lsls	r3, r3, #30
 800593a:	d5fc      	bpl.n	8005936 <SD_PowerOn+0xbe>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800593c:	2364      	movs	r3, #100	; 0x64
 800593e:	2201      	movs	r2, #1
 8005940:	f10d 010f 	add.w	r1, sp, #15
 8005944:	4805      	ldr	r0, [pc, #20]	; (800595c <SD_PowerOn+0xe4>)
 8005946:	f7fe fb11 	bl	8003f6c <HAL_SPI_Transmit>
  }

  DESELECT();
  SPI_TxByte(0XFF);

  PowerFlag = 1;
 800594a:	4b05      	ldr	r3, [pc, #20]	; (8005960 <SD_PowerOn+0xe8>)
 800594c:	2201      	movs	r2, #1
 800594e:	701a      	strb	r2, [r3, #0]
}
 8005950:	b006      	add	sp, #24
 8005952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005956:	bf00      	nop
 8005958:	48000400 	.word	0x48000400
 800595c:	20000198 	.word	0x20000198
 8005960:	200044da 	.word	0x200044da

08005964 <SD_RxDataBlock>:
  return PowerFlag;
}

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8005964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8005968:	4e33      	ldr	r6, [pc, #204]	; (8005a38 <SD_RxDataBlock+0xd4>)
 800596a:	4c34      	ldr	r4, [pc, #208]	; (8005a3c <SD_RxDataBlock+0xd8>)
 800596c:	23c8      	movs	r3, #200	; 0xc8
{
 800596e:	b085      	sub	sp, #20
 8005970:	4605      	mov	r5, r0
 8005972:	4689      	mov	r9, r1
  Timer1 = 200;
 8005974:	8033      	strh	r3, [r6, #0]
  dummy = 0xFF;
 8005976:	f04f 08ff 	mov.w	r8, #255	; 0xff
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800597a:	2764      	movs	r7, #100	; 0x64
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800597c:	6822      	ldr	r2, [r4, #0]
  dummy = 0xFF;
 800597e:	f88d 800e 	strb.w	r8, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005982:	6893      	ldr	r3, [r2, #8]
 8005984:	079b      	lsls	r3, r3, #30
 8005986:	d5fc      	bpl.n	8005982 <SD_RxDataBlock+0x1e>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005988:	2301      	movs	r3, #1
 800598a:	9700      	str	r7, [sp, #0]
 800598c:	f10d 020f 	add.w	r2, sp, #15
 8005990:	f10d 010e 	add.w	r1, sp, #14
 8005994:	4620      	mov	r0, r4
 8005996:	f7fe fc15 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 800599a:	f89d 300f 	ldrb.w	r3, [sp, #15]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
  } while((token == 0xFF) && Timer1);
 800599e:	2bff      	cmp	r3, #255	; 0xff
 80059a0:	d105      	bne.n	80059ae <SD_RxDataBlock+0x4a>
 80059a2:	8830      	ldrh	r0, [r6, #0]
 80059a4:	2800      	cmp	r0, #0
 80059a6:	d1e9      	bne.n	800597c <SD_RxDataBlock+0x18>
  /* discard CRC */
  SPI_RxByte();
  SPI_RxByte();

  return TRUE;
}
 80059a8:	b005      	add	sp, #20
 80059aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(token != 0xFE) return FALSE;
 80059ae:	2bfe      	cmp	r3, #254	; 0xfe
 80059b0:	d140      	bne.n	8005a34 <SD_RxDataBlock+0xd0>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80059b2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8005a3c <SD_RxDataBlock+0xd8>
 80059b6:	44a9      	add	r9, r5
  dummy = 0xFF;
 80059b8:	27ff      	movs	r7, #255	; 0xff
 80059ba:	3d01      	subs	r5, #1
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80059bc:	2664      	movs	r6, #100	; 0x64
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80059be:	6822      	ldr	r2, [r4, #0]
  dummy = 0xFF;
 80059c0:	f88d 700e 	strb.w	r7, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80059c4:	6893      	ldr	r3, [r2, #8]
 80059c6:	0798      	lsls	r0, r3, #30
 80059c8:	d5fc      	bpl.n	80059c4 <SD_RxDataBlock+0x60>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80059ca:	2301      	movs	r3, #1
 80059cc:	9600      	str	r6, [sp, #0]
 80059ce:	f10d 020f 	add.w	r2, sp, #15
 80059d2:	f10d 010e 	add.w	r1, sp, #14
 80059d6:	4640      	mov	r0, r8
 80059d8:	f7fe fbf4 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 80059dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
  *buff = SPI_RxByte();
 80059e0:	f805 3f01 	strb.w	r3, [r5, #1]!
  } while(len--);
 80059e4:	45a9      	cmp	r9, r5
 80059e6:	d1ea      	bne.n	80059be <SD_RxDataBlock+0x5a>
  dummy = 0xFF;
 80059e8:	23ff      	movs	r3, #255	; 0xff
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80059ea:	6822      	ldr	r2, [r4, #0]
  dummy = 0xFF;
 80059ec:	f88d 300e 	strb.w	r3, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80059f0:	6893      	ldr	r3, [r2, #8]
 80059f2:	0799      	lsls	r1, r3, #30
 80059f4:	d5fc      	bpl.n	80059f0 <SD_RxDataBlock+0x8c>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80059f6:	2364      	movs	r3, #100	; 0x64
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	f10d 020f 	add.w	r2, sp, #15
 80059fe:	2301      	movs	r3, #1
 8005a00:	480e      	ldr	r0, [pc, #56]	; (8005a3c <SD_RxDataBlock+0xd8>)
 8005a02:	f10d 010e 	add.w	r1, sp, #14
 8005a06:	f7fe fbdd 	bl	80041c4 <HAL_SPI_TransmitReceive>
  dummy = 0xFF;
 8005a0a:	23ff      	movs	r3, #255	; 0xff
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005a0c:	6822      	ldr	r2, [r4, #0]
  dummy = 0xFF;
 8005a0e:	f88d 300e 	strb.w	r3, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005a12:	6893      	ldr	r3, [r2, #8]
 8005a14:	079b      	lsls	r3, r3, #30
 8005a16:	d5fc      	bpl.n	8005a12 <SD_RxDataBlock+0xae>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005a18:	2364      	movs	r3, #100	; 0x64
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	f10d 020f 	add.w	r2, sp, #15
 8005a20:	2301      	movs	r3, #1
 8005a22:	f10d 010e 	add.w	r1, sp, #14
 8005a26:	4805      	ldr	r0, [pc, #20]	; (8005a3c <SD_RxDataBlock+0xd8>)
 8005a28:	f7fe fbcc 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return TRUE;
 8005a2c:	2001      	movs	r0, #1
}
 8005a2e:	b005      	add	sp, #20
 8005a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(token != 0xFE) return FALSE;
 8005a34:	2000      	movs	r0, #0
 8005a36:	e7b7      	b.n	80059a8 <SD_RxDataBlock+0x44>
 8005a38:	200044dc 	.word	0x200044dc
 8005a3c:	20000198 	.word	0x20000198

08005a40 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8005a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Timer2 = 500;
 8005a44:	4d52      	ldr	r5, [pc, #328]	; (8005b90 <SD_TxDataBlock+0x150>)
 8005a46:	4c53      	ldr	r4, [pc, #332]	; (8005b94 <SD_TxDataBlock+0x154>)
 8005a48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	4681      	mov	r9, r0
 8005a50:	4688      	mov	r8, r1
  Timer2 = 500;
 8005a52:	802b      	strh	r3, [r5, #0]
  dummy = 0xFF;
 8005a54:	27ff      	movs	r7, #255	; 0xff
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005a56:	2664      	movs	r6, #100	; 0x64
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005a58:	6822      	ldr	r2, [r4, #0]
  dummy = 0xFF;
 8005a5a:	f88d 700e 	strb.w	r7, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005a5e:	6893      	ldr	r3, [r2, #8]
 8005a60:	079b      	lsls	r3, r3, #30
 8005a62:	d5fc      	bpl.n	8005a5e <SD_TxDataBlock+0x1e>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005a64:	2301      	movs	r3, #1
 8005a66:	9600      	str	r6, [sp, #0]
 8005a68:	f10d 020f 	add.w	r2, sp, #15
 8005a6c:	f10d 010e 	add.w	r1, sp, #14
 8005a70:	4620      	mov	r0, r4
 8005a72:	f7fe fba7 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 8005a76:	f89d 300f 	ldrb.w	r3, [sp, #15]
  } while ((res != 0xFF) && Timer2);
 8005a7a:	2bff      	cmp	r3, #255	; 0xff
 8005a7c:	d005      	beq.n	8005a8a <SD_TxDataBlock+0x4a>
 8005a7e:	8828      	ldrh	r0, [r5, #0]
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d1e9      	bne.n	8005a58 <SD_TxDataBlock+0x18>

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;

  return FALSE;
}
 8005a84:	b005      	add	sp, #20
 8005a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005a8a:	6822      	ldr	r2, [r4, #0]
 8005a8c:	f88d 800f 	strb.w	r8, [sp, #15]
 8005a90:	6893      	ldr	r3, [r2, #8]
 8005a92:	079f      	lsls	r7, r3, #30
 8005a94:	d5fc      	bpl.n	8005a90 <SD_TxDataBlock+0x50>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8005a96:	483f      	ldr	r0, [pc, #252]	; (8005b94 <SD_TxDataBlock+0x154>)
 8005a98:	2364      	movs	r3, #100	; 0x64
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f10d 010f 	add.w	r1, sp, #15
 8005aa0:	f7fe fa64 	bl	8003f6c <HAL_SPI_Transmit>
  if (token != 0xFD)
 8005aa4:	f1b8 0ffd 	cmp.w	r8, #253	; 0xfd
 8005aa8:	d06a      	beq.n	8005b80 <SD_TxDataBlock+0x140>
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005aaa:	6822      	ldr	r2, [r4, #0]
 8005aac:	6893      	ldr	r3, [r2, #8]
 8005aae:	079e      	lsls	r6, r3, #30
 8005ab0:	d5fc      	bpl.n	8005aac <SD_TxDataBlock+0x6c>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8005ab2:	2364      	movs	r3, #100	; 0x64
 8005ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab8:	4836      	ldr	r0, [pc, #216]	; (8005b94 <SD_TxDataBlock+0x154>)
 8005aba:	4649      	mov	r1, r9
 8005abc:	f7fe fa56 	bl	8003f6c <HAL_SPI_Transmit>
  dummy = 0xFF;
 8005ac0:	23ff      	movs	r3, #255	; 0xff
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005ac2:	6822      	ldr	r2, [r4, #0]
  dummy = 0xFF;
 8005ac4:	f88d 300e 	strb.w	r3, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005ac8:	6893      	ldr	r3, [r2, #8]
 8005aca:	079d      	lsls	r5, r3, #30
 8005acc:	d5fc      	bpl.n	8005ac8 <SD_TxDataBlock+0x88>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005ace:	2364      	movs	r3, #100	; 0x64
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	f10d 020f 	add.w	r2, sp, #15
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	482e      	ldr	r0, [pc, #184]	; (8005b94 <SD_TxDataBlock+0x154>)
 8005ada:	f10d 010e 	add.w	r1, sp, #14
 8005ade:	f7fe fb71 	bl	80041c4 <HAL_SPI_TransmitReceive>
  dummy = 0xFF;
 8005ae2:	23ff      	movs	r3, #255	; 0xff
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005ae4:	6822      	ldr	r2, [r4, #0]
  dummy = 0xFF;
 8005ae6:	f88d 300e 	strb.w	r3, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005aea:	6893      	ldr	r3, [r2, #8]
 8005aec:	0798      	lsls	r0, r3, #30
 8005aee:	d5fc      	bpl.n	8005aea <SD_TxDataBlock+0xaa>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005af0:	2664      	movs	r6, #100	; 0x64
 8005af2:	4828      	ldr	r0, [pc, #160]	; (8005b94 <SD_TxDataBlock+0x154>)
 8005af4:	9600      	str	r6, [sp, #0]
 8005af6:	2301      	movs	r3, #1
 8005af8:	f10d 020f 	add.w	r2, sp, #15
 8005afc:	f10d 010e 	add.w	r1, sp, #14
 8005b00:	f7fe fb60 	bl	80041c4 <HAL_SPI_TransmitReceive>
 8005b04:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8005b94 <SD_TxDataBlock+0x154>
 8005b08:	f04f 0941 	mov.w	r9, #65	; 0x41
  dummy = 0xFF;
 8005b0c:	27ff      	movs	r7, #255	; 0xff
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005b0e:	6822      	ldr	r2, [r4, #0]
  dummy = 0xFF;
 8005b10:	f88d 700e 	strb.w	r7, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005b14:	6893      	ldr	r3, [r2, #8]
 8005b16:	0799      	lsls	r1, r3, #30
 8005b18:	d5fc      	bpl.n	8005b14 <SD_TxDataBlock+0xd4>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005b1a:	9600      	str	r6, [sp, #0]
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f10d 020f 	add.w	r2, sp, #15
 8005b22:	f10d 010e 	add.w	r1, sp, #14
 8005b26:	4640      	mov	r0, r8
 8005b28:	f7fe fb4c 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 8005b2c:	f89d 500f 	ldrb.w	r5, [sp, #15]
      if ((resp & 0x1F) == 0x05) break;
 8005b30:	f005 051f 	and.w	r5, r5, #31
 8005b34:	2d05      	cmp	r5, #5
 8005b36:	d004      	beq.n	8005b42 <SD_TxDataBlock+0x102>
    while (i <= 64)
 8005b38:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8005b3c:	f013 09ff 	ands.w	r9, r3, #255	; 0xff
 8005b40:	d1e5      	bne.n	8005b0e <SD_TxDataBlock+0xce>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005b42:	4f14      	ldr	r7, [pc, #80]	; (8005b94 <SD_TxDataBlock+0x154>)
  dummy = 0xFF;
 8005b44:	f04f 08ff 	mov.w	r8, #255	; 0xff
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005b48:	2664      	movs	r6, #100	; 0x64
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005b4a:	6822      	ldr	r2, [r4, #0]
  dummy = 0xFF;
 8005b4c:	f88d 800e 	strb.w	r8, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005b50:	6893      	ldr	r3, [r2, #8]
 8005b52:	079b      	lsls	r3, r3, #30
 8005b54:	d5fc      	bpl.n	8005b50 <SD_TxDataBlock+0x110>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005b56:	2301      	movs	r3, #1
 8005b58:	9600      	str	r6, [sp, #0]
 8005b5a:	f10d 020f 	add.w	r2, sp, #15
 8005b5e:	f10d 010e 	add.w	r1, sp, #14
 8005b62:	4638      	mov	r0, r7
 8005b64:	f7fe fb2e 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 8005b68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    while (SPI_RxByte() == 0);
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0ec      	beq.n	8005b4a <SD_TxDataBlock+0x10a>
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8005b70:	f1a5 0005 	sub.w	r0, r5, #5
 8005b74:	fab0 f080 	clz	r0, r0
 8005b78:	0940      	lsrs	r0, r0, #5
}
 8005b7a:	b005      	add	sp, #20
 8005b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b80:	2500      	movs	r5, #0
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8005b82:	f1a5 0005 	sub.w	r0, r5, #5
 8005b86:	fab0 f080 	clz	r0, r0
 8005b8a:	0940      	lsrs	r0, r0, #5
 8005b8c:	e7f5      	b.n	8005b7a <SD_TxDataBlock+0x13a>
 8005b8e:	bf00      	nop
 8005b90:	200044de 	.word	0x200044de
 8005b94:	20000198 	.word	0x20000198

08005b98 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8005b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Timer2 = 500;
 8005b9c:	4d5b      	ldr	r5, [pc, #364]	; (8005d0c <SD_SendCmd+0x174>)
 8005b9e:	4c5c      	ldr	r4, [pc, #368]	; (8005d10 <SD_SendCmd+0x178>)
 8005ba0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	4681      	mov	r9, r0
 8005ba8:	4688      	mov	r8, r1
  Timer2 = 500;
 8005baa:	802b      	strh	r3, [r5, #0]
  dummy = 0xFF;
 8005bac:	27ff      	movs	r7, #255	; 0xff
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005bae:	2664      	movs	r6, #100	; 0x64
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005bb0:	6822      	ldr	r2, [r4, #0]
  dummy = 0xFF;
 8005bb2:	f88d 700e 	strb.w	r7, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005bb6:	6893      	ldr	r3, [r2, #8]
 8005bb8:	0798      	lsls	r0, r3, #30
 8005bba:	d5fc      	bpl.n	8005bb6 <SD_SendCmd+0x1e>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	9600      	str	r6, [sp, #0]
 8005bc0:	f10d 020f 	add.w	r2, sp, #15
 8005bc4:	f10d 010e 	add.w	r1, sp, #14
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f7fe fafb 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 8005bce:	f89d 300f 	ldrb.w	r3, [sp, #15]
  } while ((res != 0xFF) && Timer2);
 8005bd2:	2bff      	cmp	r3, #255	; 0xff
 8005bd4:	d006      	beq.n	8005be4 <SD_SendCmd+0x4c>
 8005bd6:	882b      	ldrh	r3, [r5, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e9      	bne.n	8005bb0 <SD_SendCmd+0x18>
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8005bdc:	20ff      	movs	r0, #255	; 0xff
  do {
    res = SPI_RxByte();
  } while ((res & 0x80) && --n);

  return res;
}
 8005bde:	b005      	add	sp, #20
 8005be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005be4:	6822      	ldr	r2, [r4, #0]
 8005be6:	f88d 900f 	strb.w	r9, [sp, #15]
 8005bea:	6893      	ldr	r3, [r2, #8]
 8005bec:	0799      	lsls	r1, r3, #30
 8005bee:	d5fc      	bpl.n	8005bea <SD_SendCmd+0x52>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8005bf0:	2364      	movs	r3, #100	; 0x64
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	4846      	ldr	r0, [pc, #280]	; (8005d10 <SD_SendCmd+0x178>)
 8005bf6:	f10d 010f 	add.w	r1, sp, #15
 8005bfa:	f7fe f9b7 	bl	8003f6c <HAL_SPI_Transmit>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8005bfe:	ea4f 6318 	mov.w	r3, r8, lsr #24
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005c02:	6822      	ldr	r2, [r4, #0]
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8005c04:	f88d 300f 	strb.w	r3, [sp, #15]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005c08:	6893      	ldr	r3, [r2, #8]
 8005c0a:	079b      	lsls	r3, r3, #30
 8005c0c:	d5fc      	bpl.n	8005c08 <SD_SendCmd+0x70>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8005c0e:	2364      	movs	r3, #100	; 0x64
 8005c10:	2201      	movs	r2, #1
 8005c12:	483f      	ldr	r0, [pc, #252]	; (8005d10 <SD_SendCmd+0x178>)
 8005c14:	f10d 010f 	add.w	r1, sp, #15
 8005c18:	f7fe f9a8 	bl	8003f6c <HAL_SPI_Transmit>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8005c1c:	ea4f 4318 	mov.w	r3, r8, lsr #16
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005c20:	6822      	ldr	r2, [r4, #0]
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8005c22:	f88d 300f 	strb.w	r3, [sp, #15]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005c26:	6893      	ldr	r3, [r2, #8]
 8005c28:	079f      	lsls	r7, r3, #30
 8005c2a:	d5fc      	bpl.n	8005c26 <SD_SendCmd+0x8e>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8005c2c:	2364      	movs	r3, #100	; 0x64
 8005c2e:	2201      	movs	r2, #1
 8005c30:	4837      	ldr	r0, [pc, #220]	; (8005d10 <SD_SendCmd+0x178>)
 8005c32:	f10d 010f 	add.w	r1, sp, #15
 8005c36:	f7fe f999 	bl	8003f6c <HAL_SPI_Transmit>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8005c3a:	ea4f 2318 	mov.w	r3, r8, lsr #8
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005c3e:	6822      	ldr	r2, [r4, #0]
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8005c40:	f88d 300f 	strb.w	r3, [sp, #15]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005c44:	6893      	ldr	r3, [r2, #8]
 8005c46:	079e      	lsls	r6, r3, #30
 8005c48:	d5fc      	bpl.n	8005c44 <SD_SendCmd+0xac>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	4830      	ldr	r0, [pc, #192]	; (8005d10 <SD_SendCmd+0x178>)
 8005c4e:	2364      	movs	r3, #100	; 0x64
 8005c50:	f10d 010f 	add.w	r1, sp, #15
 8005c54:	f7fe f98a 	bl	8003f6c <HAL_SPI_Transmit>
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005c58:	6822      	ldr	r2, [r4, #0]
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8005c5a:	f88d 800f 	strb.w	r8, [sp, #15]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005c5e:	6893      	ldr	r3, [r2, #8]
 8005c60:	079d      	lsls	r5, r3, #30
 8005c62:	d5fc      	bpl.n	8005c5e <SD_SendCmd+0xc6>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8005c64:	482a      	ldr	r0, [pc, #168]	; (8005d10 <SD_SendCmd+0x178>)
 8005c66:	2364      	movs	r3, #100	; 0x64
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f10d 010f 	add.w	r1, sp, #15
 8005c6e:	f7fe f97d 	bl	8003f6c <HAL_SPI_Transmit>
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8005c72:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8005c76:	d035      	beq.n	8005ce4 <SD_SendCmd+0x14c>
  else crc = 1;
 8005c78:	f1b9 0f48 	cmp.w	r9, #72	; 0x48
 8005c7c:	bf0c      	ite	eq
 8005c7e:	2387      	moveq	r3, #135	; 0x87
 8005c80:	2301      	movne	r3, #1
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005c82:	6822      	ldr	r2, [r4, #0]
 8005c84:	f88d 300f 	strb.w	r3, [sp, #15]
 8005c88:	6893      	ldr	r3, [r2, #8]
 8005c8a:	0798      	lsls	r0, r3, #30
 8005c8c:	d5fc      	bpl.n	8005c88 <SD_SendCmd+0xf0>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8005c8e:	4820      	ldr	r0, [pc, #128]	; (8005d10 <SD_SendCmd+0x178>)
 8005c90:	2364      	movs	r3, #100	; 0x64
 8005c92:	2201      	movs	r2, #1
 8005c94:	f10d 010f 	add.w	r1, sp, #15
 8005c98:	f7fe f968 	bl	8003f6c <HAL_SPI_Transmit>
  if (cmd == CMD12) SPI_RxByte();
 8005c9c:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
 8005ca0:	d022      	beq.n	8005ce8 <SD_SendCmd+0x150>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005ca2:	4f1b      	ldr	r7, [pc, #108]	; (8005d10 <SD_SendCmd+0x178>)
  else crc = 1;
 8005ca4:	250a      	movs	r5, #10
  dummy = 0xFF;
 8005ca6:	f04f 08ff 	mov.w	r8, #255	; 0xff
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005caa:	2664      	movs	r6, #100	; 0x64
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005cac:	6822      	ldr	r2, [r4, #0]
  dummy = 0xFF;
 8005cae:	f88d 800e 	strb.w	r8, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005cb2:	6893      	ldr	r3, [r2, #8]
 8005cb4:	079b      	lsls	r3, r3, #30
 8005cb6:	d5fc      	bpl.n	8005cb2 <SD_SendCmd+0x11a>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005cb8:	2301      	movs	r3, #1
 8005cba:	9600      	str	r6, [sp, #0]
 8005cbc:	f10d 020f 	add.w	r2, sp, #15
 8005cc0:	f10d 010e 	add.w	r1, sp, #14
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	f7fe fa7d 	bl	80041c4 <HAL_SPI_TransmitReceive>
  } while ((res & 0x80) && --n);
 8005cca:	f99d 300f 	ldrsb.w	r3, [sp, #15]
  return data;
 8005cce:	f89d 000f 	ldrb.w	r0, [sp, #15]
  } while ((res & 0x80) && --n);
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	da83      	bge.n	8005bde <SD_SendCmd+0x46>
 8005cd6:	1e6b      	subs	r3, r5, #1
 8005cd8:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 8005cdc:	d1e6      	bne.n	8005cac <SD_SendCmd+0x114>
}
 8005cde:	b005      	add	sp, #20
 8005ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8005ce4:	2395      	movs	r3, #149	; 0x95
 8005ce6:	e7cc      	b.n	8005c82 <SD_SendCmd+0xea>
  dummy = 0xFF;
 8005ce8:	23ff      	movs	r3, #255	; 0xff
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005cea:	6822      	ldr	r2, [r4, #0]
  dummy = 0xFF;
 8005cec:	f88d 300e 	strb.w	r3, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005cf0:	6893      	ldr	r3, [r2, #8]
 8005cf2:	0799      	lsls	r1, r3, #30
 8005cf4:	d5fc      	bpl.n	8005cf0 <SD_SendCmd+0x158>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005cf6:	2364      	movs	r3, #100	; 0x64
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	f10d 020f 	add.w	r2, sp, #15
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f10d 010e 	add.w	r1, sp, #14
 8005d04:	4802      	ldr	r0, [pc, #8]	; (8005d10 <SD_SendCmd+0x178>)
 8005d06:	f7fe fa5d 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 8005d0a:	e7ca      	b.n	8005ca2 <SD_SendCmd+0x10a>
 8005d0c:	200044de 	.word	0x200044de
 8005d10:	20000198 	.word	0x20000198

08005d14 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8005d14:	2800      	cmp	r0, #0
 8005d16:	d147      	bne.n	8005da8 <SD_disk_initialize+0x94>
{
 8005d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8005d1c:	4d80      	ldr	r5, [pc, #512]	; (8005f20 <SD_disk_initialize+0x20c>)
 8005d1e:	782c      	ldrb	r4, [r5, #0]
 8005d20:	f014 0402 	ands.w	r4, r4, #2
{
 8005d24:	b087      	sub	sp, #28
  if(Stat & STA_NODISK) return Stat;
 8005d26:	d004      	beq.n	8005d32 <SD_disk_initialize+0x1e>
  {
    /* Initialization failed */
    SD_PowerOff();
  }

  return Stat;
 8005d28:	7828      	ldrb	r0, [r5, #0]
 8005d2a:	b2c0      	uxtb	r0, r0
}
 8005d2c:	b007      	add	sp, #28
 8005d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  SD_PowerOn();
 8005d32:	f7ff fda1 	bl	8005878 <SD_PowerOn>
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8005d36:	4622      	mov	r2, r4
 8005d38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d3c:	4879      	ldr	r0, [pc, #484]	; (8005f24 <SD_disk_initialize+0x210>)
 8005d3e:	f7fc ff95 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005d42:	2001      	movs	r0, #1
 8005d44:	f7fc fa6a 	bl	800221c <HAL_Delay>
  if (SD_SendCmd(CMD0, 0) == 1)
 8005d48:	4621      	mov	r1, r4
 8005d4a:	2040      	movs	r0, #64	; 0x40
 8005d4c:	f7ff ff24 	bl	8005b98 <SD_SendCmd>
 8005d50:	2801      	cmp	r0, #1
 8005d52:	4607      	mov	r7, r0
 8005d54:	d031      	beq.n	8005dba <SD_disk_initialize+0xa6>
 8005d56:	4e74      	ldr	r6, [pc, #464]	; (8005f28 <SD_disk_initialize+0x214>)
 8005d58:	f10d 0813 	add.w	r8, sp, #19
 8005d5c:	f10d 0712 	add.w	r7, sp, #18
  CardType = type;
 8005d60:	4b72      	ldr	r3, [pc, #456]	; (8005f2c <SD_disk_initialize+0x218>)
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8005d62:	4870      	ldr	r0, [pc, #448]	; (8005f24 <SD_disk_initialize+0x210>)
  CardType = type;
 8005d64:	701c      	strb	r4, [r3, #0]
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8005d66:	2201      	movs	r2, #1
 8005d68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d6c:	f7fc ff7e 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005d70:	2001      	movs	r0, #1
 8005d72:	f7fc fa53 	bl	800221c <HAL_Delay>
  dummy = 0xFF;
 8005d76:	23ff      	movs	r3, #255	; 0xff
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005d78:	6832      	ldr	r2, [r6, #0]
  dummy = 0xFF;
 8005d7a:	f88d 3012 	strb.w	r3, [sp, #18]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005d7e:	6893      	ldr	r3, [r2, #8]
 8005d80:	079b      	lsls	r3, r3, #30
 8005d82:	d5fc      	bpl.n	8005d7e <SD_disk_initialize+0x6a>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005d84:	2364      	movs	r3, #100	; 0x64
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	4867      	ldr	r0, [pc, #412]	; (8005f28 <SD_disk_initialize+0x214>)
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	4639      	mov	r1, r7
 8005d90:	f7fe fa18 	bl	80041c4 <HAL_SPI_TransmitReceive>
  if (type)
 8005d94:	b154      	cbz	r4, 8005dac <SD_disk_initialize+0x98>
    Stat &= ~STA_NOINIT;
 8005d96:	782b      	ldrb	r3, [r5, #0]
 8005d98:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005d9c:	702b      	strb	r3, [r5, #0]
  return Stat;
 8005d9e:	7828      	ldrb	r0, [r5, #0]
 8005da0:	b2c0      	uxtb	r0, r0
}
 8005da2:	b007      	add	sp, #28
 8005da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(drv) return STA_NOINIT;
 8005da8:	2001      	movs	r0, #1
}
 8005daa:	4770      	bx	lr
  return Stat;
 8005dac:	7828      	ldrb	r0, [r5, #0]
  PowerFlag = 0;
 8005dae:	4b60      	ldr	r3, [pc, #384]	; (8005f30 <SD_disk_initialize+0x21c>)
  return Stat;
 8005db0:	b2c0      	uxtb	r0, r0
  PowerFlag = 0;
 8005db2:	701c      	strb	r4, [r3, #0]
}
 8005db4:	b007      	add	sp, #28
 8005db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Timer1 = 1000;
 8005dba:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005f34 <SD_disk_initialize+0x220>
 8005dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8005dc2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005dc6:	2048      	movs	r0, #72	; 0x48
    Timer1 = 1000;
 8005dc8:	f8a9 3000 	strh.w	r3, [r9]
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8005dcc:	f7ff fee4 	bl	8005b98 <SD_SendCmd>
 8005dd0:	2801      	cmp	r0, #1
 8005dd2:	d167      	bne.n	8005ea4 <SD_disk_initialize+0x190>
 8005dd4:	4e54      	ldr	r6, [pc, #336]	; (8005f28 <SD_disk_initialize+0x214>)
 8005dd6:	ab05      	add	r3, sp, #20
 8005dd8:	9303      	str	r3, [sp, #12]
 8005dda:	469a      	mov	sl, r3
 8005ddc:	f10d 0813 	add.w	r8, sp, #19
 8005de0:	f10d 0712 	add.w	r7, sp, #18
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005de4:	46b3      	mov	fp, r6
  dummy = 0xFF;
 8005de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005dea:	6832      	ldr	r2, [r6, #0]
  dummy = 0xFF;
 8005dec:	f88d 3012 	strb.w	r3, [sp, #18]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005df0:	6893      	ldr	r3, [r2, #8]
 8005df2:	0799      	lsls	r1, r3, #30
 8005df4:	d5fc      	bpl.n	8005df0 <SD_disk_initialize+0xdc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005df6:	2364      	movs	r3, #100	; 0x64
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	4642      	mov	r2, r8
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4639      	mov	r1, r7
 8005e00:	4658      	mov	r0, fp
 8005e02:	f7fe f9df 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 8005e06:	f89d 3013 	ldrb.w	r3, [sp, #19]
        ocr[n] = SPI_RxByte();
 8005e0a:	f80a 3b01 	strb.w	r3, [sl], #1
      for (n = 0; n < 4; n++)
 8005e0e:	ab06      	add	r3, sp, #24
 8005e10:	459a      	cmp	sl, r3
 8005e12:	d1e8      	bne.n	8005de6 <SD_disk_initialize+0xd2>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8005e14:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d1a1      	bne.n	8005d60 <SD_disk_initialize+0x4c>
 8005e1c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005e20:	2baa      	cmp	r3, #170	; 0xaa
 8005e22:	d19d      	bne.n	8005d60 <SD_disk_initialize+0x4c>
 8005e24:	e003      	b.n	8005e2e <SD_disk_initialize+0x11a>
        } while (Timer1);
 8005e26:	f8b9 3000 	ldrh.w	r3, [r9]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d098      	beq.n	8005d60 <SD_disk_initialize+0x4c>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005e2e:	2100      	movs	r1, #0
 8005e30:	2077      	movs	r0, #119	; 0x77
 8005e32:	f7ff feb1 	bl	8005b98 <SD_SendCmd>
 8005e36:	2801      	cmp	r0, #1
 8005e38:	d8f5      	bhi.n	8005e26 <SD_disk_initialize+0x112>
 8005e3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005e3e:	2069      	movs	r0, #105	; 0x69
 8005e40:	f7ff feaa 	bl	8005b98 <SD_SendCmd>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d1ee      	bne.n	8005e26 <SD_disk_initialize+0x112>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8005e48:	f8b9 3000 	ldrh.w	r3, [r9]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d087      	beq.n	8005d60 <SD_disk_initialize+0x4c>
 8005e50:	4601      	mov	r1, r0
 8005e52:	207a      	movs	r0, #122	; 0x7a
 8005e54:	f7ff fea0 	bl	8005b98 <SD_SendCmd>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d181      	bne.n	8005d60 <SD_disk_initialize+0x4c>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005e5c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8005f28 <SD_disk_initialize+0x214>
 8005e60:	f8dd b00c 	ldr.w	fp, [sp, #12]
  dummy = 0xFF;
 8005e64:	24ff      	movs	r4, #255	; 0xff
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005e66:	f04f 0a64 	mov.w	sl, #100	; 0x64
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005e6a:	6830      	ldr	r0, [r6, #0]
  dummy = 0xFF;
 8005e6c:	f88d 4012 	strb.w	r4, [sp, #18]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005e70:	6883      	ldr	r3, [r0, #8]
 8005e72:	079a      	lsls	r2, r3, #30
 8005e74:	d5fc      	bpl.n	8005e70 <SD_disk_initialize+0x15c>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005e76:	2301      	movs	r3, #1
 8005e78:	f8cd a000 	str.w	sl, [sp]
 8005e7c:	4642      	mov	r2, r8
 8005e7e:	4639      	mov	r1, r7
 8005e80:	4648      	mov	r0, r9
 8005e82:	f7fe f99f 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 8005e86:	f89d 3013 	ldrb.w	r3, [sp, #19]
            ocr[n] = SPI_RxByte();
 8005e8a:	f80b 3b01 	strb.w	r3, [fp], #1
          for (n = 0; n < 4; n++)
 8005e8e:	ab06      	add	r3, sp, #24
 8005e90:	459b      	cmp	fp, r3
 8005e92:	d1ea      	bne.n	8005e6a <SD_disk_initialize+0x156>
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8005e94:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8005e98:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e9c:	bf14      	ite	ne
 8005e9e:	240c      	movne	r4, #12
 8005ea0:	2404      	moveq	r4, #4
 8005ea2:	e75d      	b.n	8005d60 <SD_disk_initialize+0x4c>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	2077      	movs	r0, #119	; 0x77
 8005ea8:	f7ff fe76 	bl	8005b98 <SD_SendCmd>
 8005eac:	2801      	cmp	r0, #1
 8005eae:	d805      	bhi.n	8005ebc <SD_disk_initialize+0x1a8>
 8005eb0:	e01c      	b.n	8005eec <SD_disk_initialize+0x1d8>
      } while (Timer1);
 8005eb2:	f8b9 3000 	ldrh.w	r3, [r9]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f43f af4d 	beq.w	8005d56 <SD_disk_initialize+0x42>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	2041      	movs	r0, #65	; 0x41
 8005ec0:	f7ff fe6a 	bl	8005b98 <SD_SendCmd>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	d1f4      	bne.n	8005eb2 <SD_disk_initialize+0x19e>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8005ec8:	f8b9 3000 	ldrh.w	r3, [r9]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f43f af42 	beq.w	8005d56 <SD_disk_initialize+0x42>
 8005ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ed6:	2050      	movs	r0, #80	; 0x50
 8005ed8:	f7ff fe5e 	bl	8005b98 <SD_SendCmd>
 8005edc:	4e12      	ldr	r6, [pc, #72]	; (8005f28 <SD_disk_initialize+0x214>)
 8005ede:	b900      	cbnz	r0, 8005ee2 <SD_disk_initialize+0x1ce>
 8005ee0:	463c      	mov	r4, r7
 8005ee2:	f10d 0813 	add.w	r8, sp, #19
 8005ee6:	f10d 0712 	add.w	r7, sp, #18
 8005eea:	e739      	b.n	8005d60 <SD_disk_initialize+0x4c>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8005eec:	4621      	mov	r1, r4
 8005eee:	2069      	movs	r0, #105	; 0x69
 8005ef0:	f7ff fe52 	bl	8005b98 <SD_SendCmd>
 8005ef4:	2801      	cmp	r0, #1
 8005ef6:	d8e1      	bhi.n	8005ebc <SD_disk_initialize+0x1a8>
 8005ef8:	e004      	b.n	8005f04 <SD_disk_initialize+0x1f0>
      } while (Timer1);
 8005efa:	f8b9 3000 	ldrh.w	r3, [r9]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f43f af29 	beq.w	8005d56 <SD_disk_initialize+0x42>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8005f04:	2100      	movs	r1, #0
 8005f06:	2077      	movs	r0, #119	; 0x77
 8005f08:	f7ff fe46 	bl	8005b98 <SD_SendCmd>
 8005f0c:	2801      	cmp	r0, #1
 8005f0e:	d8f4      	bhi.n	8005efa <SD_disk_initialize+0x1e6>
 8005f10:	2100      	movs	r1, #0
 8005f12:	2069      	movs	r0, #105	; 0x69
 8005f14:	f7ff fe40 	bl	8005b98 <SD_SendCmd>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d1ee      	bne.n	8005efa <SD_disk_initialize+0x1e6>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8005f1c:	2702      	movs	r7, #2
 8005f1e:	e7d3      	b.n	8005ec8 <SD_disk_initialize+0x1b4>
 8005f20:	20000020 	.word	0x20000020
 8005f24:	48000400 	.word	0x48000400
 8005f28:	20000198 	.word	0x20000198
 8005f2c:	200044d9 	.word	0x200044d9
 8005f30:	200044da 	.word	0x200044da
 8005f34:	200044dc 	.word	0x200044dc

08005f38 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
  if (drv) return STA_NOINIT;
 8005f38:	b918      	cbnz	r0, 8005f42 <SD_disk_status+0xa>
  return Stat;
 8005f3a:	4b03      	ldr	r3, [pc, #12]	; (8005f48 <SD_disk_status+0x10>)
 8005f3c:	7818      	ldrb	r0, [r3, #0]
 8005f3e:	b2c0      	uxtb	r0, r0
 8005f40:	4770      	bx	lr
  if (drv) return STA_NOINIT;
 8005f42:	2001      	movs	r0, #1
}
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	20000020 	.word	0x20000020

08005f4c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8005f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f50:	b089      	sub	sp, #36	; 0x24
 8005f52:	9303      	str	r3, [sp, #12]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d14f      	bne.n	8005ff8 <SD_disk_read+0xac>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d04d      	beq.n	8005ff8 <SD_disk_read+0xac>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005f5c:	4b9c      	ldr	r3, [pc, #624]	; (80061d0 <SD_disk_read+0x284>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	07dc      	lsls	r4, r3, #31
 8005f62:	d471      	bmi.n	8006048 <SD_disk_read+0xfc>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8005f64:	4b9b      	ldr	r3, [pc, #620]	; (80061d4 <SD_disk_read+0x288>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	0758      	lsls	r0, r3, #29
 8005f6a:	4614      	mov	r4, r2
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8005f6c:	489a      	ldr	r0, [pc, #616]	; (80061d8 <SD_disk_read+0x28c>)
  if (!(CardType & CT_SD2)) sector *= 512;
 8005f6e:	bf58      	it	pl
 8005f70:	0254      	lslpl	r4, r2, #9
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8005f72:	468a      	mov	sl, r1
 8005f74:	2200      	movs	r2, #0
 8005f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f7a:	f7fc fe77 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005f7e:	2001      	movs	r0, #1
 8005f80:	f7fc f94c 	bl	800221c <HAL_Delay>

  SELECT();

  if (count == 1)
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	2b01      	cmp	r3, #1
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8005f88:	4621      	mov	r1, r4
  if (count == 1)
 8005f8a:	f000 80aa 	beq.w	80060e2 <SD_disk_read+0x196>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8005f8e:	2052      	movs	r0, #82	; 0x52
 8005f90:	f7ff fe02 	bl	8005b98 <SD_SendCmd>
 8005f94:	4e91      	ldr	r6, [pc, #580]	; (80061dc <SD_disk_read+0x290>)
 8005f96:	9004      	str	r0, [sp, #16]
 8005f98:	bba0      	cbnz	r0, 8006004 <SD_disk_read+0xb8>
 8005f9a:	f10d 051f 	add.w	r5, sp, #31
 8005f9e:	f10d 041e 	add.w	r4, sp, #30
 8005fa2:	f8df b23c 	ldr.w	fp, [pc, #572]	; 80061e0 <SD_disk_read+0x294>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005fa6:	462a      	mov	r2, r5
  dummy = 0xFF;
 8005fa8:	f04f 08ff 	mov.w	r8, #255	; 0xff
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005fac:	4637      	mov	r7, r6
 8005fae:	4625      	mov	r5, r4
  Timer1 = 200;
 8005fb0:	f04f 03c8 	mov.w	r3, #200	; 0xc8
 8005fb4:	f8ab 3000 	strh.w	r3, [fp]
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005fb8:	2464      	movs	r4, #100	; 0x64
 8005fba:	4691      	mov	r9, r2
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005fbc:	6832      	ldr	r2, [r6, #0]
  dummy = 0xFF;
 8005fbe:	f88d 801e 	strb.w	r8, [sp, #30]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005fc2:	6893      	ldr	r3, [r2, #8]
 8005fc4:	0799      	lsls	r1, r3, #30
 8005fc6:	d5fc      	bpl.n	8005fc2 <SD_disk_read+0x76>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005fc8:	2301      	movs	r3, #1
 8005fca:	9400      	str	r4, [sp, #0]
 8005fcc:	464a      	mov	r2, r9
 8005fce:	4629      	mov	r1, r5
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	f7fe f8f7 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 8005fd6:	f89d 301f 	ldrb.w	r3, [sp, #31]
  } while((token == 0xFF) && Timer1);
 8005fda:	2bff      	cmp	r3, #255	; 0xff
 8005fdc:	d13a      	bne.n	8006054 <SD_disk_read+0x108>
 8005fde:	f8bb 3000 	ldrh.w	r3, [fp]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1ea      	bne.n	8005fbc <SD_disk_read+0x70>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	462c      	mov	r4, r5
 8005fea:	9304      	str	r3, [sp, #16]
 8005fec:	464d      	mov	r5, r9
        if (!SD_RxDataBlock(buff, 512)) break;
        buff += 512;
      } while (--count);

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8005fee:	2100      	movs	r1, #0
 8005ff0:	204c      	movs	r0, #76	; 0x4c
 8005ff2:	f7ff fdd1 	bl	8005b98 <SD_SendCmd>
 8005ff6:	e00b      	b.n	8006010 <SD_disk_read+0xc4>
  if (pdrv || !count) return RES_PARERR;
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	9304      	str	r3, [sp, #16]
  /* Idle */
  DESELECT();
  SPI_RxByte();

  return count ? RES_ERROR : RES_OK;
}
 8005ffc:	9804      	ldr	r0, [sp, #16]
 8005ffe:	b009      	add	sp, #36	; 0x24
 8006000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006004:	2301      	movs	r3, #1
 8006006:	9304      	str	r3, [sp, #16]
 8006008:	f10d 051f 	add.w	r5, sp, #31
 800600c:	f10d 041e 	add.w	r4, sp, #30
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8006010:	2201      	movs	r2, #1
 8006012:	4871      	ldr	r0, [pc, #452]	; (80061d8 <SD_disk_read+0x28c>)
 8006014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006018:	f7fc fe28 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800601c:	2001      	movs	r0, #1
 800601e:	f7fc f8fd 	bl	800221c <HAL_Delay>
  dummy = 0xFF;
 8006022:	23ff      	movs	r3, #255	; 0xff
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8006024:	6832      	ldr	r2, [r6, #0]
  dummy = 0xFF;
 8006026:	f88d 301e 	strb.w	r3, [sp, #30]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800602a:	6893      	ldr	r3, [r2, #8]
 800602c:	079b      	lsls	r3, r3, #30
 800602e:	d5fc      	bpl.n	800602a <SD_disk_read+0xde>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8006030:	2364      	movs	r3, #100	; 0x64
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	462a      	mov	r2, r5
 8006036:	2301      	movs	r3, #1
 8006038:	4621      	mov	r1, r4
 800603a:	4868      	ldr	r0, [pc, #416]	; (80061dc <SD_disk_read+0x290>)
 800603c:	f7fe f8c2 	bl	80041c4 <HAL_SPI_TransmitReceive>
}
 8006040:	9804      	ldr	r0, [sp, #16]
 8006042:	b009      	add	sp, #36	; 0x24
 8006044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006048:	2303      	movs	r3, #3
 800604a:	9304      	str	r3, [sp, #16]
}
 800604c:	9804      	ldr	r0, [sp, #16]
 800604e:	b009      	add	sp, #36	; 0x24
 8006050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(token != 0xFE) return FALSE;
 8006054:	2bfe      	cmp	r3, #254	; 0xfe
 8006056:	464a      	mov	r2, r9
 8006058:	d176      	bne.n	8006148 <SD_disk_read+0x1fc>
 800605a:	f10a 39ff 	add.w	r9, sl, #4294967295	; 0xffffffff
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800605e:	f8cd b014 	str.w	fp, [sp, #20]
 8006062:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 8006066:	2464      	movs	r4, #100	; 0x64
 8006068:	4693      	mov	fp, r2
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800606a:	6831      	ldr	r1, [r6, #0]
  dummy = 0xFF;
 800606c:	f88d 801e 	strb.w	r8, [sp, #30]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8006070:	688b      	ldr	r3, [r1, #8]
 8006072:	079b      	lsls	r3, r3, #30
 8006074:	d5fc      	bpl.n	8006070 <SD_disk_read+0x124>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8006076:	2301      	movs	r3, #1
 8006078:	9400      	str	r4, [sp, #0]
 800607a:	465a      	mov	r2, fp
 800607c:	4629      	mov	r1, r5
 800607e:	4638      	mov	r0, r7
 8006080:	f7fe f8a0 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 8006084:	f89d 301f 	ldrb.w	r3, [sp, #31]
  *buff = SPI_RxByte();
 8006088:	f809 3f01 	strb.w	r3, [r9, #1]!
  } while(len--);
 800608c:	45d1      	cmp	r9, sl
 800608e:	d1ec      	bne.n	800606a <SD_disk_read+0x11e>
  dummy = 0xFF;
 8006090:	465a      	mov	r2, fp
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8006092:	6830      	ldr	r0, [r6, #0]
  dummy = 0xFF;
 8006094:	f8dd b014 	ldr.w	fp, [sp, #20]
 8006098:	f88d 801e 	strb.w	r8, [sp, #30]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800609c:	6883      	ldr	r3, [r0, #8]
 800609e:	079c      	lsls	r4, r3, #30
 80060a0:	d5fc      	bpl.n	800609c <SD_disk_read+0x150>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80060a2:	2364      	movs	r3, #100	; 0x64
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	4629      	mov	r1, r5
 80060a8:	2301      	movs	r3, #1
 80060aa:	4638      	mov	r0, r7
 80060ac:	9205      	str	r2, [sp, #20]
 80060ae:	f7fe f889 	bl	80041c4 <HAL_SPI_TransmitReceive>
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80060b2:	6830      	ldr	r0, [r6, #0]
 80060b4:	9a05      	ldr	r2, [sp, #20]
  dummy = 0xFF;
 80060b6:	f88d 801e 	strb.w	r8, [sp, #30]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80060ba:	6883      	ldr	r3, [r0, #8]
 80060bc:	0799      	lsls	r1, r3, #30
 80060be:	d5fc      	bpl.n	80060ba <SD_disk_read+0x16e>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80060c0:	2364      	movs	r3, #100	; 0x64
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	4629      	mov	r1, r5
 80060c6:	2301      	movs	r3, #1
 80060c8:	4638      	mov	r0, r7
 80060ca:	9205      	str	r2, [sp, #20]
 80060cc:	f7fe f87a 	bl	80041c4 <HAL_SPI_TransmitReceive>
      } while (--count);
 80060d0:	9b03      	ldr	r3, [sp, #12]
 80060d2:	9a05      	ldr	r2, [sp, #20]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	9303      	str	r3, [sp, #12]
 80060d8:	f47f af6a 	bne.w	8005fb0 <SD_disk_read+0x64>
 80060dc:	462c      	mov	r4, r5
 80060de:	4615      	mov	r5, r2
 80060e0:	e785      	b.n	8005fee <SD_disk_read+0xa2>
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80060e2:	2051      	movs	r0, #81	; 0x51
 80060e4:	f7ff fd58 	bl	8005b98 <SD_SendCmd>
 80060e8:	9004      	str	r0, [sp, #16]
 80060ea:	b138      	cbz	r0, 80060fc <SD_disk_read+0x1b0>
 80060ec:	4e3b      	ldr	r6, [pc, #236]	; (80061dc <SD_disk_read+0x290>)
 80060ee:	f10d 051f 	add.w	r5, sp, #31
 80060f2:	f10d 041e 	add.w	r4, sp, #30
 80060f6:	2301      	movs	r3, #1
 80060f8:	9304      	str	r3, [sp, #16]
 80060fa:	e789      	b.n	8006010 <SD_disk_read+0xc4>
  Timer1 = 200;
 80060fc:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 80061e0 <SD_disk_read+0x294>
 8006100:	4e36      	ldr	r6, [pc, #216]	; (80061dc <SD_disk_read+0x290>)
 8006102:	23c8      	movs	r3, #200	; 0xc8
 8006104:	f8ab 3000 	strh.w	r3, [fp]
 8006108:	f10d 051f 	add.w	r5, sp, #31
 800610c:	f10d 041e 	add.w	r4, sp, #30
  dummy = 0xFF;
 8006110:	f04f 08ff 	mov.w	r8, #255	; 0xff
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8006114:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006118:	4637      	mov	r7, r6
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800611a:	6832      	ldr	r2, [r6, #0]
  dummy = 0xFF;
 800611c:	f88d 801e 	strb.w	r8, [sp, #30]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8006120:	6893      	ldr	r3, [r2, #8]
 8006122:	0799      	lsls	r1, r3, #30
 8006124:	d5fc      	bpl.n	8006120 <SD_disk_read+0x1d4>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8006126:	2301      	movs	r3, #1
 8006128:	f8cd 9000 	str.w	r9, [sp]
 800612c:	462a      	mov	r2, r5
 800612e:	4621      	mov	r1, r4
 8006130:	4638      	mov	r0, r7
 8006132:	f7fe f847 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 8006136:	f89d 301f 	ldrb.w	r3, [sp, #31]
  } while((token == 0xFF) && Timer1);
 800613a:	2bff      	cmp	r3, #255	; 0xff
 800613c:	d109      	bne.n	8006152 <SD_disk_read+0x206>
 800613e:	f8bb 3000 	ldrh.w	r3, [fp]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e9      	bne.n	800611a <SD_disk_read+0x1ce>
 8006146:	e7d6      	b.n	80060f6 <SD_disk_read+0x1aa>
 8006148:	2301      	movs	r3, #1
 800614a:	462c      	mov	r4, r5
 800614c:	9304      	str	r3, [sp, #16]
 800614e:	464d      	mov	r5, r9
 8006150:	e74d      	b.n	8005fee <SD_disk_read+0xa2>
  if(token != 0xFE) return FALSE;
 8006152:	2bfe      	cmp	r3, #254	; 0xfe
 8006154:	d1cf      	bne.n	80060f6 <SD_disk_read+0x1aa>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8006156:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80061dc <SD_disk_read+0x290>
 800615a:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
  dummy = 0xFF;
 800615e:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8006162:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8006166:	f04f 0b64 	mov.w	fp, #100	; 0x64
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800616a:	6830      	ldr	r0, [r6, #0]
  dummy = 0xFF;
 800616c:	f88d 801e 	strb.w	r8, [sp, #30]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8006170:	6883      	ldr	r3, [r0, #8]
 8006172:	079b      	lsls	r3, r3, #30
 8006174:	d5fc      	bpl.n	8006170 <SD_disk_read+0x224>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8006176:	2301      	movs	r3, #1
 8006178:	f8cd b000 	str.w	fp, [sp]
 800617c:	462a      	mov	r2, r5
 800617e:	4621      	mov	r1, r4
 8006180:	4648      	mov	r0, r9
 8006182:	f7fe f81f 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 8006186:	f89d 301f 	ldrb.w	r3, [sp, #31]
  *buff = SPI_RxByte();
 800618a:	f807 3f01 	strb.w	r3, [r7, #1]!
  } while(len--);
 800618e:	4557      	cmp	r7, sl
 8006190:	d1eb      	bne.n	800616a <SD_disk_read+0x21e>
  dummy = 0xFF;
 8006192:	23ff      	movs	r3, #255	; 0xff
 8006194:	f88d 301e 	strb.w	r3, [sp, #30]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8006198:	6833      	ldr	r3, [r6, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	0797      	lsls	r7, r2, #30
 800619e:	d5fc      	bpl.n	800619a <SD_disk_read+0x24e>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80061a0:	2364      	movs	r3, #100	; 0x64
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	480d      	ldr	r0, [pc, #52]	; (80061dc <SD_disk_read+0x290>)
 80061a6:	2301      	movs	r3, #1
 80061a8:	462a      	mov	r2, r5
 80061aa:	4621      	mov	r1, r4
 80061ac:	f7fe f80a 	bl	80041c4 <HAL_SPI_TransmitReceive>
  dummy = 0xFF;
 80061b0:	23ff      	movs	r3, #255	; 0xff
 80061b2:	f88d 301e 	strb.w	r3, [sp, #30]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80061b6:	6833      	ldr	r3, [r6, #0]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	0790      	lsls	r0, r2, #30
 80061bc:	d5fc      	bpl.n	80061b8 <SD_disk_read+0x26c>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80061be:	2364      	movs	r3, #100	; 0x64
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	462a      	mov	r2, r5
 80061c4:	2301      	movs	r3, #1
 80061c6:	4621      	mov	r1, r4
 80061c8:	4804      	ldr	r0, [pc, #16]	; (80061dc <SD_disk_read+0x290>)
 80061ca:	f7fd fffb 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return TRUE;
 80061ce:	e71f      	b.n	8006010 <SD_disk_read+0xc4>
 80061d0:	20000020 	.word	0x20000020
 80061d4:	200044d9 	.word	0x200044d9
 80061d8:	48000400 	.word	0x48000400
 80061dc:	20000198 	.word	0x20000198
 80061e0:	200044dc 	.word	0x200044dc

080061e4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80061e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061e6:	b085      	sub	sp, #20
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d156      	bne.n	800629a <SD_disk_write+0xb6>
 80061ec:	461c      	mov	r4, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d053      	beq.n	800629a <SD_disk_write+0xb6>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80061f2:	4b3b      	ldr	r3, [pc, #236]	; (80062e0 <SD_disk_write+0xfc>)
 80061f4:	4616      	mov	r6, r2
 80061f6:	781a      	ldrb	r2, [r3, #0]
 80061f8:	07d5      	lsls	r5, r2, #31
 80061fa:	d452      	bmi.n	80062a2 <SD_disk_write+0xbe>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	0758      	lsls	r0, r3, #29
 8006200:	d453      	bmi.n	80062aa <SD_disk_write+0xc6>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8006202:	4f38      	ldr	r7, [pc, #224]	; (80062e4 <SD_disk_write+0x100>)
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8006204:	4838      	ldr	r0, [pc, #224]	; (80062e8 <SD_disk_write+0x104>)
  if (!(CardType & CT_SD2)) sector *= 512;
 8006206:	783b      	ldrb	r3, [r7, #0]
 8006208:	460d      	mov	r5, r1
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800620a:	2200      	movs	r2, #0
  if (!(CardType & CT_SD2)) sector *= 512;
 800620c:	0759      	lsls	r1, r3, #29
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800620e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if (!(CardType & CT_SD2)) sector *= 512;
 8006212:	bf58      	it	pl
 8006214:	0276      	lslpl	r6, r6, #9
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8006216:	f7fc fd29 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800621a:	2001      	movs	r0, #1
 800621c:	f7fb fffe 	bl	800221c <HAL_Delay>

  SELECT();

  if (count == 1)
 8006220:	2c01      	cmp	r4, #1
 8006222:	d04f      	beq.n	80062c4 <SD_disk_write+0xe0>
      count = 0;
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8006224:	783b      	ldrb	r3, [r7, #0]
 8006226:	079a      	lsls	r2, r3, #30
 8006228:	d443      	bmi.n	80062b2 <SD_disk_write+0xce>
    {
      SD_SendCmd(CMD55, 0);
      SD_SendCmd(CMD23, count); /* ACMD23 */
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800622a:	4631      	mov	r1, r6
 800622c:	2059      	movs	r0, #89	; 0x59
 800622e:	f7ff fcb3 	bl	8005b98 <SD_SendCmd>
 8006232:	b300      	cbz	r0, 8006276 <SD_disk_write+0x92>
 8006234:	2401      	movs	r4, #1
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8006236:	2201      	movs	r2, #1
 8006238:	482b      	ldr	r0, [pc, #172]	; (80062e8 <SD_disk_write+0x104>)
 800623a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800623e:	f7fc fd15 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8006242:	2001      	movs	r0, #1
 8006244:	f7fb ffea 	bl	800221c <HAL_Delay>
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8006248:	4a28      	ldr	r2, [pc, #160]	; (80062ec <SD_disk_write+0x108>)
  dummy = 0xFF;
 800624a:	23ff      	movs	r3, #255	; 0xff
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800624c:	6812      	ldr	r2, [r2, #0]
  dummy = 0xFF;
 800624e:	f88d 300e 	strb.w	r3, [sp, #14]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8006252:	6893      	ldr	r3, [r2, #8]
 8006254:	079b      	lsls	r3, r3, #30
 8006256:	d5fc      	bpl.n	8006252 <SD_disk_write+0x6e>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8006258:	2364      	movs	r3, #100	; 0x64
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	f10d 020f 	add.w	r2, sp, #15
 8006260:	2301      	movs	r3, #1
 8006262:	f10d 010e 	add.w	r1, sp, #14
 8006266:	4821      	ldr	r0, [pc, #132]	; (80062ec <SD_disk_write+0x108>)
 8006268:	f7fd ffac 	bl	80041c4 <HAL_SPI_TransmitReceive>
  /* Idle */
  DESELECT();
  SPI_RxByte();

  return count ? RES_ERROR : RES_OK;
}
 800626c:	4620      	mov	r0, r4
 800626e:	b005      	add	sp, #20
 8006270:	bdf0      	pop	{r4, r5, r6, r7, pc}
      } while (--count);
 8006272:	3c01      	subs	r4, #1
 8006274:	d007      	beq.n	8006286 <SD_disk_write+0xa2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8006276:	4628      	mov	r0, r5
 8006278:	21fc      	movs	r1, #252	; 0xfc
 800627a:	f7ff fbe1 	bl	8005a40 <SD_TxDataBlock>
        buff += 512;
 800627e:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8006282:	2800      	cmp	r0, #0
 8006284:	d1f5      	bne.n	8006272 <SD_disk_write+0x8e>
      if(!SD_TxDataBlock(0, 0xFD))
 8006286:	21fd      	movs	r1, #253	; 0xfd
 8006288:	2000      	movs	r0, #0
 800628a:	f7ff fbd9 	bl	8005a40 <SD_TxDataBlock>
 800628e:	2800      	cmp	r0, #0
 8006290:	d0d0      	beq.n	8006234 <SD_disk_write+0x50>
  return count ? RES_ERROR : RES_OK;
 8006292:	3c00      	subs	r4, #0
 8006294:	bf18      	it	ne
 8006296:	2401      	movne	r4, #1
 8006298:	e7cd      	b.n	8006236 <SD_disk_write+0x52>
  if (pdrv || !count) return RES_PARERR;
 800629a:	2404      	movs	r4, #4
}
 800629c:	4620      	mov	r0, r4
 800629e:	b005      	add	sp, #20
 80062a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80062a2:	2403      	movs	r4, #3
}
 80062a4:	4620      	mov	r0, r4
 80062a6:	b005      	add	sp, #20
 80062a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80062aa:	2402      	movs	r4, #2
}
 80062ac:	4620      	mov	r0, r4
 80062ae:	b005      	add	sp, #20
 80062b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SD_SendCmd(CMD55, 0);
 80062b2:	2100      	movs	r1, #0
 80062b4:	2077      	movs	r0, #119	; 0x77
 80062b6:	f7ff fc6f 	bl	8005b98 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80062ba:	4621      	mov	r1, r4
 80062bc:	2057      	movs	r0, #87	; 0x57
 80062be:	f7ff fc6b 	bl	8005b98 <SD_SendCmd>
 80062c2:	e7b2      	b.n	800622a <SD_disk_write+0x46>
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80062c4:	4631      	mov	r1, r6
 80062c6:	2058      	movs	r0, #88	; 0x58
 80062c8:	f7ff fc66 	bl	8005b98 <SD_SendCmd>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d1b1      	bne.n	8006234 <SD_disk_write+0x50>
 80062d0:	21fe      	movs	r1, #254	; 0xfe
 80062d2:	4628      	mov	r0, r5
 80062d4:	f7ff fbb4 	bl	8005a40 <SD_TxDataBlock>
  return count ? RES_ERROR : RES_OK;
 80062d8:	fab0 f480 	clz	r4, r0
 80062dc:	0964      	lsrs	r4, r4, #5
 80062de:	e7aa      	b.n	8006236 <SD_disk_write+0x52>
 80062e0:	20000020 	.word	0x20000020
 80062e4:	200044d9 	.word	0x200044d9
 80062e8:	48000400 	.word	0x48000400
 80062ec:	20000198 	.word	0x20000198

080062f0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80062f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	b08b      	sub	sp, #44	; 0x2c
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80062f6:	bb10      	cbnz	r0, 800633e <SD_disk_ioctl+0x4e>
  res = RES_ERROR;

  if (ctrl == CTRL_POWER)
 80062f8:	2905      	cmp	r1, #5
 80062fa:	460d      	mov	r5, r1
 80062fc:	4617      	mov	r7, r2
 80062fe:	d018      	beq.n	8006332 <SD_disk_ioctl+0x42>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006300:	4b87      	ldr	r3, [pc, #540]	; (8006520 <SD_disk_ioctl+0x230>)
 8006302:	781c      	ldrb	r4, [r3, #0]
 8006304:	f014 0401 	ands.w	r4, r4, #1
 8006308:	d11e      	bne.n	8006348 <SD_disk_ioctl+0x58>
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800630a:	4886      	ldr	r0, [pc, #536]	; (8006524 <SD_disk_ioctl+0x234>)
 800630c:	4622      	mov	r2, r4
 800630e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006312:	f7fc fcab 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8006316:	2001      	movs	r0, #1
 8006318:	f7fb ff80 	bl	800221c <HAL_Delay>

    SELECT();

    switch (ctrl)
 800631c:	2d0d      	cmp	r5, #13
 800631e:	d818      	bhi.n	8006352 <SD_disk_ioctl+0x62>
 8006320:	e8df f005 	tbb	[pc, r5]
 8006324:	17927651 	.word	0x17927651
 8006328:	17171717 	.word	0x17171717
 800632c:	81171717 	.word	0x81171717
 8006330:	4699      	.short	0x4699
    switch (*ptr)
 8006332:	7814      	ldrb	r4, [r2, #0]
 8006334:	2c01      	cmp	r4, #1
 8006336:	d035      	beq.n	80063a4 <SD_disk_ioctl+0xb4>
 8006338:	2c02      	cmp	r4, #2
 800633a:	d02e      	beq.n	800639a <SD_disk_ioctl+0xaa>
 800633c:	b354      	cbz	r4, 8006394 <SD_disk_ioctl+0xa4>
 800633e:	2404      	movs	r4, #4
    DESELECT();
    SPI_RxByte();
  }

  return res;
}
 8006340:	4620      	mov	r0, r4
 8006342:	b00b      	add	sp, #44	; 0x2c
 8006344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006348:	2403      	movs	r4, #3
}
 800634a:	4620      	mov	r0, r4
 800634c:	b00b      	add	sp, #44	; 0x2c
 800634e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006352:	4e75      	ldr	r6, [pc, #468]	; (8006528 <SD_disk_ioctl+0x238>)
    switch (ctrl)
 8006354:	2404      	movs	r4, #4
 8006356:	f10d 0717 	add.w	r7, sp, #23
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800635a:	2201      	movs	r2, #1
 800635c:	4871      	ldr	r0, [pc, #452]	; (8006524 <SD_disk_ioctl+0x234>)
 800635e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006362:	f7fc fc83 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8006366:	2001      	movs	r0, #1
 8006368:	f7fb ff58 	bl	800221c <HAL_Delay>
  dummy = 0xFF;
 800636c:	23ff      	movs	r3, #255	; 0xff
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800636e:	6832      	ldr	r2, [r6, #0]
  dummy = 0xFF;
 8006370:	f88d 3016 	strb.w	r3, [sp, #22]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8006374:	6893      	ldr	r3, [r2, #8]
 8006376:	079b      	lsls	r3, r3, #30
 8006378:	d5fc      	bpl.n	8006374 <SD_disk_ioctl+0x84>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800637a:	2364      	movs	r3, #100	; 0x64
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	463a      	mov	r2, r7
 8006380:	2301      	movs	r3, #1
 8006382:	f10d 0116 	add.w	r1, sp, #22
 8006386:	4868      	ldr	r0, [pc, #416]	; (8006528 <SD_disk_ioctl+0x238>)
 8006388:	f7fd ff1c 	bl	80041c4 <HAL_SPI_TransmitReceive>
}
 800638c:	4620      	mov	r0, r4
 800638e:	b00b      	add	sp, #44	; 0x2c
 8006390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PowerFlag = 0;
 8006394:	4b65      	ldr	r3, [pc, #404]	; (800652c <SD_disk_ioctl+0x23c>)
 8006396:	701c      	strb	r4, [r3, #0]
      break;
 8006398:	e7d2      	b.n	8006340 <SD_disk_ioctl+0x50>
  return PowerFlag;
 800639a:	4b64      	ldr	r3, [pc, #400]	; (800652c <SD_disk_ioctl+0x23c>)
      *(ptr + 1) = SD_CheckPower();
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	7053      	strb	r3, [r2, #1]
      res = RES_OK;   /* Power Check */
 80063a0:	4604      	mov	r4, r0
      break;
 80063a2:	e7cd      	b.n	8006340 <SD_disk_ioctl+0x50>
 80063a4:	9003      	str	r0, [sp, #12]
      SD_PowerOn();   /* Power On */
 80063a6:	f7ff fa67 	bl	8005878 <SD_PowerOn>
      res = RES_OK;
 80063aa:	9803      	ldr	r0, [sp, #12]
 80063ac:	4604      	mov	r4, r0
      break;
 80063ae:	e7c7      	b.n	8006340 <SD_disk_ioctl+0x50>
      if (SD_SendCmd(CMD58, 0) == 0)
 80063b0:	2100      	movs	r1, #0
 80063b2:	207a      	movs	r0, #122	; 0x7a
 80063b4:	f7ff fbf0 	bl	8005b98 <SD_SendCmd>
 80063b8:	4e5b      	ldr	r6, [pc, #364]	; (8006528 <SD_disk_ioctl+0x238>)
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d054      	beq.n	8006468 <SD_disk_ioctl+0x178>
 80063be:	f10d 0717 	add.w	r7, sp, #23
      res = RES_PARERR;
 80063c2:	2404      	movs	r4, #4
 80063c4:	e7c9      	b.n	800635a <SD_disk_ioctl+0x6a>
  Timer2 = 500;
 80063c6:	4c5a      	ldr	r4, [pc, #360]	; (8006530 <SD_disk_ioctl+0x240>)
 80063c8:	4e57      	ldr	r6, [pc, #348]	; (8006528 <SD_disk_ioctl+0x238>)
 80063ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80063ce:	8023      	strh	r3, [r4, #0]
 80063d0:	f10d 0b18 	add.w	fp, sp, #24
 80063d4:	f10d 0717 	add.w	r7, sp, #23
  dummy = 0xFF;
 80063d8:	f04f 0aff 	mov.w	sl, #255	; 0xff
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80063dc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80063e0:	46b0      	mov	r8, r6
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80063e2:	6832      	ldr	r2, [r6, #0]
  dummy = 0xFF;
 80063e4:	f88d a017 	strb.w	sl, [sp, #23]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80063e8:	6893      	ldr	r3, [r2, #8]
 80063ea:	0798      	lsls	r0, r3, #30
 80063ec:	d5fc      	bpl.n	80063e8 <SD_disk_ioctl+0xf8>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80063ee:	2301      	movs	r3, #1
 80063f0:	f8cd 9000 	str.w	r9, [sp]
 80063f4:	465a      	mov	r2, fp
 80063f6:	4639      	mov	r1, r7
 80063f8:	4640      	mov	r0, r8
 80063fa:	f7fd fee3 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 80063fe:	f89d 3018 	ldrb.w	r3, [sp, #24]
  } while ((res != 0xFF) && Timer2);
 8006402:	2bff      	cmp	r3, #255	; 0xff
 8006404:	d02e      	beq.n	8006464 <SD_disk_ioctl+0x174>
 8006406:	8823      	ldrh	r3, [r4, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1ea      	bne.n	80063e2 <SD_disk_ioctl+0xf2>
  res = RES_ERROR;
 800640c:	2401      	movs	r4, #1
 800640e:	e7a4      	b.n	800635a <SD_disk_ioctl+0x6a>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8006410:	2100      	movs	r1, #0
 8006412:	2049      	movs	r0, #73	; 0x49
 8006414:	f7ff fbc0 	bl	8005b98 <SD_SendCmd>
 8006418:	4604      	mov	r4, r0
 800641a:	2800      	cmp	r0, #0
 800641c:	d044      	beq.n	80064a8 <SD_disk_ioctl+0x1b8>
 800641e:	4e42      	ldr	r6, [pc, #264]	; (8006528 <SD_disk_ioctl+0x238>)
 8006420:	f10d 0717 	add.w	r7, sp, #23
 8006424:	e7f2      	b.n	800640c <SD_disk_ioctl+0x11c>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8006426:	2100      	movs	r1, #0
 8006428:	2049      	movs	r0, #73	; 0x49
 800642a:	f7ff fbb5 	bl	8005b98 <SD_SendCmd>
 800642e:	2800      	cmp	r0, #0
 8006430:	d1f5      	bne.n	800641e <SD_disk_ioctl+0x12e>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8006432:	4638      	mov	r0, r7
 8006434:	2110      	movs	r1, #16
 8006436:	f7ff fa95 	bl	8005964 <SD_RxDataBlock>
  res = RES_ERROR;
 800643a:	fab0 f480 	clz	r4, r0
 800643e:	4e3a      	ldr	r6, [pc, #232]	; (8006528 <SD_disk_ioctl+0x238>)
 8006440:	0964      	lsrs	r4, r4, #5
 8006442:	f10d 0717 	add.w	r7, sp, #23
 8006446:	e788      	b.n	800635a <SD_disk_ioctl+0x6a>
      *(WORD*) buff = 512;
 8006448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800644c:	803b      	strh	r3, [r7, #0]
      break;
 800644e:	4e36      	ldr	r6, [pc, #216]	; (8006528 <SD_disk_ioctl+0x238>)
 8006450:	f10d 0717 	add.w	r7, sp, #23
 8006454:	e781      	b.n	800635a <SD_disk_ioctl+0x6a>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8006456:	2100      	movs	r1, #0
 8006458:	204a      	movs	r0, #74	; 0x4a
 800645a:	f7ff fb9d 	bl	8005b98 <SD_SendCmd>
 800645e:	2800      	cmp	r0, #0
 8006460:	d1dd      	bne.n	800641e <SD_disk_ioctl+0x12e>
 8006462:	e7e6      	b.n	8006432 <SD_disk_ioctl+0x142>
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8006464:	462c      	mov	r4, r5
 8006466:	e778      	b.n	800635a <SD_disk_ioctl+0x6a>
 8006468:	1e7d      	subs	r5, r7, #1
 800646a:	1cfc      	adds	r4, r7, #3
 800646c:	f10d 0b18 	add.w	fp, sp, #24
 8006470:	f10d 0717 	add.w	r7, sp, #23
  dummy = 0xFF;
 8006474:	f04f 0aff 	mov.w	sl, #255	; 0xff
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8006478:	f04f 0964 	mov.w	r9, #100	; 0x64
 800647c:	46b0      	mov	r8, r6
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800647e:	6832      	ldr	r2, [r6, #0]
  dummy = 0xFF;
 8006480:	f88d a017 	strb.w	sl, [sp, #23]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8006484:	6893      	ldr	r3, [r2, #8]
 8006486:	0799      	lsls	r1, r3, #30
 8006488:	d5fc      	bpl.n	8006484 <SD_disk_ioctl+0x194>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800648a:	2301      	movs	r3, #1
 800648c:	f8cd 9000 	str.w	r9, [sp]
 8006490:	465a      	mov	r2, fp
 8006492:	4639      	mov	r1, r7
 8006494:	4640      	mov	r0, r8
 8006496:	f7fd fe95 	bl	80041c4 <HAL_SPI_TransmitReceive>
  return data;
 800649a:	f89d 3018 	ldrb.w	r3, [sp, #24]
          *ptr++ = SPI_RxByte();
 800649e:	f805 3f01 	strb.w	r3, [r5, #1]!
        for (n = 0; n < 4; n++)
 80064a2:	42a5      	cmp	r5, r4
 80064a4:	d1eb      	bne.n	800647e <SD_disk_ioctl+0x18e>
 80064a6:	e78c      	b.n	80063c2 <SD_disk_ioctl+0xd2>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80064a8:	2110      	movs	r1, #16
 80064aa:	a806      	add	r0, sp, #24
 80064ac:	f7ff fa5a 	bl	8005964 <SD_RxDataBlock>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d0b4      	beq.n	800641e <SD_disk_ioctl+0x12e>
        if ((csd[0] >> 6) == 1)
 80064b4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80064b8:	099b      	lsrs	r3, r3, #6
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d022      	beq.n	8006504 <SD_disk_ioctl+0x214>
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80064be:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80064c2:	f89d 1020 	ldrb.w	r1, [sp, #32]
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80064c6:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80064ca:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
 80064ce:	4e16      	ldr	r6, [pc, #88]	; (8006528 <SD_disk_ioctl+0x238>)
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 80064d6:	f89d 101e 	ldrb.w	r1, [sp, #30]
 80064da:	0289      	lsls	r1, r1, #10
 80064dc:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80064e0:	3301      	adds	r3, #1
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80064e2:	440b      	add	r3, r1
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80064e4:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 80064e8:	f002 020f 	and.w	r2, r2, #15
 80064ec:	0049      	lsls	r1, r1, #1
 80064ee:	f001 0106 	and.w	r1, r1, #6
 80064f2:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80064f6:	440a      	add	r2, r1
 80064f8:	3a07      	subs	r2, #7
 80064fa:	4093      	lsls	r3, r2
 80064fc:	603b      	str	r3, [r7, #0]
 80064fe:	f10d 0717 	add.w	r7, sp, #23
 8006502:	e72a      	b.n	800635a <SD_disk_ioctl+0x6a>
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8006504:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8006508:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800650c:	4e06      	ldr	r6, [pc, #24]	; (8006528 <SD_disk_ioctl+0x238>)
 800650e:	3301      	adds	r3, #1
 8006510:	eb03 2302 	add.w	r3, r3, r2, lsl #8
          *(DWORD*) buff = (DWORD) csize << 10;
 8006514:	b29b      	uxth	r3, r3
 8006516:	029b      	lsls	r3, r3, #10
 8006518:	603b      	str	r3, [r7, #0]
 800651a:	f10d 0717 	add.w	r7, sp, #23
 800651e:	e71c      	b.n	800635a <SD_disk_ioctl+0x6a>
 8006520:	20000020 	.word	0x20000020
 8006524:	48000400 	.word	0x48000400
 8006528:	20000198 	.word	0x20000198
 800652c:	200044da 	.word	0x200044da
 8006530:	200044de 	.word	0x200044de

08006534 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8006534:	f7ff bbee 	b.w	8005d14 <SD_disk_initialize>

08006538 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006538:	f7ff bcfe 	b.w	8005f38 <SD_disk_status>

0800653c <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800653c:	f7ff bd06 	b.w	8005f4c <SD_disk_read>

08006540 <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006540:	f7ff be50 	b.w	80061e4 <SD_disk_write>

08006544 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006544:	f7ff bed4 	b.w	80062f0 <SD_disk_ioctl>

08006548 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006548:	4b03      	ldr	r3, [pc, #12]	; (8006558 <disk_status+0x10>)
 800654a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800654e:	4418      	add	r0, r3
 8006550:	6853      	ldr	r3, [r2, #4]
 8006552:	7a00      	ldrb	r0, [r0, #8]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	4718      	bx	r3
 8006558:	20004708 	.word	0x20004708

0800655c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800655c:	4b06      	ldr	r3, [pc, #24]	; (8006578 <disk_initialize+0x1c>)
 800655e:	5c1a      	ldrb	r2, [r3, r0]
 8006560:	b942      	cbnz	r2, 8006574 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006562:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 8006566:	2101      	movs	r1, #1
 8006568:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800656a:	6852      	ldr	r2, [r2, #4]
 800656c:	4403      	add	r3, r0
 800656e:	6812      	ldr	r2, [r2, #0]
 8006570:	7a18      	ldrb	r0, [r3, #8]
 8006572:	4710      	bx	r2
  }
  return stat;
}
 8006574:	2000      	movs	r0, #0
 8006576:	4770      	bx	lr
 8006578:	20004708 	.word	0x20004708

0800657c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800657c:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800657e:	4c06      	ldr	r4, [pc, #24]	; (8006598 <disk_read+0x1c>)
 8006580:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 8006584:	4420      	add	r0, r4
 8006586:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800658a:	7a00      	ldrb	r0, [r0, #8]
 800658c:	68a4      	ldr	r4, [r4, #8]
 800658e:	46a4      	mov	ip, r4
  return res;
}
 8006590:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006594:	4760      	bx	ip
 8006596:	bf00      	nop
 8006598:	20004708 	.word	0x20004708

0800659c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800659c:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800659e:	4c06      	ldr	r4, [pc, #24]	; (80065b8 <disk_write+0x1c>)
 80065a0:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 80065a4:	4420      	add	r0, r4
 80065a6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80065aa:	7a00      	ldrb	r0, [r0, #8]
 80065ac:	68e4      	ldr	r4, [r4, #12]
 80065ae:	46a4      	mov	ip, r4
  return res;
}
 80065b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80065b4:	4760      	bx	ip
 80065b6:	bf00      	nop
 80065b8:	20004708 	.word	0x20004708

080065bc <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80065bc:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <disk_ioctl+0x14>)
 80065be:	eb03 0c00 	add.w	ip, r3, r0
 80065c2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80065c6:	f89c 0008 	ldrb.w	r0, [ip, #8]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	4718      	bx	r3
 80065d0:	20004708 	.word	0x20004708

080065d4 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 80065d4:	4b2a      	ldr	r3, [pc, #168]	; (8006680 <inc_lock+0xac>)
{
 80065d6:	b570      	push	{r4, r5, r6, lr}
		if (Files[i].fs == dp->obj.fs &&
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	6804      	ldr	r4, [r0, #0]
 80065dc:	4294      	cmp	r4, r2
{
 80065de:	4684      	mov	ip, r0
		if (Files[i].fs == dp->obj.fs &&
 80065e0:	d01c      	beq.n	800661c <inc_lock+0x48>
 80065e2:	6918      	ldr	r0, [r3, #16]
 80065e4:	42a0      	cmp	r0, r4
 80065e6:	d004      	beq.n	80065f2 <inc_lock+0x1e>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80065e8:	b37a      	cbz	r2, 800664a <inc_lock+0x76>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d045      	beq.n	800667a <inc_lock+0xa6>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80065ee:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 80065f0:	bd70      	pop	{r4, r5, r6, pc}
		if (Files[i].fs == dp->obj.fs &&
 80065f2:	695d      	ldr	r5, [r3, #20]
 80065f4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80065f8:	42b5      	cmp	r5, r6
 80065fa:	d1f5      	bne.n	80065e8 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 80065fc:	699d      	ldr	r5, [r3, #24]
 80065fe:	f8dc 6014 	ldr.w	r6, [ip, #20]
 8006602:	42b5      	cmp	r5, r6
 8006604:	d1f0      	bne.n	80065e8 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006606:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006608:	b9a1      	cbnz	r1, 8006634 <inc_lock+0x60>
 800660a:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 800660e:	ea4f 1e02 	mov.w	lr, r2, lsl #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006612:	8989      	ldrh	r1, [r1, #12]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006614:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006616:	1c4a      	adds	r2, r1, #1
 8006618:	b292      	uxth	r2, r2
 800661a:	e02b      	b.n	8006674 <inc_lock+0xa0>
		if (Files[i].fs == dp->obj.fs &&
 800661c:	6880      	ldr	r0, [r0, #8]
 800661e:	685d      	ldr	r5, [r3, #4]
 8006620:	4285      	cmp	r5, r0
 8006622:	d1de      	bne.n	80065e2 <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 8006624:	6898      	ldr	r0, [r3, #8]
 8006626:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800662a:	4285      	cmp	r5, r0
 800662c:	d1d9      	bne.n	80065e2 <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800662e:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006630:	2900      	cmp	r1, #0
 8006632:	d0ea      	beq.n	800660a <inc_lock+0x36>
 8006634:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 8006638:	ea4f 1e02 	mov.w	lr, r2, lsl #4
 800663c:	8989      	ldrh	r1, [r1, #12]
 800663e:	2900      	cmp	r1, #0
 8006640:	d1d5      	bne.n	80065ee <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006642:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006648:	e014      	b.n	8006674 <inc_lock+0xa0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800664a:	2001      	movs	r0, #1
		Files[i].fs = dp->obj.fs;
 800664c:	ea4f 1e02 	mov.w	lr, r2, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006650:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 8006652:	f843 400e 	str.w	r4, [r3, lr]
 8006656:	eb03 1102 	add.w	r1, r3, r2, lsl #4
		Files[i].clu = dp->obj.sclust;
 800665a:	f8dc 4014 	ldr.w	r4, [ip, #20]
 800665e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006662:	e9c1 2401 	strd	r2, r4, [r1, #4]
		Files[i].ctr = 0;
 8006666:	f04f 0200 	mov.w	r2, #0
 800666a:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800666c:	bf14      	ite	ne
 800666e:	f44f 7280 	movne.w	r2, #256	; 0x100
 8006672:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006674:	4473      	add	r3, lr
 8006676:	819a      	strh	r2, [r3, #12]
}
 8006678:	bd70      	pop	{r4, r5, r6, pc}
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800667a:	2002      	movs	r0, #2
 800667c:	2201      	movs	r2, #1
 800667e:	e7e5      	b.n	800664c <inc_lock+0x78>
 8006680:	200044e4 	.word	0x200044e4

08006684 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006688:	2600      	movs	r6, #0
	FATFS *fs = dp->obj.fs;
 800668a:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800668e:	758e      	strb	r6, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006690:	69c3      	ldr	r3, [r0, #28]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d05a      	beq.n	800674c <get_fileinfo+0xc8>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006696:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006698:	3301      	adds	r3, #1
 800669a:	4607      	mov	r7, r0
 800669c:	460d      	mov	r5, r1
 800669e:	d01d      	beq.n	80066dc <get_fileinfo+0x58>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80066a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80066a4:	8818      	ldrh	r0, [r3, #0]
 80066a6:	b1a0      	cbz	r0, 80066d2 <get_fileinfo+0x4e>
 80066a8:	f101 0615 	add.w	r6, r1, #21
 80066ac:	2401      	movs	r4, #1
 80066ae:	e00b      	b.n	80066c8 <get_fileinfo+0x44>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80066b0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80066b4:	d00d      	beq.n	80066d2 <get_fileinfo+0x4e>
				fno->fname[i++] = (TCHAR)w;
 80066b6:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80066ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80066be:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80066c2:	1c62      	adds	r2, r4, #1
 80066c4:	b130      	cbz	r0, 80066d4 <get_fileinfo+0x50>
 80066c6:	4614      	mov	r4, r2
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80066c8:	2100      	movs	r1, #0
 80066ca:	f002 f9df 	bl	8008a8c <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d1ee      	bne.n	80066b0 <get_fileinfo+0x2c>
			i = j = 0;
 80066d2:	2400      	movs	r4, #0
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80066d4:	442c      	add	r4, r5
 80066d6:	2300      	movs	r3, #0
 80066d8:	75a3      	strb	r3, [r4, #22]
		}
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80066da:	7dae      	ldrb	r6, [r5, #22]
 80066dc:	f8d7 c020 	ldr.w	ip, [r7, #32]
	i = j = 0;
 80066e0:	2000      	movs	r0, #0
 80066e2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80066e6:	4602      	mov	r2, r0
		c = (TCHAR)dp->dir[i++];
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) {						/* Insert a . if extension is exist */
			if (!lfv) fno->fname[j] = '.';
			fno->altname[j++] = '.';
 80066e8:	f04f 082e 	mov.w	r8, #46	; 0x2e
		c = (TCHAR)dp->dir[i++];
 80066ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		if (c == ' ') continue;				/* Skip padding spaces */
 80066f0:	2b20      	cmp	r3, #32
		c = (TCHAR)dp->dir[i++];
 80066f2:	f102 0201 	add.w	r2, r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 80066f6:	d018      	beq.n	800672a <get_fileinfo+0xa6>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80066f8:	2b05      	cmp	r3, #5
 80066fa:	bf08      	it	eq
 80066fc:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 80066fe:	2a09      	cmp	r2, #9
 8006700:	d026      	beq.n	8006750 <get_fileinfo+0xcc>
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8006702:	182c      	adds	r4, r5, r0
 8006704:	7263      	strb	r3, [r4, #9]
		if (!lfv) {
 8006706:	b97e      	cbnz	r6, 8006728 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8006708:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 800670c:	2f19      	cmp	r7, #25
 800670e:	d80a      	bhi.n	8006726 <get_fileinfo+0xa2>
 8006710:	2a08      	cmp	r2, #8
 8006712:	f89c e00c 	ldrb.w	lr, [ip, #12]
 8006716:	bf8c      	ite	hi
 8006718:	2710      	movhi	r7, #16
 800671a:	2708      	movls	r7, #8
 800671c:	ea1e 0f07 	tst.w	lr, r7
				c += 0x20;			/* To lower */
 8006720:	bf1c      	itt	ne
 8006722:	3320      	addne	r3, #32
 8006724:	b2db      	uxtbne	r3, r3
			}
			fno->fname[j] = c;
 8006726:	75a3      	strb	r3, [r4, #22]
		}
		j++;
 8006728:	3001      	adds	r0, #1
	while (i < 11) {		/* Copy name body and extension */
 800672a:	2a0b      	cmp	r2, #11
 800672c:	d1de      	bne.n	80066ec <get_fileinfo+0x68>
	}
	if (!lfv) {
		fno->fname[j] = 0;
 800672e:	182c      	adds	r4, r5, r0
	if (!lfv) {
 8006730:	b1b6      	cbz	r6, 8006760 <get_fileinfo+0xdc>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8006732:	2300      	movs	r3, #0
 8006734:	7263      	strb	r3, [r4, #9]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006736:	f89c 300b 	ldrb.w	r3, [ip, #11]
 800673a:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 800673c:	f8dc 301c 	ldr.w	r3, [ip, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006740:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 8006742:	f8dc 3016 	ldr.w	r3, [ip, #22]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006746:	80eb      	strh	r3, [r5, #6]
 8006748:	0c1b      	lsrs	r3, r3, #16
 800674a:	80ab      	strh	r3, [r5, #4]
}
 800674c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 8006750:	182c      	adds	r4, r5, r0
 8006752:	b90e      	cbnz	r6, 8006758 <get_fileinfo+0xd4>
 8006754:	f884 8016 	strb.w	r8, [r4, #22]
			fno->altname[j++] = '.';
 8006758:	f884 8009 	strb.w	r8, [r4, #9]
 800675c:	3001      	adds	r0, #1
 800675e:	e7d0      	b.n	8006702 <get_fileinfo+0x7e>
		fno->fname[j] = 0;
 8006760:	75a6      	strb	r6, [r4, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8006762:	f89c 300c 	ldrb.w	r3, [ip, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	bf08      	it	eq
 800676a:	462c      	moveq	r4, r5
 800676c:	e7e1      	b.n	8006732 <get_fileinfo+0xae>
 800676e:	bf00      	nop

08006770 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006770:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006772:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006776:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006778:	42b1      	cmp	r1, r6
{
 800677a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800677c:	70c3      	strb	r3, [r0, #3]
 800677e:	6346      	str	r6, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006780:	d00c      	beq.n	800679c <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006782:	460d      	mov	r5, r1
 8006784:	460a      	mov	r2, r1
 8006786:	7840      	ldrb	r0, [r0, #1]
 8006788:	2301      	movs	r3, #1
 800678a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800678e:	f7ff fef5 	bl	800657c <disk_read>
 8006792:	b110      	cbz	r0, 800679a <check_fs+0x2a>
			fs->winsect = sector;
 8006794:	6366      	str	r6, [r4, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006796:	2004      	movs	r0, #4
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8006798:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800679a:	6365      	str	r5, [r4, #52]	; 0x34
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800679c:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
 80067a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d11a      	bne.n	80067de <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80067a8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80067ac:	2be9      	cmp	r3, #233	; 0xe9
 80067ae:	d007      	beq.n	80067c0 <check_fs+0x50>
 80067b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067b2:	4a0d      	ldr	r2, [pc, #52]	; (80067e8 <check_fs+0x78>)
 80067b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d001      	beq.n	80067c0 <check_fs+0x50>
	return 2;
 80067bc:	2002      	movs	r0, #2
}
 80067be:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 80067c0:	f8d4 306e 	ldr.w	r3, [r4, #110]	; 0x6e
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80067c4:	4a09      	ldr	r2, [pc, #36]	; (80067ec <check_fs+0x7c>)
 80067c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d009      	beq.n	80067e2 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 80067ce:	f8d4 008a 	ldr.w	r0, [r4, #138]	; 0x8a
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80067d2:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <check_fs+0x80>)
 80067d4:	1ac0      	subs	r0, r0, r3
 80067d6:	bf18      	it	ne
 80067d8:	2001      	movne	r0, #1
 80067da:	0040      	lsls	r0, r0, #1
}
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80067de:	2003      	movs	r0, #3
}
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80067e2:	2000      	movs	r0, #0
}
 80067e4:	bd70      	pop	{r4, r5, r6, pc}
 80067e6:	bf00      	nop
 80067e8:	009000eb 	.word	0x009000eb
 80067ec:	00544146 	.word	0x00544146
 80067f0:	33544146 	.word	0x33544146

080067f4 <move_window>:
{
 80067f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067f6:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80067f8:	428e      	cmp	r6, r1
{
 80067fa:	b083      	sub	sp, #12
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067fc:	d024      	beq.n	8006848 <move_window+0x54>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80067fe:	78c3      	ldrb	r3, [r0, #3]
 8006800:	460d      	mov	r5, r1
 8006802:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006804:	f100 0138 	add.w	r1, r0, #56	; 0x38
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006808:	b963      	cbnz	r3, 8006824 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800680a:	462a      	mov	r2, r5
 800680c:	7860      	ldrb	r0, [r4, #1]
 800680e:	2301      	movs	r3, #1
 8006810:	f7ff feb4 	bl	800657c <disk_read>
				res = FR_DISK_ERR;
 8006814:	2800      	cmp	r0, #0
 8006816:	bf1c      	itt	ne
 8006818:	2001      	movne	r0, #1
 800681a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 800681e:	6365      	str	r5, [r4, #52]	; 0x34
}
 8006820:	b003      	add	sp, #12
 8006822:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006824:	7840      	ldrb	r0, [r0, #1]
 8006826:	9101      	str	r1, [sp, #4]
 8006828:	2301      	movs	r3, #1
 800682a:	4632      	mov	r2, r6
 800682c:	f7ff feb6 	bl	800659c <disk_write>
 8006830:	b9d0      	cbnz	r0, 8006868 <move_window+0x74>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006832:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006834:	6a23      	ldr	r3, [r4, #32]
 8006836:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 8006838:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800683a:	1ab2      	subs	r2, r6, r2
 800683c:	429a      	cmp	r2, r3
 800683e:	d2e4      	bcs.n	800680a <move_window+0x16>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006840:	78a7      	ldrb	r7, [r4, #2]
 8006842:	2f01      	cmp	r7, #1
 8006844:	d804      	bhi.n	8006850 <move_window+0x5c>
 8006846:	e7e0      	b.n	800680a <move_window+0x16>
	FRESULT res = FR_OK;
 8006848:	2000      	movs	r0, #0
}
 800684a:	b003      	add	sp, #12
 800684c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					wsect += fs->fsize;
 800684e:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006850:	7860      	ldrb	r0, [r4, #1]
 8006852:	9101      	str	r1, [sp, #4]
					wsect += fs->fsize;
 8006854:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006856:	4632      	mov	r2, r6
 8006858:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800685a:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800685c:	f7ff fe9e 	bl	800659c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006860:	2f01      	cmp	r7, #1
 8006862:	9901      	ldr	r1, [sp, #4]
 8006864:	d1f3      	bne.n	800684e <move_window+0x5a>
 8006866:	e7d0      	b.n	800680a <move_window+0x16>
			res = FR_DISK_ERR;
 8006868:	2001      	movs	r0, #1
}
 800686a:	b003      	add	sp, #12
 800686c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800686e:	bf00      	nop

08006870 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (*path) {	/* If the pointer is not a null */
 8006874:	6805      	ldr	r5, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800687a:	b175      	cbz	r5, 800689a <find_volume+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800687c:	782c      	ldrb	r4, [r5, #0]
 800687e:	2c1f      	cmp	r4, #31
 8006880:	d914      	bls.n	80068ac <find_volume+0x3c>
 8006882:	4623      	mov	r3, r4
 8006884:	46ac      	mov	ip, r5
 8006886:	e003      	b.n	8006890 <find_volume+0x20>
 8006888:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800688c:	2b1f      	cmp	r3, #31
 800688e:	d90d      	bls.n	80068ac <find_volume+0x3c>
 8006890:	2b3a      	cmp	r3, #58	; 0x3a
 8006892:	d1f9      	bne.n	8006888 <find_volume+0x18>
			i = *tp++ - '0';
 8006894:	3501      	adds	r5, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006896:	45ac      	cmp	ip, r5
 8006898:	d003      	beq.n	80068a2 <find_volume+0x32>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800689a:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800689c:	4620      	mov	r0, r4
 800689e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80068a2:	2c30      	cmp	r4, #48	; 0x30
 80068a4:	d1f9      	bne.n	800689a <find_volume+0x2a>
					*path = ++tt;
 80068a6:	f10c 0301 	add.w	r3, ip, #1
 80068aa:	6003      	str	r3, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80068ac:	4bb2      	ldr	r3, [pc, #712]	; (8006b78 <find_volume+0x308>)
 80068ae:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	f000 80fa 	beq.w	8006aaa <find_volume+0x23a>
	*rfs = fs;							/* Return pointer to the file system object */
 80068b6:	600d      	str	r5, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80068b8:	782b      	ldrb	r3, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80068ba:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80068be:	b17b      	cbz	r3, 80068e0 <find_volume+0x70>
		stat = disk_status(fs->drv);
 80068c0:	7868      	ldrb	r0, [r5, #1]
 80068c2:	f7ff fe41 	bl	8006548 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80068c6:	07c1      	lsls	r1, r0, #31
 80068c8:	d40a      	bmi.n	80068e0 <find_volume+0x70>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80068ca:	2c00      	cmp	r4, #0
 80068cc:	f000 80e6 	beq.w	8006a9c <find_volume+0x22c>
 80068d0:	f010 0404 	ands.w	r4, r0, #4
 80068d4:	f000 80e2 	beq.w	8006a9c <find_volume+0x22c>
				return FR_WRITE_PROTECTED;
 80068d8:	240a      	movs	r4, #10
}
 80068da:	4620      	mov	r0, r4
 80068dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80068e0:	2000      	movs	r0, #0
 80068e2:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80068e4:	f7ff fe3a 	bl	800655c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80068e8:	07c2      	lsls	r2, r0, #31
 80068ea:	f100 80da 	bmi.w	8006aa2 <find_volume+0x232>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80068ee:	b10c      	cbz	r4, 80068f4 <find_volume+0x84>
 80068f0:	0743      	lsls	r3, r0, #29
 80068f2:	d4f1      	bmi.n	80068d8 <find_volume+0x68>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80068f4:	7868      	ldrb	r0, [r5, #1]
 80068f6:	f105 020c 	add.w	r2, r5, #12
 80068fa:	2102      	movs	r1, #2
 80068fc:	f7ff fe5e 	bl	80065bc <disk_ioctl>
 8006900:	4604      	mov	r4, r0
 8006902:	2800      	cmp	r0, #0
 8006904:	f040 80c9 	bne.w	8006a9a <find_volume+0x22a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006908:	89ab      	ldrh	r3, [r5, #12]
 800690a:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 800690e:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8006912:	f200 80c2 	bhi.w	8006a9a <find_volume+0x22a>
 8006916:	1e5a      	subs	r2, r3, #1
 8006918:	421a      	tst	r2, r3
 800691a:	f040 80be 	bne.w	8006a9a <find_volume+0x22a>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800691e:	4601      	mov	r1, r0
 8006920:	4628      	mov	r0, r5
 8006922:	f7ff ff25 	bl	8006770 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006926:	2802      	cmp	r0, #2
 8006928:	f000 8090 	beq.w	8006a4c <find_volume+0x1dc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800692c:	2804      	cmp	r0, #4
 800692e:	f000 80b4 	beq.w	8006a9a <find_volume+0x22a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006932:	2801      	cmp	r0, #1
	bsect = 0;
 8006934:	bf98      	it	ls
 8006936:	4626      	movls	r6, r4
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006938:	f200 80b9 	bhi.w	8006aae <find_volume+0x23e>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800693c:	89a8      	ldrh	r0, [r5, #12]
 800693e:	f8b5 3043 	ldrh.w	r3, [r5, #67]	; 0x43
 8006942:	4283      	cmp	r3, r0
 8006944:	f040 80b3 	bne.w	8006aae <find_volume+0x23e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006948:	f8b5 c04e 	ldrh.w	ip, [r5, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800694c:	f1bc 0f00 	cmp.w	ip, #0
 8006950:	d101      	bne.n	8006956 <find_volume+0xe6>
	rv = rv << 8 | ptr[0];
 8006952:	f8d5 c05c 	ldr.w	ip, [r5, #92]	; 0x5c
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006956:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
		fs->fsize = fasize;
 800695a:	f8c5 c020 	str.w	ip, [r5, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800695e:	1e5a      	subs	r2, r3, #1
 8006960:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006962:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006964:	f200 80a3 	bhi.w	8006aae <find_volume+0x23e>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006968:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 800696c:	fa1f f288 	uxth.w	r2, r8
 8006970:	816a      	strh	r2, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006972:	2a00      	cmp	r2, #0
 8006974:	f000 809b 	beq.w	8006aae <find_volume+0x23e>
 8006978:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800697c:	ea12 0f08 	tst.w	r2, r8
 8006980:	f040 8095 	bne.w	8006aae <find_volume+0x23e>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006984:	f8b5 e049 	ldrh.w	lr, [r5, #73]	; 0x49
 8006988:	f8a5 e008 	strh.w	lr, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800698c:	0942      	lsrs	r2, r0, #5
 800698e:	fbbe faf2 	udiv	sl, lr, r2
 8006992:	fb02 e21a 	mls	r2, r2, sl, lr
 8006996:	b292      	uxth	r2, r2
 8006998:	2a00      	cmp	r2, #0
 800699a:	f040 8088 	bne.w	8006aae <find_volume+0x23e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800699e:	f8b5 904b 	ldrh.w	r9, [r5, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80069a2:	f1b9 0f00 	cmp.w	r9, #0
 80069a6:	d101      	bne.n	80069ac <find_volume+0x13c>
	rv = rv << 8 | ptr[0];
 80069a8:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80069ac:	f8b5 1046 	ldrh.w	r1, [r5, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80069b0:	2900      	cmp	r1, #0
 80069b2:	d07c      	beq.n	8006aae <find_volume+0x23e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80069b4:	fb0c f703 	mul.w	r7, ip, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80069b8:	eb0a 0201 	add.w	r2, sl, r1
 80069bc:	443a      	add	r2, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80069be:	4591      	cmp	r9, r2
 80069c0:	d375      	bcc.n	8006aae <find_volume+0x23e>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80069c2:	eba9 0902 	sub.w	r9, r9, r2
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80069c6:	45c1      	cmp	r9, r8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80069c8:	fbb9 f3f8 	udiv	r3, r9, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80069cc:	d36f      	bcc.n	8006aae <find_volume+0x23e>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80069ce:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 80069d2:	4543      	cmp	r3, r8
 80069d4:	f200 8089 	bhi.w	8006aea <find_volume+0x27a>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80069d8:	f640 78f5 	movw	r8, #4085	; 0xff5
 80069dc:	4543      	cmp	r3, r8
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80069de:	4431      	add	r1, r6
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80069e0:	f103 0302 	add.w	r3, r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
 80069e4:	4432      	add	r2, r6
		fs->volbase = bsect;							/* Volume start sector */
 80069e6:	626e      	str	r6, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80069e8:	632a      	str	r2, [r5, #48]	; 0x30
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80069ea:	61eb      	str	r3, [r5, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80069ec:	62a9      	str	r1, [r5, #40]	; 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80069ee:	f200 809d 	bhi.w	8006b2c <find_volume+0x2bc>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80069f2:	f1be 0f00 	cmp.w	lr, #0
 80069f6:	d05a      	beq.n	8006aae <find_volume+0x23e>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80069f8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80069fc:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006a00:	440f      	add	r7, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a02:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006a06:	2101      	movs	r1, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006a08:	1e42      	subs	r2, r0, #1
 8006a0a:	4413      	add	r3, r2
 8006a0c:	fbb3 f3f0 	udiv	r3, r3, r0
 8006a10:	459c      	cmp	ip, r3
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006a12:	62ef      	str	r7, [r5, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006a14:	d34b      	bcc.n	8006aae <find_volume+0x23e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a1a:	e9c5 3305 	strd	r3, r3, [r5, #20]
		fs->fsi_flag = 0x80;
 8006a1e:	2280      	movs	r2, #128	; 0x80
 8006a20:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 8006a22:	4a56      	ldr	r2, [pc, #344]	; (8006b7c <find_volume+0x30c>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8006a24:	7029      	strb	r1, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006a26:	8813      	ldrh	r3, [r2, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006a28:	4955      	ldr	r1, [pc, #340]	; (8006b80 <find_volume+0x310>)
 8006a2a:	6129      	str	r1, [r5, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	8013      	strh	r3, [r2, #0]
 8006a32:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006a34:	4b53      	ldr	r3, [pc, #332]	; (8006b84 <find_volume+0x314>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	42aa      	cmp	r2, r5
 8006a3a:	bf04      	itt	eq
 8006a3c:	2200      	moveq	r2, #0
 8006a3e:	601a      	streq	r2, [r3, #0]
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	4295      	cmp	r5, r2
 8006a44:	d12a      	bne.n	8006a9c <find_volume+0x22c>
 8006a46:	2200      	movs	r2, #0
 8006a48:	611a      	str	r2, [r3, #16]
 8006a4a:	e027      	b.n	8006a9c <find_volume+0x22c>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a4c:	f895 31fa 	ldrb.w	r3, [r5, #506]	; 0x1fa
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d048      	beq.n	8006ae6 <find_volume+0x276>
	rv = rv << 8 | ptr[0];
 8006a54:	f8d5 91fe 	ldr.w	r9, [r5, #510]	; 0x1fe
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a58:	f895 320a 	ldrb.w	r3, [r5, #522]	; 0x20a
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d040      	beq.n	8006ae2 <find_volume+0x272>
	rv = rv << 8 | ptr[0];
 8006a60:	f8d5 820e 	ldr.w	r8, [r5, #526]	; 0x20e
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a64:	f895 721a 	ldrb.w	r7, [r5, #538]	; 0x21a
 8006a68:	b10f      	cbz	r7, 8006a6e <find_volume+0x1fe>
	rv = rv << 8 | ptr[0];
 8006a6a:	f8d5 721e 	ldr.w	r7, [r5, #542]	; 0x21e
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a6e:	f895 622a 	ldrb.w	r6, [r5, #554]	; 0x22a
 8006a72:	b10e      	cbz	r6, 8006a78 <find_volume+0x208>
	rv = rv << 8 | ptr[0];
 8006a74:	f8d5 622e 	ldr.w	r6, [r5, #558]	; 0x22e
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006a78:	f1b9 0f00 	cmp.w	r9, #0
 8006a7c:	d121      	bne.n	8006ac2 <find_volume+0x252>
 8006a7e:	f1b8 0f00 	cmp.w	r8, #0
 8006a82:	d116      	bne.n	8006ab2 <find_volume+0x242>
 8006a84:	bb2f      	cbnz	r7, 8006ad2 <find_volume+0x262>
 8006a86:	b196      	cbz	r6, 8006aae <find_volume+0x23e>
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f7ff fe70 	bl	8006770 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006a90:	2801      	cmp	r0, #1
 8006a92:	f67f af53 	bls.w	800693c <find_volume+0xcc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006a96:	2804      	cmp	r0, #4
 8006a98:	d109      	bne.n	8006aae <find_volume+0x23e>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006a9a:	2401      	movs	r4, #1
}
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006aa2:	2403      	movs	r4, #3
}
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006aaa:	240c      	movs	r4, #12
 8006aac:	e7f6      	b.n	8006a9c <find_volume+0x22c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006aae:	240d      	movs	r4, #13
 8006ab0:	e7f4      	b.n	8006a9c <find_volume+0x22c>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006ab2:	4641      	mov	r1, r8
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	f7ff fe5b 	bl	8006770 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006aba:	2801      	cmp	r0, #1
 8006abc:	d8e2      	bhi.n	8006a84 <find_volume+0x214>
 8006abe:	4646      	mov	r6, r8
 8006ac0:	e73c      	b.n	800693c <find_volume+0xcc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	f7ff fe53 	bl	8006770 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006aca:	2801      	cmp	r0, #1
 8006acc:	d8d7      	bhi.n	8006a7e <find_volume+0x20e>
 8006ace:	464e      	mov	r6, r9
 8006ad0:	e734      	b.n	800693c <find_volume+0xcc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f7ff fe4b 	bl	8006770 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006ada:	2801      	cmp	r0, #1
 8006adc:	d8d3      	bhi.n	8006a86 <find_volume+0x216>
 8006ade:	463e      	mov	r6, r7
 8006ae0:	e72c      	b.n	800693c <find_volume+0xcc>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006ae2:	4698      	mov	r8, r3
 8006ae4:	e7be      	b.n	8006a64 <find_volume+0x1f4>
 8006ae6:	46a1      	mov	r9, r4
 8006ae8:	e7b6      	b.n	8006a58 <find_volume+0x1e8>
		fs->database = bsect + sysect;					/* Data start sector */
 8006aea:	4432      	add	r2, r6
 8006aec:	632a      	str	r2, [r5, #48]	; 0x30
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006aee:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
		fs->volbase = bsect;							/* Volume start sector */
 8006af2:	626e      	str	r6, [r5, #36]	; 0x24
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006af4:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006af6:	4431      	add	r1, r6
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006af8:	ea5e 0202 	orrs.w	r2, lr, r2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006afc:	62a9      	str	r1, [r5, #40]	; 0x28
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006afe:	61eb      	str	r3, [r5, #28]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006b00:	d1d5      	bne.n	8006aae <find_volume+0x23e>
	rv = rv << 8 | ptr[0];
 8006b02:	6e6a      	ldr	r2, [r5, #100]	; 0x64
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006b04:	62ea      	str	r2, [r5, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006b06:	1e42      	subs	r2, r0, #1
 8006b08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b0c:	fbb3 f3f0 	udiv	r3, r3, r0
 8006b10:	459c      	cmp	ip, r3
 8006b12:	d3cc      	bcc.n	8006aae <find_volume+0x23e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b18:	e9c5 3305 	strd	r3, r3, [r5, #20]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b1c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
		fs->fsi_flag = 0x80;
 8006b20:	2280      	movs	r2, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b22:	2b01      	cmp	r3, #1
		fs->fsi_flag = 0x80;
 8006b24:	712a      	strb	r2, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b26:	d008      	beq.n	8006b3a <find_volume+0x2ca>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006b28:	2103      	movs	r1, #3
 8006b2a:	e77a      	b.n	8006a22 <find_volume+0x1b2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006b2c:	f1be 0f00 	cmp.w	lr, #0
 8006b30:	d0bd      	beq.n	8006aae <find_volume+0x23e>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006b32:	440f      	add	r7, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	2102      	movs	r1, #2
 8006b38:	e766      	b.n	8006a08 <find_volume+0x198>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006b3a:	1c71      	adds	r1, r6, #1
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f7ff fe59 	bl	80067f4 <move_window>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d1f0      	bne.n	8006b28 <find_volume+0x2b8>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b46:	f8b5 2236 	ldrh.w	r2, [r5, #566]	; 0x236
			fs->fsi_flag = 0;
 8006b4a:	7128      	strb	r0, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d1e9      	bne.n	8006b28 <find_volume+0x2b8>
	rv = rv << 8 | ptr[0];
 8006b54:	6baa      	ldr	r2, [r5, #56]	; 0x38
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006b56:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <find_volume+0x318>)
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d1e5      	bne.n	8006b28 <find_volume+0x2b8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b5c:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 8006b60:	f8d5 221c 	ldr.w	r2, [r5, #540]	; 0x21c
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006b68:	3320      	adds	r3, #32
 8006b6a:	429a      	cmp	r2, r3
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006b6c:	bf04      	itt	eq
 8006b6e:	e9d5 3288 	ldrdeq	r3, r2, [r5, #544]	; 0x220
 8006b72:	e9c5 2305 	strdeq	r2, r3, [r5, #20]
 8006b76:	e7d7      	b.n	8006b28 <find_volume+0x2b8>
 8006b78:	200044e0 	.word	0x200044e0
 8006b7c:	20004504 	.word	0x20004504
 8006b80:	20004508 	.word	0x20004508
 8006b84:	200044e4 	.word	0x200044e4
 8006b88:	41615252 	.word	0x41615252

08006b8c <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8006b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 8006b90:	7803      	ldrb	r3, [r0, #0]
 8006b92:	2b02      	cmp	r3, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8006b94:	4604      	mov	r4, r0
 8006b96:	460d      	mov	r5, r1
 8006b98:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8006b9a:	d006      	beq.n	8006baa <put_fat.part.0+0x1e>
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d05e      	beq.n	8006c5e <put_fat.part.0+0xd2>
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d01d      	beq.n	8006be0 <put_fat.part.0+0x54>
 8006ba4:	2002      	movs	r0, #2
}
 8006ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006baa:	8983      	ldrh	r3, [r0, #12]
 8006bac:	085b      	lsrs	r3, r3, #1
 8006bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bb2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006bb4:	4419      	add	r1, r3
 8006bb6:	f7ff fe1d 	bl	80067f4 <move_window>
			if (res != FR_OK) break;
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d1f3      	bne.n	8006ba6 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006bbe:	89a2      	ldrh	r2, [r4, #12]
 8006bc0:	006d      	lsls	r5, r5, #1
 8006bc2:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8006bc6:	fbb5 f1f2 	udiv	r1, r5, r2
 8006bca:	fb02 5511 	mls	r5, r2, r1, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8006bce:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8006bd2:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006bd4:	442b      	add	r3, r5
			fs->wflag = 1;
 8006bd6:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val;
 8006bd8:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
 8006bda:	70e1      	strb	r1, [r4, #3]
}
 8006bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 8006be0:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006be4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006be6:	8983      	ldrh	r3, [r0, #12]
 8006be8:	fbb7 f3f3 	udiv	r3, r7, r3
 8006bec:	4419      	add	r1, r3
 8006bee:	f7ff fe01 	bl	80067f4 <move_window>
			if (res != FR_OK) break;
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d1d7      	bne.n	8006ba6 <put_fat.part.0+0x1a>
			p = fs->win + bc++ % SS(fs);
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	fbb7 f2f3 	udiv	r2, r7, r3
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006bfc:	f015 0501 	ands.w	r5, r5, #1
			p = fs->win + bc++ % SS(fs);
 8006c00:	f107 0801 	add.w	r8, r7, #1
 8006c04:	f104 0938 	add.w	r9, r4, #56	; 0x38
 8006c08:	fb03 7712 	mls	r7, r3, r2, r7
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006c0c:	d044      	beq.n	8006c98 <put_fat.part.0+0x10c>
 8006c0e:	f819 2007 	ldrb.w	r2, [r9, r7]
 8006c12:	0133      	lsls	r3, r6, #4
 8006c14:	f002 020f 	and.w	r2, r2, #15
 8006c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	f809 3007 	strb.w	r3, [r9, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
			fs->wflag = 1;
 8006c24:	2301      	movs	r3, #1
 8006c26:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c28:	4620      	mov	r0, r4
 8006c2a:	89a3      	ldrh	r3, [r4, #12]
 8006c2c:	fbb8 f3f3 	udiv	r3, r8, r3
 8006c30:	4419      	add	r1, r3
 8006c32:	f7ff fddf 	bl	80067f4 <move_window>
			if (res != FR_OK) break;
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d1b5      	bne.n	8006ba6 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	fbb8 f2f3 	udiv	r2, r8, r3
 8006c40:	fb03 8812 	mls	r8, r3, r2, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006c44:	bb55      	cbnz	r5, 8006c9c <put_fat.part.0+0x110>
 8006c46:	f819 3008 	ldrb.w	r3, [r9, r8]
 8006c4a:	f3c6 2203 	ubfx	r2, r6, #8, #4
 8006c4e:	f023 030f 	bic.w	r3, r3, #15
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	70e3      	strb	r3, [r4, #3]
			break;
 8006c5c:	e7a3      	b.n	8006ba6 <put_fat.part.0+0x1a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006c5e:	8983      	ldrh	r3, [r0, #12]
 8006c60:	089b      	lsrs	r3, r3, #2
 8006c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c66:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006c68:	4419      	add	r1, r3
 8006c6a:	f7ff fdc3 	bl	80067f4 <move_window>
			if (res != FR_OK) break;
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d199      	bne.n	8006ba6 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	00ad      	lsls	r5, r5, #2
 8006c76:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8006c7a:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
 8006c7e:	fbb5 f6f3 	udiv	r6, r5, r3
 8006c82:	fb03 5516 	mls	r5, r3, r6, r5
			fs->wflag = 1;
 8006c86:	2601      	movs	r6, #1
	rv = rv << 8 | ptr[0];
 8006c88:	594b      	ldr	r3, [r1, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006c8a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006c8e:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
 8006c90:	514b      	str	r3, [r1, r5]
			fs->wflag = 1;
 8006c92:	70e6      	strb	r6, [r4, #3]
}
 8006c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006c98:	b2f3      	uxtb	r3, r6
 8006c9a:	e7c0      	b.n	8006c1e <put_fat.part.0+0x92>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006c9c:	f3c6 1307 	ubfx	r3, r6, #4, #8
 8006ca0:	e7d8      	b.n	8006c54 <put_fat.part.0+0xc8>
 8006ca2:	bf00      	nop

08006ca4 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006ca4:	2901      	cmp	r1, #1
 8006ca6:	d90e      	bls.n	8006cc6 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006caa:	69c3      	ldr	r3, [r0, #28]
 8006cac:	4299      	cmp	r1, r3
 8006cae:	460c      	mov	r4, r1
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	d206      	bcs.n	8006cc2 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 8006cb4:	7803      	ldrb	r3, [r0, #0]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d029      	beq.n	8006d0e <get_fat.isra.0+0x6a>
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d012      	beq.n	8006ce4 <get_fat.isra.0+0x40>
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d003      	beq.n	8006cca <get_fat.isra.0+0x26>
 8006cc2:	2001      	movs	r0, #1
}
 8006cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8006cc6:	2001      	movs	r0, #1
}
 8006cc8:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cca:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006ccc:	8983      	ldrh	r3, [r0, #12]
			bc = (UINT)clst; bc += bc / 2;
 8006cce:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cd2:	fbb7 f3f3 	udiv	r3, r7, r3
 8006cd6:	4419      	add	r1, r3
 8006cd8:	f7ff fd8c 	bl	80067f4 <move_window>
 8006cdc:	b350      	cbz	r0, 8006d34 <get_fat.isra.0+0x90>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ce4:	8983      	ldrh	r3, [r0, #12]
 8006ce6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006ce8:	089b      	lsrs	r3, r3, #2
 8006cea:	fbb4 f3f3 	udiv	r3, r4, r3
 8006cee:	4419      	add	r1, r3
 8006cf0:	f7ff fd80 	bl	80067f4 <move_window>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d1f2      	bne.n	8006cde <get_fat.isra.0+0x3a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006cf8:	89ab      	ldrh	r3, [r5, #12]
 8006cfa:	00a4      	lsls	r4, r4, #2
 8006cfc:	fbb4 f2f3 	udiv	r2, r4, r3
 8006d00:	fb03 4412 	mls	r4, r3, r2, r4
	rv = rv << 8 | ptr[0];
 8006d04:	4425      	add	r5, r4
 8006d06:	6ba8      	ldr	r0, [r5, #56]	; 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006d08:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8006d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d0e:	8983      	ldrh	r3, [r0, #12]
 8006d10:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006d12:	085b      	lsrs	r3, r3, #1
 8006d14:	fbb4 f3f3 	udiv	r3, r4, r3
 8006d18:	4419      	add	r1, r3
 8006d1a:	f7ff fd6b 	bl	80067f4 <move_window>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d1dd      	bne.n	8006cde <get_fat.isra.0+0x3a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	0064      	lsls	r4, r4, #1
 8006d26:	fbb4 f2f3 	udiv	r2, r4, r3
 8006d2a:	fb03 4412 	mls	r4, r3, r2, r4
 8006d2e:	442c      	add	r4, r5
 8006d30:	8f20      	ldrh	r0, [r4, #56]	; 0x38
}
 8006d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8006d34:	89a9      	ldrh	r1, [r5, #12]
 8006d36:	fbb7 f3f1 	udiv	r3, r7, r1
 8006d3a:	fb01 7313 	mls	r3, r1, r3, r7
 8006d3e:	442b      	add	r3, r5
 8006d40:	3701      	adds	r7, #1
 8006d42:	f893 6038 	ldrb.w	r6, [r3, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d46:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006d48:	fbb7 f1f1 	udiv	r1, r7, r1
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	4419      	add	r1, r3
 8006d50:	f7ff fd50 	bl	80067f4 <move_window>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d1c2      	bne.n	8006cde <get_fat.isra.0+0x3a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006d58:	89ab      	ldrh	r3, [r5, #12]
 8006d5a:	fbb7 f2f3 	udiv	r2, r7, r3
 8006d5e:	fb03 7712 	mls	r7, r3, r2, r7
 8006d62:	442f      	add	r7, r5
 8006d64:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006d68:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006d6c:	07e3      	lsls	r3, r4, #31
 8006d6e:	bf4c      	ite	mi
 8006d70:	0900      	lsrmi	r0, r0, #4
 8006d72:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 8006d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d78 <create_chain>:
{
 8006d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8006d7c:	f8d0 8000 	ldr.w	r8, [r0]
{
 8006d80:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 8006d82:	4689      	mov	r9, r1
 8006d84:	2900      	cmp	r1, #0
 8006d86:	f040 8096 	bne.w	8006eb6 <create_chain+0x13e>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006d8a:	f8d8 6014 	ldr.w	r6, [r8, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006d8e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006d92:	b9be      	cbnz	r6, 8006dc4 <create_chain+0x4c>
 8006d94:	2601      	movs	r6, #1
 8006d96:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8006d98:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006d9a:	429c      	cmp	r4, r3
 8006d9c:	d316      	bcc.n	8006dcc <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8006d9e:	2e01      	cmp	r6, #1
 8006da0:	f000 8099 	beq.w	8006ed6 <create_chain+0x15e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006da4:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 8006da6:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006da8:	69eb      	ldr	r3, [r5, #28]
 8006daa:	42a3      	cmp	r3, r4
 8006dac:	d906      	bls.n	8006dbc <create_chain+0x44>
		switch (fs->fs_type) {
 8006dae:	782b      	ldrb	r3, [r5, #0]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d06c      	beq.n	8006e8e <create_chain+0x116>
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d054      	beq.n	8006e62 <create_chain+0xea>
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d00b      	beq.n	8006dd4 <create_chain+0x5c>
 8006dbc:	2401      	movs	r4, #1
}
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006dc4:	42b3      	cmp	r3, r6
 8006dc6:	bf98      	it	ls
 8006dc8:	2601      	movls	r6, #1
 8006dca:	e7e4      	b.n	8006d96 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006dcc:	2c01      	cmp	r4, #1
 8006dce:	683d      	ldr	r5, [r7, #0]
 8006dd0:	d9f4      	bls.n	8006dbc <create_chain+0x44>
 8006dd2:	e7e9      	b.n	8006da8 <create_chain+0x30>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dd4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8006dd6:	89ab      	ldrh	r3, [r5, #12]
			bc = (UINT)clst; bc += bc / 2;
 8006dd8:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ddc:	4628      	mov	r0, r5
 8006dde:	fbbb f3f3 	udiv	r3, fp, r3
 8006de2:	4419      	add	r1, r3
 8006de4:	f7ff fd06 	bl	80067f4 <move_window>
 8006de8:	bbb0      	cbnz	r0, 8006e58 <create_chain+0xe0>
			wc = fs->win[bc++ % SS(fs)];
 8006dea:	89a9      	ldrh	r1, [r5, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];
 8006dee:	fbbb f3f1 	udiv	r3, fp, r1
 8006df2:	fb01 b313 	mls	r3, r1, r3, fp
 8006df6:	442b      	add	r3, r5
 8006df8:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	fbbb f1f1 	udiv	r1, fp, r1
 8006e02:	4411      	add	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8006e04:	f893 a038 	ldrb.w	sl, [r3, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e08:	f7ff fcf4 	bl	80067f4 <move_window>
 8006e0c:	bb20      	cbnz	r0, 8006e58 <create_chain+0xe0>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006e0e:	89ab      	ldrh	r3, [r5, #12]
 8006e10:	fbbb f2f3 	udiv	r2, fp, r3
 8006e14:	fb03 bb12 	mls	fp, r3, r2, fp
 8006e18:	44ab      	add	fp, r5
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006e1a:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8006e1c:	f89b 3038 	ldrb.w	r3, [fp, #56]	; 0x38
 8006e20:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006e24:	bf4c      	ite	mi
 8006e26:	091b      	lsrmi	r3, r3, #4
 8006e28:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 8006e2c:	b133      	cbz	r3, 8006e3c <create_chain+0xc4>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d0c4      	beq.n	8006dbc <create_chain+0x44>
			if (ncl == scl) return 0;		/* No free cluster */
 8006e32:	42a6      	cmp	r6, r4
 8006e34:	d04f      	beq.n	8006ed6 <create_chain+0x15e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006e36:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006e3a:	e7ad      	b.n	8006d98 <create_chain+0x20>
 8006e3c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006e40:	42a3      	cmp	r3, r4
 8006e42:	d9bb      	bls.n	8006dbc <create_chain+0x44>
 8006e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e48:	4621      	mov	r1, r4
 8006e4a:	4640      	mov	r0, r8
 8006e4c:	f7ff fe9e 	bl	8006b8c <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d044      	beq.n	8006ede <create_chain+0x166>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006e54:	2801      	cmp	r0, #1
 8006e56:	d1b1      	bne.n	8006dbc <create_chain+0x44>
 8006e58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006e62:	89ab      	ldrh	r3, [r5, #12]
 8006e64:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8006e66:	089b      	lsrs	r3, r3, #2
 8006e68:	4628      	mov	r0, r5
 8006e6a:	fbb4 f3f3 	udiv	r3, r4, r3
 8006e6e:	4419      	add	r1, r3
 8006e70:	f7ff fcc0 	bl	80067f4 <move_window>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d1ef      	bne.n	8006e58 <create_chain+0xe0>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006e78:	89aa      	ldrh	r2, [r5, #12]
 8006e7a:	00a3      	lsls	r3, r4, #2
 8006e7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e80:	fb02 3311 	mls	r3, r2, r1, r3
	rv = rv << 8 | ptr[0];
 8006e84:	441d      	add	r5, r3
 8006e86:	6bab      	ldr	r3, [r5, #56]	; 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006e88:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			break;
 8006e8c:	e7ce      	b.n	8006e2c <create_chain+0xb4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006e8e:	89ab      	ldrh	r3, [r5, #12]
 8006e90:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8006e92:	085b      	lsrs	r3, r3, #1
 8006e94:	4628      	mov	r0, r5
 8006e96:	fbb4 f3f3 	udiv	r3, r4, r3
 8006e9a:	4419      	add	r1, r3
 8006e9c:	f7ff fcaa 	bl	80067f4 <move_window>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d1d9      	bne.n	8006e58 <create_chain+0xe0>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006ea4:	89aa      	ldrh	r2, [r5, #12]
 8006ea6:	0063      	lsls	r3, r4, #1
 8006ea8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006eac:	fb02 3311 	mls	r3, r2, r1, r3
 8006eb0:	442b      	add	r3, r5
 8006eb2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
			break;
 8006eb4:	e7ba      	b.n	8006e2c <create_chain+0xb4>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	f7ff fef4 	bl	8006ca4 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006ebc:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006ebe:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006ec0:	f67f af7c 	bls.w	8006dbc <create_chain+0x44>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006ec4:	1c41      	adds	r1, r0, #1
 8006ec6:	d0c7      	beq.n	8006e58 <create_chain+0xe0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006ec8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006ecc:	4283      	cmp	r3, r0
 8006ece:	f63f af76 	bhi.w	8006dbe <create_chain+0x46>
 8006ed2:	464e      	mov	r6, r9
 8006ed4:	e75f      	b.n	8006d96 <create_chain+0x1e>
				if (ncl > scl) return 0;	/* No free cluster */
 8006ed6:	2400      	movs	r4, #0
}
 8006ed8:	4620      	mov	r0, r4
 8006eda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK && clst != 0) {
 8006ede:	f1b9 0f00 	cmp.w	r9, #0
 8006ee2:	d00f      	beq.n	8006f04 <create_chain+0x18c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006ee4:	f1b9 0f01 	cmp.w	r9, #1
 8006ee8:	f43f af68 	beq.w	8006dbc <create_chain+0x44>
 8006eec:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006ef0:	4599      	cmp	r9, r3
 8006ef2:	f4bf af63 	bcs.w	8006dbc <create_chain+0x44>
 8006ef6:	4622      	mov	r2, r4
 8006ef8:	4649      	mov	r1, r9
 8006efa:	4640      	mov	r0, r8
 8006efc:	f7ff fe46 	bl	8006b8c <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d1a7      	bne.n	8006e54 <create_chain+0xdc>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006f04:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
 8006f08:	3b02      	subs	r3, #2
 8006f0a:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 8006f0c:	f8c8 4014 	str.w	r4, [r8, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006f10:	d802      	bhi.n	8006f18 <create_chain+0x1a0>
 8006f12:	3a01      	subs	r2, #1
 8006f14:	f8c8 2018 	str.w	r2, [r8, #24]
		fs->fsi_flag |= 1;
 8006f18:	f898 3004 	ldrb.w	r3, [r8, #4]
 8006f1c:	f043 0301 	orr.w	r3, r3, #1
 8006f20:	f888 3004 	strb.w	r3, [r8, #4]
 8006f24:	e74b      	b.n	8006dbe <create_chain+0x46>
 8006f26:	bf00      	nop

08006f28 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006f28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 8006f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 8006f30:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006f34:	d259      	bcs.n	8006fea <dir_sdi+0xc2>
 8006f36:	06ca      	lsls	r2, r1, #27
 8006f38:	460c      	mov	r4, r1
 8006f3a:	d156      	bne.n	8006fea <dir_sdi+0xc2>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006f3c:	6885      	ldr	r5, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 8006f3e:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006f40:	4606      	mov	r6, r0
 8006f42:	2d00      	cmp	r5, #0
 8006f44:	d054      	beq.n	8006ff0 <dir_sdi+0xc8>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006f46:	f8b8 900a 	ldrh.w	r9, [r8, #10]
 8006f4a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006f4e:	fb03 f909 	mul.w	r9, r3, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 8006f52:	454c      	cmp	r4, r9
 8006f54:	f0c0 809d 	bcc.w	8007092 <dir_sdi+0x16a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006f58:	2d01      	cmp	r5, #1
 8006f5a:	d046      	beq.n	8006fea <dir_sdi+0xc2>
 8006f5c:	4647      	mov	r7, r8
 8006f5e:	e041      	b.n	8006fe4 <dir_sdi+0xbc>
		switch (fs->fs_type) {
 8006f60:	783b      	ldrb	r3, [r7, #0]
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	f000 8081 	beq.w	800706a <dir_sdi+0x142>
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d068      	beq.n	800703e <dir_sdi+0x116>
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d13c      	bne.n	8006fea <dir_sdi+0xc2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f72:	89bb      	ldrh	r3, [r7, #12]
			bc = (UINT)clst; bc += bc / 2;
 8006f74:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f78:	4638      	mov	r0, r7
 8006f7a:	fbba f3f3 	udiv	r3, sl, r3
 8006f7e:	4419      	add	r1, r3
 8006f80:	f7ff fc38 	bl	80067f4 <move_window>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d157      	bne.n	8007038 <dir_sdi+0x110>
			wc = fs->win[bc++ % SS(fs)];
 8006f88:	89b9      	ldrh	r1, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];
 8006f8c:	fbba f3f1 	udiv	r3, sl, r1
 8006f90:	fb01 a313 	mls	r3, r1, r3, sl
 8006f94:	443b      	add	r3, r7
 8006f96:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	fbba f1f1 	udiv	r1, sl, r1
 8006fa0:	4411      	add	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8006fa2:	f893 b038 	ldrb.w	fp, [r3, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006fa6:	f7ff fc25 	bl	80067f4 <move_window>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d144      	bne.n	8007038 <dir_sdi+0x110>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006fae:	89bb      	ldrh	r3, [r7, #12]
 8006fb0:	fbba f2f3 	udiv	r2, sl, r3
 8006fb4:	fb03 aa12 	mls	sl, r3, r2, sl
 8006fb8:	44ba      	add	sl, r7
 8006fba:	f89a 3038 	ldrb.w	r3, [sl, #56]	; 0x38
 8006fbe:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006fc2:	07eb      	lsls	r3, r5, #31
 8006fc4:	bf4c      	ite	mi
 8006fc6:	ea4f 151b 	movmi.w	r5, fp, lsr #4
 8006fca:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006fce:	2d01      	cmp	r5, #1
 8006fd0:	d90b      	bls.n	8006fea <dir_sdi+0xc2>
 8006fd2:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006fd6:	42ab      	cmp	r3, r5
 8006fd8:	d907      	bls.n	8006fea <dir_sdi+0xc2>
			ofs -= csz;
 8006fda:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 8006fde:	45a1      	cmp	r9, r4
 8006fe0:	d859      	bhi.n	8007096 <dir_sdi+0x16e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006fe2:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	42ab      	cmp	r3, r5
 8006fe8:	d8ba      	bhi.n	8006f60 <dir_sdi+0x38>
		switch (fs->fs_type) {
 8006fea:	2002      	movs	r0, #2
}
 8006fec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006ff0:	f898 3000 	ldrb.w	r3, [r8]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d819      	bhi.n	800702c <dir_sdi+0x104>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006ff8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8006ffc:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8007000:	d9f3      	bls.n	8006fea <dir_sdi+0xc2>
		dp->sect = fs->dirbase;
 8007002:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
	dp->clust = clst;					/* Current cluster# */
 8007006:	e9c6 5206 	strd	r5, r2, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800700a:	2a00      	cmp	r2, #0
 800700c:	d0ed      	beq.n	8006fea <dir_sdi+0xc2>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800700e:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 8007012:	fbb4 f3f1 	udiv	r3, r4, r1
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007016:	f108 0838 	add.w	r8, r8, #56	; 0x38
 800701a:	fb01 4413 	mls	r4, r1, r3, r4
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800701e:	441a      	add	r2, r3
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007020:	4444      	add	r4, r8
 8007022:	e9c6 2407 	strd	r2, r4, [r6, #28]
	return FR_OK;
 8007026:	2000      	movs	r0, #0
}
 8007028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
 800702c:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007030:	2b00      	cmp	r3, #0
 8007032:	d0e1      	beq.n	8006ff8 <dir_sdi+0xd0>
 8007034:	461d      	mov	r5, r3
 8007036:	e786      	b.n	8006f46 <dir_sdi+0x1e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007038:	2001      	movs	r0, #1
}
 800703a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800703e:	89bb      	ldrh	r3, [r7, #12]
 8007040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007042:	089b      	lsrs	r3, r3, #2
 8007044:	4638      	mov	r0, r7
 8007046:	fbb5 f3f3 	udiv	r3, r5, r3
 800704a:	4419      	add	r1, r3
 800704c:	f7ff fbd2 	bl	80067f4 <move_window>
 8007050:	2800      	cmp	r0, #0
 8007052:	d1f1      	bne.n	8007038 <dir_sdi+0x110>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007054:	89bb      	ldrh	r3, [r7, #12]
 8007056:	00ad      	lsls	r5, r5, #2
 8007058:	fbb5 f2f3 	udiv	r2, r5, r3
 800705c:	fb03 5512 	mls	r5, r3, r2, r5
	rv = rv << 8 | ptr[0];
 8007060:	443d      	add	r5, r7
 8007062:	6bad      	ldr	r5, [r5, #56]	; 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007064:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 8007068:	e7b1      	b.n	8006fce <dir_sdi+0xa6>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800706a:	89bb      	ldrh	r3, [r7, #12]
 800706c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800706e:	085b      	lsrs	r3, r3, #1
 8007070:	4638      	mov	r0, r7
 8007072:	fbb5 f3f3 	udiv	r3, r5, r3
 8007076:	4419      	add	r1, r3
 8007078:	f7ff fbbc 	bl	80067f4 <move_window>
 800707c:	2800      	cmp	r0, #0
 800707e:	d1db      	bne.n	8007038 <dir_sdi+0x110>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007080:	89bb      	ldrh	r3, [r7, #12]
 8007082:	006d      	lsls	r5, r5, #1
 8007084:	fbb5 f2f3 	udiv	r2, r5, r3
 8007088:	fb03 5512 	mls	r5, r3, r2, r5
 800708c:	443d      	add	r5, r7
 800708e:	8f2d      	ldrh	r5, [r5, #56]	; 0x38
			break;
 8007090:	e79d      	b.n	8006fce <dir_sdi+0xa6>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007092:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007096:	3b02      	subs	r3, #2
	clst -= 2;
 8007098:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800709a:	4299      	cmp	r1, r3
 800709c:	d206      	bcs.n	80070ac <dir_sdi+0x184>
	return clst * fs->csize + fs->database;
 800709e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80070a2:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80070a6:	fb01 2203 	mla	r2, r1, r3, r2
 80070aa:	e7ac      	b.n	8007006 <dir_sdi+0xde>
		dp->sect = fs->dirbase;
 80070ac:	2300      	movs	r3, #0
	dp->clust = clst;					/* Current cluster# */
 80070ae:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80070b2:	e79a      	b.n	8006fea <dir_sdi+0xc2>

080070b4 <dir_find>:
{
 80070b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80070b8:	2100      	movs	r1, #0
{
 80070ba:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 80070bc:	6806      	ldr	r6, [r0, #0]
{
 80070be:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80070c0:	f7ff ff32 	bl	8006f28 <dir_sdi>
	if (res != FR_OK) return res;
 80070c4:	4681      	mov	r9, r0
 80070c6:	b9e0      	cbnz	r0, 8007102 <dir_find+0x4e>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80070c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070cc:	f04f 08ff 	mov.w	r8, #255	; 0xff
		res = move_window(fs, dp->sect);
 80070d0:	69e7      	ldr	r7, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80070d2:	6323      	str	r3, [r4, #48]	; 0x30
 80070d4:	46c1      	mov	r9, r8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80070d6:	f64f 7bff 	movw	fp, #65535	; 0xffff
	if (sector != fs->winsect) {	/* Window offset changed? */
 80070da:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80070dc:	42bd      	cmp	r5, r7
 80070de:	d015      	beq.n	800710c <dir_find+0x58>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80070e0:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80070e2:	f106 0138 	add.w	r1, r6, #56	; 0x38
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f040 809f 	bne.w	800722a <dir_find+0x176>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80070ec:	7870      	ldrb	r0, [r6, #1]
 80070ee:	2301      	movs	r3, #1
 80070f0:	463a      	mov	r2, r7
 80070f2:	f7ff fa43 	bl	800657c <disk_read>
 80070f6:	b140      	cbz	r0, 800710a <dir_find+0x56>
			fs->winsect = sector;
 80070f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070fc:	6373      	str	r3, [r6, #52]	; 0x34
				res = FR_DISK_ERR;
 80070fe:	f04f 0901 	mov.w	r9, #1
}
 8007102:	4648      	mov	r0, r9
 8007104:	b005      	add	sp, #20
 8007106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800710a:	6377      	str	r7, [r6, #52]	; 0x34
		c = dp->dir[DIR_Name];
 800710c:	6a25      	ldr	r5, [r4, #32]
 800710e:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007110:	2f00      	cmp	r7, #0
 8007112:	d041      	beq.n	8007198 <dir_find+0xe4>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007114:	7aeb      	ldrb	r3, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007116:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007118:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800711c:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800711e:	d004      	beq.n	800712a <dir_find+0x76>
 8007120:	0719      	lsls	r1, r3, #28
 8007122:	d53f      	bpl.n	80071a4 <dir_find+0xf0>
 8007124:	2a0f      	cmp	r2, #15
 8007126:	f000 80aa 	beq.w	800727e <dir_find+0x1ca>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800712a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800712e:	6323      	str	r3, [r4, #48]	; 0x30
 8007130:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007134:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007136:	69e7      	ldr	r7, [r4, #28]
	FATFS *fs = dp->obj.fs;
 8007138:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800713a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800713c:	b367      	cbz	r7, 8007198 <dir_find+0xe4>
 800713e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8007142:	d229      	bcs.n	8007198 <dir_find+0xe4>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007144:	899a      	ldrh	r2, [r3, #12]
 8007146:	fbb5 f0f2 	udiv	r0, r5, r2
 800714a:	fb02 5210 	mls	r2, r2, r0, r5
 800714e:	b93a      	cbnz	r2, 8007160 <dir_find+0xac>
		if (!dp->clust) {		/* Static table */
 8007150:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8007152:	3701      	adds	r7, #1
 8007154:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8007156:	b941      	cbnz	r1, 800716a <dir_find+0xb6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007158:	8919      	ldrh	r1, [r3, #8]
 800715a:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 800715e:	d919      	bls.n	8007194 <dir_find+0xe0>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007160:	3338      	adds	r3, #56	; 0x38
 8007162:	4413      	add	r3, r2
	dp->dptr = ofs;						/* Current entry */
 8007164:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007166:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8007168:	e7b7      	b.n	80070da <dir_find+0x26>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800716a:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 800716e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007172:	ea1c 0a00 	ands.w	sl, ip, r0
 8007176:	d1f3      	bne.n	8007160 <dir_find+0xac>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007178:	4618      	mov	r0, r3
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	f7ff fd92 	bl	8006ca4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007180:	2801      	cmp	r0, #1
 8007182:	f240 812b 	bls.w	80073dc <dir_find+0x328>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	d0b9      	beq.n	80070fe <dir_find+0x4a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800718a:	9b00      	ldr	r3, [sp, #0]
 800718c:	69da      	ldr	r2, [r3, #28]
 800718e:	4290      	cmp	r0, r2
 8007190:	f0c0 8112 	bcc.w	80073b8 <dir_find+0x304>
				dp->sect = 0; return FR_NO_FILE;
 8007194:	2300      	movs	r3, #0
 8007196:	61e3      	str	r3, [r4, #28]
 8007198:	f04f 0904 	mov.w	r9, #4
}
 800719c:	4648      	mov	r0, r9
 800719e:	b005      	add	sp, #20
 80071a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 80071a4:	2a0f      	cmp	r2, #15
 80071a6:	d06a      	beq.n	800727e <dir_find+0x1ca>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80071a8:	f1b9 0f00 	cmp.w	r9, #0
 80071ac:	f000 80b4 	beq.w	8007318 <dir_find+0x264>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80071b0:	f894 902f 	ldrb.w	r9, [r4, #47]	; 0x2f
 80071b4:	f019 0901 	ands.w	r9, r9, #1
 80071b8:	d1b7      	bne.n	800712a <dir_find+0x76>
	} while (--cnt && r == 0);
 80071ba:	782a      	ldrb	r2, [r5, #0]
 80071bc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d1b2      	bne.n	800712a <dir_find+0x76>
 80071c4:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80071c8:	786b      	ldrb	r3, [r5, #1]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d1ad      	bne.n	800712a <dir_find+0x76>
 80071ce:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80071d2:	78ab      	ldrb	r3, [r5, #2]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d1a8      	bne.n	800712a <dir_find+0x76>
 80071d8:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 80071dc:	78eb      	ldrb	r3, [r5, #3]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d1a3      	bne.n	800712a <dir_find+0x76>
 80071e2:	792a      	ldrb	r2, [r5, #4]
 80071e4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d19e      	bne.n	800712a <dir_find+0x76>
 80071ec:	796a      	ldrb	r2, [r5, #5]
 80071ee:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d199      	bne.n	800712a <dir_find+0x76>
 80071f6:	79aa      	ldrb	r2, [r5, #6]
 80071f8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d194      	bne.n	800712a <dir_find+0x76>
 8007200:	79ea      	ldrb	r2, [r5, #7]
 8007202:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8007206:	429a      	cmp	r2, r3
 8007208:	d18f      	bne.n	800712a <dir_find+0x76>
 800720a:	7a2a      	ldrb	r2, [r5, #8]
 800720c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007210:	429a      	cmp	r2, r3
 8007212:	d18a      	bne.n	800712a <dir_find+0x76>
 8007214:	7a6a      	ldrb	r2, [r5, #9]
 8007216:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800721a:	429a      	cmp	r2, r3
 800721c:	d185      	bne.n	800712a <dir_find+0x76>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800721e:	7aaa      	ldrb	r2, [r5, #10]
 8007220:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8007224:	429a      	cmp	r2, r3
 8007226:	d180      	bne.n	800712a <dir_find+0x76>
 8007228:	e76b      	b.n	8007102 <dir_find+0x4e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800722a:	7870      	ldrb	r0, [r6, #1]
 800722c:	9100      	str	r1, [sp, #0]
 800722e:	2301      	movs	r3, #1
 8007230:	462a      	mov	r2, r5
 8007232:	f7ff f9b3 	bl	800659c <disk_write>
 8007236:	9900      	ldr	r1, [sp, #0]
 8007238:	2800      	cmp	r0, #0
 800723a:	f47f af60 	bne.w	80070fe <dir_find+0x4a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800723e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			fs->wflag = 0;
 8007240:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007242:	1aea      	subs	r2, r5, r3
 8007244:	6a33      	ldr	r3, [r6, #32]
 8007246:	429a      	cmp	r2, r3
 8007248:	f4bf af50 	bcs.w	80070ec <dir_find+0x38>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800724c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8007250:	f1ba 0f01 	cmp.w	sl, #1
 8007254:	f67f af4a 	bls.w	80070ec <dir_find+0x38>
 8007258:	9400      	str	r4, [sp, #0]
 800725a:	460c      	mov	r4, r1
 800725c:	e000      	b.n	8007260 <dir_find+0x1ac>
					wsect += fs->fsize;
 800725e:	6a33      	ldr	r3, [r6, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007260:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8007262:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007264:	462a      	mov	r2, r5
 8007266:	2301      	movs	r3, #1
 8007268:	4621      	mov	r1, r4
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800726a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800726e:	f7ff f995 	bl	800659c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007272:	f1ba 0f01 	cmp.w	sl, #1
 8007276:	d1f2      	bne.n	800725e <dir_find+0x1aa>
 8007278:	4621      	mov	r1, r4
 800727a:	9c00      	ldr	r4, [sp, #0]
 800727c:	e736      	b.n	80070ec <dir_find+0x38>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800727e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8007282:	065b      	lsls	r3, r3, #25
 8007284:	f53f af56 	bmi.w	8007134 <dir_find+0x80>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007288:	0678      	lsls	r0, r7, #25
 800728a:	f140 808f 	bpl.w	80073ac <dir_find+0x2f8>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800728e:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 8007290:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007294:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007296:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800729a:	7b6b      	ldrb	r3, [r5, #13]
 800729c:	4543      	cmp	r3, r8
 800729e:	f040 8088 	bne.w	80073b2 <dir_find+0x2fe>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80072a2:	8b6b      	ldrh	r3, [r5, #26]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f040 8084 	bne.w	80073b2 <dir_find+0x2fe>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80072aa:	f895 9000 	ldrb.w	r9, [r5]
 80072ae:	f8df a158 	ldr.w	sl, [pc, #344]	; 8007408 <dir_find+0x354>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80072b2:	9702      	str	r7, [sp, #8]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80072b4:	f009 093f 	and.w	r9, r9, #63	; 0x3f
 80072b8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80072bc:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80072c0:	eb09 0983 	add.w	r9, r9, r3, lsl #2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80072c4:	6933      	ldr	r3, [r6, #16]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80072c6:	9401      	str	r4, [sp, #4]
 80072c8:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80072ca:	9303      	str	r3, [sp, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80072cc:	f10a 010d 	add.w	r1, sl, #13
 80072d0:	9600      	str	r6, [sp, #0]
 80072d2:	462f      	mov	r7, r5
 80072d4:	4610      	mov	r0, r2
 80072d6:	461c      	mov	r4, r3
 80072d8:	e012      	b.n	8007300 <dir_find+0x24c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80072da:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 80072de:	4628      	mov	r0, r5
 80072e0:	d815      	bhi.n	800730e <dir_find+0x25a>
 80072e2:	f001 fbf3 	bl	8008acc <ff_wtoupper>
 80072e6:	4606      	mov	r6, r0
 80072e8:	f834 0019 	ldrh.w	r0, [r4, r9, lsl #1]
 80072ec:	f001 fbee 	bl	8008acc <ff_wtoupper>
 80072f0:	4286      	cmp	r6, r0
 80072f2:	f109 0901 	add.w	r9, r9, #1
 80072f6:	d10a      	bne.n	800730e <dir_find+0x25a>
 80072f8:	4942      	ldr	r1, [pc, #264]	; (8007404 <dir_find+0x350>)
 80072fa:	4628      	mov	r0, r5
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80072fc:	4551      	cmp	r1, sl
 80072fe:	d070      	beq.n	80073e2 <dir_find+0x32e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007300:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8007304:	5afd      	ldrh	r5, [r7, r3]
		if (wc) {
 8007306:	2800      	cmp	r0, #0
 8007308:	d1e7      	bne.n	80072da <dir_find+0x226>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800730a:	455d      	cmp	r5, fp
 800730c:	d0f6      	beq.n	80072fc <dir_find+0x248>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800730e:	e9dd 6400 	ldrd	r6, r4, [sp]
 8007312:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8007316:	e70d      	b.n	8007134 <dir_find+0x80>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007318:	782b      	ldrb	r3, [r5, #0]
 800731a:	7869      	ldrb	r1, [r5, #1]
 800731c:	01da      	lsls	r2, r3, #7
 800731e:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 8007322:	440a      	add	r2, r1
 8007324:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007328:	78a9      	ldrb	r1, [r5, #2]
 800732a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800732e:	fa51 f383 	uxtab	r3, r1, r3
 8007332:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8007336:	78e9      	ldrb	r1, [r5, #3]
 8007338:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800733c:	fa51 f282 	uxtab	r2, r1, r2
 8007340:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007344:	7929      	ldrb	r1, [r5, #4]
 8007346:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800734a:	fa51 f383 	uxtab	r3, r1, r3
 800734e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8007352:	7969      	ldrb	r1, [r5, #5]
 8007354:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8007358:	fa51 f282 	uxtab	r2, r1, r2
 800735c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007360:	79a9      	ldrb	r1, [r5, #6]
 8007362:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007366:	fa51 f383 	uxtab	r3, r1, r3
 800736a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800736e:	79e9      	ldrb	r1, [r5, #7]
 8007370:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8007374:	fa51 f282 	uxtab	r2, r1, r2
 8007378:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800737c:	7a29      	ldrb	r1, [r5, #8]
 800737e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007382:	fa51 f383 	uxtab	r3, r1, r3
 8007386:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800738a:	7a69      	ldrb	r1, [r5, #9]
 800738c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8007390:	fa51 f282 	uxtab	r2, r1, r2
 8007394:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007398:	7aa9      	ldrb	r1, [r5, #10]
 800739a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800739e:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	4598      	cmp	r8, r3
 80073a6:	f47f af03 	bne.w	80071b0 <dir_find+0xfc>
 80073aa:	e6aa      	b.n	8007102 <dir_find+0x4e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80073ac:	45b9      	cmp	r9, r7
 80073ae:	f43f af74 	beq.w	800729a <dir_find+0x1e6>
 80073b2:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80073b6:	e6bd      	b.n	8007134 <dir_find+0x80>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073b8:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80073ba:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 80073bc:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073be:	4290      	cmp	r0, r2
	return clst * fs->csize + fs->database;
 80073c0:	bf3c      	itt	cc
 80073c2:	895a      	ldrhcc	r2, [r3, #10]
 80073c4:	6b1f      	ldrcc	r7, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073c6:	8999      	ldrh	r1, [r3, #12]
	return clst * fs->csize + fs->database;
 80073c8:	bf34      	ite	cc
 80073ca:	fb00 7702 	mlacc	r7, r0, r2, r7
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073ce:	4657      	movcs	r7, sl
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073d0:	fbb5 f2f1 	udiv	r2, r5, r1
				dp->sect = clust2sect(fs, clst);
 80073d4:	61e7      	str	r7, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073d6:	fb01 5212 	mls	r2, r1, r2, r5
 80073da:	e6c1      	b.n	8007160 <dir_find+0xac>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80073dc:	f04f 0902 	mov.w	r9, #2
 80073e0:	e68f      	b.n	8007102 <dir_find+0x4e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80073e2:	463d      	mov	r5, r7
 80073e4:	9e00      	ldr	r6, [sp, #0]
 80073e6:	782b      	ldrb	r3, [r5, #0]
 80073e8:	9f02      	ldr	r7, [sp, #8]
 80073ea:	9c01      	ldr	r4, [sp, #4]
 80073ec:	0659      	lsls	r1, r3, #25
 80073ee:	d505      	bpl.n	80073fc <dir_find+0x348>
 80073f0:	b120      	cbz	r0, 80073fc <dir_find+0x348>
 80073f2:	9b03      	ldr	r3, [sp, #12]
 80073f4:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1da      	bne.n	80073b2 <dir_find+0x2fe>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80073fc:	3f01      	subs	r7, #1
 80073fe:	fa5f f987 	uxtb.w	r9, r7
 8007402:	e697      	b.n	8007134 <dir_find+0x80>
 8007404:	08009d1d 	.word	0x08009d1d
 8007408:	08009d10 	.word	0x08009d10

0800740c <follow_path>:
{
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8007410:	6803      	ldr	r3, [r0, #0]
{
 8007412:	b083      	sub	sp, #12
 8007414:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 8007416:	461a      	mov	r2, r3
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007418:	460e      	mov	r6, r1
 800741a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800741e:	2b2f      	cmp	r3, #47	; 0x2f
 8007420:	d0fa      	beq.n	8007418 <follow_path+0xc>
 8007422:	2b5c      	cmp	r3, #92	; 0x5c
 8007424:	d0f8      	beq.n	8007418 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8007426:	2100      	movs	r1, #0
 8007428:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800742a:	7833      	ldrb	r3, [r6, #0]
 800742c:	2b1f      	cmp	r3, #31
 800742e:	f240 8127 	bls.w	8007680 <follow_path+0x274>
	FATFS *fs = obj->fs;
 8007432:	4690      	mov	r8, r2
		if (w < ' ') break;				/* Break if end of the path name */
 8007434:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007436:	f8d2 9010 	ldr.w	r9, [r2, #16]
		w = p[si++];					/* Get a character */
 800743a:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 800743c:	d941      	bls.n	80074c2 <follow_path+0xb6>
 800743e:	f1a9 0502 	sub.w	r5, r9, #2
 8007442:	46b3      	mov	fp, r6
 8007444:	46aa      	mov	sl, r5
		w = p[si++];					/* Get a character */
 8007446:	2401      	movs	r4, #1
 8007448:	e009      	b.n	800745e <follow_path+0x52>
		lfn[di++] = w;					/* Store the Unicode character */
 800744a:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 800744e:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8007452:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 8007454:	f104 0301 	add.w	r3, r4, #1
		if (w < ' ') break;				/* Break if end of the path name */
 8007458:	f240 80ef 	bls.w	800763a <follow_path+0x22e>
		w = p[si++];					/* Get a character */
 800745c:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800745e:	282f      	cmp	r0, #47	; 0x2f
 8007460:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 8007464:	d017      	beq.n	8007496 <follow_path+0x8a>
 8007466:	285c      	cmp	r0, #92	; 0x5c
 8007468:	d015      	beq.n	8007496 <follow_path+0x8a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800746a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800746e:	d00e      	beq.n	800748e <follow_path+0x82>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007470:	2101      	movs	r1, #1
 8007472:	f001 fb0b 	bl	8008a8c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007476:	b150      	cbz	r0, 800748e <follow_path+0x82>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007478:	287f      	cmp	r0, #127	; 0x7f
 800747a:	d8e6      	bhi.n	800744a <follow_path+0x3e>
 800747c:	4a95      	ldr	r2, [pc, #596]	; (80076d4 <follow_path+0x2c8>)
	while (*str && *str != chr) str++;
 800747e:	2322      	movs	r3, #34	; 0x22
 8007480:	e003      	b.n	800748a <follow_path+0x7e>
 8007482:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0df      	beq.n	800744a <follow_path+0x3e>
 800748a:	4298      	cmp	r0, r3
 800748c:	d1f9      	bne.n	8007482 <follow_path+0x76>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800748e:	2006      	movs	r0, #6
}
 8007490:	b003      	add	sp, #12
 8007492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007496:	4434      	add	r4, r6
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007498:	7822      	ldrb	r2, [r4, #0]
 800749a:	2a2f      	cmp	r2, #47	; 0x2f
 800749c:	4626      	mov	r6, r4
 800749e:	f104 0401 	add.w	r4, r4, #1
 80074a2:	d0f9      	beq.n	8007498 <follow_path+0x8c>
 80074a4:	2a5c      	cmp	r2, #92	; 0x5c
 80074a6:	d0f7      	beq.n	8007498 <follow_path+0x8c>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80074a8:	b15b      	cbz	r3, 80074c2 <follow_path+0xb6>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80074aa:	f04f 0a00 	mov.w	sl, #0
 80074ae:	eb09 0143 	add.w	r1, r9, r3, lsl #1
		w = lfn[di - 1];
 80074b2:	f831 2d02 	ldrh.w	r2, [r1, #-2]!
		if (w != ' ' && w != '.') break;
 80074b6:	2a20      	cmp	r2, #32
 80074b8:	d001      	beq.n	80074be <follow_path+0xb2>
 80074ba:	2a2e      	cmp	r2, #46	; 0x2e
 80074bc:	d105      	bne.n	80074ca <follow_path+0xbe>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80074be:	3b01      	subs	r3, #1
 80074c0:	d1f7      	bne.n	80074b2 <follow_path+0xa6>
	lfn[di] = 0;						/* LFN is created */
 80074c2:	2300      	movs	r3, #0
 80074c4:	f8a9 3000 	strh.w	r3, [r9]
 80074c8:	e7e1      	b.n	800748e <follow_path+0x82>
		*d++ = (BYTE)val;
 80074ca:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 80074ce:	2400      	movs	r4, #0
 80074d0:	f829 4013 	strh.w	r4, [r9, r3, lsl #1]
		*d++ = (BYTE)val;
 80074d4:	f242 0120 	movw	r1, #8224	; 0x2020
 80074d8:	627a      	str	r2, [r7, #36]	; 0x24
 80074da:	62ba      	str	r2, [r7, #40]	; 0x28
 80074dc:	2220      	movs	r2, #32
 80074de:	85b9      	strh	r1, [r7, #44]	; 0x2c
 80074e0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
	} while (--cnt);
 80074e4:	e000      	b.n	80074e8 <follow_path+0xdc>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80074e6:	3401      	adds	r4, #1
 80074e8:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 80074ec:	2820      	cmp	r0, #32
 80074ee:	d0fa      	beq.n	80074e6 <follow_path+0xda>
 80074f0:	282e      	cmp	r0, #46	; 0x2e
 80074f2:	d0f8      	beq.n	80074e6 <follow_path+0xda>
	if (si) cf |= NS_LOSS | NS_LFN;
 80074f4:	b10c      	cbz	r4, 80074fa <follow_path+0xee>
 80074f6:	f04a 0a03 	orr.w	sl, sl, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80074fa:	eb09 0243 	add.w	r2, r9, r3, lsl #1
 80074fe:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 8007502:	292e      	cmp	r1, #46	; 0x2e
 8007504:	d001      	beq.n	800750a <follow_path+0xfe>
 8007506:	3b01      	subs	r3, #1
 8007508:	d1f9      	bne.n	80074fe <follow_path+0xf2>
		w = lfn[si++];					/* Get an LFN character */
 800750a:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 800750c:	2800      	cmp	r0, #0
 800750e:	d043      	beq.n	8007598 <follow_path+0x18c>
 8007510:	2500      	movs	r5, #0
 8007512:	f04f 0b08 	mov.w	fp, #8
 8007516:	462a      	mov	r2, r5
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007518:	2820      	cmp	r0, #32
 800751a:	d062      	beq.n	80075e2 <follow_path+0x1d6>
 800751c:	282e      	cmp	r0, #46	; 0x2e
 800751e:	d064      	beq.n	80075ea <follow_path+0x1de>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007520:	4593      	cmp	fp, r2
 8007522:	d96e      	bls.n	8007602 <follow_path+0x1f6>
 8007524:	42a3      	cmp	r3, r4
 8007526:	d062      	beq.n	80075ee <follow_path+0x1e2>
		if (w >= 0x80) {				/* Non ASCII character */
 8007528:	287f      	cmp	r0, #127	; 0x7f
 800752a:	f200 8094 	bhi.w	8007656 <follow_path+0x24a>
	while (*str && *str != chr) str++;
 800752e:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80076dc <follow_path+0x2d0>
 8007532:	212b      	movs	r1, #43	; 0x2b
 8007534:	e004      	b.n	8007540 <follow_path+0x134>
 8007536:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800753a:	2900      	cmp	r1, #0
 800753c:	f000 80a9 	beq.w	8007692 <follow_path+0x286>
 8007540:	4281      	cmp	r1, r0
 8007542:	d1f8      	bne.n	8007536 <follow_path+0x12a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007544:	f04a 0a03 	orr.w	sl, sl, #3
 8007548:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800754a:	4621      	mov	r1, r4
 800754c:	18bc      	adds	r4, r7, r2
 800754e:	3201      	adds	r2, #1
 8007550:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007554:	f839 0011 	ldrh.w	r0, [r9, r1, lsl #1]
 8007558:	1c4c      	adds	r4, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 800755a:	2800      	cmp	r0, #0
 800755c:	d1dc      	bne.n	8007518 <follow_path+0x10c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800755e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007562:	2be5      	cmp	r3, #229	; 0xe5
 8007564:	bf04      	itt	eq
 8007566:	2305      	moveq	r3, #5
 8007568:	f887 3024 	strbeq.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800756c:	f1bb 0f08 	cmp.w	fp, #8
 8007570:	d068      	beq.n	8007644 <follow_path+0x238>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007572:	f005 030c 	and.w	r3, r5, #12
 8007576:	2b0c      	cmp	r3, #12
 8007578:	d04c      	beq.n	8007614 <follow_path+0x208>
 800757a:	f005 0503 	and.w	r5, r5, #3
 800757e:	2d03      	cmp	r5, #3
 8007580:	d048      	beq.n	8007614 <follow_path+0x208>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007582:	f01a 0f02 	tst.w	sl, #2
 8007586:	d107      	bne.n	8007598 <follow_path+0x18c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007588:	2d01      	cmp	r5, #1
 800758a:	bf08      	it	eq
 800758c:	f04a 0a10 	orreq.w	sl, sl, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007590:	2b04      	cmp	r3, #4
 8007592:	bf08      	it	eq
 8007594:	f04a 0a08 	orreq.w	sl, sl, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007598:	f887 a02f 	strb.w	sl, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800759c:	4638      	mov	r0, r7
 800759e:	f7ff fd89 	bl	80070b4 <dir_find>
			ns = dp->fn[NSFLAG];
 80075a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d13f      	bne.n	800762a <follow_path+0x21e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80075aa:	075a      	lsls	r2, r3, #29
 80075ac:	f53f af70 	bmi.w	8007490 <follow_path+0x84>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80075b0:	79bb      	ldrb	r3, [r7, #6]
 80075b2:	06db      	lsls	r3, r3, #27
 80075b4:	d57e      	bpl.n	80076b4 <follow_path+0x2a8>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80075b6:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	fbb2 f0f1 	udiv	r0, r2, r1
 80075c0:	f108 0338 	add.w	r3, r8, #56	; 0x38
 80075c4:	fb01 2210 	mls	r2, r1, r0, r2
	if (fs->fs_type == FS_FAT32) {
 80075c8:	f898 1000 	ldrb.w	r1, [r8]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80075cc:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 80075ce:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80075d0:	8b5a      	ldrh	r2, [r3, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80075d2:	bf04      	itt	eq
 80075d4:	8a9b      	ldrheq	r3, [r3, #20]
 80075d6:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80075da:	60ba      	str	r2, [r7, #8]
		w = p[si++];					/* Get a character */
 80075dc:	7833      	ldrb	r3, [r6, #0]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80075de:	683a      	ldr	r2, [r7, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80075e0:	e728      	b.n	8007434 <follow_path+0x28>
			cf |= NS_LOSS | NS_LFN; continue;
 80075e2:	f04a 0a03 	orr.w	sl, sl, #3
 80075e6:	4621      	mov	r1, r4
 80075e8:	e7b4      	b.n	8007554 <follow_path+0x148>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80075ea:	42a3      	cmp	r3, r4
 80075ec:	d1f9      	bne.n	80075e2 <follow_path+0x1d6>
			if (ni == 11) {				/* Long extension */
 80075ee:	f1bb 0f0b 	cmp.w	fp, #11
 80075f2:	d063      	beq.n	80076bc <follow_path+0x2b0>
			b <<= 2; continue;
 80075f4:	00ad      	lsls	r5, r5, #2
 80075f6:	b2ed      	uxtb	r5, r5
 80075f8:	4619      	mov	r1, r3
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80075fa:	f04f 0b0b 	mov.w	fp, #11
 80075fe:	2208      	movs	r2, #8
			b <<= 2; continue;
 8007600:	e7a8      	b.n	8007554 <follow_path+0x148>
			if (ni == 11) {				/* Long extension */
 8007602:	f1bb 0f0b 	cmp.w	fp, #11
 8007606:	d059      	beq.n	80076bc <follow_path+0x2b0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007608:	42a3      	cmp	r3, r4
 800760a:	d0f3      	beq.n	80075f4 <follow_path+0x1e8>
 800760c:	f04a 0a03 	orr.w	sl, sl, #3
			if (si > di) break;			/* No extension */
 8007610:	d3a5      	bcc.n	800755e <follow_path+0x152>
 8007612:	e7ef      	b.n	80075f4 <follow_path+0x1e8>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007614:	f04a 0a02 	orr.w	sl, sl, #2
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007618:	f887 a02f 	strb.w	sl, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800761c:	4638      	mov	r0, r7
 800761e:	f7ff fd49 	bl	80070b4 <dir_find>
			ns = dp->fn[NSFLAG];
 8007622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8007626:	2800      	cmp	r0, #0
 8007628:	d0bf      	beq.n	80075aa <follow_path+0x19e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800762a:	2804      	cmp	r0, #4
 800762c:	f47f af30 	bne.w	8007490 <follow_path+0x84>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007630:	f013 0f04 	tst.w	r3, #4
 8007634:	bf08      	it	eq
 8007636:	2005      	moveq	r0, #5
 8007638:	e72a      	b.n	8007490 <follow_path+0x84>
	*path = &p[si];						/* Return pointer to the next segment */
 800763a:	441e      	add	r6, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800763c:	f04f 0a04 	mov.w	sl, #4
	*path = &p[si];						/* Return pointer to the next segment */
 8007640:	4623      	mov	r3, r4
 8007642:	e734      	b.n	80074ae <follow_path+0xa2>
	if (ni == 8) b <<= 2;
 8007644:	00ab      	lsls	r3, r5, #2
 8007646:	f003 030c 	and.w	r3, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800764a:	2b0c      	cmp	r3, #12
 800764c:	d0e2      	beq.n	8007614 <follow_path+0x208>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800764e:	f01a 0f02 	tst.w	sl, #2
 8007652:	d09d      	beq.n	8007590 <follow_path+0x184>
 8007654:	e7a0      	b.n	8007598 <follow_path+0x18c>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007656:	2100      	movs	r1, #0
 8007658:	e9cd 3200 	strd	r3, r2, [sp]
 800765c:	f001 fa16 	bl	8008a8c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007660:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007664:	b148      	cbz	r0, 800767a <follow_path+0x26e>
 8007666:	491c      	ldr	r1, [pc, #112]	; (80076d8 <follow_path+0x2cc>)
 8007668:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
 800766a:	f04a 0a02 	orr.w	sl, sl, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800766e:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007672:	2800      	cmp	r0, #0
 8007674:	f43f af66 	beq.w	8007544 <follow_path+0x138>
 8007678:	e759      	b.n	800752e <follow_path+0x122>
			cf |= NS_LFN;				/* Force create LFN entry */
 800767a:	f04a 0a02 	orr.w	sl, sl, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800767e:	e761      	b.n	8007544 <follow_path+0x138>
		dp->fn[NSFLAG] = NS_NONAME;
 8007680:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8007682:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8007684:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8007688:	b003      	add	sp, #12
 800768a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800768e:	f7ff bc4b 	b.w	8006f28 <dir_sdi>
				if (IsUpper(w)) {		/* ASCII large capital */
 8007692:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8007696:	2919      	cmp	r1, #25
 8007698:	d803      	bhi.n	80076a2 <follow_path+0x296>
					b |= 2;
 800769a:	f045 0502 	orr.w	r5, r5, #2
		dp->fn[i++] = (BYTE)w;
 800769e:	b2c0      	uxtb	r0, r0
 80076a0:	e753      	b.n	800754a <follow_path+0x13e>
					if (IsLower(w)) {	/* ASCII small capital */
 80076a2:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 80076a6:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 80076a8:	bf9c      	itt	ls
 80076aa:	3820      	subls	r0, #32
 80076ac:	f045 0501 	orrls.w	r5, r5, #1
		dp->fn[i++] = (BYTE)w;
 80076b0:	b2c0      	uxtb	r0, r0
 80076b2:	e74a      	b.n	800754a <follow_path+0x13e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80076b4:	2005      	movs	r0, #5
}
 80076b6:	b003      	add	sp, #12
 80076b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80076bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80076c0:	2be5      	cmp	r3, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN; break;
 80076c2:	f04a 0a03 	orr.w	sl, sl, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80076c6:	f47f af54 	bne.w	8007572 <follow_path+0x166>
 80076ca:	2305      	movs	r3, #5
 80076cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80076d0:	e74f      	b.n	8007572 <follow_path+0x166>
 80076d2:	bf00      	nop
 80076d4:	08009c7c 	.word	0x08009c7c
 80076d8:	08009c90 	.word	0x08009c90
 80076dc:	08009c88 	.word	0x08009c88

080076e0 <dir_next>:
{
 80076e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80076e4:	69c2      	ldr	r2, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80076e6:	6945      	ldr	r5, [r0, #20]
{
 80076e8:	b085      	sub	sp, #20
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80076ea:	2a00      	cmp	r2, #0
 80076ec:	d044      	beq.n	8007778 <dir_next+0x98>
 80076ee:	3520      	adds	r5, #32
 80076f0:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80076f4:	d240      	bcs.n	8007778 <dir_next+0x98>
	FATFS *fs = dp->obj.fs;
 80076f6:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80076f8:	89b3      	ldrh	r3, [r6, #12]
 80076fa:	4604      	mov	r4, r0
 80076fc:	fbb5 f0f3 	udiv	r0, r5, r3
 8007700:	fb03 5310 	mls	r3, r3, r0, r5
 8007704:	b143      	cbz	r3, 8007718 <dir_next+0x38>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007706:	f106 0738 	add.w	r7, r6, #56	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800770a:	441f      	add	r7, r3
	dp->dptr = ofs;						/* Current entry */
 800770c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800770e:	6227      	str	r7, [r4, #32]
	return FR_OK;
 8007710:	2000      	movs	r0, #0
}
 8007712:	b005      	add	sp, #20
 8007714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
 8007718:	460f      	mov	r7, r1
		if (!dp->clust) {		/* Static table */
 800771a:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800771c:	3201      	adds	r2, #1
 800771e:	61e2      	str	r2, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8007720:	b371      	cbz	r1, 8007780 <dir_next+0xa0>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007722:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 8007726:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800772a:	ea18 0200 	ands.w	r2, r8, r0
 800772e:	9201      	str	r2, [sp, #4]
 8007730:	d1e9      	bne.n	8007706 <dir_next+0x26>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff fab6 	bl	8006ca4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007738:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800773a:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800773c:	d928      	bls.n	8007790 <dir_next+0xb0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800773e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007742:	d027      	beq.n	8007794 <dir_next+0xb4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007744:	69f3      	ldr	r3, [r6, #28]
 8007746:	4283      	cmp	r3, r0
 8007748:	d926      	bls.n	8007798 <dir_next+0xb8>
	clst -= 2;
 800774a:	1e82      	subs	r2, r0, #2
 800774c:	9202      	str	r2, [sp, #8]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800774e:	f106 0738 	add.w	r7, r6, #56	; 0x38
 8007752:	4611      	mov	r1, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007754:	3b02      	subs	r3, #2
 8007756:	428b      	cmp	r3, r1
				dp->clust = clst;		/* Initialize data for new cluster */
 8007758:	f8c4 9018 	str.w	r9, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800775c:	d904      	bls.n	8007768 <dir_next+0x88>
	return clst * fs->csize + fs->database;
 800775e:	8972      	ldrh	r2, [r6, #10]
 8007760:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007762:	fb01 3302 	mla	r3, r1, r2, r3
 8007766:	9301      	str	r3, [sp, #4]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007768:	89b2      	ldrh	r2, [r6, #12]
				dp->sect = clust2sect(fs, clst);
 800776a:	9b01      	ldr	r3, [sp, #4]
 800776c:	61e3      	str	r3, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800776e:	fbb5 f3f2 	udiv	r3, r5, r2
 8007772:	fb02 5313 	mls	r3, r2, r3, r5
 8007776:	e7c8      	b.n	800770a <dir_next+0x2a>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007778:	2004      	movs	r0, #4
}
 800777a:	b005      	add	sp, #20
 800777c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007780:	8932      	ldrh	r2, [r6, #8]
 8007782:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8007786:	d8be      	bhi.n	8007706 <dir_next+0x26>
				dp->sect = 0; return FR_NO_FILE;
 8007788:	2300      	movs	r3, #0
 800778a:	61e3      	str	r3, [r4, #28]
 800778c:	2004      	movs	r0, #4
 800778e:	e7c0      	b.n	8007712 <dir_next+0x32>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007790:	2002      	movs	r0, #2
 8007792:	e7be      	b.n	8007712 <dir_next+0x32>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007794:	2001      	movs	r0, #1
 8007796:	e7bc      	b.n	8007712 <dir_next+0x32>
					if (!stretch) {								/* If no stretch, report EOT */
 8007798:	2f00      	cmp	r7, #0
 800779a:	d0f5      	beq.n	8007788 <dir_next+0xa8>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800779c:	69a1      	ldr	r1, [r4, #24]
 800779e:	4620      	mov	r0, r4
 80077a0:	f7ff faea 	bl	8006d78 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80077a4:	4681      	mov	r9, r0
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d059      	beq.n	800785e <dir_next+0x17e>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80077aa:	2801      	cmp	r0, #1
 80077ac:	d0f0      	beq.n	8007790 <dir_next+0xb0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80077ae:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80077b2:	d0ef      	beq.n	8007794 <dir_next+0xb4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80077b4:	78f3      	ldrb	r3, [r6, #3]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d153      	bne.n	8007862 <dir_next+0x182>
 80077ba:	f106 0b38 	add.w	fp, r6, #56	; 0x38
		*d++ = (BYTE)val;
 80077be:	89b2      	ldrh	r2, [r6, #12]
 80077c0:	2100      	movs	r1, #0
 80077c2:	4658      	mov	r0, fp
 80077c4:	f001 fb12 	bl	8008dec <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80077c8:	69f3      	ldr	r3, [r6, #28]
	clst -= 2;
 80077ca:	f1a9 0202 	sub.w	r2, r9, #2
 80077ce:	4611      	mov	r1, r2
 80077d0:	9202      	str	r2, [sp, #8]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80077d2:	1e9a      	subs	r2, r3, #2
 80077d4:	4291      	cmp	r1, r2
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80077d6:	465f      	mov	r7, fp
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80077d8:	d268      	bcs.n	80078ac <dir_next+0x1cc>
	return clst * fs->csize + fs->database;
 80077da:	4608      	mov	r0, r1
 80077dc:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80077de:	8971      	ldrh	r1, [r6, #10]
 80077e0:	fb00 2801 	mla	r8, r0, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80077e4:	f8c6 8034 	str.w	r8, [r6, #52]	; 0x34
 80077e8:	2900      	cmp	r1, #0
 80077ea:	d063      	beq.n	80078b4 <dir_next+0x1d4>
 80077ec:	2300      	movs	r3, #0
						fs->wflag = 1;
 80077ee:	9403      	str	r4, [sp, #12]
 80077f0:	469a      	mov	sl, r3
 80077f2:	4644      	mov	r4, r8
 80077f4:	f04f 0301 	mov.w	r3, #1
 80077f8:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80077fa:	7870      	ldrb	r0, [r6, #1]
 80077fc:	2301      	movs	r3, #1
 80077fe:	4622      	mov	r2, r4
 8007800:	4659      	mov	r1, fp
 8007802:	f7fe fecb 	bl	800659c <disk_write>
 8007806:	2800      	cmp	r0, #0
 8007808:	d1c4      	bne.n	8007794 <dir_next+0xb4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800780a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			fs->wflag = 0;
 800780c:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800780e:	1ae2      	subs	r2, r4, r3
 8007810:	6a33      	ldr	r3, [r6, #32]
 8007812:	429a      	cmp	r2, r3
 8007814:	d212      	bcs.n	800783c <dir_next+0x15c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007816:	f896 8002 	ldrb.w	r8, [r6, #2]
 800781a:	f1b8 0f01 	cmp.w	r8, #1
 800781e:	d801      	bhi.n	8007824 <dir_next+0x144>
 8007820:	e00c      	b.n	800783c <dir_next+0x15c>
					wsect += fs->fsize;
 8007822:	6a33      	ldr	r3, [r6, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007824:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8007826:	441c      	add	r4, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007828:	4622      	mov	r2, r4
 800782a:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800782c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8007830:	4659      	mov	r1, fp
 8007832:	f7fe feb3 	bl	800659c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007836:	f1b8 0f01 	cmp.w	r8, #1
 800783a:	d1f2      	bne.n	8007822 <dir_next+0x142>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800783c:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800783e:	8973      	ldrh	r3, [r6, #10]
 8007840:	f10a 0a01 	add.w	sl, sl, #1
 8007844:	3401      	adds	r4, #1
 8007846:	4553      	cmp	r3, sl
 8007848:	6374      	str	r4, [r6, #52]	; 0x34
 800784a:	d8d3      	bhi.n	80077f4 <dir_next+0x114>
 800784c:	46a0      	mov	r8, r4
 800784e:	69f3      	ldr	r3, [r6, #28]
 8007850:	9c03      	ldr	r4, [sp, #12]
 8007852:	4652      	mov	r2, sl
					fs->winsect -= n;							/* Restore window offset */
 8007854:	eba8 0202 	sub.w	r2, r8, r2
 8007858:	9902      	ldr	r1, [sp, #8]
 800785a:	6372      	str	r2, [r6, #52]	; 0x34
 800785c:	e77a      	b.n	8007754 <dir_next+0x74>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800785e:	2007      	movs	r0, #7
 8007860:	e757      	b.n	8007712 <dir_next+0x32>
		wsect = fs->winsect;	/* Current sector number */
 8007862:	6b77      	ldr	r7, [r6, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007864:	7870      	ldrb	r0, [r6, #1]
 8007866:	f106 0b38 	add.w	fp, r6, #56	; 0x38
 800786a:	2301      	movs	r3, #1
 800786c:	463a      	mov	r2, r7
 800786e:	4659      	mov	r1, fp
 8007870:	f7fe fe94 	bl	800659c <disk_write>
 8007874:	2800      	cmp	r0, #0
 8007876:	d18d      	bne.n	8007794 <dir_next+0xb4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007878:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			fs->wflag = 0;
 800787a:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800787c:	1afa      	subs	r2, r7, r3
 800787e:	6a33      	ldr	r3, [r6, #32]
 8007880:	429a      	cmp	r2, r3
 8007882:	d29c      	bcs.n	80077be <dir_next+0xde>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007884:	f896 a002 	ldrb.w	sl, [r6, #2]
 8007888:	f1ba 0f01 	cmp.w	sl, #1
 800788c:	d801      	bhi.n	8007892 <dir_next+0x1b2>
 800788e:	e796      	b.n	80077be <dir_next+0xde>
 8007890:	6a33      	ldr	r3, [r6, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007892:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8007894:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007896:	463a      	mov	r2, r7
 8007898:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800789a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800789e:	4659      	mov	r1, fp
 80078a0:	f7fe fe7c 	bl	800659c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80078a4:	f1ba 0f01 	cmp.w	sl, #1
 80078a8:	d1f2      	bne.n	8007890 <dir_next+0x1b0>
 80078aa:	e788      	b.n	80077be <dir_next+0xde>
	return clst * fs->csize + fs->database;
 80078ac:	8971      	ldrh	r1, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80078ae:	f04f 0800 	mov.w	r8, #0
 80078b2:	e797      	b.n	80077e4 <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80078b4:	460a      	mov	r2, r1
 80078b6:	e7cd      	b.n	8007854 <dir_next+0x174>

080078b8 <dir_register>:
{
 80078b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80078bc:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 80078c0:	b08b      	sub	sp, #44	; 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80078c2:	f013 02a0 	ands.w	r2, r3, #160	; 0xa0
 80078c6:	9302      	str	r3, [sp, #8]
 80078c8:	f040 830a 	bne.w	8007ee0 <dir_register+0x628>
	FATFS *fs = dp->obj.fs;
 80078cc:	6803      	ldr	r3, [r0, #0]
 80078ce:	9300      	str	r3, [sp, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80078d0:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80078d4:	f8bc 3000 	ldrh.w	r3, [ip]
 80078d8:	4604      	mov	r4, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 843a 	beq.w	8008154 <dir_register+0x89c>
 80078e0:	4691      	mov	r9, r2
 80078e2:	4663      	mov	r3, ip
 80078e4:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 80078e8:	f109 0901 	add.w	r9, r9, #1
 80078ec:	2a00      	cmp	r2, #0
 80078ee:	d1f9      	bne.n	80078e4 <dir_register+0x2c>
	mem_cpy(sn, dp->fn, 12);
 80078f0:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
 80078f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80078f8:	ab0a      	add	r3, sp, #40	; 0x28
 80078fa:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80078fe:	9b02      	ldr	r3, [sp, #8]
 8007900:	07da      	lsls	r2, r3, #31
 8007902:	f140 8145 	bpl.w	8007b90 <dir_register+0x2d8>
		for (n = 1; n < 100; n++) {
 8007906:	2701      	movs	r7, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007908:	2340      	movs	r3, #64	; 0x40
			*d++ = *s++;
 800790a:	f89d a026 	ldrb.w	sl, [sp, #38]	; 0x26
 800790e:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
				if (sr & 0x10000) sr ^= 0x11021;
 8007912:	4daf      	ldr	r5, [pc, #700]	; (8007bd0 <dir_register+0x318>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007914:	f8cd 900c 	str.w	r9, [sp, #12]
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007918:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800791c:	46b9      	mov	r9, r7
			*d++ = *s++;
 800791e:	9001      	str	r0, [sp, #4]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007920:	460f      	mov	r7, r1
 8007922:	f04f 0b20 	mov.w	fp, #32
 8007926:	4661      	mov	r1, ip
			*d++ = *s++;
 8007928:	9b01      	ldr	r3, [sp, #4]
 800792a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800792e:	f1b9 0f05 	cmp.w	r9, #5
			*d++ = *s++;
 8007932:	e9c4 3709 	strd	r3, r7, [r4, #36]	; 0x24
 8007936:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800793a:	f240 8146 	bls.w	8007bca <dir_register+0x312>
		while (*lfn) {	/* Create a CRC */
 800793e:	880a      	ldrh	r2, [r1, #0]
 8007940:	2a00      	cmp	r2, #0
 8007942:	f000 8142 	beq.w	8007bca <dir_register+0x312>
				sr = (sr << 1) + (wc & 1);
 8007946:	f002 0e01 	and.w	lr, r2, #1
 800794a:	468c      	mov	ip, r1
 800794c:	eb0e 0e49 	add.w	lr, lr, r9, lsl #1
				wc >>= 1;
 8007950:	0850      	lsrs	r0, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007952:	e009      	b.n	8007968 <dir_register+0xb0>
				sr = (sr << 1) + (wc & 1);
 8007954:	f002 0e01 	and.w	lr, r2, #1
 8007958:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800795c:	040b      	lsls	r3, r1, #16
				wc >>= 1;
 800795e:	ea4f 0052 	mov.w	r0, r2, lsr #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007962:	bf48      	it	mi
 8007964:	ea8e 0e05 	eormi.w	lr, lr, r5
				sr = (sr << 1) + (wc & 1);
 8007968:	f000 0101 	and.w	r1, r0, #1
 800796c:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				wc >>= 1;
 8007970:	0893      	lsrs	r3, r2, #2
				if (sr & 0x10000) sr ^= 0x11021;
 8007972:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8007976:	bf18      	it	ne
 8007978:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 8007982:	08d0      	lsrs	r0, r2, #3
				if (sr & 0x10000) sr ^= 0x11021;
 8007984:	0409      	lsls	r1, r1, #16
 8007986:	bf48      	it	mi
 8007988:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 800798a:	f000 0001 	and.w	r0, r0, #1
 800798e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				wc >>= 1;
 8007992:	0911      	lsrs	r1, r2, #4
				if (sr & 0x10000) sr ^= 0x11021;
 8007994:	041b      	lsls	r3, r3, #16
 8007996:	bf48      	it	mi
 8007998:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 800799a:	f001 0101 	and.w	r1, r1, #1
 800799e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 80079a2:	0953      	lsrs	r3, r2, #5
				if (sr & 0x10000) sr ^= 0x11021;
 80079a4:	0400      	lsls	r0, r0, #16
 80079a6:	bf48      	it	mi
 80079a8:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 80079b2:	0990      	lsrs	r0, r2, #6
				if (sr & 0x10000) sr ^= 0x11021;
 80079b4:	0409      	lsls	r1, r1, #16
 80079b6:	bf48      	it	mi
 80079b8:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 80079ba:	f000 0001 	and.w	r0, r0, #1
 80079be:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				wc >>= 1;
 80079c2:	09d1      	lsrs	r1, r2, #7
				if (sr & 0x10000) sr ^= 0x11021;
 80079c4:	041b      	lsls	r3, r3, #16
 80079c6:	bf48      	it	mi
 80079c8:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 80079ca:	f001 0101 	and.w	r1, r1, #1
 80079ce:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 80079d2:	0a13      	lsrs	r3, r2, #8
				if (sr & 0x10000) sr ^= 0x11021;
 80079d4:	0400      	lsls	r0, r0, #16
 80079d6:	bf48      	it	mi
 80079d8:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 80079e2:	0a50      	lsrs	r0, r2, #9
				if (sr & 0x10000) sr ^= 0x11021;
 80079e4:	0409      	lsls	r1, r1, #16
 80079e6:	bf48      	it	mi
 80079e8:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 80079ea:	f000 0001 	and.w	r0, r0, #1
 80079ee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				wc >>= 1;
 80079f2:	0a91      	lsrs	r1, r2, #10
				if (sr & 0x10000) sr ^= 0x11021;
 80079f4:	041b      	lsls	r3, r3, #16
 80079f6:	bf48      	it	mi
 80079f8:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 80079fa:	f001 0101 	and.w	r1, r1, #1
 80079fe:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 8007a02:	0ad3      	lsrs	r3, r2, #11
				if (sr & 0x10000) sr ^= 0x11021;
 8007a04:	0400      	lsls	r0, r0, #16
 8007a06:	bf48      	it	mi
 8007a08:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 8007a12:	0b10      	lsrs	r0, r2, #12
				if (sr & 0x10000) sr ^= 0x11021;
 8007a14:	0409      	lsls	r1, r1, #16
 8007a16:	bf48      	it	mi
 8007a18:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8007a1a:	f000 0001 	and.w	r0, r0, #1
 8007a1e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				wc >>= 1;
 8007a22:	0b51      	lsrs	r1, r2, #13
				if (sr & 0x10000) sr ^= 0x11021;
 8007a24:	041b      	lsls	r3, r3, #16
 8007a26:	bf48      	it	mi
 8007a28:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8007a2a:	f001 0101 	and.w	r1, r1, #1
 8007a2e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 8007a32:	0b93      	lsrs	r3, r2, #14
				if (sr & 0x10000) sr ^= 0x11021;
 8007a34:	0400      	lsls	r0, r0, #16
 8007a36:	bf48      	it	mi
 8007a38:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007a42:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8007a44:	ea4f 32d2 	mov.w	r2, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 8007a48:	bf48      	it	mi
 8007a4a:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8007a4c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
		while (*lfn) {	/* Create a CRC */
 8007a50:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 8007a54:	041b      	lsls	r3, r3, #16
 8007a56:	bf48      	it	mi
 8007a58:	4069      	eormi	r1, r5
		while (*lfn) {	/* Create a CRC */
 8007a5a:	2a00      	cmp	r2, #0
 8007a5c:	f47f af7a 	bne.w	8007954 <dir_register+0x9c>
		c = (BYTE)((seq % 16) + '0');
 8007a60:	f001 000f 	and.w	r0, r1, #15
 8007a64:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007a68:	2a39      	cmp	r2, #57	; 0x39
 8007a6a:	bf88      	it	hi
 8007a6c:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8007a70:	290f      	cmp	r1, #15
		ns[i--] = c;
 8007a72:	f88d 201b 	strb.w	r2, [sp, #27]
		seq /= 16;
 8007a76:	ea4f 1011 	mov.w	r0, r1, lsr #4
	} while (seq);
 8007a7a:	f240 8198 	bls.w	8007dae <dir_register+0x4f6>
		c = (BYTE)((seq % 16) + '0');
 8007a7e:	f000 0c0f 	and.w	ip, r0, #15
 8007a82:	f10c 0230 	add.w	r2, ip, #48	; 0x30
		if (c > '9') c += 7;
 8007a86:	2a39      	cmp	r2, #57	; 0x39
 8007a88:	bf88      	it	hi
 8007a8a:	f10c 0237 	addhi.w	r2, ip, #55	; 0x37
	} while (seq);
 8007a8e:	280f      	cmp	r0, #15
		ns[i--] = c;
 8007a90:	f88d 201a 	strb.w	r2, [sp, #26]
		seq /= 16;
 8007a94:	ea4f 2c11 	mov.w	ip, r1, lsr #8
	} while (seq);
 8007a98:	f240 818f 	bls.w	8007dba <dir_register+0x502>
		c = (BYTE)((seq % 16) + '0');
 8007a9c:	f00c 000f 	and.w	r0, ip, #15
 8007aa0:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007aa4:	2a39      	cmp	r2, #57	; 0x39
 8007aa6:	bf88      	it	hi
 8007aa8:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8007aac:	f1bc 0f0f 	cmp.w	ip, #15
		ns[i--] = c;
 8007ab0:	f88d 2019 	strb.w	r2, [sp, #25]
		seq /= 16;
 8007ab4:	ea4f 3011 	mov.w	r0, r1, lsr #12
	} while (seq);
 8007ab8:	f240 818e 	bls.w	8007dd8 <dir_register+0x520>
		c = (BYTE)((seq % 16) + '0');
 8007abc:	f000 0c0f 	and.w	ip, r0, #15
 8007ac0:	f10c 0230 	add.w	r2, ip, #48	; 0x30
		if (c > '9') c += 7;
 8007ac4:	2a39      	cmp	r2, #57	; 0x39
 8007ac6:	bf88      	it	hi
 8007ac8:	f10c 0237 	addhi.w	r2, ip, #55	; 0x37
	} while (seq);
 8007acc:	280f      	cmp	r0, #15
		ns[i--] = c;
 8007ace:	f88d 2018 	strb.w	r2, [sp, #24]
		seq /= 16;
 8007ad2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
	} while (seq);
 8007ad6:	f240 8185 	bls.w	8007de4 <dir_register+0x52c>
		c = (BYTE)((seq % 16) + '0');
 8007ada:	f00c 000f 	and.w	r0, ip, #15
 8007ade:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007ae2:	2a39      	cmp	r2, #57	; 0x39
 8007ae4:	bf88      	it	hi
 8007ae6:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8007aea:	f1bc 0f0f 	cmp.w	ip, #15
		ns[i--] = c;
 8007aee:	f88d 2017 	strb.w	r2, [sp, #23]
		seq /= 16;
 8007af2:	ea4f 5011 	mov.w	r0, r1, lsr #20
	} while (seq);
 8007af6:	f240 817b 	bls.w	8007df0 <dir_register+0x538>
		c = (BYTE)((seq % 16) + '0');
 8007afa:	f000 0c0f 	and.w	ip, r0, #15
 8007afe:	f10c 0230 	add.w	r2, ip, #48	; 0x30
		if (c > '9') c += 7;
 8007b02:	2a39      	cmp	r2, #57	; 0x39
 8007b04:	bf88      	it	hi
 8007b06:	f10c 0237 	addhi.w	r2, ip, #55	; 0x37
	} while (seq);
 8007b0a:	280f      	cmp	r0, #15
		ns[i--] = c;
 8007b0c:	f88d 2016 	strb.w	r2, [sp, #22]
		seq /= 16;
 8007b10:	ea4f 6111 	mov.w	r1, r1, lsr #24
	} while (seq);
 8007b14:	f240 8172 	bls.w	8007dfc <dir_register+0x544>
		c = (BYTE)((seq % 16) + '0');
 8007b18:	f001 000f 	and.w	r0, r1, #15
 8007b1c:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007b20:	2a39      	cmp	r2, #57	; 0x39
 8007b22:	bf88      	it	hi
 8007b24:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8007b28:	290f      	cmp	r1, #15
		ns[i--] = c;
 8007b2a:	f88d 2015 	strb.w	r2, [sp, #21]
	} while (seq);
 8007b2e:	f240 814a 	bls.w	8007dc6 <dir_register+0x50e>
		ns[i--] = c;
 8007b32:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007b36:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	e002      	b.n	8007b44 <dir_register+0x28c>
 8007b3e:	3201      	adds	r2, #1
 8007b40:	4562      	cmp	r2, ip
 8007b42:	d003      	beq.n	8007b4c <dir_register+0x294>
 8007b44:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	d1f8      	bne.n	8007b3e <dir_register+0x286>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007b4c:	f1bc 0f07 	cmp.w	ip, #7
 8007b50:	d942      	bls.n	8007bd8 <dir_register+0x320>
 8007b52:	1c50      	adds	r0, r2, #1
	} while (j < 8);
 8007b54:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007b56:	f806 b002 	strb.w	fp, [r6, r2]
	} while (j < 8);
 8007b5a:	d80a      	bhi.n	8007b72 <dir_register+0x2ba>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007b5c:	1c42      	adds	r2, r0, #1
 8007b5e:	2a08      	cmp	r2, #8
 8007b60:	f04f 0120 	mov.w	r1, #32
 8007b64:	f1c0 0208 	rsb	r2, r0, #8
 8007b68:	bf88      	it	hi
 8007b6a:	2201      	movhi	r2, #1
 8007b6c:	4430      	add	r0, r6
 8007b6e:	f001 f93d 	bl	8008dec <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007b72:	4620      	mov	r0, r4
 8007b74:	f7ff fa9e 	bl	80070b4 <dir_find>
 8007b78:	4601      	mov	r1, r0
			if (res != FR_OK) break;
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	f040 80ab 	bne.w	8007cd6 <dir_register+0x41e>
		for (n = 1; n < 100; n++) {
 8007b80:	f109 0901 	add.w	r9, r9, #1
 8007b84:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8007b88:	d01a      	beq.n	8007bc0 <dir_register+0x308>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007b8a:	9b00      	ldr	r3, [sp, #0]
 8007b8c:	6919      	ldr	r1, [r3, #16]
 8007b8e:	e6cb      	b.n	8007928 <dir_register+0x70>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007b90:	f013 0802 	ands.w	r8, r3, #2
 8007b94:	9d00      	ldr	r5, [sp, #0]
 8007b96:	f000 80ab 	beq.w	8007cf0 <dir_register+0x438>
 8007b9a:	4a0e      	ldr	r2, [pc, #56]	; (8007bd4 <dir_register+0x31c>)
 8007b9c:	f109 030c 	add.w	r3, r9, #12
 8007ba0:	fba2 2303 	umull	r2, r3, r2, r3
	res = dir_sdi(dp, 0);
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007ba8:	ea4f 0893 	mov.w	r8, r3, lsr #2
	res = dir_sdi(dp, 0);
 8007bac:	f7ff f9bc 	bl	8006f28 <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007bb0:	f108 0b01 	add.w	fp, r8, #1
	if (res == FR_OK) {
 8007bb4:	4601      	mov	r1, r0
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f000 80a4 	beq.w	8007d04 <dir_register+0x44c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007bbc:	2904      	cmp	r1, #4
 8007bbe:	d100      	bne.n	8007bc2 <dir_register+0x30a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007bc0:	2107      	movs	r1, #7
}
 8007bc2:	4608      	mov	r0, r1
 8007bc4:	b00b      	add	sp, #44	; 0x2c
 8007bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bca:	4649      	mov	r1, r9
 8007bcc:	e748      	b.n	8007a60 <dir_register+0x1a8>
 8007bce:	bf00      	nop
 8007bd0:	00011021 	.word	0x00011021
 8007bd4:	4ec4ec4f 	.word	0x4ec4ec4f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007bd8:	f10c 0328 	add.w	r3, ip, #40	; 0x28
 8007bdc:	eb0d 0103 	add.w	r1, sp, r3
 8007be0:	f10c 0c01 	add.w	ip, ip, #1
 8007be4:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8007be8:	54b1      	strb	r1, [r6, r2]
 8007bea:	3201      	adds	r2, #1
	} while (j < 8);
 8007bec:	2a07      	cmp	r2, #7
 8007bee:	d8c0      	bhi.n	8007b72 <dir_register+0x2ba>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007bf0:	f1bc 0f08 	cmp.w	ip, #8
 8007bf4:	f000 80a4 	beq.w	8007d40 <dir_register+0x488>
 8007bf8:	f10c 0328 	add.w	r3, ip, #40	; 0x28
 8007bfc:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 8007c00:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007c02:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8007c06:	54b1      	strb	r1, [r6, r2]
 8007c08:	f102 0001 	add.w	r0, r2, #1
 8007c0c:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 8007c10:	d0af      	beq.n	8007b72 <dir_register+0x2ba>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007c12:	2908      	cmp	r1, #8
 8007c14:	f000 809c 	beq.w	8007d50 <dir_register+0x498>
 8007c18:	f10c 0329 	add.w	r3, ip, #41	; 0x29
 8007c1c:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 8007c20:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007c22:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8007c26:	5431      	strb	r1, [r6, r0]
 8007c28:	f10c 0102 	add.w	r1, ip, #2
 8007c2c:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8007c30:	d09f      	beq.n	8007b72 <dir_register+0x2ba>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007c32:	2908      	cmp	r1, #8
 8007c34:	f000 8094 	beq.w	8007d60 <dir_register+0x4a8>
 8007c38:	f10c 032a 	add.w	r3, ip, #42	; 0x2a
 8007c3c:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 8007c40:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007c42:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8007c46:	5431      	strb	r1, [r6, r0]
 8007c48:	f10c 0103 	add.w	r1, ip, #3
 8007c4c:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8007c50:	d08f      	beq.n	8007b72 <dir_register+0x2ba>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007c52:	2908      	cmp	r1, #8
 8007c54:	f000 808c 	beq.w	8007d70 <dir_register+0x4b8>
 8007c58:	f10c 032b 	add.w	r3, ip, #43	; 0x2b
 8007c5c:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 8007c60:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007c62:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8007c66:	5431      	strb	r1, [r6, r0]
 8007c68:	f10c 0104 	add.w	r1, ip, #4
 8007c6c:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8007c70:	f43f af7f 	beq.w	8007b72 <dir_register+0x2ba>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007c74:	2908      	cmp	r1, #8
 8007c76:	f000 8083 	beq.w	8007d80 <dir_register+0x4c8>
 8007c7a:	f10c 032c 	add.w	r3, ip, #44	; 0x2c
 8007c7e:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 8007c82:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007c84:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8007c88:	5431      	strb	r1, [r6, r0]
 8007c8a:	f10c 0105 	add.w	r1, ip, #5
 8007c8e:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8007c92:	f43f af6e 	beq.w	8007b72 <dir_register+0x2ba>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007c96:	2908      	cmp	r1, #8
 8007c98:	d07a      	beq.n	8007d90 <dir_register+0x4d8>
 8007c9a:	f10c 032d 	add.w	r3, ip, #45	; 0x2d
 8007c9e:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 8007ca2:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007ca4:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8007ca8:	5431      	strb	r1, [r6, r0]
 8007caa:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 8007cae:	f43f af60 	beq.w	8007b72 <dir_register+0x2ba>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007cb2:	f1bc 0f01 	cmp.w	ip, #1
 8007cb6:	d173      	bne.n	8007da0 <dir_register+0x4e8>
 8007cb8:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8007cbc:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
 8007cbe:	2906      	cmp	r1, #6
 8007cc0:	f47f af57 	bne.w	8007b72 <dir_register+0x2ba>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007cc4:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f7ff f9f3 	bl	80070b4 <dir_find>
 8007cce:	4601      	mov	r1, r0
			if (res != FR_OK) break;
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	f43f af55 	beq.w	8007b80 <dir_register+0x2c8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007cd6:	2804      	cmp	r0, #4
 8007cd8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007cdc:	f47f af71 	bne.w	8007bc2 <dir_register+0x30a>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007ce0:	9b02      	ldr	r3, [sp, #8]
	FATFS *fs = dp->obj.fs;
 8007ce2:	6825      	ldr	r5, [r4, #0]
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007ce4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007ce8:	f013 0802 	ands.w	r8, r3, #2
 8007cec:	f47f af55 	bne.w	8007b9a <dir_register+0x2e2>
	res = dir_sdi(dp, 0);
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f7ff f918 	bl	8006f28 <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007cf8:	f04f 0b01 	mov.w	fp, #1
	if (res == FR_OK) {
 8007cfc:	4601      	mov	r1, r0
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f47f af5c 	bne.w	8007bbc <dir_register+0x304>
		n = 0;
 8007d04:	4607      	mov	r7, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007d06:	f105 0a38 	add.w	sl, r5, #56	; 0x38
 8007d0a:	f8cd 8004 	str.w	r8, [sp, #4]
			res = move_window(fs, dp->sect);
 8007d0e:	69e6      	ldr	r6, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d10:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
 8007d14:	4546      	cmp	r6, r8
 8007d16:	d078      	beq.n	8007e0a <dir_register+0x552>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007d18:	78eb      	ldrb	r3, [r5, #3]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f040 80b8 	bne.w	8007e90 <dir_register+0x5d8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007d20:	7868      	ldrb	r0, [r5, #1]
 8007d22:	2301      	movs	r3, #1
 8007d24:	4632      	mov	r2, r6
 8007d26:	4651      	mov	r1, sl
 8007d28:	f7fe fc28 	bl	800657c <disk_read>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d06b      	beq.n	8007e08 <dir_register+0x550>
				res = FR_DISK_ERR;
 8007d30:	2101      	movs	r1, #1
			fs->winsect = sector;
 8007d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007d36:	4608      	mov	r0, r1
			fs->winsect = sector;
 8007d38:	636b      	str	r3, [r5, #52]	; 0x34
}
 8007d3a:	b00b      	add	sp, #44	; 0x2c
 8007d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
 8007d40:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007d42:	f806 b002 	strb.w	fp, [r6, r2]
 8007d46:	f102 0001 	add.w	r0, r2, #1
	} while (j < 8);
 8007d4a:	f47f af07 	bne.w	8007b5c <dir_register+0x2a4>
 8007d4e:	e710      	b.n	8007b72 <dir_register+0x2ba>
 8007d50:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007d52:	f806 b000 	strb.w	fp, [r6, r0]
 8007d56:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8007d5a:	f47f aeff 	bne.w	8007b5c <dir_register+0x2a4>
 8007d5e:	e708      	b.n	8007b72 <dir_register+0x2ba>
 8007d60:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007d62:	f806 b000 	strb.w	fp, [r6, r0]
 8007d66:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8007d6a:	f47f aef7 	bne.w	8007b5c <dir_register+0x2a4>
 8007d6e:	e700      	b.n	8007b72 <dir_register+0x2ba>
 8007d70:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007d72:	f806 b000 	strb.w	fp, [r6, r0]
 8007d76:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8007d7a:	f47f aeef 	bne.w	8007b5c <dir_register+0x2a4>
 8007d7e:	e6f8      	b.n	8007b72 <dir_register+0x2ba>
 8007d80:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007d82:	f806 b000 	strb.w	fp, [r6, r0]
 8007d86:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8007d8a:	f47f aee7 	bne.w	8007b5c <dir_register+0x2a4>
 8007d8e:	e6f0      	b.n	8007b72 <dir_register+0x2ba>
 8007d90:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007d92:	f806 b000 	strb.w	fp, [r6, r0]
 8007d96:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 8007d9a:	f47f aedf 	bne.w	8007b5c <dir_register+0x2a4>
 8007d9e:	e6e8      	b.n	8007b72 <dir_register+0x2ba>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007da0:	f806 b001 	strb.w	fp, [r6, r1]
	} while (j < 8);
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	f47f aee4 	bne.w	8007b72 <dir_register+0x2ba>
 8007daa:	2007      	movs	r0, #7
 8007dac:	e6d6      	b.n	8007b5c <dir_register+0x2a4>
	ns[i] = '~';
 8007dae:	227e      	movs	r2, #126	; 0x7e
 8007db0:	f88d 201a 	strb.w	r2, [sp, #26]
		ns[i--] = c;
 8007db4:	f04f 0c06 	mov.w	ip, #6
 8007db8:	e6bd      	b.n	8007b36 <dir_register+0x27e>
	ns[i] = '~';
 8007dba:	227e      	movs	r2, #126	; 0x7e
 8007dbc:	f88d 2019 	strb.w	r2, [sp, #25]
		ns[i--] = c;
 8007dc0:	f04f 0c05 	mov.w	ip, #5
 8007dc4:	e6b7      	b.n	8007b36 <dir_register+0x27e>
	ns[i] = '~';
 8007dc6:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007dc8:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 8007dcc:	f88d 2014 	strb.w	r2, [sp, #20]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007dd0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8007dd4:	4662      	mov	r2, ip
 8007dd6:	e70f      	b.n	8007bf8 <dir_register+0x340>
	ns[i] = '~';
 8007dd8:	227e      	movs	r2, #126	; 0x7e
 8007dda:	f88d 2018 	strb.w	r2, [sp, #24]
		ns[i--] = c;
 8007dde:	f04f 0c04 	mov.w	ip, #4
 8007de2:	e6a8      	b.n	8007b36 <dir_register+0x27e>
	ns[i] = '~';
 8007de4:	227e      	movs	r2, #126	; 0x7e
 8007de6:	f88d 2017 	strb.w	r2, [sp, #23]
		ns[i--] = c;
 8007dea:	f04f 0c03 	mov.w	ip, #3
 8007dee:	e6a2      	b.n	8007b36 <dir_register+0x27e>
	ns[i] = '~';
 8007df0:	227e      	movs	r2, #126	; 0x7e
 8007df2:	f88d 2016 	strb.w	r2, [sp, #22]
		ns[i--] = c;
 8007df6:	f04f 0c02 	mov.w	ip, #2
 8007dfa:	e69c      	b.n	8007b36 <dir_register+0x27e>
	ns[i] = '~';
 8007dfc:	227e      	movs	r2, #126	; 0x7e
 8007dfe:	f88d 2015 	strb.w	r2, [sp, #21]
		ns[i--] = c;
 8007e02:	f04f 0c01 	mov.w	ip, #1
 8007e06:	e696      	b.n	8007b36 <dir_register+0x27e>
			fs->winsect = sector;
 8007e08:	636e      	str	r6, [r5, #52]	; 0x34
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007e0a:	6a23      	ldr	r3, [r4, #32]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2be5      	cmp	r3, #229	; 0xe5
 8007e10:	d00a      	beq.n	8007e28 <dir_register+0x570>
 8007e12:	b14b      	cbz	r3, 8007e28 <dir_register+0x570>
				n = 0;					/* Not a blank entry. Restart to search */
 8007e14:	2700      	movs	r7, #0
			res = dir_next(dp, 1);
 8007e16:	2101      	movs	r1, #1
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f7ff fc61 	bl	80076e0 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f43f af75 	beq.w	8007d0e <dir_register+0x456>
 8007e24:	4601      	mov	r1, r0
 8007e26:	e6c9      	b.n	8007bbc <dir_register+0x304>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007e28:	3701      	adds	r7, #1
 8007e2a:	45bb      	cmp	fp, r7
 8007e2c:	d1f3      	bne.n	8007e16 <dir_register+0x55e>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007e2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e32:	f1b8 0f00 	cmp.w	r8, #0
 8007e36:	d155      	bne.n	8007ee4 <dir_register+0x62c>
		res = move_window(fs, dp->sect);
 8007e38:	69e1      	ldr	r1, [r4, #28]
 8007e3a:	9800      	ldr	r0, [sp, #0]
 8007e3c:	f7fe fcda 	bl	80067f4 <move_window>
		if (res == FR_OK) {
 8007e40:	4601      	mov	r1, r0
 8007e42:	2800      	cmp	r0, #0
 8007e44:	f47f aebd 	bne.w	8007bc2 <dir_register+0x30a>
		*d++ = (BYTE)val;
 8007e48:	2220      	movs	r2, #32
 8007e4a:	9001      	str	r0, [sp, #4]
 8007e4c:	6a20      	ldr	r0, [r4, #32]
 8007e4e:	f000 ffcd 	bl	8008dec <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007e52:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007e54:	9901      	ldr	r1, [sp, #4]
 8007e56:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8007e5a:	1a9a      	subs	r2, r3, r2
 8007e5c:	2a02      	cmp	r2, #2
 8007e5e:	f240 817c 	bls.w	800815a <dir_register+0x8a2>
			*d++ = *s++;
 8007e62:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007e68:	605a      	str	r2, [r3, #4]
 8007e6a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8007e6e:	721a      	strb	r2, [r3, #8]
 8007e70:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8007e74:	725a      	strb	r2, [r3, #9]
 8007e76:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8007e7a:	729a      	strb	r2, [r3, #10]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007e7c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8007e80:	6a20      	ldr	r0, [r4, #32]
 8007e82:	f003 0318 	and.w	r3, r3, #24
 8007e86:	7303      	strb	r3, [r0, #12]
			fs->wflag = 1;
 8007e88:	9b00      	ldr	r3, [sp, #0]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	70da      	strb	r2, [r3, #3]
 8007e8e:	e698      	b.n	8007bc2 <dir_register+0x30a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007e90:	7868      	ldrb	r0, [r5, #1]
 8007e92:	2301      	movs	r3, #1
 8007e94:	4642      	mov	r2, r8
 8007e96:	4651      	mov	r1, sl
 8007e98:	f7fe fb80 	bl	800659c <disk_write>
 8007e9c:	b9d8      	cbnz	r0, 8007ed6 <dir_register+0x61e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007e9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
			fs->wflag = 0;
 8007ea0:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007ea2:	eba8 0103 	sub.w	r1, r8, r3
 8007ea6:	6a2b      	ldr	r3, [r5, #32]
 8007ea8:	4299      	cmp	r1, r3
 8007eaa:	f4bf af39 	bcs.w	8007d20 <dir_register+0x468>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007eae:	f895 9002 	ldrb.w	r9, [r5, #2]
 8007eb2:	f1b9 0f01 	cmp.w	r9, #1
 8007eb6:	d801      	bhi.n	8007ebc <dir_register+0x604>
 8007eb8:	e732      	b.n	8007d20 <dir_register+0x468>
					wsect += fs->fsize;
 8007eba:	6a2b      	ldr	r3, [r5, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ebc:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8007ebe:	4498      	add	r8, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ec0:	4642      	mov	r2, r8
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	4651      	mov	r1, sl
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ec6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8007eca:	f7fe fb67 	bl	800659c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ece:	f1b9 0f01 	cmp.w	r9, #1
 8007ed2:	d1f2      	bne.n	8007eba <dir_register+0x602>
 8007ed4:	e724      	b.n	8007d20 <dir_register+0x468>
 8007ed6:	2101      	movs	r1, #1
}
 8007ed8:	4608      	mov	r0, r1
 8007eda:	b00b      	add	sp, #44	; 0x2c
 8007edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007ee0:	2106      	movs	r1, #6
 8007ee2:	e66e      	b.n	8007bc2 <dir_register+0x30a>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007ee4:	6961      	ldr	r1, [r4, #20]
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	eba1 1148 	sub.w	r1, r1, r8, lsl #5
 8007eec:	f7ff f81c 	bl	8006f28 <dir_sdi>
		if (res == FR_OK) {
 8007ef0:	4601      	mov	r1, r0
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	f47f ae65 	bne.w	8007bc2 <dir_register+0x30a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007ef8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	*ptr++ = (BYTE)val; val >>= 8;
 8007efc:	f8dd a000 	ldr.w	sl, [sp]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007f00:	01d3      	lsls	r3, r2, #7
 8007f02:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8007f06:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8007f10:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8007f14:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8007f18:	fa53 f282 	uxtab	r2, r3, r2
 8007f1c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007f20:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007f24:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8007f28:	fa52 f383 	uxtab	r3, r2, r3
 8007f2c:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8007f30:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8007f34:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007f38:	fa53 f282 	uxtab	r2, r3, r2
 8007f3c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007f40:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007f44:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8007f48:	fa52 f383 	uxtab	r3, r2, r3
 8007f4c:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8007f50:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8007f54:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8007f58:	fa53 f282 	uxtab	r2, r3, r2
 8007f5c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007f60:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007f64:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8007f68:	fa52 f383 	uxtab	r3, r2, r3
 8007f6c:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8007f70:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8007f74:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007f78:	fa53 f282 	uxtab	r2, r3, r2
 8007f7c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007f80:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007f84:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8007f88:	fa52 f383 	uxtab	r3, r2, r3
 8007f8c:	f3c3 0646 	ubfx	r6, r3, #1, #7
 8007f90:	ea46 16c3 	orr.w	r6, r6, r3, lsl #7
 8007f94:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8007f98:	fa53 f686 	uxtab	r6, r3, r6
 8007f9c:	b2f6      	uxtb	r6, r6
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007f9e:	270f      	movs	r7, #15
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007fa0:	f64f 75fd 	movw	r5, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
 8007fa4:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8007fa8:	e02a      	b.n	8008000 <dir_register+0x748>
 8007faa:	f8a3 9003 	strh.w	r9, [r3, #3]
 8007fae:	f8a3 9005 	strh.w	r9, [r3, #5]
 8007fb2:	f8a3 9007 	strh.w	r9, [r3, #7]
 8007fb6:	f8a3 9009 	strh.w	r9, [r3, #9]
 8007fba:	f8a3 900e 	strh.w	r9, [r3, #14]
 8007fbe:	f8a3 9010 	strh.w	r9, [r3, #16]
 8007fc2:	f8a3 9012 	strh.w	r9, [r3, #18]
 8007fc6:	f8a3 9014 	strh.w	r9, [r3, #20]
 8007fca:	f8a3 9016 	strh.w	r9, [r3, #22]
 8007fce:	f8a3 9018 	strh.w	r9, [r3, #24]
 8007fd2:	f8a3 901c 	strh.w	r9, [r3, #28]
 8007fd6:	f8a3 901e 	strh.w	r9, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007fda:	f04e 0e40 	orr.w	lr, lr, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007fde:	f883 e000 	strb.w	lr, [r3]
				fs->wflag = 1;
 8007fe2:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8007fe4:	2100      	movs	r1, #0
				fs->wflag = 1;
 8007fe6:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007fea:	4620      	mov	r0, r4
 8007fec:	f7ff fb78 	bl	80076e0 <dir_next>
			} while (res == FR_OK && --nent);
 8007ff0:	4601      	mov	r1, r0
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	f47f ade5 	bne.w	8007bc2 <dir_register+0x30a>
 8007ff8:	f1b8 0801 	subs.w	r8, r8, #1
 8007ffc:	f43f af1c 	beq.w	8007e38 <dir_register+0x580>
				res = move_window(fs, dp->sect);
 8008000:	69e1      	ldr	r1, [r4, #28]
 8008002:	4650      	mov	r0, sl
 8008004:	f7fe fbf6 	bl	80067f4 <move_window>
 8008008:	4601      	mov	r1, r0
				if (res != FR_OK) break;
 800800a:	2800      	cmp	r0, #0
 800800c:	f47f add9 	bne.w	8007bc2 <dir_register+0x30a>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008010:	fa5f fe88 	uxtb.w	lr, r8
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008014:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008018:	6a23      	ldr	r3, [r4, #32]
 800801a:	f8da c010 	ldr.w	ip, [sl, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800801e:	8358      	strh	r0, [r3, #26]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008020:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8008024:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008028:	735e      	strb	r6, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800802a:	f8a3 700b 	strh.w	r7, [r3, #11]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800802e:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8008032:	7059      	strb	r1, [r3, #1]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008034:	1e48      	subs	r0, r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8008036:	0a09      	lsrs	r1, r1, #8
	*ptr++ = (BYTE)val;
 8008038:	7099      	strb	r1, [r3, #2]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800803a:	b281      	uxth	r1, r0
 800803c:	42a9      	cmp	r1, r5
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800803e:	ea4f 0042 	mov.w	r0, r2, lsl #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008042:	d8b2      	bhi.n	8007faa <dir_register+0x6f2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008044:	1c51      	adds	r1, r2, #1
 8008046:	004a      	lsls	r2, r1, #1
 8008048:	f83c 1011 	ldrh.w	r1, [ip, r1, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800804c:	70d9      	strb	r1, [r3, #3]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800804e:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8008052:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 8008056:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008058:	45ab      	cmp	fp, r5
	*ptr++ = (BYTE)val;
 800805a:	7119      	strb	r1, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800805c:	d8a7      	bhi.n	8007fae <dir_register+0x6f6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800805e:	4462      	add	r2, ip
 8008060:	8851      	ldrh	r1, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008062:	7159      	strb	r1, [r3, #5]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008064:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8008068:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 800806c:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800806e:	45ab      	cmp	fp, r5
	*ptr++ = (BYTE)val;
 8008070:	7199      	strb	r1, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008072:	d89e      	bhi.n	8007fb2 <dir_register+0x6fa>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008074:	8891      	ldrh	r1, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8008076:	71d9      	strb	r1, [r3, #7]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008078:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 800807c:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 8008080:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008082:	45ab      	cmp	fp, r5
	*ptr++ = (BYTE)val;
 8008084:	7219      	strb	r1, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008086:	d896      	bhi.n	8007fb6 <dir_register+0x6fe>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008088:	88d1      	ldrh	r1, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 800808a:	7259      	strb	r1, [r3, #9]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800808c:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8008090:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 8008094:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008096:	45ab      	cmp	fp, r5
	*ptr++ = (BYTE)val;
 8008098:	7299      	strb	r1, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800809a:	d88e      	bhi.n	8007fba <dir_register+0x702>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800809c:	8911      	ldrh	r1, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 800809e:	7399      	strb	r1, [r3, #14]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80080a0:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 80080a4:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 80080a8:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80080aa:	45ab      	cmp	fp, r5
	*ptr++ = (BYTE)val;
 80080ac:	73d9      	strb	r1, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80080ae:	d886      	bhi.n	8007fbe <dir_register+0x706>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80080b0:	8951      	ldrh	r1, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 80080b2:	7419      	strb	r1, [r3, #16]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80080b4:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 80080b8:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 80080bc:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80080be:	45ab      	cmp	fp, r5
	*ptr++ = (BYTE)val;
 80080c0:	7459      	strb	r1, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80080c2:	f63f af7e 	bhi.w	8007fc2 <dir_register+0x70a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80080c6:	8991      	ldrh	r1, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80080c8:	7499      	strb	r1, [r3, #18]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80080ca:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 80080ce:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 80080d2:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80080d4:	45ab      	cmp	fp, r5
	*ptr++ = (BYTE)val;
 80080d6:	74d9      	strb	r1, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80080d8:	f63f af75 	bhi.w	8007fc6 <dir_register+0x70e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80080dc:	89d1      	ldrh	r1, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 80080de:	7519      	strb	r1, [r3, #20]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80080e0:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 80080e4:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 80080e8:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80080ea:	45ab      	cmp	fp, r5
	*ptr++ = (BYTE)val;
 80080ec:	7559      	strb	r1, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80080ee:	f63f af6c 	bhi.w	8007fca <dir_register+0x712>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80080f2:	8a11      	ldrh	r1, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80080f4:	7599      	strb	r1, [r3, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80080f6:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 80080fa:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 80080fe:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008100:	45ab      	cmp	fp, r5
	*ptr++ = (BYTE)val;
 8008102:	75d9      	strb	r1, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008104:	f63f af63 	bhi.w	8007fce <dir_register+0x716>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008108:	8a51      	ldrh	r1, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 800810a:	7619      	strb	r1, [r3, #24]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800810c:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8008110:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 8008114:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008116:	45ab      	cmp	fp, r5
	*ptr++ = (BYTE)val;
 8008118:	7659      	strb	r1, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800811a:	f63f af5a 	bhi.w	8007fd2 <dir_register+0x71a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800811e:	8a91      	ldrh	r1, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8008120:	7719      	strb	r1, [r3, #28]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008122:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8008126:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 800812a:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800812c:	45ab      	cmp	fp, r5
	*ptr++ = (BYTE)val;
 800812e:	7759      	strb	r1, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008130:	f63f af51 	bhi.w	8007fd6 <dir_register+0x71e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008134:	8ad2      	ldrh	r2, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8008136:	779a      	strb	r2, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008138:	1e51      	subs	r1, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800813a:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800813c:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800813e:	b28a      	uxth	r2, r1
 8008140:	42aa      	cmp	r2, r5
 8008142:	f63f af4a 	bhi.w	8007fda <dir_register+0x722>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008146:	eb0c 0200 	add.w	r2, ip, r0
 800814a:	8b52      	ldrh	r2, [r2, #26]
 800814c:	2a00      	cmp	r2, #0
 800814e:	f47f af46 	bne.w	8007fde <dir_register+0x726>
 8008152:	e742      	b.n	8007fda <dir_register+0x722>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008154:	4699      	mov	r9, r3
 8008156:	f7ff bbcb 	b.w	80078f0 <dir_register+0x38>
			*d++ = *s++;
 800815a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800815e:	701a      	strb	r2, [r3, #0]
 8008160:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8008164:	705a      	strb	r2, [r3, #1]
 8008166:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800816a:	709a      	strb	r2, [r3, #2]
 800816c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8008170:	70da      	strb	r2, [r3, #3]
 8008172:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8008176:	711a      	strb	r2, [r3, #4]
 8008178:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800817c:	715a      	strb	r2, [r3, #5]
 800817e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8008182:	719a      	strb	r2, [r3, #6]
 8008184:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8008188:	71da      	strb	r2, [r3, #7]
 800818a:	e66e      	b.n	8007e6a <dir_register+0x5b2>

0800818c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800818c:	2901      	cmp	r1, #1
{
 800818e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8008192:	6805      	ldr	r5, [r0, #0]
{
 8008194:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008196:	d90f      	bls.n	80081b8 <remove_chain+0x2c>
 8008198:	69eb      	ldr	r3, [r5, #28]
 800819a:	428b      	cmp	r3, r1
 800819c:	d90c      	bls.n	80081b8 <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800819e:	4606      	mov	r6, r0
 80081a0:	4611      	mov	r1, r2
 80081a2:	b962      	cbnz	r2, 80081be <remove_chain+0x32>
 80081a4:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80081a6:	42a3      	cmp	r3, r4
 80081a8:	d906      	bls.n	80081b8 <remove_chain+0x2c>
		switch (fs->fs_type) {
 80081aa:	783b      	ldrb	r3, [r7, #0]
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d05a      	beq.n	8008266 <remove_chain+0xda>
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d021      	beq.n	80081f8 <remove_chain+0x6c>
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d010      	beq.n	80081da <remove_chain+0x4e>
 80081b8:	2002      	movs	r0, #2
}
 80081ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80081be:	2a01      	cmp	r2, #1
 80081c0:	d0fa      	beq.n	80081b8 <remove_chain+0x2c>
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d9f8      	bls.n	80081b8 <remove_chain+0x2c>
 80081c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081ca:	4628      	mov	r0, r5
 80081cc:	f7fe fcde 	bl	8006b8c <put_fat.part.0>
		if (res != FR_OK) return res;
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d1f2      	bne.n	80081ba <remove_chain+0x2e>
 80081d4:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	e7e5      	b.n	80081a6 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80081da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081dc:	89bb      	ldrh	r3, [r7, #12]
			bc = (UINT)clst; bc += bc / 2;
 80081de:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80081e2:	4638      	mov	r0, r7
 80081e4:	fbb8 f3f3 	udiv	r3, r8, r3
 80081e8:	4419      	add	r1, r3
 80081ea:	f7fe fb03 	bl	80067f4 <move_window>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d04e      	beq.n	8008290 <remove_chain+0x104>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80081f2:	2001      	movs	r0, #1
}
 80081f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80081f8:	89bb      	ldrh	r3, [r7, #12]
 80081fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081fc:	089b      	lsrs	r3, r3, #2
 80081fe:	4638      	mov	r0, r7
 8008200:	fbb4 f3f3 	udiv	r3, r4, r3
 8008204:	4419      	add	r1, r3
 8008206:	f7fe faf5 	bl	80067f4 <move_window>
 800820a:	2800      	cmp	r0, #0
 800820c:	d1f1      	bne.n	80081f2 <remove_chain+0x66>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800820e:	89ba      	ldrh	r2, [r7, #12]
 8008210:	00a3      	lsls	r3, r4, #2
 8008212:	fbb3 f1f2 	udiv	r1, r3, r2
 8008216:	fb02 3311 	mls	r3, r2, r1, r3
	rv = rv << 8 | ptr[0];
 800821a:	443b      	add	r3, r7
 800821c:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008220:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
 8008224:	f1b8 0f00 	cmp.w	r8, #0
 8008228:	d056      	beq.n	80082d8 <remove_chain+0x14c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800822a:	f1b8 0f01 	cmp.w	r8, #1
 800822e:	d0c3      	beq.n	80081b8 <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008230:	69eb      	ldr	r3, [r5, #28]
 8008232:	42a3      	cmp	r3, r4
 8008234:	d9c0      	bls.n	80081b8 <remove_chain+0x2c>
 8008236:	2200      	movs	r2, #0
 8008238:	4621      	mov	r1, r4
 800823a:	4628      	mov	r0, r5
 800823c:	f7fe fca6 	bl	8006b8c <put_fat.part.0>
			if (res != FR_OK) return res;
 8008240:	2800      	cmp	r0, #0
 8008242:	d1ba      	bne.n	80081ba <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008244:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 8008248:	1e91      	subs	r1, r2, #2
 800824a:	428b      	cmp	r3, r1
 800824c:	d205      	bcs.n	800825a <remove_chain+0xce>
			fs->free_clst++;
 800824e:	3301      	adds	r3, #1
 8008250:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 8008252:	792b      	ldrb	r3, [r5, #4]
 8008254:	f043 0301 	orr.w	r3, r3, #1
 8008258:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800825a:	4542      	cmp	r2, r8
 800825c:	d93c      	bls.n	80082d8 <remove_chain+0x14c>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800825e:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008260:	4644      	mov	r4, r8
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	e79f      	b.n	80081a6 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008266:	89bb      	ldrh	r3, [r7, #12]
 8008268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800826a:	085b      	lsrs	r3, r3, #1
 800826c:	4638      	mov	r0, r7
 800826e:	fbb4 f3f3 	udiv	r3, r4, r3
 8008272:	4419      	add	r1, r3
 8008274:	f7fe fabe 	bl	80067f4 <move_window>
 8008278:	2800      	cmp	r0, #0
 800827a:	d1ba      	bne.n	80081f2 <remove_chain+0x66>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800827c:	89ba      	ldrh	r2, [r7, #12]
 800827e:	0063      	lsls	r3, r4, #1
 8008280:	fbb3 f1f2 	udiv	r1, r3, r2
 8008284:	fb02 3311 	mls	r3, r2, r1, r3
 8008288:	443b      	add	r3, r7
 800828a:	f8b3 8038 	ldrh.w	r8, [r3, #56]	; 0x38
			break;
 800828e:	e7c9      	b.n	8008224 <remove_chain+0x98>
			wc = fs->win[bc++ % SS(fs)];
 8008290:	89b9      	ldrh	r1, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008292:	6aba      	ldr	r2, [r7, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];
 8008294:	fbb8 f3f1 	udiv	r3, r8, r1
 8008298:	fb01 8313 	mls	r3, r1, r3, r8
 800829c:	443b      	add	r3, r7
 800829e:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082a2:	4638      	mov	r0, r7
 80082a4:	fbb8 f1f1 	udiv	r1, r8, r1
 80082a8:	4411      	add	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80082aa:	f893 9038 	ldrb.w	r9, [r3, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082ae:	f7fe faa1 	bl	80067f4 <move_window>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d19d      	bne.n	80081f2 <remove_chain+0x66>
			wc |= fs->win[bc % SS(fs)] << 8;
 80082b6:	89bb      	ldrh	r3, [r7, #12]
 80082b8:	fbb8 f2f3 	udiv	r2, r8, r3
 80082bc:	fb03 8812 	mls	r8, r3, r2, r8
 80082c0:	44b8      	add	r8, r7
 80082c2:	f898 3038 	ldrb.w	r3, [r8, #56]	; 0x38
 80082c6:	ea49 2803 	orr.w	r8, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80082ca:	07e3      	lsls	r3, r4, #31
 80082cc:	bf4c      	ite	mi
 80082ce:	ea4f 1818 	movmi.w	r8, r8, lsr #4
 80082d2:	f3c8 080b 	ubfxpl	r8, r8, #0, #12
 80082d6:	e7a5      	b.n	8008224 <remove_chain+0x98>
	return FR_OK;
 80082d8:	2000      	movs	r0, #0
 80082da:	e76e      	b.n	80081ba <remove_chain+0x2e>

080082dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80082dc:	b510      	push	{r4, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 80082e4:	b181      	cbz	r1, 8008308 <f_mount+0x2c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80082e6:	f891 c000 	ldrb.w	ip, [r1]
 80082ea:	f1bc 0f1f 	cmp.w	ip, #31
 80082ee:	d911      	bls.n	8008314 <f_mount+0x38>
 80082f0:	4663      	mov	r3, ip
 80082f2:	4608      	mov	r0, r1
 80082f4:	e003      	b.n	80082fe <f_mount+0x22>
 80082f6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80082fa:	2b1f      	cmp	r3, #31
 80082fc:	d90a      	bls.n	8008314 <f_mount+0x38>
 80082fe:	2b3a      	cmp	r3, #58	; 0x3a
 8008300:	d1f9      	bne.n	80082f6 <f_mount+0x1a>
			i = *tp++ - '0';
 8008302:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008304:	4288      	cmp	r0, r1
 8008306:	d002      	beq.n	800830e <f_mount+0x32>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8008308:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800830a:	b002      	add	sp, #8
 800830c:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800830e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008312:	d1f9      	bne.n	8008308 <f_mount+0x2c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008314:	4910      	ldr	r1, [pc, #64]	; (8008358 <f_mount+0x7c>)
 8008316:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 8008318:	b163      	cbz	r3, 8008334 <f_mount+0x58>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800831a:	4810      	ldr	r0, [pc, #64]	; (800835c <f_mount+0x80>)
 800831c:	6804      	ldr	r4, [r0, #0]
 800831e:	42a3      	cmp	r3, r4
 8008320:	bf04      	itt	eq
 8008322:	2400      	moveq	r4, #0
 8008324:	6004      	streq	r4, [r0, #0]
 8008326:	6904      	ldr	r4, [r0, #16]
 8008328:	429c      	cmp	r4, r3
 800832a:	bf04      	itt	eq
 800832c:	2400      	moveq	r4, #0
 800832e:	6104      	streq	r4, [r0, #16]
		cfs->fs_type = 0;				/* Clear old fs object */
 8008330:	2000      	movs	r0, #0
 8008332:	7018      	strb	r0, [r3, #0]
	if (fs) {
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	b15b      	cbz	r3, 8008350 <f_mount+0x74>
		fs->fs_type = 0;				/* Clear new fs object */
 8008338:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800833a:	2a01      	cmp	r2, #1
		fs->fs_type = 0;				/* Clear new fs object */
 800833c:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 800833e:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008340:	d1e3      	bne.n	800830a <f_mount+0x2e>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008342:	4602      	mov	r2, r0
 8008344:	a901      	add	r1, sp, #4
 8008346:	4668      	mov	r0, sp
 8008348:	f7fe fa92 	bl	8006870 <find_volume>
}
 800834c:	b002      	add	sp, #8
 800834e:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008350:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8008352:	600b      	str	r3, [r1, #0]
}
 8008354:	b002      	add	sp, #8
 8008356:	bd10      	pop	{r4, pc}
 8008358:	200044e0 	.word	0x200044e0
 800835c:	200044e4 	.word	0x200044e4

08008360 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008364:	b090      	sub	sp, #64	; 0x40
 8008366:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008368:	2800      	cmp	r0, #0
 800836a:	f000 809a 	beq.w	80084a2 <f_open+0x142>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800836e:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8008372:	4616      	mov	r6, r2
 8008374:	4604      	mov	r4, r0
 8008376:	463a      	mov	r2, r7
 8008378:	a902      	add	r1, sp, #8
 800837a:	a801      	add	r0, sp, #4
 800837c:	f7fe fa78 	bl	8006870 <find_volume>
	if (res == FR_OK) {
 8008380:	4605      	mov	r5, r0
 8008382:	b128      	cbz	r0, 8008390 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008384:	2300      	movs	r3, #0
 8008386:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8008388:	4628      	mov	r0, r5
 800838a:	b010      	add	sp, #64	; 0x40
 800838c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 8008390:	f8dd 8008 	ldr.w	r8, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008394:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8008396:	f8cd 800c 	str.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800839a:	a803      	add	r0, sp, #12
 800839c:	f7ff f836 	bl	800740c <follow_path>
		if (res == FR_OK) {
 80083a0:	b9f8      	cbnz	r0, 80083e2 <f_open+0x82>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80083a2:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f2c0 8082 	blt.w	80084b0 <f_open+0x150>
		if (Files[i].fs) {	/* Existing entry */
 80083ac:	4b9f      	ldr	r3, [pc, #636]	; (800862c <f_open+0x2cc>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083ae:	9a03      	ldr	r2, [sp, #12]
		if (Files[i].fs) {	/* Existing entry */
 80083b0:	f8d3 9000 	ldr.w	r9, [r3]
				Files[i].clu == dp->obj.sclust &&
 80083b4:	f8dd c014 	ldr.w	ip, [sp, #20]
				Files[i].ofs == dp->dptr) break;
 80083b8:	f8dd e020 	ldr.w	lr, [sp, #32]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80083bc:	f027 0001 	bic.w	r0, r7, #1
 80083c0:	4601      	mov	r1, r0
		if (Files[i].fs) {	/* Existing entry */
 80083c2:	f1b9 0f00 	cmp.w	r9, #0
 80083c6:	f000 80e2 	beq.w	800858e <f_open+0x22e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083ca:	4591      	cmp	r9, r2
 80083cc:	d072      	beq.n	80084b4 <f_open+0x154>
		if (Files[i].fs) {	/* Existing entry */
 80083ce:	f8d3 9010 	ldr.w	r9, [r3, #16]
 80083d2:	f1b9 0f00 	cmp.w	r9, #0
 80083d6:	d074      	beq.n	80084c2 <f_open+0x162>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083d8:	454a      	cmp	r2, r9
 80083da:	f000 8118 	beq.w	800860e <f_open+0x2ae>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80083de:	2512      	movs	r5, #18
 80083e0:	e7d0      	b.n	8008384 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80083e2:	f016 0f1c 	tst.w	r6, #28
 80083e6:	d061      	beq.n	80084ac <f_open+0x14c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80083e8:	2804      	cmp	r0, #4
 80083ea:	d15f      	bne.n	80084ac <f_open+0x14c>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80083ec:	4b8f      	ldr	r3, [pc, #572]	; (800862c <f_open+0x2cc>)
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	b112      	cbz	r2, 80083f8 <f_open+0x98>
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1f2      	bne.n	80083de <f_open+0x7e>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80083f8:	a803      	add	r0, sp, #12
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80083fa:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80083fe:	f7ff fa5b 	bl	80078b8 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008402:	2800      	cmp	r0, #0
 8008404:	d152      	bne.n	80084ac <f_open+0x14c>
				dw = GET_FATTIME();
 8008406:	f7fd fa35 	bl	8005874 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800840a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800840c:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8008412:	0a02      	lsrs	r2, r0, #8
 8008414:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8008416:	75da      	strb	r2, [r3, #23]
 8008418:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800841a:	0e00      	lsrs	r0, r0, #24
 800841c:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 800841e:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008422:	2220      	movs	r2, #32
 8008424:	72da      	strb	r2, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
 8008426:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800842a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 800842c:	2a03      	cmp	r2, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800842e:	bf08      	it	eq
 8008430:	8a9a      	ldrheq	r2, [r3, #20]
	cl = ld_word(dir + DIR_FstClusLO);
 8008432:	8b5e      	ldrh	r6, [r3, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008434:	bf08      	it	eq
 8008436:	ea46 4602 	orreq.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800843a:	2200      	movs	r2, #0
 800843c:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800843e:	f898 1000 	ldrb.w	r1, [r8]
 8008442:	2903      	cmp	r1, #3
 8008444:	d100      	bne.n	8008448 <f_open+0xe8>
	*ptr++ = (BYTE)val; val >>= 8;
 8008446:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 8008448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800844a:	2200      	movs	r2, #0
 800844c:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 800844e:	2301      	movs	r3, #1
 8008450:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8008454:	b186      	cbz	r6, 8008478 <f_open+0x118>
						dw = fs->winsect;
 8008456:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800845a:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
 800845c:	4631      	mov	r1, r6
 800845e:	a803      	add	r0, sp, #12
 8008460:	f7ff fe94 	bl	800818c <remove_chain>
						if (res == FR_OK) {
 8008464:	9b00      	ldr	r3, [sp, #0]
 8008466:	bb08      	cbnz	r0, 80084ac <f_open+0x14c>
							res = move_window(fs, dw);
 8008468:	4619      	mov	r1, r3
 800846a:	4640      	mov	r0, r8
 800846c:	f7fe f9c2 	bl	80067f4 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008470:	3e01      	subs	r6, #1
 8008472:	f8c8 6014 	str.w	r6, [r8, #20]
		if (res == FR_OK) {
 8008476:	b9c8      	cbnz	r0, 80084ac <f_open+0x14c>
				mode |= FA_MODIFIED;
 8008478:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800847c:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008480:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
			fp->dir_ptr = dj.dir;
 8008484:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008488:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800848a:	3900      	subs	r1, #0
 800848c:	bf18      	it	ne
 800848e:	2101      	movne	r1, #1
 8008490:	a803      	add	r0, sp, #12
			fp->dir_ptr = dj.dir;
 8008492:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008496:	f7fe f89d 	bl	80065d4 <inc_lock>
 800849a:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800849c:	b9e8      	cbnz	r0, 80084da <f_open+0x17a>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800849e:	2502      	movs	r5, #2
 80084a0:	e770      	b.n	8008384 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 80084a2:	2509      	movs	r5, #9
}
 80084a4:	4628      	mov	r0, r5
 80084a6:	b010      	add	sp, #64	; 0x40
 80084a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ac:	4605      	mov	r5, r0
 80084ae:	e769      	b.n	8008384 <f_open+0x24>
				res = FR_INVALID_NAME;
 80084b0:	2506      	movs	r5, #6
 80084b2:	e767      	b.n	8008384 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	4562      	cmp	r2, ip
 80084b8:	f000 80b2 	beq.w	8008620 <f_open+0x2c0>
		if (Files[i].fs) {	/* Existing entry */
 80084bc:	691a      	ldr	r2, [r3, #16]
 80084be:	2a00      	cmp	r2, #0
 80084c0:	d18a      	bne.n	80083d8 <f_open+0x78>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80084c2:	f016 0f1c 	tst.w	r6, #28
 80084c6:	d04b      	beq.n	8008560 <f_open+0x200>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80084c8:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80084cc:	f013 0f11 	tst.w	r3, #17
 80084d0:	d15b      	bne.n	800858a <f_open+0x22a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80084d2:	0773      	lsls	r3, r6, #29
 80084d4:	d555      	bpl.n	8008582 <f_open+0x222>
 80084d6:	2508      	movs	r5, #8
 80084d8:	e754      	b.n	8008384 <f_open+0x24>
	if (fs->fs_type == FS_FAT32) {
 80084da:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 80084de:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d103      	bne.n	80084ee <f_open+0x18e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80084e6:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 80084ea:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80084ee:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 80084f0:	f8d9 901c 	ldr.w	r9, [r9, #28]
			fp->obj.id = fs->id;
 80084f4:	f8b8 3006 	ldrh.w	r3, [r8, #6]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80084f8:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80084fc:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80084fe:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008502:	f8c4 8000 	str.w	r8, [r4]
			fp->obj.id = fs->id;
 8008506:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 8008508:	7527      	strb	r7, [r4, #20]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800850a:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 800850c:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800850e:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008510:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 8008512:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008516:	4650      	mov	r0, sl
 8008518:	f000 fc68 	bl	8008dec <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800851c:	06b8      	lsls	r0, r7, #26
 800851e:	f57f af33 	bpl.w	8008388 <f_open+0x28>
 8008522:	f1b9 0f00 	cmp.w	r9, #0
 8008526:	f43f af2f 	beq.w	8008388 <f_open+0x28>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800852a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800852e:	f8b8 700a 	ldrh.w	r7, [r8, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008532:	f8c4 9018 	str.w	r9, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008536:	fb03 f707 	mul.w	r7, r3, r7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800853a:	454f      	cmp	r7, r9
 800853c:	d306      	bcc.n	800854c <f_open+0x1ec>
 800853e:	e041      	b.n	80085c4 <f_open+0x264>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008540:	1c41      	adds	r1, r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008542:	eba9 0907 	sub.w	r9, r9, r7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008546:	d01a      	beq.n	800857e <f_open+0x21e>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008548:	454f      	cmp	r7, r9
 800854a:	d239      	bcs.n	80085c0 <f_open+0x260>
					clst = get_fat(&fp->obj, clst);
 800854c:	4631      	mov	r1, r6
 800854e:	6820      	ldr	r0, [r4, #0]
 8008550:	f7fe fba8 	bl	8006ca4 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8008554:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8008556:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 8008558:	d8f2      	bhi.n	8008540 <f_open+0x1e0>
 800855a:	2502      	movs	r5, #2
				fp->clust = clst;
 800855c:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800855e:	e711      	b.n	8008384 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008560:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8008564:	06da      	lsls	r2, r3, #27
 8008566:	d429      	bmi.n	80085bc <f_open+0x25c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008568:	07b2      	lsls	r2, r6, #30
 800856a:	d501      	bpl.n	8008570 <f_open+0x210>
 800856c:	07db      	lsls	r3, r3, #31
 800856e:	d40c      	bmi.n	800858a <f_open+0x22a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008570:	f006 0608 	and.w	r6, r6, #8
 8008574:	2e00      	cmp	r6, #0
 8008576:	f47f af7f 	bne.w	8008478 <f_open+0x118>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800857a:	4601      	mov	r1, r0
 800857c:	e780      	b.n	8008480 <f_open+0x120>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800857e:	2501      	movs	r5, #1
 8008580:	e7ec      	b.n	800855c <f_open+0x1fc>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008582:	0730      	lsls	r0, r6, #28
 8008584:	f57f af7c 	bpl.w	8008480 <f_open+0x120>
 8008588:	e73d      	b.n	8008406 <f_open+0xa6>
						res = FR_DENIED;
 800858a:	2507      	movs	r5, #7
 800858c:	e6fa      	b.n	8008384 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 800858e:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8008592:	f1b9 0f00 	cmp.w	r9, #0
 8008596:	d094      	beq.n	80084c2 <f_open+0x162>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008598:	4591      	cmp	r9, r2
 800859a:	d192      	bne.n	80084c2 <f_open+0x162>
 800859c:	695a      	ldr	r2, [r3, #20]
 800859e:	4562      	cmp	r2, ip
 80085a0:	d18f      	bne.n	80084c2 <f_open+0x162>
				Files[i].clu == dp->obj.sclust &&
 80085a2:	699a      	ldr	r2, [r3, #24]
 80085a4:	4572      	cmp	r2, lr
 80085a6:	d18c      	bne.n	80084c2 <f_open+0x162>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80085a8:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80085aa:	b928      	cbnz	r0, 80085b8 <f_open+0x258>
 80085ac:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80085b0:	899b      	ldrh	r3, [r3, #12]
 80085b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b6:	d184      	bne.n	80084c2 <f_open+0x162>
 80085b8:	2510      	movs	r5, #16
 80085ba:	e6e3      	b.n	8008384 <f_open+0x24>
					res = FR_NO_FILE;
 80085bc:	2504      	movs	r5, #4
 80085be:	e6e1      	b.n	8008384 <f_open+0x24>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80085c0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80085c4:	fbb9 f2f3 	udiv	r2, r9, r3
 80085c8:	fb03 9312 	mls	r3, r3, r2, r9
				fp->clust = clst;
 80085cc:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f43f aeda 	beq.w	8008388 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80085d4:	f8d8 301c 	ldr.w	r3, [r8, #28]
	clst -= 2;
 80085d8:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80085da:	3b02      	subs	r3, #2
 80085dc:	429e      	cmp	r6, r3
 80085de:	f4bf af5e 	bcs.w	800849e <f_open+0x13e>
	return clst * fs->csize + fs->database;
 80085e2:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 80085e6:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80085ea:	fb06 3301 	mla	r3, r6, r1, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f43f af55 	beq.w	800849e <f_open+0x13e>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80085f4:	441a      	add	r2, r3
 80085f6:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80085f8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80085fc:	4651      	mov	r1, sl
 80085fe:	2301      	movs	r3, #1
 8008600:	f7fd ffbc 	bl	800657c <disk_read>
 8008604:	2800      	cmp	r0, #0
 8008606:	f43f aebf 	beq.w	8008388 <f_open+0x28>
 800860a:	2501      	movs	r5, #1
 800860c:	e6ba      	b.n	8008384 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800860e:	695a      	ldr	r2, [r3, #20]
 8008610:	4562      	cmp	r2, ip
 8008612:	f47f aee4 	bne.w	80083de <f_open+0x7e>
				Files[i].clu == dp->obj.sclust &&
 8008616:	699a      	ldr	r2, [r3, #24]
 8008618:	4572      	cmp	r2, lr
 800861a:	f47f aee0 	bne.w	80083de <f_open+0x7e>
 800861e:	e7c3      	b.n	80085a8 <f_open+0x248>
 8008620:	689a      	ldr	r2, [r3, #8]
 8008622:	4572      	cmp	r2, lr
 8008624:	f47f af4a 	bne.w	80084bc <f_open+0x15c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008628:	462a      	mov	r2, r5
 800862a:	e7be      	b.n	80085aa <f_open+0x24a>
 800862c:	200044e4 	.word	0x200044e4

08008630 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8008636:	2300      	movs	r3, #0
{
 8008638:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 800863a:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800863c:	b150      	cbz	r0, 8008654 <f_read+0x24>
 800863e:	6803      	ldr	r3, [r0, #0]
 8008640:	4604      	mov	r4, r0
 8008642:	b13b      	cbz	r3, 8008654 <f_read+0x24>
 8008644:	4615      	mov	r5, r2
 8008646:	781a      	ldrb	r2, [r3, #0]
 8008648:	b122      	cbz	r2, 8008654 <f_read+0x24>
 800864a:	88da      	ldrh	r2, [r3, #6]
 800864c:	460e      	mov	r6, r1
 800864e:	8881      	ldrh	r1, [r0, #4]
 8008650:	4291      	cmp	r1, r2
 8008652:	d005      	beq.n	8008660 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8008654:	f04f 0909 	mov.w	r9, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8008658:	4648      	mov	r0, r9
 800865a:	b005      	add	sp, #20
 800865c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008660:	7858      	ldrb	r0, [r3, #1]
 8008662:	f7fd ff71 	bl	8006548 <disk_status>
 8008666:	07c2      	lsls	r2, r0, #31
 8008668:	d4f4      	bmi.n	8008654 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800866a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800866e:	f1b9 0f00 	cmp.w	r9, #0
 8008672:	d1f1      	bne.n	8008658 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008674:	7d23      	ldrb	r3, [r4, #20]
 8008676:	f013 0301 	ands.w	r3, r3, #1
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	f000 80f5 	beq.w	800886a <f_read+0x23a>
	remain = fp->obj.objsize - fp->fptr;
 8008680:	69a1      	ldr	r1, [r4, #24]
 8008682:	68e3      	ldr	r3, [r4, #12]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008684:	f8d4 a000 	ldr.w	sl, [r4]
	remain = fp->obj.objsize - fp->fptr;
 8008688:	eba3 0801 	sub.w	r8, r3, r1
 800868c:	45a8      	cmp	r8, r5
 800868e:	bf28      	it	cs
 8008690:	46a8      	movcs	r8, r5
	for ( ;  btr;								/* Repeat until all data read */
 8008692:	f1b8 0f00 	cmp.w	r8, #0
 8008696:	d0df      	beq.n	8008658 <f_read+0x28>
 8008698:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800869c:	f104 0231 	add.w	r2, r4, #49	; 0x31
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80086a0:	f104 0b30 	add.w	fp, r4, #48	; 0x30
 80086a4:	9201      	str	r2, [sp, #4]
 80086a6:	4618      	mov	r0, r3
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80086a8:	fbb1 f3f0 	udiv	r3, r1, r0
 80086ac:	fb00 1213 	mls	r2, r0, r3, r1
 80086b0:	2a00      	cmp	r2, #0
 80086b2:	d147      	bne.n	8008744 <f_read+0x114>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80086b4:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 80086b8:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80086ba:	401a      	ands	r2, r3
 80086bc:	d07c      	beq.n	80087b8 <f_read+0x188>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80086be:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80086c0:	f8da 301c 	ldr.w	r3, [sl, #28]
	clst -= 2;
 80086c4:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80086c6:	3b02      	subs	r3, #2
 80086c8:	4298      	cmp	r0, r3
 80086ca:	f080 8083 	bcs.w	80087d4 <f_read+0x1a4>
	return clst * fs->csize + fs->database;
 80086ce:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 80086d2:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 80086d6:	fb01 5500 	mla	r5, r1, r0, r5
			if (!sect) ABORT(fs, FR_INT_ERR);
 80086da:	2d00      	cmp	r5, #0
 80086dc:	d07a      	beq.n	80087d4 <f_read+0x1a4>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80086de:	f8ba 000c 	ldrh.w	r0, [sl, #12]
			if (cc) {							/* Read maximum contiguous sectors directly */
 80086e2:	4580      	cmp	r8, r0
			sect += csect;
 80086e4:	4415      	add	r5, r2
			if (cc) {							/* Read maximum contiguous sectors directly */
 80086e6:	d37d      	bcc.n	80087e4 <f_read+0x1b4>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80086e8:	fbb8 f3f0 	udiv	r3, r8, r0
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80086ec:	18d0      	adds	r0, r2, r3
 80086ee:	4288      	cmp	r0, r1
					cc = fs->csize - csect;
 80086f0:	bf88      	it	hi
 80086f2:	1a8b      	subhi	r3, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086f4:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80086f8:	9302      	str	r3, [sp, #8]
 80086fa:	462a      	mov	r2, r5
 80086fc:	4631      	mov	r1, r6
 80086fe:	f7fd ff3d 	bl	800657c <disk_read>
 8008702:	2800      	cmp	r0, #0
 8008704:	f040 80a9 	bne.w	800885a <f_read+0x22a>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008708:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800870c:	9b02      	ldr	r3, [sp, #8]
 800870e:	2a00      	cmp	r2, #0
 8008710:	f2c0 80c3 	blt.w	800889a <f_read+0x26a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008714:	f8ba 000c 	ldrh.w	r0, [sl, #12]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008718:	69a1      	ldr	r1, [r4, #24]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800871a:	fb00 f303 	mul.w	r3, r0, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800871e:	441e      	add	r6, r3
 8008720:	eba8 0803 	sub.w	r8, r8, r3
 8008724:	4419      	add	r1, r3
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	61a1      	str	r1, [r4, #24]
 800872a:	441a      	add	r2, r3
 800872c:	603a      	str	r2, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800872e:	f1b8 0f00 	cmp.w	r8, #0
 8008732:	d091      	beq.n	8008658 <f_read+0x28>
 8008734:	f8ba 000c 	ldrh.w	r0, [sl, #12]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008738:	fbb1 f3f0 	udiv	r3, r1, r0
 800873c:	fb00 1213 	mls	r2, r0, r3, r1
 8008740:	2a00      	cmp	r2, #0
 8008742:	d0b7      	beq.n	80086b4 <f_read+0x84>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008744:	1a83      	subs	r3, r0, r2
 8008746:	4543      	cmp	r3, r8
 8008748:	bf28      	it	cs
 800874a:	4643      	movcs	r3, r8
	if (cnt) {
 800874c:	b393      	cbz	r3, 80087b4 <f_read+0x184>
 800874e:	1c50      	adds	r0, r2, #1
 8008750:	4458      	add	r0, fp
 8008752:	1a30      	subs	r0, r6, r0
 8008754:	2802      	cmp	r0, #2
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008756:	eb0b 0102 	add.w	r1, fp, r2
 800875a:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 800875e:	f240 8087 	bls.w	8008870 <f_read+0x240>
 8008762:	f1be 0f05 	cmp.w	lr, #5
 8008766:	f240 8083 	bls.w	8008870 <f_read+0x240>
 800876a:	f023 0c03 	bic.w	ip, r3, #3
 800876e:	44b4      	add	ip, r6
 8008770:	4632      	mov	r2, r6
 8008772:	4608      	mov	r0, r1
			*d++ = *s++;
 8008774:	f850 5b04 	ldr.w	r5, [r0], #4
 8008778:	f842 5b04 	str.w	r5, [r2], #4
		} while (--cnt);
 800877c:	4562      	cmp	r2, ip
 800877e:	d1f9      	bne.n	8008774 <f_read+0x144>
 8008780:	f023 0203 	bic.w	r2, r3, #3
 8008784:	4293      	cmp	r3, r2
 8008786:	eb06 0002 	add.w	r0, r6, r2
 800878a:	eb01 0502 	add.w	r5, r1, r2
 800878e:	d00b      	beq.n	80087a8 <f_read+0x178>
			*d++ = *s++;
 8008790:	5c89      	ldrb	r1, [r1, r2]
 8008792:	54b1      	strb	r1, [r6, r2]
		} while (--cnt);
 8008794:	ebbe 0e02 	subs.w	lr, lr, r2
 8008798:	d006      	beq.n	80087a8 <f_read+0x178>
			*d++ = *s++;
 800879a:	786a      	ldrb	r2, [r5, #1]
 800879c:	7042      	strb	r2, [r0, #1]
		} while (--cnt);
 800879e:	f1be 0f01 	cmp.w	lr, #1
 80087a2:	d001      	beq.n	80087a8 <f_read+0x178>
			*d++ = *s++;
 80087a4:	78aa      	ldrb	r2, [r5, #2]
 80087a6:	7082      	strb	r2, [r0, #2]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80087a8:	69a1      	ldr	r1, [r4, #24]
 80087aa:	441e      	add	r6, r3
 80087ac:	eba8 0803 	sub.w	r8, r8, r3
 80087b0:	4419      	add	r1, r3
 80087b2:	e7b8      	b.n	8008726 <f_read+0xf6>
 80087b4:	61a1      	str	r1, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 80087b6:	e777      	b.n	80086a8 <f_read+0x78>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80087b8:	bb61      	cbnz	r1, 8008814 <f_read+0x1e4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80087ba:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80087bc:	2801      	cmp	r0, #1
 80087be:	d909      	bls.n	80087d4 <f_read+0x1a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d04a      	beq.n	800885a <f_read+0x22a>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80087c4:	f8da 301c 	ldr.w	r3, [sl, #28]
				fp->clust = clst;				/* Update current cluster */
 80087c8:	61e0      	str	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80087ca:	3b02      	subs	r3, #2
	clst -= 2;
 80087cc:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80087ce:	4298      	cmp	r0, r3
 80087d0:	f4ff af7d 	bcc.w	80086ce <f_read+0x9e>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80087d4:	f04f 0902 	mov.w	r9, #2
}
 80087d8:	4648      	mov	r0, r9
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80087da:	f884 9015 	strb.w	r9, [r4, #21]
}
 80087de:	b005      	add	sp, #20
 80087e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80087e4:	6a22      	ldr	r2, [r4, #32]
 80087e6:	42aa      	cmp	r2, r5
 80087e8:	d00d      	beq.n	8008806 <f_read+0x1d6>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80087ea:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	db2c      	blt.n	800884c <f_read+0x21c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80087f2:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80087f6:	2301      	movs	r3, #1
 80087f8:	462a      	mov	r2, r5
 80087fa:	4659      	mov	r1, fp
 80087fc:	f7fd febe 	bl	800657c <disk_read>
 8008800:	bb58      	cbnz	r0, 800885a <f_read+0x22a>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008802:	f8ba 000c 	ldrh.w	r0, [sl, #12]
 8008806:	69a1      	ldr	r1, [r4, #24]
			fp->sect = sect;
 8008808:	6225      	str	r5, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800880a:	fbb1 f2f0 	udiv	r2, r1, r0
 800880e:	fb00 1212 	mls	r2, r0, r2, r1
 8008812:	e797      	b.n	8008744 <f_read+0x114>
					if (fp->cltbl) {
 8008814:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8008816:	b3a5      	cbz	r5, 8008882 <f_read+0x252>
	FATFS *fs = fp->obj.fs;
 8008818:	f8d4 c000 	ldr.w	ip, [r4]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800881c:	6868      	ldr	r0, [r5, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800881e:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 8008822:	fbb1 f3f3 	udiv	r3, r1, r3
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008826:	3504      	adds	r5, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008828:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 800882c:	fbb3 f3f1 	udiv	r3, r3, r1
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008830:	2800      	cmp	r0, #0
 8008832:	d0cf      	beq.n	80087d4 <f_read+0x1a4>
 8008834:	4629      	mov	r1, r5
 8008836:	e004      	b.n	8008842 <f_read+0x212>
		cl -= ncl; tbl++;		/* Next fragment */
 8008838:	1a1b      	subs	r3, r3, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800883a:	f851 0f08 	ldr.w	r0, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800883e:	2800      	cmp	r0, #0
 8008840:	d0c8      	beq.n	80087d4 <f_read+0x1a4>
		if (cl < ncl) break;	/* In this fragment? */
 8008842:	4283      	cmp	r3, r0
 8008844:	d2f8      	bcs.n	8008838 <f_read+0x208>
	return cl + *tbl;	/* Return the cluster number */
 8008846:	6848      	ldr	r0, [r1, #4]
 8008848:	4418      	add	r0, r3
 800884a:	e7b7      	b.n	80087bc <f_read+0x18c>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800884c:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8008850:	2301      	movs	r3, #1
 8008852:	4659      	mov	r1, fp
 8008854:	f7fd fea2 	bl	800659c <disk_write>
 8008858:	b1d0      	cbz	r0, 8008890 <f_read+0x260>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800885a:	f8dd 9000 	ldr.w	r9, [sp]
 800885e:	2301      	movs	r3, #1
}
 8008860:	4648      	mov	r0, r9
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008862:	7563      	strb	r3, [r4, #21]
}
 8008864:	b005      	add	sp, #20
 8008866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800886a:	f04f 0907 	mov.w	r9, #7
 800886e:	e6f3      	b.n	8008658 <f_read+0x28>
 8008870:	1e72      	subs	r2, r6, #1
 8008872:	18cd      	adds	r5, r1, r3
			*d++ = *s++;
 8008874:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008878:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 800887c:	42a9      	cmp	r1, r5
 800887e:	d1f9      	bne.n	8008874 <f_read+0x244>
 8008880:	e792      	b.n	80087a8 <f_read+0x178>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008882:	69e1      	ldr	r1, [r4, #28]
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	9202      	str	r2, [sp, #8]
 8008888:	f7fe fa0c 	bl	8006ca4 <get_fat.isra.0>
 800888c:	9a02      	ldr	r2, [sp, #8]
 800888e:	e795      	b.n	80087bc <f_read+0x18c>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008890:	7d23      	ldrb	r3, [r4, #20]
 8008892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008896:	7523      	strb	r3, [r4, #20]
 8008898:	e7ab      	b.n	80087f2 <f_read+0x1c2>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800889a:	6a22      	ldr	r2, [r4, #32]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800889c:	f8ba 000c 	ldrh.w	r0, [sl, #12]
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80088a0:	1b52      	subs	r2, r2, r5
 80088a2:	429a      	cmp	r2, r3
 80088a4:	f4bf af38 	bcs.w	8008718 <f_read+0xe8>
	if (cnt) {
 80088a8:	2800      	cmp	r0, #0
 80088aa:	f43f af35 	beq.w	8008718 <f_read+0xe8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80088ae:	fb00 6102 	mla	r1, r0, r2, r6
 80088b2:	9a01      	ldr	r2, [sp, #4]
 80088b4:	9102      	str	r1, [sp, #8]
 80088b6:	1a8a      	subs	r2, r1, r2
 80088b8:	1e45      	subs	r5, r0, #1
 80088ba:	2a02      	cmp	r2, #2
 80088bc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80088c0:	9503      	str	r5, [sp, #12]
 80088c2:	d928      	bls.n	8008916 <f_read+0x2e6>
 80088c4:	2d05      	cmp	r5, #5
 80088c6:	d926      	bls.n	8008916 <f_read+0x2e6>
 80088c8:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 80088cc:	460a      	mov	r2, r1
 80088ce:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80088d2:	4671      	mov	r1, lr
			*d++ = *s++;
 80088d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80088d8:	f842 5b04 	str.w	r5, [r2], #4
		} while (--cnt);
 80088dc:	4562      	cmp	r2, ip
 80088de:	d1f9      	bne.n	80088d4 <f_read+0x2a4>
 80088e0:	f020 0203 	bic.w	r2, r0, #3
 80088e4:	9902      	ldr	r1, [sp, #8]
 80088e6:	4290      	cmp	r0, r2
 80088e8:	eb01 0c02 	add.w	ip, r1, r2
 80088ec:	eb0e 0502 	add.w	r5, lr, r2
 80088f0:	f43f af10 	beq.w	8008714 <f_read+0xe4>
			*d++ = *s++;
 80088f4:	f81e 0002 	ldrb.w	r0, [lr, r2]
 80088f8:	5488      	strb	r0, [r1, r2]
		} while (--cnt);
 80088fa:	9903      	ldr	r1, [sp, #12]
 80088fc:	1a8a      	subs	r2, r1, r2
 80088fe:	f43f af09 	beq.w	8008714 <f_read+0xe4>
			*d++ = *s++;
 8008902:	7868      	ldrb	r0, [r5, #1]
 8008904:	f88c 0001 	strb.w	r0, [ip, #1]
		} while (--cnt);
 8008908:	2a01      	cmp	r2, #1
 800890a:	f43f af03 	beq.w	8008714 <f_read+0xe4>
			*d++ = *s++;
 800890e:	78aa      	ldrb	r2, [r5, #2]
 8008910:	f88c 2002 	strb.w	r2, [ip, #2]
		} while (--cnt);
 8008914:	e6fe      	b.n	8008714 <f_read+0xe4>
 8008916:	9a02      	ldr	r2, [sp, #8]
 8008918:	4410      	add	r0, r2
			*d++ = *s++;
 800891a:	f81e 1b01 	ldrb.w	r1, [lr], #1
 800891e:	f802 1b01 	strb.w	r1, [r2], #1
		} while (--cnt);
 8008922:	4282      	cmp	r2, r0
 8008924:	d1f9      	bne.n	800891a <f_read+0x2ea>
 8008926:	e6f5      	b.n	8008714 <f_read+0xe4>

08008928 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008928:	b530      	push	{r4, r5, lr}
 800892a:	b091      	sub	sp, #68	; 0x44
 800892c:	460d      	mov	r5, r1
 800892e:	9001      	str	r0, [sp, #4]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008930:	2200      	movs	r2, #0
 8008932:	a903      	add	r1, sp, #12
 8008934:	a801      	add	r0, sp, #4
 8008936:	f7fd ff9b 	bl	8006870 <find_volume>
	if (res == FR_OK) {
 800893a:	4604      	mov	r4, r0
 800893c:	b110      	cbz	r0, 8008944 <f_stat+0x1c>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 800893e:	4620      	mov	r0, r4
 8008940:	b011      	add	sp, #68	; 0x44
 8008942:	bd30      	pop	{r4, r5, pc}
		res = follow_path(&dj, path);	/* Follow the file path */
 8008944:	9901      	ldr	r1, [sp, #4]
 8008946:	a803      	add	r0, sp, #12
 8008948:	f7fe fd60 	bl	800740c <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 800894c:	4604      	mov	r4, r0
 800894e:	2800      	cmp	r0, #0
 8008950:	d1f5      	bne.n	800893e <f_stat+0x16>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008952:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8008956:	2b00      	cmp	r3, #0
 8008958:	db06      	blt.n	8008968 <f_stat+0x40>
				if (fno) get_fileinfo(&dj, fno);
 800895a:	2d00      	cmp	r5, #0
 800895c:	d0ef      	beq.n	800893e <f_stat+0x16>
 800895e:	4629      	mov	r1, r5
 8008960:	a803      	add	r0, sp, #12
 8008962:	f7fd fe8f 	bl	8006684 <get_fileinfo>
 8008966:	e7ea      	b.n	800893e <f_stat+0x16>
				res = FR_INVALID_NAME;
 8008968:	2406      	movs	r4, #6
 800896a:	e7e8      	b.n	800893e <f_stat+0x16>

0800896c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800896c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008970:	b085      	sub	sp, #20
 8008972:	460f      	mov	r7, r1
 8008974:	9001      	str	r0, [sp, #4]
 8008976:	4614      	mov	r4, r2
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008978:	a903      	add	r1, sp, #12
 800897a:	2200      	movs	r2, #0
 800897c:	a801      	add	r0, sp, #4
 800897e:	f7fd ff77 	bl	8006870 <find_volume>
	if (res == FR_OK) {
 8008982:	4606      	mov	r6, r0
 8008984:	b938      	cbnz	r0, 8008996 <f_getfree+0x2a>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008986:	9d03      	ldr	r5, [sp, #12]
 8008988:	6025      	str	r5, [r4, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800898a:	e9d5 3406 	ldrd	r3, r4, [r5, #24]
 800898e:	1ea2      	subs	r2, r4, #2
 8008990:	4293      	cmp	r3, r2
 8008992:	d804      	bhi.n	800899e <f_getfree+0x32>
			*nclst = fs->free_clst;
 8008994:	603b      	str	r3, [r7, #0]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
		}
	}

	LEAVE_FF(fs, res);
}
 8008996:	4630      	mov	r0, r6
 8008998:	b005      	add	sp, #20
 800899a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800899e:	7828      	ldrb	r0, [r5, #0]
 80089a0:	2801      	cmp	r0, #1
 80089a2:	d01d      	beq.n	80089e0 <f_getfree+0x74>
					clst = fs->n_fatent; sect = fs->fatbase;
 80089a4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
					i = 0; p = 0;
 80089a6:	4632      	mov	r2, r6
 80089a8:	4633      	mov	r3, r6
			nfree = 0;
 80089aa:	46b0      	mov	r8, r6
						if (i == 0) {
 80089ac:	b3bb      	cbz	r3, 8008a1e <f_getfree+0xb2>
						if (fs->fs_type == FS_FAT16) {
 80089ae:	2802      	cmp	r0, #2
 80089b0:	d02b      	beq.n	8008a0a <f_getfree+0x9e>
	rv = rv << 8 | ptr[0];
 80089b2:	f8d2 c000 	ldr.w	ip, [r2]
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80089b6:	f03c 4c70 	bics.w	ip, ip, #4026531840	; 0xf0000000
 80089ba:	bf08      	it	eq
 80089bc:	f108 0801 	addeq.w	r8, r8, #1
							p += 4; i -= 4;
 80089c0:	3204      	adds	r2, #4
 80089c2:	3b04      	subs	r3, #4
					} while (--clst);
 80089c4:	3c01      	subs	r4, #1
 80089c6:	d1f1      	bne.n	80089ac <f_getfree+0x40>
			*nclst = nfree;			/* Return the free clusters */
 80089c8:	f8c7 8000 	str.w	r8, [r7]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80089cc:	792b      	ldrb	r3, [r5, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80089ce:	f8c5 8018 	str.w	r8, [r5, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80089d2:	f043 0301 	orr.w	r3, r3, #1
}
 80089d6:	4630      	mov	r0, r6
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80089d8:	712b      	strb	r3, [r5, #4]
}
 80089da:	b005      	add	sp, #20
 80089dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				clst = 2; obj.fs = fs;
 80089e0:	2402      	movs	r4, #2
			nfree = 0;
 80089e2:	46b0      	mov	r8, r6
 80089e4:	e007      	b.n	80089f6 <f_getfree+0x8a>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80089e6:	2801      	cmp	r0, #1
 80089e8:	d027      	beq.n	8008a3a <f_getfree+0xce>
					if (stat == 0) nfree++;
 80089ea:	b908      	cbnz	r0, 80089f0 <f_getfree+0x84>
 80089ec:	f108 0801 	add.w	r8, r8, #1
				} while (++clst < fs->n_fatent);
 80089f0:	69eb      	ldr	r3, [r5, #28]
 80089f2:	42a3      	cmp	r3, r4
 80089f4:	d9e8      	bls.n	80089c8 <f_getfree+0x5c>
					stat = get_fat(&obj, clst);
 80089f6:	4621      	mov	r1, r4
 80089f8:	4628      	mov	r0, r5
 80089fa:	f7fe f953 	bl	8006ca4 <get_fat.isra.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80089fe:	1c43      	adds	r3, r0, #1
				} while (++clst < fs->n_fatent);
 8008a00:	f104 0401 	add.w	r4, r4, #1
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008a04:	d1ef      	bne.n	80089e6 <f_getfree+0x7a>
 8008a06:	2601      	movs	r6, #1
 8008a08:	e7de      	b.n	80089c8 <f_getfree+0x5c>
							if (ld_word(p) == 0) nfree++;
 8008a0a:	f8b2 c000 	ldrh.w	ip, [r2]
 8008a0e:	f1bc 0f00 	cmp.w	ip, #0
 8008a12:	d101      	bne.n	8008a18 <f_getfree+0xac>
 8008a14:	f108 0801 	add.w	r8, r8, #1
							p += 2; i -= 2;
 8008a18:	3202      	adds	r2, #2
 8008a1a:	3b02      	subs	r3, #2
 8008a1c:	e7d2      	b.n	80089c4 <f_getfree+0x58>
							res = move_window(fs, sect++);
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f101 0901 	add.w	r9, r1, #1
 8008a24:	f7fd fee6 	bl	80067f4 <move_window>
							if (res != FR_OK) break;
 8008a28:	b928      	cbnz	r0, 8008a36 <f_getfree+0xca>
							i = SS(fs);
 8008a2a:	89ab      	ldrh	r3, [r5, #12]
						if (fs->fs_type == FS_FAT16) {
 8008a2c:	7828      	ldrb	r0, [r5, #0]
							res = move_window(fs, sect++);
 8008a2e:	4649      	mov	r1, r9
							p = fs->win;
 8008a30:	f105 0238 	add.w	r2, r5, #56	; 0x38
							i = SS(fs);
 8008a34:	e7bb      	b.n	80089ae <f_getfree+0x42>
 8008a36:	4606      	mov	r6, r0
 8008a38:	e7c6      	b.n	80089c8 <f_getfree+0x5c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008a3a:	2602      	movs	r6, #2
 8008a3c:	e7c4      	b.n	80089c8 <f_getfree+0x5c>
 8008a3e:	bf00      	nop

08008a40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008a40:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8008a42:	4b11      	ldr	r3, [pc, #68]	; (8008a88 <FATFS_LinkDriver+0x48>)
 8008a44:	7a5c      	ldrb	r4, [r3, #9]
 8008a46:	b9cc      	cbnz	r4, 8008a7c <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
 8008a48:	f004 02ff 	and.w	r2, r4, #255	; 0xff
 8008a4c:	7a5c      	ldrb	r4, [r3, #9]
 8008a4e:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8008a50:	7a5c      	ldrb	r4, [r3, #9]
 8008a52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a56:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8008a58:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8008a5a:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8008a5c:	441c      	add	r4, r3
 8008a5e:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8008a60:	1c44      	adds	r4, r0, #1
 8008a62:	b2e4      	uxtb	r4, r4
 8008a64:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8008a66:	3030      	adds	r0, #48	; 0x30
    path[1] = ':';
 8008a68:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8008a6a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8008a6c:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 8008a6e:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8008a70:	4610      	mov	r0, r2
 8008a72:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8008a76:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8008a78:	70ca      	strb	r2, [r1, #3]
}
 8008a7a:	4770      	bx	lr
  uint8_t ret = 1;
 8008a7c:	2201      	movs	r2, #1
}
 8008a7e:	4610      	mov	r0, r2
 8008a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	20004708 	.word	0x20004708

08008a8c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008a8c:	287f      	cmp	r0, #127	; 0x7f
 8008a8e:	d914      	bls.n	8008aba <ff_convert+0x2e>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008a90:	b981      	cbnz	r1, 8008ab4 <ff_convert+0x28>
 8008a92:	4b0d      	ldr	r3, [pc, #52]	; (8008ac8 <ff_convert+0x3c>)
 8008a94:	e001      	b.n	8008a9a <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008a96:	2980      	cmp	r1, #128	; 0x80
 8008a98:	d00e      	beq.n	8008ab8 <ff_convert+0x2c>
				if (chr == Tbl[c]) break;
 8008a9a:	f833 2b02 	ldrh.w	r2, [r3], #2
 8008a9e:	4282      	cmp	r2, r0
 8008aa0:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 8008aa4:	f101 0101 	add.w	r1, r1, #1
				if (chr == Tbl[c]) break;
 8008aa8:	d1f5      	bne.n	8008a96 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 8008aaa:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 8008aae:	fa1f f08c 	uxth.w	r0, ip
 8008ab2:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008ab4:	28ff      	cmp	r0, #255	; 0xff
 8008ab6:	d901      	bls.n	8008abc <ff_convert+0x30>
 8008ab8:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8008aba:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008abc:	4b02      	ldr	r3, [pc, #8]	; (8008ac8 <ff_convert+0x3c>)
 8008abe:	3880      	subs	r0, #128	; 0x80
 8008ac0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	08009d20 	.word	0x08009d20

08008acc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008acc:	b510      	push	{r4, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008ace:	4b24      	ldr	r3, [pc, #144]	; (8008b60 <ff_wtoupper+0x94>)
 8008ad0:	4a24      	ldr	r2, [pc, #144]	; (8008b64 <ff_wtoupper+0x98>)
 8008ad2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8008ad6:	bf28      	it	cs
 8008ad8:	4613      	movcs	r3, r2
 8008ada:	3304      	adds	r3, #4
 8008adc:	e00d      	b.n	8008afa <ff_wtoupper+0x2e>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
 8008ade:	4288      	cmp	r0, r1
 8008ae0:	d310      	bcc.n	8008b04 <ff_wtoupper+0x38>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008ae2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8008ae6:	fa5f fc82 	uxtb.w	ip, r2
		if (chr < bc + nc) {	/* In the block? */
 8008aea:	eb0c 0e01 	add.w	lr, ip, r1
 8008aee:	4570      	cmp	r0, lr
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008af0:	ea4f 2212 	mov.w	r2, r2, lsr #8
		if (chr < bc + nc) {	/* In the block? */
 8008af4:	db07      	blt.n	8008b06 <ff_wtoupper+0x3a>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8008af6:	3304      	adds	r3, #4
 8008af8:	b172      	cbz	r2, 8008b18 <ff_wtoupper+0x4c>
		bc = *p++;								/* Get block base */
 8008afa:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 8008afe:	461c      	mov	r4, r3
 8008b00:	2900      	cmp	r1, #0
 8008b02:	d1ec      	bne.n	8008ade <ff_wtoupper+0x12>
	}

	return chr;
}
 8008b04:	bd10      	pop	{r4, pc}
			switch (cmd) {
 8008b06:	2a08      	cmp	r2, #8
 8008b08:	d8fc      	bhi.n	8008b04 <ff_wtoupper+0x38>
 8008b0a:	e8df f002 	tbb	[pc, r2]
 8008b0e:	100c      	.short	0x100c
 8008b10:	1f1c1916 	.word	0x1f1c1916
 8008b14:	2522      	.short	0x2522
 8008b16:	08          	.byte	0x08
 8008b17:	00          	.byte	0x00
		if (!cmd) p += nc;
 8008b18:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 8008b1c:	e7dd      	b.n	8008ada <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008b1e:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8008b22:	b280      	uxth	r0, r0
}
 8008b24:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008b26:	1a40      	subs	r0, r0, r1
 8008b28:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 8008b2c:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008b2e:	1a43      	subs	r3, r0, r1
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	1ac0      	subs	r0, r0, r3
 8008b36:	b280      	uxth	r0, r0
}
 8008b38:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 8008b3a:	3810      	subs	r0, #16
 8008b3c:	b280      	uxth	r0, r0
}
 8008b3e:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008b40:	3820      	subs	r0, #32
 8008b42:	b280      	uxth	r0, r0
}
 8008b44:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008b46:	3830      	subs	r0, #48	; 0x30
 8008b48:	b280      	uxth	r0, r0
}
 8008b4a:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008b4c:	381a      	subs	r0, #26
 8008b4e:	b280      	uxth	r0, r0
}
 8008b50:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 8008b52:	3008      	adds	r0, #8
 8008b54:	b280      	uxth	r0, r0
}
 8008b56:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 8008b58:	3850      	subs	r0, #80	; 0x50
 8008b5a:	b280      	uxth	r0, r0
}
 8008b5c:	bd10      	pop	{r4, pc}
 8008b5e:	bf00      	nop
 8008b60:	08009e20 	.word	0x08009e20
 8008b64:	0800a014 	.word	0x0800a014

08008b68 <std>:
 8008b68:	2300      	movs	r3, #0
 8008b6a:	b510      	push	{r4, lr}
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8008b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b76:	6083      	str	r3, [r0, #8]
 8008b78:	8181      	strh	r1, [r0, #12]
 8008b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8008b7c:	81c2      	strh	r2, [r0, #14]
 8008b7e:	6183      	str	r3, [r0, #24]
 8008b80:	4619      	mov	r1, r3
 8008b82:	2208      	movs	r2, #8
 8008b84:	305c      	adds	r0, #92	; 0x5c
 8008b86:	f000 f931 	bl	8008dec <memset>
 8008b8a:	4b0d      	ldr	r3, [pc, #52]	; (8008bc0 <std+0x58>)
 8008b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8008b8e:	4b0d      	ldr	r3, [pc, #52]	; (8008bc4 <std+0x5c>)
 8008b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b92:	4b0d      	ldr	r3, [pc, #52]	; (8008bc8 <std+0x60>)
 8008b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b96:	4b0d      	ldr	r3, [pc, #52]	; (8008bcc <std+0x64>)
 8008b98:	6323      	str	r3, [r4, #48]	; 0x30
 8008b9a:	4b0d      	ldr	r3, [pc, #52]	; (8008bd0 <std+0x68>)
 8008b9c:	6224      	str	r4, [r4, #32]
 8008b9e:	429c      	cmp	r4, r3
 8008ba0:	d006      	beq.n	8008bb0 <std+0x48>
 8008ba2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008ba6:	4294      	cmp	r4, r2
 8008ba8:	d002      	beq.n	8008bb0 <std+0x48>
 8008baa:	33d0      	adds	r3, #208	; 0xd0
 8008bac:	429c      	cmp	r4, r3
 8008bae:	d105      	bne.n	8008bbc <std+0x54>
 8008bb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bb8:	f000 b94a 	b.w	8008e50 <__retarget_lock_init_recursive>
 8008bbc:	bd10      	pop	{r4, pc}
 8008bbe:	bf00      	nop
 8008bc0:	080096b1 	.word	0x080096b1
 8008bc4:	080096d3 	.word	0x080096d3
 8008bc8:	0800970b 	.word	0x0800970b
 8008bcc:	0800972f 	.word	0x0800972f
 8008bd0:	20004714 	.word	0x20004714

08008bd4 <stdio_exit_handler>:
 8008bd4:	4a02      	ldr	r2, [pc, #8]	; (8008be0 <stdio_exit_handler+0xc>)
 8008bd6:	4903      	ldr	r1, [pc, #12]	; (8008be4 <stdio_exit_handler+0x10>)
 8008bd8:	4803      	ldr	r0, [pc, #12]	; (8008be8 <stdio_exit_handler+0x14>)
 8008bda:	f000 b869 	b.w	8008cb0 <_fwalk_sglue>
 8008bde:	bf00      	nop
 8008be0:	20000038 	.word	0x20000038
 8008be4:	08009649 	.word	0x08009649
 8008be8:	20000044 	.word	0x20000044

08008bec <cleanup_stdio>:
 8008bec:	6841      	ldr	r1, [r0, #4]
 8008bee:	4b0c      	ldr	r3, [pc, #48]	; (8008c20 <cleanup_stdio+0x34>)
 8008bf0:	4299      	cmp	r1, r3
 8008bf2:	b510      	push	{r4, lr}
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	d001      	beq.n	8008bfc <cleanup_stdio+0x10>
 8008bf8:	f000 fd26 	bl	8009648 <_fflush_r>
 8008bfc:	68a1      	ldr	r1, [r4, #8]
 8008bfe:	4b09      	ldr	r3, [pc, #36]	; (8008c24 <cleanup_stdio+0x38>)
 8008c00:	4299      	cmp	r1, r3
 8008c02:	d002      	beq.n	8008c0a <cleanup_stdio+0x1e>
 8008c04:	4620      	mov	r0, r4
 8008c06:	f000 fd1f 	bl	8009648 <_fflush_r>
 8008c0a:	68e1      	ldr	r1, [r4, #12]
 8008c0c:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <cleanup_stdio+0x3c>)
 8008c0e:	4299      	cmp	r1, r3
 8008c10:	d004      	beq.n	8008c1c <cleanup_stdio+0x30>
 8008c12:	4620      	mov	r0, r4
 8008c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c18:	f000 bd16 	b.w	8009648 <_fflush_r>
 8008c1c:	bd10      	pop	{r4, pc}
 8008c1e:	bf00      	nop
 8008c20:	20004714 	.word	0x20004714
 8008c24:	2000477c 	.word	0x2000477c
 8008c28:	200047e4 	.word	0x200047e4

08008c2c <global_stdio_init.part.0>:
 8008c2c:	b510      	push	{r4, lr}
 8008c2e:	4b0b      	ldr	r3, [pc, #44]	; (8008c5c <global_stdio_init.part.0+0x30>)
 8008c30:	4c0b      	ldr	r4, [pc, #44]	; (8008c60 <global_stdio_init.part.0+0x34>)
 8008c32:	4a0c      	ldr	r2, [pc, #48]	; (8008c64 <global_stdio_init.part.0+0x38>)
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	4620      	mov	r0, r4
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2104      	movs	r1, #4
 8008c3c:	f7ff ff94 	bl	8008b68 <std>
 8008c40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008c44:	2201      	movs	r2, #1
 8008c46:	2109      	movs	r1, #9
 8008c48:	f7ff ff8e 	bl	8008b68 <std>
 8008c4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008c50:	2202      	movs	r2, #2
 8008c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c56:	2112      	movs	r1, #18
 8008c58:	f7ff bf86 	b.w	8008b68 <std>
 8008c5c:	2000484c 	.word	0x2000484c
 8008c60:	20004714 	.word	0x20004714
 8008c64:	08008bd5 	.word	0x08008bd5

08008c68 <__sfp_lock_acquire>:
 8008c68:	4801      	ldr	r0, [pc, #4]	; (8008c70 <__sfp_lock_acquire+0x8>)
 8008c6a:	f000 b8f2 	b.w	8008e52 <__retarget_lock_acquire_recursive>
 8008c6e:	bf00      	nop
 8008c70:	20004851 	.word	0x20004851

08008c74 <__sfp_lock_release>:
 8008c74:	4801      	ldr	r0, [pc, #4]	; (8008c7c <__sfp_lock_release+0x8>)
 8008c76:	f000 b8ed 	b.w	8008e54 <__retarget_lock_release_recursive>
 8008c7a:	bf00      	nop
 8008c7c:	20004851 	.word	0x20004851

08008c80 <__sinit>:
 8008c80:	b510      	push	{r4, lr}
 8008c82:	4604      	mov	r4, r0
 8008c84:	f7ff fff0 	bl	8008c68 <__sfp_lock_acquire>
 8008c88:	6a23      	ldr	r3, [r4, #32]
 8008c8a:	b11b      	cbz	r3, 8008c94 <__sinit+0x14>
 8008c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c90:	f7ff bff0 	b.w	8008c74 <__sfp_lock_release>
 8008c94:	4b04      	ldr	r3, [pc, #16]	; (8008ca8 <__sinit+0x28>)
 8008c96:	6223      	str	r3, [r4, #32]
 8008c98:	4b04      	ldr	r3, [pc, #16]	; (8008cac <__sinit+0x2c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1f5      	bne.n	8008c8c <__sinit+0xc>
 8008ca0:	f7ff ffc4 	bl	8008c2c <global_stdio_init.part.0>
 8008ca4:	e7f2      	b.n	8008c8c <__sinit+0xc>
 8008ca6:	bf00      	nop
 8008ca8:	08008bed 	.word	0x08008bed
 8008cac:	2000484c 	.word	0x2000484c

08008cb0 <_fwalk_sglue>:
 8008cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	4688      	mov	r8, r1
 8008cb8:	4614      	mov	r4, r2
 8008cba:	2600      	movs	r6, #0
 8008cbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cc0:	f1b9 0901 	subs.w	r9, r9, #1
 8008cc4:	d505      	bpl.n	8008cd2 <_fwalk_sglue+0x22>
 8008cc6:	6824      	ldr	r4, [r4, #0]
 8008cc8:	2c00      	cmp	r4, #0
 8008cca:	d1f7      	bne.n	8008cbc <_fwalk_sglue+0xc>
 8008ccc:	4630      	mov	r0, r6
 8008cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cd2:	89ab      	ldrh	r3, [r5, #12]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d907      	bls.n	8008ce8 <_fwalk_sglue+0x38>
 8008cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	d003      	beq.n	8008ce8 <_fwalk_sglue+0x38>
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	47c0      	blx	r8
 8008ce6:	4306      	orrs	r6, r0
 8008ce8:	3568      	adds	r5, #104	; 0x68
 8008cea:	e7e9      	b.n	8008cc0 <_fwalk_sglue+0x10>

08008cec <iprintf>:
 8008cec:	b40f      	push	{r0, r1, r2, r3}
 8008cee:	b507      	push	{r0, r1, r2, lr}
 8008cf0:	4906      	ldr	r1, [pc, #24]	; (8008d0c <iprintf+0x20>)
 8008cf2:	ab04      	add	r3, sp, #16
 8008cf4:	6808      	ldr	r0, [r1, #0]
 8008cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cfa:	6881      	ldr	r1, [r0, #8]
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	f000 f8d3 	bl	8008ea8 <_vfiprintf_r>
 8008d02:	b003      	add	sp, #12
 8008d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d08:	b004      	add	sp, #16
 8008d0a:	4770      	bx	lr
 8008d0c:	20000090 	.word	0x20000090

08008d10 <_puts_r>:
 8008d10:	6a03      	ldr	r3, [r0, #32]
 8008d12:	b570      	push	{r4, r5, r6, lr}
 8008d14:	6884      	ldr	r4, [r0, #8]
 8008d16:	4605      	mov	r5, r0
 8008d18:	460e      	mov	r6, r1
 8008d1a:	b90b      	cbnz	r3, 8008d20 <_puts_r+0x10>
 8008d1c:	f7ff ffb0 	bl	8008c80 <__sinit>
 8008d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d22:	07db      	lsls	r3, r3, #31
 8008d24:	d405      	bmi.n	8008d32 <_puts_r+0x22>
 8008d26:	89a3      	ldrh	r3, [r4, #12]
 8008d28:	0598      	lsls	r0, r3, #22
 8008d2a:	d402      	bmi.n	8008d32 <_puts_r+0x22>
 8008d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d2e:	f000 f890 	bl	8008e52 <__retarget_lock_acquire_recursive>
 8008d32:	89a3      	ldrh	r3, [r4, #12]
 8008d34:	0719      	lsls	r1, r3, #28
 8008d36:	d513      	bpl.n	8008d60 <_puts_r+0x50>
 8008d38:	6923      	ldr	r3, [r4, #16]
 8008d3a:	b18b      	cbz	r3, 8008d60 <_puts_r+0x50>
 8008d3c:	3e01      	subs	r6, #1
 8008d3e:	68a3      	ldr	r3, [r4, #8]
 8008d40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d44:	3b01      	subs	r3, #1
 8008d46:	60a3      	str	r3, [r4, #8]
 8008d48:	b9e9      	cbnz	r1, 8008d86 <_puts_r+0x76>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	da2e      	bge.n	8008dac <_puts_r+0x9c>
 8008d4e:	4622      	mov	r2, r4
 8008d50:	210a      	movs	r1, #10
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 fcef 	bl	8009736 <__swbuf_r>
 8008d58:	3001      	adds	r0, #1
 8008d5a:	d007      	beq.n	8008d6c <_puts_r+0x5c>
 8008d5c:	250a      	movs	r5, #10
 8008d5e:	e007      	b.n	8008d70 <_puts_r+0x60>
 8008d60:	4621      	mov	r1, r4
 8008d62:	4628      	mov	r0, r5
 8008d64:	f000 fd24 	bl	80097b0 <__swsetup_r>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d0e7      	beq.n	8008d3c <_puts_r+0x2c>
 8008d6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d72:	07da      	lsls	r2, r3, #31
 8008d74:	d405      	bmi.n	8008d82 <_puts_r+0x72>
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	059b      	lsls	r3, r3, #22
 8008d7a:	d402      	bmi.n	8008d82 <_puts_r+0x72>
 8008d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d7e:	f000 f869 	bl	8008e54 <__retarget_lock_release_recursive>
 8008d82:	4628      	mov	r0, r5
 8008d84:	bd70      	pop	{r4, r5, r6, pc}
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	da04      	bge.n	8008d94 <_puts_r+0x84>
 8008d8a:	69a2      	ldr	r2, [r4, #24]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	dc06      	bgt.n	8008d9e <_puts_r+0x8e>
 8008d90:	290a      	cmp	r1, #10
 8008d92:	d004      	beq.n	8008d9e <_puts_r+0x8e>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	6022      	str	r2, [r4, #0]
 8008d9a:	7019      	strb	r1, [r3, #0]
 8008d9c:	e7cf      	b.n	8008d3e <_puts_r+0x2e>
 8008d9e:	4622      	mov	r2, r4
 8008da0:	4628      	mov	r0, r5
 8008da2:	f000 fcc8 	bl	8009736 <__swbuf_r>
 8008da6:	3001      	adds	r0, #1
 8008da8:	d1c9      	bne.n	8008d3e <_puts_r+0x2e>
 8008daa:	e7df      	b.n	8008d6c <_puts_r+0x5c>
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	250a      	movs	r5, #10
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	6022      	str	r2, [r4, #0]
 8008db4:	701d      	strb	r5, [r3, #0]
 8008db6:	e7db      	b.n	8008d70 <_puts_r+0x60>

08008db8 <puts>:
 8008db8:	4b02      	ldr	r3, [pc, #8]	; (8008dc4 <puts+0xc>)
 8008dba:	4601      	mov	r1, r0
 8008dbc:	6818      	ldr	r0, [r3, #0]
 8008dbe:	f7ff bfa7 	b.w	8008d10 <_puts_r>
 8008dc2:	bf00      	nop
 8008dc4:	20000090 	.word	0x20000090

08008dc8 <strncmp>:
 8008dc8:	b510      	push	{r4, lr}
 8008dca:	b16a      	cbz	r2, 8008de8 <strncmp+0x20>
 8008dcc:	3901      	subs	r1, #1
 8008dce:	1884      	adds	r4, r0, r2
 8008dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d103      	bne.n	8008de4 <strncmp+0x1c>
 8008ddc:	42a0      	cmp	r0, r4
 8008dde:	d001      	beq.n	8008de4 <strncmp+0x1c>
 8008de0:	2a00      	cmp	r2, #0
 8008de2:	d1f5      	bne.n	8008dd0 <strncmp+0x8>
 8008de4:	1ad0      	subs	r0, r2, r3
 8008de6:	bd10      	pop	{r4, pc}
 8008de8:	4610      	mov	r0, r2
 8008dea:	e7fc      	b.n	8008de6 <strncmp+0x1e>

08008dec <memset>:
 8008dec:	4402      	add	r2, r0
 8008dee:	4603      	mov	r3, r0
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d100      	bne.n	8008df6 <memset+0xa>
 8008df4:	4770      	bx	lr
 8008df6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dfa:	e7f9      	b.n	8008df0 <memset+0x4>

08008dfc <__errno>:
 8008dfc:	4b01      	ldr	r3, [pc, #4]	; (8008e04 <__errno+0x8>)
 8008dfe:	6818      	ldr	r0, [r3, #0]
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20000090 	.word	0x20000090

08008e08 <__libc_init_array>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	4d0d      	ldr	r5, [pc, #52]	; (8008e40 <__libc_init_array+0x38>)
 8008e0c:	4c0d      	ldr	r4, [pc, #52]	; (8008e44 <__libc_init_array+0x3c>)
 8008e0e:	1b64      	subs	r4, r4, r5
 8008e10:	10a4      	asrs	r4, r4, #2
 8008e12:	2600      	movs	r6, #0
 8008e14:	42a6      	cmp	r6, r4
 8008e16:	d109      	bne.n	8008e2c <__libc_init_array+0x24>
 8008e18:	4d0b      	ldr	r5, [pc, #44]	; (8008e48 <__libc_init_array+0x40>)
 8008e1a:	4c0c      	ldr	r4, [pc, #48]	; (8008e4c <__libc_init_array+0x44>)
 8008e1c:	f000 fe46 	bl	8009aac <_init>
 8008e20:	1b64      	subs	r4, r4, r5
 8008e22:	10a4      	asrs	r4, r4, #2
 8008e24:	2600      	movs	r6, #0
 8008e26:	42a6      	cmp	r6, r4
 8008e28:	d105      	bne.n	8008e36 <__libc_init_array+0x2e>
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}
 8008e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e30:	4798      	blx	r3
 8008e32:	3601      	adds	r6, #1
 8008e34:	e7ee      	b.n	8008e14 <__libc_init_array+0xc>
 8008e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3a:	4798      	blx	r3
 8008e3c:	3601      	adds	r6, #1
 8008e3e:	e7f2      	b.n	8008e26 <__libc_init_array+0x1e>
 8008e40:	0800a10c 	.word	0x0800a10c
 8008e44:	0800a10c 	.word	0x0800a10c
 8008e48:	0800a10c 	.word	0x0800a10c
 8008e4c:	0800a110 	.word	0x0800a110

08008e50 <__retarget_lock_init_recursive>:
 8008e50:	4770      	bx	lr

08008e52 <__retarget_lock_acquire_recursive>:
 8008e52:	4770      	bx	lr

08008e54 <__retarget_lock_release_recursive>:
 8008e54:	4770      	bx	lr

08008e56 <__sfputc_r>:
 8008e56:	6893      	ldr	r3, [r2, #8]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	b410      	push	{r4}
 8008e5e:	6093      	str	r3, [r2, #8]
 8008e60:	da08      	bge.n	8008e74 <__sfputc_r+0x1e>
 8008e62:	6994      	ldr	r4, [r2, #24]
 8008e64:	42a3      	cmp	r3, r4
 8008e66:	db01      	blt.n	8008e6c <__sfputc_r+0x16>
 8008e68:	290a      	cmp	r1, #10
 8008e6a:	d103      	bne.n	8008e74 <__sfputc_r+0x1e>
 8008e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e70:	f000 bc61 	b.w	8009736 <__swbuf_r>
 8008e74:	6813      	ldr	r3, [r2, #0]
 8008e76:	1c58      	adds	r0, r3, #1
 8008e78:	6010      	str	r0, [r2, #0]
 8008e7a:	7019      	strb	r1, [r3, #0]
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <__sfputs_r>:
 8008e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e86:	4606      	mov	r6, r0
 8008e88:	460f      	mov	r7, r1
 8008e8a:	4614      	mov	r4, r2
 8008e8c:	18d5      	adds	r5, r2, r3
 8008e8e:	42ac      	cmp	r4, r5
 8008e90:	d101      	bne.n	8008e96 <__sfputs_r+0x12>
 8008e92:	2000      	movs	r0, #0
 8008e94:	e007      	b.n	8008ea6 <__sfputs_r+0x22>
 8008e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e9a:	463a      	mov	r2, r7
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f7ff ffda 	bl	8008e56 <__sfputc_r>
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	d1f3      	bne.n	8008e8e <__sfputs_r+0xa>
 8008ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ea8 <_vfiprintf_r>:
 8008ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	460d      	mov	r5, r1
 8008eae:	b09d      	sub	sp, #116	; 0x74
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	4698      	mov	r8, r3
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	b118      	cbz	r0, 8008ec0 <_vfiprintf_r+0x18>
 8008eb8:	6a03      	ldr	r3, [r0, #32]
 8008eba:	b90b      	cbnz	r3, 8008ec0 <_vfiprintf_r+0x18>
 8008ebc:	f7ff fee0 	bl	8008c80 <__sinit>
 8008ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ec2:	07d9      	lsls	r1, r3, #31
 8008ec4:	d405      	bmi.n	8008ed2 <_vfiprintf_r+0x2a>
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	059a      	lsls	r2, r3, #22
 8008eca:	d402      	bmi.n	8008ed2 <_vfiprintf_r+0x2a>
 8008ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ece:	f7ff ffc0 	bl	8008e52 <__retarget_lock_acquire_recursive>
 8008ed2:	89ab      	ldrh	r3, [r5, #12]
 8008ed4:	071b      	lsls	r3, r3, #28
 8008ed6:	d501      	bpl.n	8008edc <_vfiprintf_r+0x34>
 8008ed8:	692b      	ldr	r3, [r5, #16]
 8008eda:	b99b      	cbnz	r3, 8008f04 <_vfiprintf_r+0x5c>
 8008edc:	4629      	mov	r1, r5
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f000 fc66 	bl	80097b0 <__swsetup_r>
 8008ee4:	b170      	cbz	r0, 8008f04 <_vfiprintf_r+0x5c>
 8008ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ee8:	07dc      	lsls	r4, r3, #31
 8008eea:	d504      	bpl.n	8008ef6 <_vfiprintf_r+0x4e>
 8008eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ef0:	b01d      	add	sp, #116	; 0x74
 8008ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef6:	89ab      	ldrh	r3, [r5, #12]
 8008ef8:	0598      	lsls	r0, r3, #22
 8008efa:	d4f7      	bmi.n	8008eec <_vfiprintf_r+0x44>
 8008efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008efe:	f7ff ffa9 	bl	8008e54 <__retarget_lock_release_recursive>
 8008f02:	e7f3      	b.n	8008eec <_vfiprintf_r+0x44>
 8008f04:	2300      	movs	r3, #0
 8008f06:	9309      	str	r3, [sp, #36]	; 0x24
 8008f08:	2320      	movs	r3, #32
 8008f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f12:	2330      	movs	r3, #48	; 0x30
 8008f14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80090c8 <_vfiprintf_r+0x220>
 8008f18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f1c:	f04f 0901 	mov.w	r9, #1
 8008f20:	4623      	mov	r3, r4
 8008f22:	469a      	mov	sl, r3
 8008f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f28:	b10a      	cbz	r2, 8008f2e <_vfiprintf_r+0x86>
 8008f2a:	2a25      	cmp	r2, #37	; 0x25
 8008f2c:	d1f9      	bne.n	8008f22 <_vfiprintf_r+0x7a>
 8008f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8008f32:	d00b      	beq.n	8008f4c <_vfiprintf_r+0xa4>
 8008f34:	465b      	mov	r3, fp
 8008f36:	4622      	mov	r2, r4
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f7ff ffa2 	bl	8008e84 <__sfputs_r>
 8008f40:	3001      	adds	r0, #1
 8008f42:	f000 80a9 	beq.w	8009098 <_vfiprintf_r+0x1f0>
 8008f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f48:	445a      	add	r2, fp
 8008f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 80a1 	beq.w	8009098 <_vfiprintf_r+0x1f0>
 8008f56:	2300      	movs	r3, #0
 8008f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f60:	f10a 0a01 	add.w	sl, sl, #1
 8008f64:	9304      	str	r3, [sp, #16]
 8008f66:	9307      	str	r3, [sp, #28]
 8008f68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8008f6e:	4654      	mov	r4, sl
 8008f70:	2205      	movs	r2, #5
 8008f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f76:	4854      	ldr	r0, [pc, #336]	; (80090c8 <_vfiprintf_r+0x220>)
 8008f78:	f7f7 f92a 	bl	80001d0 <memchr>
 8008f7c:	9a04      	ldr	r2, [sp, #16]
 8008f7e:	b9d8      	cbnz	r0, 8008fb8 <_vfiprintf_r+0x110>
 8008f80:	06d1      	lsls	r1, r2, #27
 8008f82:	bf44      	itt	mi
 8008f84:	2320      	movmi	r3, #32
 8008f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f8a:	0713      	lsls	r3, r2, #28
 8008f8c:	bf44      	itt	mi
 8008f8e:	232b      	movmi	r3, #43	; 0x2b
 8008f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f94:	f89a 3000 	ldrb.w	r3, [sl]
 8008f98:	2b2a      	cmp	r3, #42	; 0x2a
 8008f9a:	d015      	beq.n	8008fc8 <_vfiprintf_r+0x120>
 8008f9c:	9a07      	ldr	r2, [sp, #28]
 8008f9e:	4654      	mov	r4, sl
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	f04f 0c0a 	mov.w	ip, #10
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fac:	3b30      	subs	r3, #48	; 0x30
 8008fae:	2b09      	cmp	r3, #9
 8008fb0:	d94d      	bls.n	800904e <_vfiprintf_r+0x1a6>
 8008fb2:	b1b0      	cbz	r0, 8008fe2 <_vfiprintf_r+0x13a>
 8008fb4:	9207      	str	r2, [sp, #28]
 8008fb6:	e014      	b.n	8008fe2 <_vfiprintf_r+0x13a>
 8008fb8:	eba0 0308 	sub.w	r3, r0, r8
 8008fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	9304      	str	r3, [sp, #16]
 8008fc4:	46a2      	mov	sl, r4
 8008fc6:	e7d2      	b.n	8008f6e <_vfiprintf_r+0xc6>
 8008fc8:	9b03      	ldr	r3, [sp, #12]
 8008fca:	1d19      	adds	r1, r3, #4
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	9103      	str	r1, [sp, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	bfbb      	ittet	lt
 8008fd4:	425b      	neglt	r3, r3
 8008fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8008fda:	9307      	strge	r3, [sp, #28]
 8008fdc:	9307      	strlt	r3, [sp, #28]
 8008fde:	bfb8      	it	lt
 8008fe0:	9204      	strlt	r2, [sp, #16]
 8008fe2:	7823      	ldrb	r3, [r4, #0]
 8008fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8008fe6:	d10c      	bne.n	8009002 <_vfiprintf_r+0x15a>
 8008fe8:	7863      	ldrb	r3, [r4, #1]
 8008fea:	2b2a      	cmp	r3, #42	; 0x2a
 8008fec:	d134      	bne.n	8009058 <_vfiprintf_r+0x1b0>
 8008fee:	9b03      	ldr	r3, [sp, #12]
 8008ff0:	1d1a      	adds	r2, r3, #4
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	9203      	str	r2, [sp, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	bfb8      	it	lt
 8008ffa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ffe:	3402      	adds	r4, #2
 8009000:	9305      	str	r3, [sp, #20]
 8009002:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80090d8 <_vfiprintf_r+0x230>
 8009006:	7821      	ldrb	r1, [r4, #0]
 8009008:	2203      	movs	r2, #3
 800900a:	4650      	mov	r0, sl
 800900c:	f7f7 f8e0 	bl	80001d0 <memchr>
 8009010:	b138      	cbz	r0, 8009022 <_vfiprintf_r+0x17a>
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	eba0 000a 	sub.w	r0, r0, sl
 8009018:	2240      	movs	r2, #64	; 0x40
 800901a:	4082      	lsls	r2, r0
 800901c:	4313      	orrs	r3, r2
 800901e:	3401      	adds	r4, #1
 8009020:	9304      	str	r3, [sp, #16]
 8009022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009026:	4829      	ldr	r0, [pc, #164]	; (80090cc <_vfiprintf_r+0x224>)
 8009028:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800902c:	2206      	movs	r2, #6
 800902e:	f7f7 f8cf 	bl	80001d0 <memchr>
 8009032:	2800      	cmp	r0, #0
 8009034:	d03f      	beq.n	80090b6 <_vfiprintf_r+0x20e>
 8009036:	4b26      	ldr	r3, [pc, #152]	; (80090d0 <_vfiprintf_r+0x228>)
 8009038:	bb1b      	cbnz	r3, 8009082 <_vfiprintf_r+0x1da>
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	3307      	adds	r3, #7
 800903e:	f023 0307 	bic.w	r3, r3, #7
 8009042:	3308      	adds	r3, #8
 8009044:	9303      	str	r3, [sp, #12]
 8009046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009048:	443b      	add	r3, r7
 800904a:	9309      	str	r3, [sp, #36]	; 0x24
 800904c:	e768      	b.n	8008f20 <_vfiprintf_r+0x78>
 800904e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009052:	460c      	mov	r4, r1
 8009054:	2001      	movs	r0, #1
 8009056:	e7a6      	b.n	8008fa6 <_vfiprintf_r+0xfe>
 8009058:	2300      	movs	r3, #0
 800905a:	3401      	adds	r4, #1
 800905c:	9305      	str	r3, [sp, #20]
 800905e:	4619      	mov	r1, r3
 8009060:	f04f 0c0a 	mov.w	ip, #10
 8009064:	4620      	mov	r0, r4
 8009066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800906a:	3a30      	subs	r2, #48	; 0x30
 800906c:	2a09      	cmp	r2, #9
 800906e:	d903      	bls.n	8009078 <_vfiprintf_r+0x1d0>
 8009070:	2b00      	cmp	r3, #0
 8009072:	d0c6      	beq.n	8009002 <_vfiprintf_r+0x15a>
 8009074:	9105      	str	r1, [sp, #20]
 8009076:	e7c4      	b.n	8009002 <_vfiprintf_r+0x15a>
 8009078:	fb0c 2101 	mla	r1, ip, r1, r2
 800907c:	4604      	mov	r4, r0
 800907e:	2301      	movs	r3, #1
 8009080:	e7f0      	b.n	8009064 <_vfiprintf_r+0x1bc>
 8009082:	ab03      	add	r3, sp, #12
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	462a      	mov	r2, r5
 8009088:	4b12      	ldr	r3, [pc, #72]	; (80090d4 <_vfiprintf_r+0x22c>)
 800908a:	a904      	add	r1, sp, #16
 800908c:	4630      	mov	r0, r6
 800908e:	f3af 8000 	nop.w
 8009092:	4607      	mov	r7, r0
 8009094:	1c78      	adds	r0, r7, #1
 8009096:	d1d6      	bne.n	8009046 <_vfiprintf_r+0x19e>
 8009098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800909a:	07d9      	lsls	r1, r3, #31
 800909c:	d405      	bmi.n	80090aa <_vfiprintf_r+0x202>
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	059a      	lsls	r2, r3, #22
 80090a2:	d402      	bmi.n	80090aa <_vfiprintf_r+0x202>
 80090a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090a6:	f7ff fed5 	bl	8008e54 <__retarget_lock_release_recursive>
 80090aa:	89ab      	ldrh	r3, [r5, #12]
 80090ac:	065b      	lsls	r3, r3, #25
 80090ae:	f53f af1d 	bmi.w	8008eec <_vfiprintf_r+0x44>
 80090b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090b4:	e71c      	b.n	8008ef0 <_vfiprintf_r+0x48>
 80090b6:	ab03      	add	r3, sp, #12
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	462a      	mov	r2, r5
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <_vfiprintf_r+0x22c>)
 80090be:	a904      	add	r1, sp, #16
 80090c0:	4630      	mov	r0, r6
 80090c2:	f000 f919 	bl	80092f8 <_printf_i>
 80090c6:	e7e4      	b.n	8009092 <_vfiprintf_r+0x1ea>
 80090c8:	0800a0d0 	.word	0x0800a0d0
 80090cc:	0800a0da 	.word	0x0800a0da
 80090d0:	00000000 	.word	0x00000000
 80090d4:	08008e85 	.word	0x08008e85
 80090d8:	0800a0d6 	.word	0x0800a0d6

080090dc <sbrk_aligned>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	4e0e      	ldr	r6, [pc, #56]	; (8009118 <sbrk_aligned+0x3c>)
 80090e0:	460c      	mov	r4, r1
 80090e2:	6831      	ldr	r1, [r6, #0]
 80090e4:	4605      	mov	r5, r0
 80090e6:	b911      	cbnz	r1, 80090ee <sbrk_aligned+0x12>
 80090e8:	f000 fc72 	bl	80099d0 <_sbrk_r>
 80090ec:	6030      	str	r0, [r6, #0]
 80090ee:	4621      	mov	r1, r4
 80090f0:	4628      	mov	r0, r5
 80090f2:	f000 fc6d 	bl	80099d0 <_sbrk_r>
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	d00a      	beq.n	8009110 <sbrk_aligned+0x34>
 80090fa:	1cc4      	adds	r4, r0, #3
 80090fc:	f024 0403 	bic.w	r4, r4, #3
 8009100:	42a0      	cmp	r0, r4
 8009102:	d007      	beq.n	8009114 <sbrk_aligned+0x38>
 8009104:	1a21      	subs	r1, r4, r0
 8009106:	4628      	mov	r0, r5
 8009108:	f000 fc62 	bl	80099d0 <_sbrk_r>
 800910c:	3001      	adds	r0, #1
 800910e:	d101      	bne.n	8009114 <sbrk_aligned+0x38>
 8009110:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009114:	4620      	mov	r0, r4
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	20004858 	.word	0x20004858

0800911c <_malloc_r>:
 800911c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009120:	1ccd      	adds	r5, r1, #3
 8009122:	f025 0503 	bic.w	r5, r5, #3
 8009126:	3508      	adds	r5, #8
 8009128:	2d0c      	cmp	r5, #12
 800912a:	bf38      	it	cc
 800912c:	250c      	movcc	r5, #12
 800912e:	2d00      	cmp	r5, #0
 8009130:	4607      	mov	r7, r0
 8009132:	db01      	blt.n	8009138 <_malloc_r+0x1c>
 8009134:	42a9      	cmp	r1, r5
 8009136:	d905      	bls.n	8009144 <_malloc_r+0x28>
 8009138:	230c      	movs	r3, #12
 800913a:	603b      	str	r3, [r7, #0]
 800913c:	2600      	movs	r6, #0
 800913e:	4630      	mov	r0, r6
 8009140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009144:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009218 <_malloc_r+0xfc>
 8009148:	f000 faa6 	bl	8009698 <__malloc_lock>
 800914c:	f8d8 3000 	ldr.w	r3, [r8]
 8009150:	461c      	mov	r4, r3
 8009152:	bb5c      	cbnz	r4, 80091ac <_malloc_r+0x90>
 8009154:	4629      	mov	r1, r5
 8009156:	4638      	mov	r0, r7
 8009158:	f7ff ffc0 	bl	80090dc <sbrk_aligned>
 800915c:	1c43      	adds	r3, r0, #1
 800915e:	4604      	mov	r4, r0
 8009160:	d155      	bne.n	800920e <_malloc_r+0xf2>
 8009162:	f8d8 4000 	ldr.w	r4, [r8]
 8009166:	4626      	mov	r6, r4
 8009168:	2e00      	cmp	r6, #0
 800916a:	d145      	bne.n	80091f8 <_malloc_r+0xdc>
 800916c:	2c00      	cmp	r4, #0
 800916e:	d048      	beq.n	8009202 <_malloc_r+0xe6>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	4631      	mov	r1, r6
 8009174:	4638      	mov	r0, r7
 8009176:	eb04 0903 	add.w	r9, r4, r3
 800917a:	f000 fc29 	bl	80099d0 <_sbrk_r>
 800917e:	4581      	cmp	r9, r0
 8009180:	d13f      	bne.n	8009202 <_malloc_r+0xe6>
 8009182:	6821      	ldr	r1, [r4, #0]
 8009184:	1a6d      	subs	r5, r5, r1
 8009186:	4629      	mov	r1, r5
 8009188:	4638      	mov	r0, r7
 800918a:	f7ff ffa7 	bl	80090dc <sbrk_aligned>
 800918e:	3001      	adds	r0, #1
 8009190:	d037      	beq.n	8009202 <_malloc_r+0xe6>
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	442b      	add	r3, r5
 8009196:	6023      	str	r3, [r4, #0]
 8009198:	f8d8 3000 	ldr.w	r3, [r8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d038      	beq.n	8009212 <_malloc_r+0xf6>
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	42a2      	cmp	r2, r4
 80091a4:	d12b      	bne.n	80091fe <_malloc_r+0xe2>
 80091a6:	2200      	movs	r2, #0
 80091a8:	605a      	str	r2, [r3, #4]
 80091aa:	e00f      	b.n	80091cc <_malloc_r+0xb0>
 80091ac:	6822      	ldr	r2, [r4, #0]
 80091ae:	1b52      	subs	r2, r2, r5
 80091b0:	d41f      	bmi.n	80091f2 <_malloc_r+0xd6>
 80091b2:	2a0b      	cmp	r2, #11
 80091b4:	d917      	bls.n	80091e6 <_malloc_r+0xca>
 80091b6:	1961      	adds	r1, r4, r5
 80091b8:	42a3      	cmp	r3, r4
 80091ba:	6025      	str	r5, [r4, #0]
 80091bc:	bf18      	it	ne
 80091be:	6059      	strne	r1, [r3, #4]
 80091c0:	6863      	ldr	r3, [r4, #4]
 80091c2:	bf08      	it	eq
 80091c4:	f8c8 1000 	streq.w	r1, [r8]
 80091c8:	5162      	str	r2, [r4, r5]
 80091ca:	604b      	str	r3, [r1, #4]
 80091cc:	4638      	mov	r0, r7
 80091ce:	f104 060b 	add.w	r6, r4, #11
 80091d2:	f000 fa67 	bl	80096a4 <__malloc_unlock>
 80091d6:	f026 0607 	bic.w	r6, r6, #7
 80091da:	1d23      	adds	r3, r4, #4
 80091dc:	1af2      	subs	r2, r6, r3
 80091de:	d0ae      	beq.n	800913e <_malloc_r+0x22>
 80091e0:	1b9b      	subs	r3, r3, r6
 80091e2:	50a3      	str	r3, [r4, r2]
 80091e4:	e7ab      	b.n	800913e <_malloc_r+0x22>
 80091e6:	42a3      	cmp	r3, r4
 80091e8:	6862      	ldr	r2, [r4, #4]
 80091ea:	d1dd      	bne.n	80091a8 <_malloc_r+0x8c>
 80091ec:	f8c8 2000 	str.w	r2, [r8]
 80091f0:	e7ec      	b.n	80091cc <_malloc_r+0xb0>
 80091f2:	4623      	mov	r3, r4
 80091f4:	6864      	ldr	r4, [r4, #4]
 80091f6:	e7ac      	b.n	8009152 <_malloc_r+0x36>
 80091f8:	4634      	mov	r4, r6
 80091fa:	6876      	ldr	r6, [r6, #4]
 80091fc:	e7b4      	b.n	8009168 <_malloc_r+0x4c>
 80091fe:	4613      	mov	r3, r2
 8009200:	e7cc      	b.n	800919c <_malloc_r+0x80>
 8009202:	230c      	movs	r3, #12
 8009204:	603b      	str	r3, [r7, #0]
 8009206:	4638      	mov	r0, r7
 8009208:	f000 fa4c 	bl	80096a4 <__malloc_unlock>
 800920c:	e797      	b.n	800913e <_malloc_r+0x22>
 800920e:	6025      	str	r5, [r4, #0]
 8009210:	e7dc      	b.n	80091cc <_malloc_r+0xb0>
 8009212:	605b      	str	r3, [r3, #4]
 8009214:	deff      	udf	#255	; 0xff
 8009216:	bf00      	nop
 8009218:	20004854 	.word	0x20004854

0800921c <_printf_common>:
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	4616      	mov	r6, r2
 8009222:	4699      	mov	r9, r3
 8009224:	688a      	ldr	r2, [r1, #8]
 8009226:	690b      	ldr	r3, [r1, #16]
 8009228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800922c:	4293      	cmp	r3, r2
 800922e:	bfb8      	it	lt
 8009230:	4613      	movlt	r3, r2
 8009232:	6033      	str	r3, [r6, #0]
 8009234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009238:	4607      	mov	r7, r0
 800923a:	460c      	mov	r4, r1
 800923c:	b10a      	cbz	r2, 8009242 <_printf_common+0x26>
 800923e:	3301      	adds	r3, #1
 8009240:	6033      	str	r3, [r6, #0]
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	0699      	lsls	r1, r3, #26
 8009246:	bf42      	ittt	mi
 8009248:	6833      	ldrmi	r3, [r6, #0]
 800924a:	3302      	addmi	r3, #2
 800924c:	6033      	strmi	r3, [r6, #0]
 800924e:	6825      	ldr	r5, [r4, #0]
 8009250:	f015 0506 	ands.w	r5, r5, #6
 8009254:	d106      	bne.n	8009264 <_printf_common+0x48>
 8009256:	f104 0a19 	add.w	sl, r4, #25
 800925a:	68e3      	ldr	r3, [r4, #12]
 800925c:	6832      	ldr	r2, [r6, #0]
 800925e:	1a9b      	subs	r3, r3, r2
 8009260:	42ab      	cmp	r3, r5
 8009262:	dc26      	bgt.n	80092b2 <_printf_common+0x96>
 8009264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009268:	1e13      	subs	r3, r2, #0
 800926a:	6822      	ldr	r2, [r4, #0]
 800926c:	bf18      	it	ne
 800926e:	2301      	movne	r3, #1
 8009270:	0692      	lsls	r2, r2, #26
 8009272:	d42b      	bmi.n	80092cc <_printf_common+0xb0>
 8009274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009278:	4649      	mov	r1, r9
 800927a:	4638      	mov	r0, r7
 800927c:	47c0      	blx	r8
 800927e:	3001      	adds	r0, #1
 8009280:	d01e      	beq.n	80092c0 <_printf_common+0xa4>
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	6922      	ldr	r2, [r4, #16]
 8009286:	f003 0306 	and.w	r3, r3, #6
 800928a:	2b04      	cmp	r3, #4
 800928c:	bf02      	ittt	eq
 800928e:	68e5      	ldreq	r5, [r4, #12]
 8009290:	6833      	ldreq	r3, [r6, #0]
 8009292:	1aed      	subeq	r5, r5, r3
 8009294:	68a3      	ldr	r3, [r4, #8]
 8009296:	bf0c      	ite	eq
 8009298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800929c:	2500      	movne	r5, #0
 800929e:	4293      	cmp	r3, r2
 80092a0:	bfc4      	itt	gt
 80092a2:	1a9b      	subgt	r3, r3, r2
 80092a4:	18ed      	addgt	r5, r5, r3
 80092a6:	2600      	movs	r6, #0
 80092a8:	341a      	adds	r4, #26
 80092aa:	42b5      	cmp	r5, r6
 80092ac:	d11a      	bne.n	80092e4 <_printf_common+0xc8>
 80092ae:	2000      	movs	r0, #0
 80092b0:	e008      	b.n	80092c4 <_printf_common+0xa8>
 80092b2:	2301      	movs	r3, #1
 80092b4:	4652      	mov	r2, sl
 80092b6:	4649      	mov	r1, r9
 80092b8:	4638      	mov	r0, r7
 80092ba:	47c0      	blx	r8
 80092bc:	3001      	adds	r0, #1
 80092be:	d103      	bne.n	80092c8 <_printf_common+0xac>
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c8:	3501      	adds	r5, #1
 80092ca:	e7c6      	b.n	800925a <_printf_common+0x3e>
 80092cc:	18e1      	adds	r1, r4, r3
 80092ce:	1c5a      	adds	r2, r3, #1
 80092d0:	2030      	movs	r0, #48	; 0x30
 80092d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092d6:	4422      	add	r2, r4
 80092d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092e0:	3302      	adds	r3, #2
 80092e2:	e7c7      	b.n	8009274 <_printf_common+0x58>
 80092e4:	2301      	movs	r3, #1
 80092e6:	4622      	mov	r2, r4
 80092e8:	4649      	mov	r1, r9
 80092ea:	4638      	mov	r0, r7
 80092ec:	47c0      	blx	r8
 80092ee:	3001      	adds	r0, #1
 80092f0:	d0e6      	beq.n	80092c0 <_printf_common+0xa4>
 80092f2:	3601      	adds	r6, #1
 80092f4:	e7d9      	b.n	80092aa <_printf_common+0x8e>
	...

080092f8 <_printf_i>:
 80092f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092fc:	7e0f      	ldrb	r7, [r1, #24]
 80092fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009300:	2f78      	cmp	r7, #120	; 0x78
 8009302:	4691      	mov	r9, r2
 8009304:	4680      	mov	r8, r0
 8009306:	460c      	mov	r4, r1
 8009308:	469a      	mov	sl, r3
 800930a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800930e:	d807      	bhi.n	8009320 <_printf_i+0x28>
 8009310:	2f62      	cmp	r7, #98	; 0x62
 8009312:	d80a      	bhi.n	800932a <_printf_i+0x32>
 8009314:	2f00      	cmp	r7, #0
 8009316:	f000 80d4 	beq.w	80094c2 <_printf_i+0x1ca>
 800931a:	2f58      	cmp	r7, #88	; 0x58
 800931c:	f000 80c0 	beq.w	80094a0 <_printf_i+0x1a8>
 8009320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009328:	e03a      	b.n	80093a0 <_printf_i+0xa8>
 800932a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800932e:	2b15      	cmp	r3, #21
 8009330:	d8f6      	bhi.n	8009320 <_printf_i+0x28>
 8009332:	a101      	add	r1, pc, #4	; (adr r1, 8009338 <_printf_i+0x40>)
 8009334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009338:	08009391 	.word	0x08009391
 800933c:	080093a5 	.word	0x080093a5
 8009340:	08009321 	.word	0x08009321
 8009344:	08009321 	.word	0x08009321
 8009348:	08009321 	.word	0x08009321
 800934c:	08009321 	.word	0x08009321
 8009350:	080093a5 	.word	0x080093a5
 8009354:	08009321 	.word	0x08009321
 8009358:	08009321 	.word	0x08009321
 800935c:	08009321 	.word	0x08009321
 8009360:	08009321 	.word	0x08009321
 8009364:	080094a9 	.word	0x080094a9
 8009368:	080093d1 	.word	0x080093d1
 800936c:	08009463 	.word	0x08009463
 8009370:	08009321 	.word	0x08009321
 8009374:	08009321 	.word	0x08009321
 8009378:	080094cb 	.word	0x080094cb
 800937c:	08009321 	.word	0x08009321
 8009380:	080093d1 	.word	0x080093d1
 8009384:	08009321 	.word	0x08009321
 8009388:	08009321 	.word	0x08009321
 800938c:	0800946b 	.word	0x0800946b
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	1d1a      	adds	r2, r3, #4
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	602a      	str	r2, [r5, #0]
 8009398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800939c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093a0:	2301      	movs	r3, #1
 80093a2:	e09f      	b.n	80094e4 <_printf_i+0x1ec>
 80093a4:	6820      	ldr	r0, [r4, #0]
 80093a6:	682b      	ldr	r3, [r5, #0]
 80093a8:	0607      	lsls	r7, r0, #24
 80093aa:	f103 0104 	add.w	r1, r3, #4
 80093ae:	6029      	str	r1, [r5, #0]
 80093b0:	d501      	bpl.n	80093b6 <_printf_i+0xbe>
 80093b2:	681e      	ldr	r6, [r3, #0]
 80093b4:	e003      	b.n	80093be <_printf_i+0xc6>
 80093b6:	0646      	lsls	r6, r0, #25
 80093b8:	d5fb      	bpl.n	80093b2 <_printf_i+0xba>
 80093ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80093be:	2e00      	cmp	r6, #0
 80093c0:	da03      	bge.n	80093ca <_printf_i+0xd2>
 80093c2:	232d      	movs	r3, #45	; 0x2d
 80093c4:	4276      	negs	r6, r6
 80093c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ca:	485a      	ldr	r0, [pc, #360]	; (8009534 <_printf_i+0x23c>)
 80093cc:	230a      	movs	r3, #10
 80093ce:	e012      	b.n	80093f6 <_printf_i+0xfe>
 80093d0:	682b      	ldr	r3, [r5, #0]
 80093d2:	6820      	ldr	r0, [r4, #0]
 80093d4:	1d19      	adds	r1, r3, #4
 80093d6:	6029      	str	r1, [r5, #0]
 80093d8:	0605      	lsls	r5, r0, #24
 80093da:	d501      	bpl.n	80093e0 <_printf_i+0xe8>
 80093dc:	681e      	ldr	r6, [r3, #0]
 80093de:	e002      	b.n	80093e6 <_printf_i+0xee>
 80093e0:	0641      	lsls	r1, r0, #25
 80093e2:	d5fb      	bpl.n	80093dc <_printf_i+0xe4>
 80093e4:	881e      	ldrh	r6, [r3, #0]
 80093e6:	4853      	ldr	r0, [pc, #332]	; (8009534 <_printf_i+0x23c>)
 80093e8:	2f6f      	cmp	r7, #111	; 0x6f
 80093ea:	bf0c      	ite	eq
 80093ec:	2308      	moveq	r3, #8
 80093ee:	230a      	movne	r3, #10
 80093f0:	2100      	movs	r1, #0
 80093f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093f6:	6865      	ldr	r5, [r4, #4]
 80093f8:	60a5      	str	r5, [r4, #8]
 80093fa:	2d00      	cmp	r5, #0
 80093fc:	bfa2      	ittt	ge
 80093fe:	6821      	ldrge	r1, [r4, #0]
 8009400:	f021 0104 	bicge.w	r1, r1, #4
 8009404:	6021      	strge	r1, [r4, #0]
 8009406:	b90e      	cbnz	r6, 800940c <_printf_i+0x114>
 8009408:	2d00      	cmp	r5, #0
 800940a:	d04b      	beq.n	80094a4 <_printf_i+0x1ac>
 800940c:	4615      	mov	r5, r2
 800940e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009412:	fb03 6711 	mls	r7, r3, r1, r6
 8009416:	5dc7      	ldrb	r7, [r0, r7]
 8009418:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800941c:	4637      	mov	r7, r6
 800941e:	42bb      	cmp	r3, r7
 8009420:	460e      	mov	r6, r1
 8009422:	d9f4      	bls.n	800940e <_printf_i+0x116>
 8009424:	2b08      	cmp	r3, #8
 8009426:	d10b      	bne.n	8009440 <_printf_i+0x148>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	07de      	lsls	r6, r3, #31
 800942c:	d508      	bpl.n	8009440 <_printf_i+0x148>
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	6861      	ldr	r1, [r4, #4]
 8009432:	4299      	cmp	r1, r3
 8009434:	bfde      	ittt	le
 8009436:	2330      	movle	r3, #48	; 0x30
 8009438:	f805 3c01 	strble.w	r3, [r5, #-1]
 800943c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009440:	1b52      	subs	r2, r2, r5
 8009442:	6122      	str	r2, [r4, #16]
 8009444:	f8cd a000 	str.w	sl, [sp]
 8009448:	464b      	mov	r3, r9
 800944a:	aa03      	add	r2, sp, #12
 800944c:	4621      	mov	r1, r4
 800944e:	4640      	mov	r0, r8
 8009450:	f7ff fee4 	bl	800921c <_printf_common>
 8009454:	3001      	adds	r0, #1
 8009456:	d14a      	bne.n	80094ee <_printf_i+0x1f6>
 8009458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800945c:	b004      	add	sp, #16
 800945e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	f043 0320 	orr.w	r3, r3, #32
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	4833      	ldr	r0, [pc, #204]	; (8009538 <_printf_i+0x240>)
 800946c:	2778      	movs	r7, #120	; 0x78
 800946e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	6829      	ldr	r1, [r5, #0]
 8009476:	061f      	lsls	r7, r3, #24
 8009478:	f851 6b04 	ldr.w	r6, [r1], #4
 800947c:	d402      	bmi.n	8009484 <_printf_i+0x18c>
 800947e:	065f      	lsls	r7, r3, #25
 8009480:	bf48      	it	mi
 8009482:	b2b6      	uxthmi	r6, r6
 8009484:	07df      	lsls	r7, r3, #31
 8009486:	bf48      	it	mi
 8009488:	f043 0320 	orrmi.w	r3, r3, #32
 800948c:	6029      	str	r1, [r5, #0]
 800948e:	bf48      	it	mi
 8009490:	6023      	strmi	r3, [r4, #0]
 8009492:	b91e      	cbnz	r6, 800949c <_printf_i+0x1a4>
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	f023 0320 	bic.w	r3, r3, #32
 800949a:	6023      	str	r3, [r4, #0]
 800949c:	2310      	movs	r3, #16
 800949e:	e7a7      	b.n	80093f0 <_printf_i+0xf8>
 80094a0:	4824      	ldr	r0, [pc, #144]	; (8009534 <_printf_i+0x23c>)
 80094a2:	e7e4      	b.n	800946e <_printf_i+0x176>
 80094a4:	4615      	mov	r5, r2
 80094a6:	e7bd      	b.n	8009424 <_printf_i+0x12c>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	6826      	ldr	r6, [r4, #0]
 80094ac:	6961      	ldr	r1, [r4, #20]
 80094ae:	1d18      	adds	r0, r3, #4
 80094b0:	6028      	str	r0, [r5, #0]
 80094b2:	0635      	lsls	r5, r6, #24
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	d501      	bpl.n	80094bc <_printf_i+0x1c4>
 80094b8:	6019      	str	r1, [r3, #0]
 80094ba:	e002      	b.n	80094c2 <_printf_i+0x1ca>
 80094bc:	0670      	lsls	r0, r6, #25
 80094be:	d5fb      	bpl.n	80094b8 <_printf_i+0x1c0>
 80094c0:	8019      	strh	r1, [r3, #0]
 80094c2:	2300      	movs	r3, #0
 80094c4:	6123      	str	r3, [r4, #16]
 80094c6:	4615      	mov	r5, r2
 80094c8:	e7bc      	b.n	8009444 <_printf_i+0x14c>
 80094ca:	682b      	ldr	r3, [r5, #0]
 80094cc:	1d1a      	adds	r2, r3, #4
 80094ce:	602a      	str	r2, [r5, #0]
 80094d0:	681d      	ldr	r5, [r3, #0]
 80094d2:	6862      	ldr	r2, [r4, #4]
 80094d4:	2100      	movs	r1, #0
 80094d6:	4628      	mov	r0, r5
 80094d8:	f7f6 fe7a 	bl	80001d0 <memchr>
 80094dc:	b108      	cbz	r0, 80094e2 <_printf_i+0x1ea>
 80094de:	1b40      	subs	r0, r0, r5
 80094e0:	6060      	str	r0, [r4, #4]
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	6123      	str	r3, [r4, #16]
 80094e6:	2300      	movs	r3, #0
 80094e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ec:	e7aa      	b.n	8009444 <_printf_i+0x14c>
 80094ee:	6923      	ldr	r3, [r4, #16]
 80094f0:	462a      	mov	r2, r5
 80094f2:	4649      	mov	r1, r9
 80094f4:	4640      	mov	r0, r8
 80094f6:	47d0      	blx	sl
 80094f8:	3001      	adds	r0, #1
 80094fa:	d0ad      	beq.n	8009458 <_printf_i+0x160>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	079b      	lsls	r3, r3, #30
 8009500:	d413      	bmi.n	800952a <_printf_i+0x232>
 8009502:	68e0      	ldr	r0, [r4, #12]
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	4298      	cmp	r0, r3
 8009508:	bfb8      	it	lt
 800950a:	4618      	movlt	r0, r3
 800950c:	e7a6      	b.n	800945c <_printf_i+0x164>
 800950e:	2301      	movs	r3, #1
 8009510:	4632      	mov	r2, r6
 8009512:	4649      	mov	r1, r9
 8009514:	4640      	mov	r0, r8
 8009516:	47d0      	blx	sl
 8009518:	3001      	adds	r0, #1
 800951a:	d09d      	beq.n	8009458 <_printf_i+0x160>
 800951c:	3501      	adds	r5, #1
 800951e:	68e3      	ldr	r3, [r4, #12]
 8009520:	9903      	ldr	r1, [sp, #12]
 8009522:	1a5b      	subs	r3, r3, r1
 8009524:	42ab      	cmp	r3, r5
 8009526:	dcf2      	bgt.n	800950e <_printf_i+0x216>
 8009528:	e7eb      	b.n	8009502 <_printf_i+0x20a>
 800952a:	2500      	movs	r5, #0
 800952c:	f104 0619 	add.w	r6, r4, #25
 8009530:	e7f5      	b.n	800951e <_printf_i+0x226>
 8009532:	bf00      	nop
 8009534:	0800a0e1 	.word	0x0800a0e1
 8009538:	0800a0f2 	.word	0x0800a0f2

0800953c <__sflush_r>:
 800953c:	898a      	ldrh	r2, [r1, #12]
 800953e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009542:	4605      	mov	r5, r0
 8009544:	0710      	lsls	r0, r2, #28
 8009546:	460c      	mov	r4, r1
 8009548:	d458      	bmi.n	80095fc <__sflush_r+0xc0>
 800954a:	684b      	ldr	r3, [r1, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	dc05      	bgt.n	800955c <__sflush_r+0x20>
 8009550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009552:	2b00      	cmp	r3, #0
 8009554:	dc02      	bgt.n	800955c <__sflush_r+0x20>
 8009556:	2000      	movs	r0, #0
 8009558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800955c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800955e:	2e00      	cmp	r6, #0
 8009560:	d0f9      	beq.n	8009556 <__sflush_r+0x1a>
 8009562:	2300      	movs	r3, #0
 8009564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009568:	682f      	ldr	r7, [r5, #0]
 800956a:	6a21      	ldr	r1, [r4, #32]
 800956c:	602b      	str	r3, [r5, #0]
 800956e:	d032      	beq.n	80095d6 <__sflush_r+0x9a>
 8009570:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	075a      	lsls	r2, r3, #29
 8009576:	d505      	bpl.n	8009584 <__sflush_r+0x48>
 8009578:	6863      	ldr	r3, [r4, #4]
 800957a:	1ac0      	subs	r0, r0, r3
 800957c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800957e:	b10b      	cbz	r3, 8009584 <__sflush_r+0x48>
 8009580:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009582:	1ac0      	subs	r0, r0, r3
 8009584:	2300      	movs	r3, #0
 8009586:	4602      	mov	r2, r0
 8009588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800958a:	6a21      	ldr	r1, [r4, #32]
 800958c:	4628      	mov	r0, r5
 800958e:	47b0      	blx	r6
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	d106      	bne.n	80095a4 <__sflush_r+0x68>
 8009596:	6829      	ldr	r1, [r5, #0]
 8009598:	291d      	cmp	r1, #29
 800959a:	d82b      	bhi.n	80095f4 <__sflush_r+0xb8>
 800959c:	4a29      	ldr	r2, [pc, #164]	; (8009644 <__sflush_r+0x108>)
 800959e:	410a      	asrs	r2, r1
 80095a0:	07d6      	lsls	r6, r2, #31
 80095a2:	d427      	bmi.n	80095f4 <__sflush_r+0xb8>
 80095a4:	2200      	movs	r2, #0
 80095a6:	6062      	str	r2, [r4, #4]
 80095a8:	04d9      	lsls	r1, r3, #19
 80095aa:	6922      	ldr	r2, [r4, #16]
 80095ac:	6022      	str	r2, [r4, #0]
 80095ae:	d504      	bpl.n	80095ba <__sflush_r+0x7e>
 80095b0:	1c42      	adds	r2, r0, #1
 80095b2:	d101      	bne.n	80095b8 <__sflush_r+0x7c>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b903      	cbnz	r3, 80095ba <__sflush_r+0x7e>
 80095b8:	6560      	str	r0, [r4, #84]	; 0x54
 80095ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095bc:	602f      	str	r7, [r5, #0]
 80095be:	2900      	cmp	r1, #0
 80095c0:	d0c9      	beq.n	8009556 <__sflush_r+0x1a>
 80095c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095c6:	4299      	cmp	r1, r3
 80095c8:	d002      	beq.n	80095d0 <__sflush_r+0x94>
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 fa22 	bl	8009a14 <_free_r>
 80095d0:	2000      	movs	r0, #0
 80095d2:	6360      	str	r0, [r4, #52]	; 0x34
 80095d4:	e7c0      	b.n	8009558 <__sflush_r+0x1c>
 80095d6:	2301      	movs	r3, #1
 80095d8:	4628      	mov	r0, r5
 80095da:	47b0      	blx	r6
 80095dc:	1c41      	adds	r1, r0, #1
 80095de:	d1c8      	bne.n	8009572 <__sflush_r+0x36>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0c5      	beq.n	8009572 <__sflush_r+0x36>
 80095e6:	2b1d      	cmp	r3, #29
 80095e8:	d001      	beq.n	80095ee <__sflush_r+0xb2>
 80095ea:	2b16      	cmp	r3, #22
 80095ec:	d101      	bne.n	80095f2 <__sflush_r+0xb6>
 80095ee:	602f      	str	r7, [r5, #0]
 80095f0:	e7b1      	b.n	8009556 <__sflush_r+0x1a>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095f8:	81a3      	strh	r3, [r4, #12]
 80095fa:	e7ad      	b.n	8009558 <__sflush_r+0x1c>
 80095fc:	690f      	ldr	r7, [r1, #16]
 80095fe:	2f00      	cmp	r7, #0
 8009600:	d0a9      	beq.n	8009556 <__sflush_r+0x1a>
 8009602:	0793      	lsls	r3, r2, #30
 8009604:	680e      	ldr	r6, [r1, #0]
 8009606:	bf08      	it	eq
 8009608:	694b      	ldreq	r3, [r1, #20]
 800960a:	600f      	str	r7, [r1, #0]
 800960c:	bf18      	it	ne
 800960e:	2300      	movne	r3, #0
 8009610:	eba6 0807 	sub.w	r8, r6, r7
 8009614:	608b      	str	r3, [r1, #8]
 8009616:	f1b8 0f00 	cmp.w	r8, #0
 800961a:	dd9c      	ble.n	8009556 <__sflush_r+0x1a>
 800961c:	6a21      	ldr	r1, [r4, #32]
 800961e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009620:	4643      	mov	r3, r8
 8009622:	463a      	mov	r2, r7
 8009624:	4628      	mov	r0, r5
 8009626:	47b0      	blx	r6
 8009628:	2800      	cmp	r0, #0
 800962a:	dc06      	bgt.n	800963a <__sflush_r+0xfe>
 800962c:	89a3      	ldrh	r3, [r4, #12]
 800962e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009632:	81a3      	strh	r3, [r4, #12]
 8009634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009638:	e78e      	b.n	8009558 <__sflush_r+0x1c>
 800963a:	4407      	add	r7, r0
 800963c:	eba8 0800 	sub.w	r8, r8, r0
 8009640:	e7e9      	b.n	8009616 <__sflush_r+0xda>
 8009642:	bf00      	nop
 8009644:	dfbffffe 	.word	0xdfbffffe

08009648 <_fflush_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	690b      	ldr	r3, [r1, #16]
 800964c:	4605      	mov	r5, r0
 800964e:	460c      	mov	r4, r1
 8009650:	b913      	cbnz	r3, 8009658 <_fflush_r+0x10>
 8009652:	2500      	movs	r5, #0
 8009654:	4628      	mov	r0, r5
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	b118      	cbz	r0, 8009662 <_fflush_r+0x1a>
 800965a:	6a03      	ldr	r3, [r0, #32]
 800965c:	b90b      	cbnz	r3, 8009662 <_fflush_r+0x1a>
 800965e:	f7ff fb0f 	bl	8008c80 <__sinit>
 8009662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d0f3      	beq.n	8009652 <_fflush_r+0xa>
 800966a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800966c:	07d0      	lsls	r0, r2, #31
 800966e:	d404      	bmi.n	800967a <_fflush_r+0x32>
 8009670:	0599      	lsls	r1, r3, #22
 8009672:	d402      	bmi.n	800967a <_fflush_r+0x32>
 8009674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009676:	f7ff fbec 	bl	8008e52 <__retarget_lock_acquire_recursive>
 800967a:	4628      	mov	r0, r5
 800967c:	4621      	mov	r1, r4
 800967e:	f7ff ff5d 	bl	800953c <__sflush_r>
 8009682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009684:	07da      	lsls	r2, r3, #31
 8009686:	4605      	mov	r5, r0
 8009688:	d4e4      	bmi.n	8009654 <_fflush_r+0xc>
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	059b      	lsls	r3, r3, #22
 800968e:	d4e1      	bmi.n	8009654 <_fflush_r+0xc>
 8009690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009692:	f7ff fbdf 	bl	8008e54 <__retarget_lock_release_recursive>
 8009696:	e7dd      	b.n	8009654 <_fflush_r+0xc>

08009698 <__malloc_lock>:
 8009698:	4801      	ldr	r0, [pc, #4]	; (80096a0 <__malloc_lock+0x8>)
 800969a:	f7ff bbda 	b.w	8008e52 <__retarget_lock_acquire_recursive>
 800969e:	bf00      	nop
 80096a0:	20004850 	.word	0x20004850

080096a4 <__malloc_unlock>:
 80096a4:	4801      	ldr	r0, [pc, #4]	; (80096ac <__malloc_unlock+0x8>)
 80096a6:	f7ff bbd5 	b.w	8008e54 <__retarget_lock_release_recursive>
 80096aa:	bf00      	nop
 80096ac:	20004850 	.word	0x20004850

080096b0 <__sread>:
 80096b0:	b510      	push	{r4, lr}
 80096b2:	460c      	mov	r4, r1
 80096b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b8:	f000 f978 	bl	80099ac <_read_r>
 80096bc:	2800      	cmp	r0, #0
 80096be:	bfab      	itete	ge
 80096c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096c2:	89a3      	ldrhlt	r3, [r4, #12]
 80096c4:	181b      	addge	r3, r3, r0
 80096c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096ca:	bfac      	ite	ge
 80096cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80096ce:	81a3      	strhlt	r3, [r4, #12]
 80096d0:	bd10      	pop	{r4, pc}

080096d2 <__swrite>:
 80096d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096d6:	461f      	mov	r7, r3
 80096d8:	898b      	ldrh	r3, [r1, #12]
 80096da:	05db      	lsls	r3, r3, #23
 80096dc:	4605      	mov	r5, r0
 80096de:	460c      	mov	r4, r1
 80096e0:	4616      	mov	r6, r2
 80096e2:	d505      	bpl.n	80096f0 <__swrite+0x1e>
 80096e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e8:	2302      	movs	r3, #2
 80096ea:	2200      	movs	r2, #0
 80096ec:	f000 f94c 	bl	8009988 <_lseek_r>
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096fa:	81a3      	strh	r3, [r4, #12]
 80096fc:	4632      	mov	r2, r6
 80096fe:	463b      	mov	r3, r7
 8009700:	4628      	mov	r0, r5
 8009702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009706:	f000 b973 	b.w	80099f0 <_write_r>

0800970a <__sseek>:
 800970a:	b510      	push	{r4, lr}
 800970c:	460c      	mov	r4, r1
 800970e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009712:	f000 f939 	bl	8009988 <_lseek_r>
 8009716:	1c43      	adds	r3, r0, #1
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	bf15      	itete	ne
 800971c:	6560      	strne	r0, [r4, #84]	; 0x54
 800971e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009722:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009726:	81a3      	strheq	r3, [r4, #12]
 8009728:	bf18      	it	ne
 800972a:	81a3      	strhne	r3, [r4, #12]
 800972c:	bd10      	pop	{r4, pc}

0800972e <__sclose>:
 800972e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009732:	f000 b8f7 	b.w	8009924 <_close_r>

08009736 <__swbuf_r>:
 8009736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009738:	460e      	mov	r6, r1
 800973a:	4614      	mov	r4, r2
 800973c:	4605      	mov	r5, r0
 800973e:	b118      	cbz	r0, 8009748 <__swbuf_r+0x12>
 8009740:	6a03      	ldr	r3, [r0, #32]
 8009742:	b90b      	cbnz	r3, 8009748 <__swbuf_r+0x12>
 8009744:	f7ff fa9c 	bl	8008c80 <__sinit>
 8009748:	69a3      	ldr	r3, [r4, #24]
 800974a:	60a3      	str	r3, [r4, #8]
 800974c:	89a3      	ldrh	r3, [r4, #12]
 800974e:	071a      	lsls	r2, r3, #28
 8009750:	d525      	bpl.n	800979e <__swbuf_r+0x68>
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	b31b      	cbz	r3, 800979e <__swbuf_r+0x68>
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	6922      	ldr	r2, [r4, #16]
 800975a:	1a98      	subs	r0, r3, r2
 800975c:	6963      	ldr	r3, [r4, #20]
 800975e:	b2f6      	uxtb	r6, r6
 8009760:	4283      	cmp	r3, r0
 8009762:	4637      	mov	r7, r6
 8009764:	dc04      	bgt.n	8009770 <__swbuf_r+0x3a>
 8009766:	4621      	mov	r1, r4
 8009768:	4628      	mov	r0, r5
 800976a:	f7ff ff6d 	bl	8009648 <_fflush_r>
 800976e:	b9e0      	cbnz	r0, 80097aa <__swbuf_r+0x74>
 8009770:	68a3      	ldr	r3, [r4, #8]
 8009772:	3b01      	subs	r3, #1
 8009774:	60a3      	str	r3, [r4, #8]
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	1c5a      	adds	r2, r3, #1
 800977a:	6022      	str	r2, [r4, #0]
 800977c:	701e      	strb	r6, [r3, #0]
 800977e:	6962      	ldr	r2, [r4, #20]
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	429a      	cmp	r2, r3
 8009784:	d004      	beq.n	8009790 <__swbuf_r+0x5a>
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	07db      	lsls	r3, r3, #31
 800978a:	d506      	bpl.n	800979a <__swbuf_r+0x64>
 800978c:	2e0a      	cmp	r6, #10
 800978e:	d104      	bne.n	800979a <__swbuf_r+0x64>
 8009790:	4621      	mov	r1, r4
 8009792:	4628      	mov	r0, r5
 8009794:	f7ff ff58 	bl	8009648 <_fflush_r>
 8009798:	b938      	cbnz	r0, 80097aa <__swbuf_r+0x74>
 800979a:	4638      	mov	r0, r7
 800979c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800979e:	4621      	mov	r1, r4
 80097a0:	4628      	mov	r0, r5
 80097a2:	f000 f805 	bl	80097b0 <__swsetup_r>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d0d5      	beq.n	8009756 <__swbuf_r+0x20>
 80097aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80097ae:	e7f4      	b.n	800979a <__swbuf_r+0x64>

080097b0 <__swsetup_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	4b2a      	ldr	r3, [pc, #168]	; (800985c <__swsetup_r+0xac>)
 80097b4:	4605      	mov	r5, r0
 80097b6:	6818      	ldr	r0, [r3, #0]
 80097b8:	460c      	mov	r4, r1
 80097ba:	b118      	cbz	r0, 80097c4 <__swsetup_r+0x14>
 80097bc:	6a03      	ldr	r3, [r0, #32]
 80097be:	b90b      	cbnz	r3, 80097c4 <__swsetup_r+0x14>
 80097c0:	f7ff fa5e 	bl	8008c80 <__sinit>
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097ca:	0718      	lsls	r0, r3, #28
 80097cc:	d422      	bmi.n	8009814 <__swsetup_r+0x64>
 80097ce:	06d9      	lsls	r1, r3, #27
 80097d0:	d407      	bmi.n	80097e2 <__swsetup_r+0x32>
 80097d2:	2309      	movs	r3, #9
 80097d4:	602b      	str	r3, [r5, #0]
 80097d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097da:	81a3      	strh	r3, [r4, #12]
 80097dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097e0:	e034      	b.n	800984c <__swsetup_r+0x9c>
 80097e2:	0758      	lsls	r0, r3, #29
 80097e4:	d512      	bpl.n	800980c <__swsetup_r+0x5c>
 80097e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097e8:	b141      	cbz	r1, 80097fc <__swsetup_r+0x4c>
 80097ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097ee:	4299      	cmp	r1, r3
 80097f0:	d002      	beq.n	80097f8 <__swsetup_r+0x48>
 80097f2:	4628      	mov	r0, r5
 80097f4:	f000 f90e 	bl	8009a14 <_free_r>
 80097f8:	2300      	movs	r3, #0
 80097fa:	6363      	str	r3, [r4, #52]	; 0x34
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009802:	81a3      	strh	r3, [r4, #12]
 8009804:	2300      	movs	r3, #0
 8009806:	6063      	str	r3, [r4, #4]
 8009808:	6923      	ldr	r3, [r4, #16]
 800980a:	6023      	str	r3, [r4, #0]
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	f043 0308 	orr.w	r3, r3, #8
 8009812:	81a3      	strh	r3, [r4, #12]
 8009814:	6923      	ldr	r3, [r4, #16]
 8009816:	b94b      	cbnz	r3, 800982c <__swsetup_r+0x7c>
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800981e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009822:	d003      	beq.n	800982c <__swsetup_r+0x7c>
 8009824:	4621      	mov	r1, r4
 8009826:	4628      	mov	r0, r5
 8009828:	f000 f840 	bl	80098ac <__smakebuf_r>
 800982c:	89a0      	ldrh	r0, [r4, #12]
 800982e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009832:	f010 0301 	ands.w	r3, r0, #1
 8009836:	d00a      	beq.n	800984e <__swsetup_r+0x9e>
 8009838:	2300      	movs	r3, #0
 800983a:	60a3      	str	r3, [r4, #8]
 800983c:	6963      	ldr	r3, [r4, #20]
 800983e:	425b      	negs	r3, r3
 8009840:	61a3      	str	r3, [r4, #24]
 8009842:	6923      	ldr	r3, [r4, #16]
 8009844:	b943      	cbnz	r3, 8009858 <__swsetup_r+0xa8>
 8009846:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800984a:	d1c4      	bne.n	80097d6 <__swsetup_r+0x26>
 800984c:	bd38      	pop	{r3, r4, r5, pc}
 800984e:	0781      	lsls	r1, r0, #30
 8009850:	bf58      	it	pl
 8009852:	6963      	ldrpl	r3, [r4, #20]
 8009854:	60a3      	str	r3, [r4, #8]
 8009856:	e7f4      	b.n	8009842 <__swsetup_r+0x92>
 8009858:	2000      	movs	r0, #0
 800985a:	e7f7      	b.n	800984c <__swsetup_r+0x9c>
 800985c:	20000090 	.word	0x20000090

08009860 <__swhatbuf_r>:
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	460c      	mov	r4, r1
 8009864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009868:	2900      	cmp	r1, #0
 800986a:	b096      	sub	sp, #88	; 0x58
 800986c:	4615      	mov	r5, r2
 800986e:	461e      	mov	r6, r3
 8009870:	da0d      	bge.n	800988e <__swhatbuf_r+0x2e>
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009878:	f04f 0100 	mov.w	r1, #0
 800987c:	bf0c      	ite	eq
 800987e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009882:	2340      	movne	r3, #64	; 0x40
 8009884:	2000      	movs	r0, #0
 8009886:	6031      	str	r1, [r6, #0]
 8009888:	602b      	str	r3, [r5, #0]
 800988a:	b016      	add	sp, #88	; 0x58
 800988c:	bd70      	pop	{r4, r5, r6, pc}
 800988e:	466a      	mov	r2, sp
 8009890:	f000 f858 	bl	8009944 <_fstat_r>
 8009894:	2800      	cmp	r0, #0
 8009896:	dbec      	blt.n	8009872 <__swhatbuf_r+0x12>
 8009898:	9901      	ldr	r1, [sp, #4]
 800989a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800989e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80098a2:	4259      	negs	r1, r3
 80098a4:	4159      	adcs	r1, r3
 80098a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098aa:	e7eb      	b.n	8009884 <__swhatbuf_r+0x24>

080098ac <__smakebuf_r>:
 80098ac:	898b      	ldrh	r3, [r1, #12]
 80098ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098b0:	079d      	lsls	r5, r3, #30
 80098b2:	4606      	mov	r6, r0
 80098b4:	460c      	mov	r4, r1
 80098b6:	d507      	bpl.n	80098c8 <__smakebuf_r+0x1c>
 80098b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	6123      	str	r3, [r4, #16]
 80098c0:	2301      	movs	r3, #1
 80098c2:	6163      	str	r3, [r4, #20]
 80098c4:	b002      	add	sp, #8
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	ab01      	add	r3, sp, #4
 80098ca:	466a      	mov	r2, sp
 80098cc:	f7ff ffc8 	bl	8009860 <__swhatbuf_r>
 80098d0:	9900      	ldr	r1, [sp, #0]
 80098d2:	4605      	mov	r5, r0
 80098d4:	4630      	mov	r0, r6
 80098d6:	f7ff fc21 	bl	800911c <_malloc_r>
 80098da:	b948      	cbnz	r0, 80098f0 <__smakebuf_r+0x44>
 80098dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e0:	059a      	lsls	r2, r3, #22
 80098e2:	d4ef      	bmi.n	80098c4 <__smakebuf_r+0x18>
 80098e4:	f023 0303 	bic.w	r3, r3, #3
 80098e8:	f043 0302 	orr.w	r3, r3, #2
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	e7e3      	b.n	80098b8 <__smakebuf_r+0xc>
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	6020      	str	r0, [r4, #0]
 80098f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f8:	81a3      	strh	r3, [r4, #12]
 80098fa:	9b00      	ldr	r3, [sp, #0]
 80098fc:	6163      	str	r3, [r4, #20]
 80098fe:	9b01      	ldr	r3, [sp, #4]
 8009900:	6120      	str	r0, [r4, #16]
 8009902:	b15b      	cbz	r3, 800991c <__smakebuf_r+0x70>
 8009904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009908:	4630      	mov	r0, r6
 800990a:	f000 f82d 	bl	8009968 <_isatty_r>
 800990e:	b128      	cbz	r0, 800991c <__smakebuf_r+0x70>
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	f023 0303 	bic.w	r3, r3, #3
 8009916:	f043 0301 	orr.w	r3, r3, #1
 800991a:	81a3      	strh	r3, [r4, #12]
 800991c:	89a3      	ldrh	r3, [r4, #12]
 800991e:	431d      	orrs	r5, r3
 8009920:	81a5      	strh	r5, [r4, #12]
 8009922:	e7cf      	b.n	80098c4 <__smakebuf_r+0x18>

08009924 <_close_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4d06      	ldr	r5, [pc, #24]	; (8009940 <_close_r+0x1c>)
 8009928:	2300      	movs	r3, #0
 800992a:	4604      	mov	r4, r0
 800992c:	4608      	mov	r0, r1
 800992e:	602b      	str	r3, [r5, #0]
 8009930:	f7f8 fbc8 	bl	80020c4 <_close>
 8009934:	1c43      	adds	r3, r0, #1
 8009936:	d102      	bne.n	800993e <_close_r+0x1a>
 8009938:	682b      	ldr	r3, [r5, #0]
 800993a:	b103      	cbz	r3, 800993e <_close_r+0x1a>
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	bd38      	pop	{r3, r4, r5, pc}
 8009940:	2000485c 	.word	0x2000485c

08009944 <_fstat_r>:
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	4d07      	ldr	r5, [pc, #28]	; (8009964 <_fstat_r+0x20>)
 8009948:	2300      	movs	r3, #0
 800994a:	4604      	mov	r4, r0
 800994c:	4608      	mov	r0, r1
 800994e:	4611      	mov	r1, r2
 8009950:	602b      	str	r3, [r5, #0]
 8009952:	f7f8 fbbb 	bl	80020cc <_fstat>
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	d102      	bne.n	8009960 <_fstat_r+0x1c>
 800995a:	682b      	ldr	r3, [r5, #0]
 800995c:	b103      	cbz	r3, 8009960 <_fstat_r+0x1c>
 800995e:	6023      	str	r3, [r4, #0]
 8009960:	bd38      	pop	{r3, r4, r5, pc}
 8009962:	bf00      	nop
 8009964:	2000485c 	.word	0x2000485c

08009968 <_isatty_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4d06      	ldr	r5, [pc, #24]	; (8009984 <_isatty_r+0x1c>)
 800996c:	2300      	movs	r3, #0
 800996e:	4604      	mov	r4, r0
 8009970:	4608      	mov	r0, r1
 8009972:	602b      	str	r3, [r5, #0]
 8009974:	f7f8 fbb0 	bl	80020d8 <_isatty>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d102      	bne.n	8009982 <_isatty_r+0x1a>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	b103      	cbz	r3, 8009982 <_isatty_r+0x1a>
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	2000485c 	.word	0x2000485c

08009988 <_lseek_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4d07      	ldr	r5, [pc, #28]	; (80099a8 <_lseek_r+0x20>)
 800998c:	4604      	mov	r4, r0
 800998e:	4608      	mov	r0, r1
 8009990:	4611      	mov	r1, r2
 8009992:	2200      	movs	r2, #0
 8009994:	602a      	str	r2, [r5, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	f7f8 fba0 	bl	80020dc <_lseek>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d102      	bne.n	80099a6 <_lseek_r+0x1e>
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	b103      	cbz	r3, 80099a6 <_lseek_r+0x1e>
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	2000485c 	.word	0x2000485c

080099ac <_read_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	4d07      	ldr	r5, [pc, #28]	; (80099cc <_read_r+0x20>)
 80099b0:	4604      	mov	r4, r0
 80099b2:	4608      	mov	r0, r1
 80099b4:	4611      	mov	r1, r2
 80099b6:	2200      	movs	r2, #0
 80099b8:	602a      	str	r2, [r5, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	f7f8 fb66 	bl	800208c <_read>
 80099c0:	1c43      	adds	r3, r0, #1
 80099c2:	d102      	bne.n	80099ca <_read_r+0x1e>
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	b103      	cbz	r3, 80099ca <_read_r+0x1e>
 80099c8:	6023      	str	r3, [r4, #0]
 80099ca:	bd38      	pop	{r3, r4, r5, pc}
 80099cc:	2000485c 	.word	0x2000485c

080099d0 <_sbrk_r>:
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	4d06      	ldr	r5, [pc, #24]	; (80099ec <_sbrk_r+0x1c>)
 80099d4:	2300      	movs	r3, #0
 80099d6:	4604      	mov	r4, r0
 80099d8:	4608      	mov	r0, r1
 80099da:	602b      	str	r3, [r5, #0]
 80099dc:	f7f8 fb80 	bl	80020e0 <_sbrk>
 80099e0:	1c43      	adds	r3, r0, #1
 80099e2:	d102      	bne.n	80099ea <_sbrk_r+0x1a>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	b103      	cbz	r3, 80099ea <_sbrk_r+0x1a>
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	bd38      	pop	{r3, r4, r5, pc}
 80099ec:	2000485c 	.word	0x2000485c

080099f0 <_write_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4d07      	ldr	r5, [pc, #28]	; (8009a10 <_write_r+0x20>)
 80099f4:	4604      	mov	r4, r0
 80099f6:	4608      	mov	r0, r1
 80099f8:	4611      	mov	r1, r2
 80099fa:	2200      	movs	r2, #0
 80099fc:	602a      	str	r2, [r5, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	f7f8 fb52 	bl	80020a8 <_write>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d102      	bne.n	8009a0e <_write_r+0x1e>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	b103      	cbz	r3, 8009a0e <_write_r+0x1e>
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	2000485c 	.word	0x2000485c

08009a14 <_free_r>:
 8009a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a16:	2900      	cmp	r1, #0
 8009a18:	d044      	beq.n	8009aa4 <_free_r+0x90>
 8009a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a1e:	9001      	str	r0, [sp, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f1a1 0404 	sub.w	r4, r1, #4
 8009a26:	bfb8      	it	lt
 8009a28:	18e4      	addlt	r4, r4, r3
 8009a2a:	f7ff fe35 	bl	8009698 <__malloc_lock>
 8009a2e:	4a1e      	ldr	r2, [pc, #120]	; (8009aa8 <_free_r+0x94>)
 8009a30:	9801      	ldr	r0, [sp, #4]
 8009a32:	6813      	ldr	r3, [r2, #0]
 8009a34:	b933      	cbnz	r3, 8009a44 <_free_r+0x30>
 8009a36:	6063      	str	r3, [r4, #4]
 8009a38:	6014      	str	r4, [r2, #0]
 8009a3a:	b003      	add	sp, #12
 8009a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a40:	f7ff be30 	b.w	80096a4 <__malloc_unlock>
 8009a44:	42a3      	cmp	r3, r4
 8009a46:	d908      	bls.n	8009a5a <_free_r+0x46>
 8009a48:	6825      	ldr	r5, [r4, #0]
 8009a4a:	1961      	adds	r1, r4, r5
 8009a4c:	428b      	cmp	r3, r1
 8009a4e:	bf01      	itttt	eq
 8009a50:	6819      	ldreq	r1, [r3, #0]
 8009a52:	685b      	ldreq	r3, [r3, #4]
 8009a54:	1949      	addeq	r1, r1, r5
 8009a56:	6021      	streq	r1, [r4, #0]
 8009a58:	e7ed      	b.n	8009a36 <_free_r+0x22>
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	b10b      	cbz	r3, 8009a64 <_free_r+0x50>
 8009a60:	42a3      	cmp	r3, r4
 8009a62:	d9fa      	bls.n	8009a5a <_free_r+0x46>
 8009a64:	6811      	ldr	r1, [r2, #0]
 8009a66:	1855      	adds	r5, r2, r1
 8009a68:	42a5      	cmp	r5, r4
 8009a6a:	d10b      	bne.n	8009a84 <_free_r+0x70>
 8009a6c:	6824      	ldr	r4, [r4, #0]
 8009a6e:	4421      	add	r1, r4
 8009a70:	1854      	adds	r4, r2, r1
 8009a72:	42a3      	cmp	r3, r4
 8009a74:	6011      	str	r1, [r2, #0]
 8009a76:	d1e0      	bne.n	8009a3a <_free_r+0x26>
 8009a78:	681c      	ldr	r4, [r3, #0]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	6053      	str	r3, [r2, #4]
 8009a7e:	440c      	add	r4, r1
 8009a80:	6014      	str	r4, [r2, #0]
 8009a82:	e7da      	b.n	8009a3a <_free_r+0x26>
 8009a84:	d902      	bls.n	8009a8c <_free_r+0x78>
 8009a86:	230c      	movs	r3, #12
 8009a88:	6003      	str	r3, [r0, #0]
 8009a8a:	e7d6      	b.n	8009a3a <_free_r+0x26>
 8009a8c:	6825      	ldr	r5, [r4, #0]
 8009a8e:	1961      	adds	r1, r4, r5
 8009a90:	428b      	cmp	r3, r1
 8009a92:	bf04      	itt	eq
 8009a94:	6819      	ldreq	r1, [r3, #0]
 8009a96:	685b      	ldreq	r3, [r3, #4]
 8009a98:	6063      	str	r3, [r4, #4]
 8009a9a:	bf04      	itt	eq
 8009a9c:	1949      	addeq	r1, r1, r5
 8009a9e:	6021      	streq	r1, [r4, #0]
 8009aa0:	6054      	str	r4, [r2, #4]
 8009aa2:	e7ca      	b.n	8009a3a <_free_r+0x26>
 8009aa4:	b003      	add	sp, #12
 8009aa6:	bd30      	pop	{r4, r5, pc}
 8009aa8:	20004854 	.word	0x20004854

08009aac <_init>:
 8009aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aae:	bf00      	nop
 8009ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ab2:	bc08      	pop	{r3}
 8009ab4:	469e      	mov	lr, r3
 8009ab6:	4770      	bx	lr

08009ab8 <_fini>:
 8009ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aba:	bf00      	nop
 8009abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009abe:	bc08      	pop	{r3}
 8009ac0:	469e      	mov	lr, r3
 8009ac2:	4770      	bx	lr
