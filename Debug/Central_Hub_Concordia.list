
Central_Hub_Concordia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d07c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  0800d20c  0800d20c  0000e20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da30  0800da30  0000f0d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800da30  0800da30  0000ea30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da38  0800da38  0000f0d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da38  0800da38  0000ea38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da3c  0800da3c  0000ea3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800da40  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fa0  200000d8  0800db18  0000f0d8  2**2
                  ALLOC
 10 ._user_heap_stack 00005200  20006078  0800db18  00010078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f0d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e406  00000000  00000000  0000f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f87  00000000  00000000  0002d50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  00031498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015d3  00000000  00000000  000330b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ddfe  00000000  00000000  0003468b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002325a  00000000  00000000  00062489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c3e5  00000000  00000000  000856e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00191ac8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008050  00000000  00000000  00191b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00199b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d1f4 	.word	0x0800d1f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800d1f4 	.word	0x0800d1f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96a 	b.w	8000b68 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	460c      	mov	r4, r1
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d14e      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008b8:	4694      	mov	ip, r2
 80008ba:	458c      	cmp	ip, r1
 80008bc:	4686      	mov	lr, r0
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	d962      	bls.n	800098a <__udivmoddi4+0xde>
 80008c4:	b14a      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c6:	f1c2 0320 	rsb	r3, r2, #32
 80008ca:	4091      	lsls	r1, r2
 80008cc:	fa20 f303 	lsr.w	r3, r0, r3
 80008d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d4:	4319      	orrs	r1, r3
 80008d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008de:	fa1f f68c 	uxth.w	r6, ip
 80008e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ea:	fb07 1114 	mls	r1, r7, r4, r1
 80008ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f2:	fb04 f106 	mul.w	r1, r4, r6
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000902:	f080 8112 	bcs.w	8000b2a <__udivmoddi4+0x27e>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 810f 	bls.w	8000b2a <__udivmoddi4+0x27e>
 800090c:	3c02      	subs	r4, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a59      	subs	r1, r3, r1
 8000912:	fa1f f38e 	uxth.w	r3, lr
 8000916:	fbb1 f0f7 	udiv	r0, r1, r7
 800091a:	fb07 1110 	mls	r1, r7, r0, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb00 f606 	mul.w	r6, r0, r6
 8000926:	429e      	cmp	r6, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x94>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000932:	f080 80fc 	bcs.w	8000b2e <__udivmoddi4+0x282>
 8000936:	429e      	cmp	r6, r3
 8000938:	f240 80f9 	bls.w	8000b2e <__udivmoddi4+0x282>
 800093c:	4463      	add	r3, ip
 800093e:	3802      	subs	r0, #2
 8000940:	1b9b      	subs	r3, r3, r6
 8000942:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000946:	2100      	movs	r1, #0
 8000948:	b11d      	cbz	r5, 8000952 <__udivmoddi4+0xa6>
 800094a:	40d3      	lsrs	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	e9c5 3200 	strd	r3, r2, [r5]
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d905      	bls.n	8000966 <__udivmoddi4+0xba>
 800095a:	b10d      	cbz	r5, 8000960 <__udivmoddi4+0xb4>
 800095c:	e9c5 0100 	strd	r0, r1, [r5]
 8000960:	2100      	movs	r1, #0
 8000962:	4608      	mov	r0, r1
 8000964:	e7f5      	b.n	8000952 <__udivmoddi4+0xa6>
 8000966:	fab3 f183 	clz	r1, r3
 800096a:	2900      	cmp	r1, #0
 800096c:	d146      	bne.n	80009fc <__udivmoddi4+0x150>
 800096e:	42a3      	cmp	r3, r4
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xcc>
 8000972:	4290      	cmp	r0, r2
 8000974:	f0c0 80f0 	bcc.w	8000b58 <__udivmoddi4+0x2ac>
 8000978:	1a86      	subs	r6, r0, r2
 800097a:	eb64 0303 	sbc.w	r3, r4, r3
 800097e:	2001      	movs	r0, #1
 8000980:	2d00      	cmp	r5, #0
 8000982:	d0e6      	beq.n	8000952 <__udivmoddi4+0xa6>
 8000984:	e9c5 6300 	strd	r6, r3, [r5]
 8000988:	e7e3      	b.n	8000952 <__udivmoddi4+0xa6>
 800098a:	2a00      	cmp	r2, #0
 800098c:	f040 8090 	bne.w	8000ab0 <__udivmoddi4+0x204>
 8000990:	eba1 040c 	sub.w	r4, r1, ip
 8000994:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000998:	fa1f f78c 	uxth.w	r7, ip
 800099c:	2101      	movs	r1, #1
 800099e:	fbb4 f6f8 	udiv	r6, r4, r8
 80009a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009a6:	fb08 4416 	mls	r4, r8, r6, r4
 80009aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ae:	fb07 f006 	mul.w	r0, r7, r6
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x11c>
 80009b6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x11a>
 80009c0:	4298      	cmp	r0, r3
 80009c2:	f200 80cd 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 80009c6:	4626      	mov	r6, r4
 80009c8:	1a1c      	subs	r4, r3, r0
 80009ca:	fa1f f38e 	uxth.w	r3, lr
 80009ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80009d2:	fb08 4410 	mls	r4, r8, r0, r4
 80009d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009da:	fb00 f707 	mul.w	r7, r0, r7
 80009de:	429f      	cmp	r7, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x148>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009ea:	d202      	bcs.n	80009f2 <__udivmoddi4+0x146>
 80009ec:	429f      	cmp	r7, r3
 80009ee:	f200 80b0 	bhi.w	8000b52 <__udivmoddi4+0x2a6>
 80009f2:	4620      	mov	r0, r4
 80009f4:	1bdb      	subs	r3, r3, r7
 80009f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fa:	e7a5      	b.n	8000948 <__udivmoddi4+0x9c>
 80009fc:	f1c1 0620 	rsb	r6, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 f706 	lsr.w	r7, r2, r6
 8000a06:	431f      	orrs	r7, r3
 8000a08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a10:	ea43 030c 	orr.w	r3, r3, ip
 8000a14:	40f4      	lsrs	r4, r6
 8000a16:	fa00 f801 	lsl.w	r8, r0, r1
 8000a1a:	0c38      	lsrs	r0, r7, #16
 8000a1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a20:	fbb4 fef0 	udiv	lr, r4, r0
 8000a24:	fa1f fc87 	uxth.w	ip, r7
 8000a28:	fb00 441e 	mls	r4, r0, lr, r4
 8000a2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a30:	fb0e f90c 	mul.w	r9, lr, ip
 8000a34:	45a1      	cmp	r9, r4
 8000a36:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3a:	d90a      	bls.n	8000a52 <__udivmoddi4+0x1a6>
 8000a3c:	193c      	adds	r4, r7, r4
 8000a3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a42:	f080 8084 	bcs.w	8000b4e <__udivmoddi4+0x2a2>
 8000a46:	45a1      	cmp	r9, r4
 8000a48:	f240 8081 	bls.w	8000b4e <__udivmoddi4+0x2a2>
 8000a4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a50:	443c      	add	r4, r7
 8000a52:	eba4 0409 	sub.w	r4, r4, r9
 8000a56:	fa1f f983 	uxth.w	r9, r3
 8000a5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a6a:	45a4      	cmp	ip, r4
 8000a6c:	d907      	bls.n	8000a7e <__udivmoddi4+0x1d2>
 8000a6e:	193c      	adds	r4, r7, r4
 8000a70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a74:	d267      	bcs.n	8000b46 <__udivmoddi4+0x29a>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	d965      	bls.n	8000b46 <__udivmoddi4+0x29a>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	443c      	add	r4, r7
 8000a7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a82:	fba0 9302 	umull	r9, r3, r0, r2
 8000a86:	eba4 040c 	sub.w	r4, r4, ip
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	46ce      	mov	lr, r9
 8000a8e:	469c      	mov	ip, r3
 8000a90:	d351      	bcc.n	8000b36 <__udivmoddi4+0x28a>
 8000a92:	d04e      	beq.n	8000b32 <__udivmoddi4+0x286>
 8000a94:	b155      	cbz	r5, 8000aac <__udivmoddi4+0x200>
 8000a96:	ebb8 030e 	subs.w	r3, r8, lr
 8000a9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000aa2:	40cb      	lsrs	r3, r1
 8000aa4:	431e      	orrs	r6, r3
 8000aa6:	40cc      	lsrs	r4, r1
 8000aa8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aac:	2100      	movs	r1, #0
 8000aae:	e750      	b.n	8000952 <__udivmoddi4+0xa6>
 8000ab0:	f1c2 0320 	rsb	r3, r2, #32
 8000ab4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000abc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	430c      	orrs	r4, r1
 8000ac4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000acc:	fa1f f78c 	uxth.w	r7, ip
 8000ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f107 	mul.w	r1, r0, r7
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x24c>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aee:	d22c      	bcs.n	8000b4a <__udivmoddi4+0x29e>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	d92a      	bls.n	8000b4a <__udivmoddi4+0x29e>
 8000af4:	3802      	subs	r0, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	1a5b      	subs	r3, r3, r1
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b00:	fb08 3311 	mls	r3, r8, r1, r3
 8000b04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b08:	fb01 f307 	mul.w	r3, r1, r7
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x276>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b18:	d213      	bcs.n	8000b42 <__udivmoddi4+0x296>
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	d911      	bls.n	8000b42 <__udivmoddi4+0x296>
 8000b1e:	3902      	subs	r1, #2
 8000b20:	4464      	add	r4, ip
 8000b22:	1ae4      	subs	r4, r4, r3
 8000b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b28:	e739      	b.n	800099e <__udivmoddi4+0xf2>
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	e6f0      	b.n	8000910 <__udivmoddi4+0x64>
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e706      	b.n	8000940 <__udivmoddi4+0x94>
 8000b32:	45c8      	cmp	r8, r9
 8000b34:	d2ae      	bcs.n	8000a94 <__udivmoddi4+0x1e8>
 8000b36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b3e:	3801      	subs	r0, #1
 8000b40:	e7a8      	b.n	8000a94 <__udivmoddi4+0x1e8>
 8000b42:	4631      	mov	r1, r6
 8000b44:	e7ed      	b.n	8000b22 <__udivmoddi4+0x276>
 8000b46:	4603      	mov	r3, r0
 8000b48:	e799      	b.n	8000a7e <__udivmoddi4+0x1d2>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e7d4      	b.n	8000af8 <__udivmoddi4+0x24c>
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	e77f      	b.n	8000a52 <__udivmoddi4+0x1a6>
 8000b52:	4463      	add	r3, ip
 8000b54:	3802      	subs	r0, #2
 8000b56:	e74d      	b.n	80009f4 <__udivmoddi4+0x148>
 8000b58:	4606      	mov	r6, r0
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e70f      	b.n	8000980 <__udivmoddi4+0xd4>
 8000b60:	3e02      	subs	r6, #2
 8000b62:	4463      	add	r3, ip
 8000b64:	e730      	b.n	80009c8 <__udivmoddi4+0x11c>
 8000b66:	bf00      	nop

08000b68 <__aeabi_idiv0>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	db0b      	blt.n	8000bb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f003 021f 	and.w	r2, r3, #31
 8000ba0:	4907      	ldr	r1, [pc, #28]	@ (8000bc0 <__NVIC_EnableIRQ+0x38>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	095b      	lsrs	r3, r3, #5
 8000ba8:	2001      	movs	r0, #1
 8000baa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db12      	blt.n	8000bfc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	490a      	ldr	r1, [pc, #40]	@ (8000c08 <__NVIC_DisableIRQ+0x44>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	3320      	adds	r3, #32
 8000bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bf0:	f3bf 8f4f 	dsb	sy
}
 8000bf4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bf6:	f3bf 8f6f 	isb	sy
}
 8000bfa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	@ (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	@ (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	@ 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f043 0201 	orr.w	r2, r3, #1
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	601a      	str	r2, [r3, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 0201 	bic.w	r2, r3, #1
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	601a      	str	r2, [r3, #0]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	601a      	str	r2, [r3, #0]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8000d38:	f023 0307 	bic.w	r3, r3, #7
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	609a      	str	r2, [r3, #8]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	431a      	orrs	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	605a      	str	r2, [r3, #4]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	609a      	str	r2, [r3, #8]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	f043 0201 	orr.w	r2, r3, #1
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60da      	str	r2, [r3, #12]
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dc2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000dc4:	4907      	ldr	r1, [pc, #28]	@ (8000de4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000dcc:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	40021000 	.word	0x40021000

08000de8 <start_recording_from_mic>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void start_recording_from_mic(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	if (!recording_audio){
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <start_recording_from_mic+0x50>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d11f      	bne.n	8000e34 <start_recording_from_mic+0x4c>
		printf("Starting Recording Process\r\n");
 8000df4:	4811      	ldr	r0, [pc, #68]	@ (8000e3c <start_recording_from_mic+0x54>)
 8000df6:	f00b fb87 	bl	800c508 <puts>
		if (f_open(&file, "recording1.wav", FA_WRITE | FA_CREATE_ALWAYS) != FR_OK) {
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	4910      	ldr	r1, [pc, #64]	@ (8000e40 <start_recording_from_mic+0x58>)
 8000dfe:	4811      	ldr	r0, [pc, #68]	@ (8000e44 <start_recording_from_mic+0x5c>)
 8000e00:	f00a fae4 	bl	800b3cc <f_open>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <start_recording_from_mic+0x28>
			printf("Error opening file for writing.\n\r");
 8000e0a:	480f      	ldr	r0, [pc, #60]	@ (8000e48 <start_recording_from_mic+0x60>)
 8000e0c:	f00b fb14 	bl	800c438 <iprintf>
		}
		if (f_write(&file, header_data, sizeof(header_data), &bytesWritten) != FR_OK) {
 8000e10:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <start_recording_from_mic+0x64>)
 8000e12:	222c      	movs	r2, #44	@ 0x2c
 8000e14:	490e      	ldr	r1, [pc, #56]	@ (8000e50 <start_recording_from_mic+0x68>)
 8000e16:	480b      	ldr	r0, [pc, #44]	@ (8000e44 <start_recording_from_mic+0x5c>)
 8000e18:	f00a fdff 	bl	800ba1a <f_write>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <start_recording_from_mic+0x40>
			printf("Error writing header to file.\n");
 8000e22:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <start_recording_from_mic+0x6c>)
 8000e24:	f00b fb70 	bl	800c508 <puts>
		}
		recording_audio = 1;
 8000e28:	4b03      	ldr	r3, [pc, #12]	@ (8000e38 <start_recording_from_mic+0x50>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]
		start_recording_process = 0;
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <start_recording_from_mic+0x70>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
	}
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000514 	.word	0x20000514
 8000e3c:	0800d2a0 	.word	0x0800d2a0
 8000e40:	0800d2bc 	.word	0x0800d2bc
 8000e44:	20004c38 	.word	0x20004c38
 8000e48:	0800d2cc 	.word	0x0800d2cc
 8000e4c:	20003bf8 	.word	0x20003bf8
 8000e50:	20000000 	.word	0x20000000
 8000e54:	0800d2f0 	.word	0x0800d2f0
 8000e58:	20002c34 	.word	0x20002c34

08000e5c <start_audio_playback>:
void start_audio_playback(){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	if (!audio_playing){
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <start_audio_playback+0x50>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d11e      	bne.n	8000ea6 <start_audio_playback+0x4a>
		open_SD_card_song(recordingPath);
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <start_audio_playback+0x54>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f903 	bl	8001078 <open_SD_card_song>
		read_SD_card_song_initial();
 8000e72:	f000 f8a3 	bl	8000fbc <read_SD_card_song_initial>
		printf("Starting Playback \r\n");
 8000e76:	480f      	ldr	r0, [pc, #60]	@ (8000eb4 <start_audio_playback+0x58>)
 8000e78:	f00b fb46 	bl	800c508 <puts>
		audio_playing = 1;
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <start_audio_playback+0x50>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
		start_playback_process = 0;
 8000e82:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <start_audio_playback+0x5c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
		song_length_total = song_length;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <start_audio_playback+0x60>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec0 <start_audio_playback+0x64>)
 8000e8e:	6013      	str	r3, [r2, #0]
		LL_TIM_EnableIT_UPDATE(TIM2);
 8000e90:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000e94:	f7ff ff7f 	bl	8000d96 <LL_TIM_EnableIT_UPDATE>
		LL_TIM_EnableCounter(TIM2);
 8000e98:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000e9c:	f7ff ff13 	bl	8000cc6 <LL_TIM_EnableCounter>
		NVIC_EnableIRQ(TIM2_IRQn);
 8000ea0:	201c      	movs	r0, #28
 8000ea2:	f7ff fe71 	bl	8000b88 <__NVIC_EnableIRQ>
	}
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20002c3c 	.word	0x20002c3c
 8000eb0:	20000034 	.word	0x20000034
 8000eb4:	0800d310 	.word	0x0800d310
 8000eb8:	20003bf0 	.word	0x20003bf0
 8000ebc:	20002c40 	.word	0x20002c40
 8000ec0:	20002c44 	.word	0x20002c44

08000ec4 <mount_SD_card>:
void mount_SD_card(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

    //Mount the SD Card
	fres = f_mount(&FatFs, "", 1);    //1=mount now
 8000eca:	2201      	movs	r2, #1
 8000ecc:	492a      	ldr	r1, [pc, #168]	@ (8000f78 <mount_SD_card+0xb4>)
 8000ece:	482b      	ldr	r0, [pc, #172]	@ (8000f7c <mount_SD_card+0xb8>)
 8000ed0:	f00a fa36 	bl	800b340 <f_mount>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b29      	ldr	r3, [pc, #164]	@ (8000f80 <mount_SD_card+0xbc>)
 8000eda:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8000edc:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <mount_SD_card+0xbc>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d006      	beq.n	8000ef2 <mount_SD_card+0x2e>
		printf("No SD Card found : (%i)\r\n", fres);
 8000ee4:	4b26      	ldr	r3, [pc, #152]	@ (8000f80 <mount_SD_card+0xbc>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4826      	ldr	r0, [pc, #152]	@ (8000f84 <mount_SD_card+0xc0>)
 8000eec:	f00b faa4 	bl	800c438 <iprintf>
 8000ef0:	e03f      	b.n	8000f72 <mount_SD_card+0xae>
        return;
	}
	printf("SD Card Mounted Successfully\r\n");
 8000ef2:	4825      	ldr	r0, [pc, #148]	@ (8000f88 <mount_SD_card+0xc4>)
 8000ef4:	f00b fb08 	bl	800c508 <puts>

    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;

    f_getfree("", &fre_clust, &pfs);
 8000ef8:	1d3a      	adds	r2, r7, #4
 8000efa:	463b      	mov	r3, r7
 8000efc:	4619      	mov	r1, r3
 8000efe:	481e      	ldr	r0, [pc, #120]	@ (8000f78 <mount_SD_card+0xb4>)
 8000f00:	f00b f800 	bl	800bf04 <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	8952      	ldrh	r2, [r2, #10]
 8000f0e:	fb02 f303 	mul.w	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fc18 	bl	8000748 <__aeabi_ui2d>
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <mount_SD_card+0xc8>)
 8000f1e:	f7ff f9a7 	bl	8000270 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4610      	mov	r0, r2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f7ff fc87 	bl	800083c <__aeabi_d2uiz>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a17      	ldr	r2, [pc, #92]	@ (8000f90 <mount_SD_card+0xcc>)
 8000f32:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	895b      	ldrh	r3, [r3, #10]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fc01 	bl	8000748 <__aeabi_ui2d>
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <mount_SD_card+0xc8>)
 8000f4c:	f7ff f990 	bl	8000270 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f7ff fc70 	bl	800083c <__aeabi_d2uiz>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <mount_SD_card+0xd0>)
 8000f60:	6013      	str	r3, [r2, #0]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\r\n", totalSpace, freeSpace);
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <mount_SD_card+0xcc>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a0b      	ldr	r2, [pc, #44]	@ (8000f94 <mount_SD_card+0xd0>)
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480a      	ldr	r0, [pc, #40]	@ (8000f98 <mount_SD_card+0xd4>)
 8000f6e:	f00b fa63 	bl	800c438 <iprintf>

}
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	0800d20c 	.word	0x0800d20c
 8000f7c:	20003bfc 	.word	0x20003bfc
 8000f80:	20004c34 	.word	0x20004c34
 8000f84:	0800d324 	.word	0x0800d324
 8000f88:	0800d340 	.word	0x0800d340
 8000f8c:	3fe00000 	.word	0x3fe00000
 8000f90:	20005c68 	.word	0x20005c68
 8000f94:	20005c6c 	.word	0x20005c6c
 8000f98:	0800d360 	.word	0x0800d360

08000f9c <unmount_SD_card>:

void unmount_SD_card(void){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4904      	ldr	r1, [pc, #16]	@ (8000fb4 <unmount_SD_card+0x18>)
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f00a f9cb 	bl	800b340 <f_mount>
	printf("SD Card Unmounted Successfully\r\n");
 8000faa:	4803      	ldr	r0, [pc, #12]	@ (8000fb8 <unmount_SD_card+0x1c>)
 8000fac:	f00b faac 	bl	800c508 <puts>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	0800d20c 	.word	0x0800d20c
 8000fb8:	0800d390 	.word	0x0800d390

08000fbc <read_SD_card_song_initial>:

void read_SD_card_song_initial(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    if (f_read(&file, &playback_buffer[0], AUDIO_BUFFER_SIZE*2*2, &bytesRead) == FR_OK) {
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <read_SD_card_song_initial+0x40>)
 8000fc2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000fc6:	490e      	ldr	r1, [pc, #56]	@ (8001000 <read_SD_card_song_initial+0x44>)
 8000fc8:	480e      	ldr	r0, [pc, #56]	@ (8001004 <read_SD_card_song_initial+0x48>)
 8000fca:	f00a fbc7 	bl	800b75c <f_read>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d110      	bne.n	8000ff6 <read_SD_card_song_initial+0x3a>
            // Check if the expected number of bytes were read
    	if (bytesRead == AUDIO_BUFFER_SIZE*2*2) {
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <read_SD_card_song_initial+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000fdc:	d10b      	bne.n	8000ff6 <read_SD_card_song_initial+0x3a>
            	printf("Audio Loaded, %d bytes.\r\n", bytesRead);
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <read_SD_card_song_initial+0x40>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4808      	ldr	r0, [pc, #32]	@ (8001008 <read_SD_card_song_initial+0x4c>)
 8000fe6:	f00b fa27 	bl	800c438 <iprintf>
            	audio_position += AUDIO_BUFFER_SIZE*2*2;
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <read_SD_card_song_initial+0x50>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f503 637a 	add.w	r3, r3, #4000	@ 0xfa0
 8000ff2:	4a06      	ldr	r2, [pc, #24]	@ (800100c <read_SD_card_song_initial+0x50>)
 8000ff4:	6013      	str	r3, [r2, #0]
    	} else {
                // Handle the case where not all bytes were read
    	}
	}

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20003bf4 	.word	0x20003bf4
 8001000:	20002c50 	.word	0x20002c50
 8001004:	20004c38 	.word	0x20004c38
 8001008:	0800d3b0 	.word	0x0800d3b0
 800100c:	2000002c 	.word	0x2000002c

08001010 <read_SD_card_song_at_position>:

void read_SD_card_song_at_position(int buffer_position){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	if ( audio_position + AUDIO_BUFFER_SIZE * 2 <= song_length_total){
 8001018:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <read_SD_card_song_at_position+0x50>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f203 72cf 	addw	r2, r3, #1999	@ 0x7cf
 8001020:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <read_SD_card_song_at_position+0x54>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	da17      	bge.n	8001058 <read_SD_card_song_at_position+0x48>
		if (f_read(&file, &playback_buffer[buffer_position], bytes_to_read, &bytesRead) == FR_OK) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <read_SD_card_song_at_position+0x58>)
 800102e:	1899      	adds	r1, r3, r2
 8001030:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <read_SD_card_song_at_position+0x5c>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <read_SD_card_song_at_position+0x60>)
 8001036:	480f      	ldr	r0, [pc, #60]	@ (8001074 <read_SD_card_song_at_position+0x64>)
 8001038:	f00a fb90 	bl	800b75c <f_read>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10a      	bne.n	8001058 <read_SD_card_song_at_position+0x48>
						// Check if the expected number of bytes were read
			if (bytesRead == AUDIO_BUFFER_SIZE * 2) {
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <read_SD_card_song_at_position+0x60>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800104a:	d105      	bne.n	8001058 <read_SD_card_song_at_position+0x48>
				audio_position += AUDIO_BUFFER_SIZE*2;
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <read_SD_card_song_at_position+0x50>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001054:	4a02      	ldr	r2, [pc, #8]	@ (8001060 <read_SD_card_song_at_position+0x50>)
 8001056:	6013      	str	r3, [r2, #0]
			} else {
							// Handle the case where not all bytes were read
			}
		}
	}
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000002c 	.word	0x2000002c
 8001064:	20002c44 	.word	0x20002c44
 8001068:	20002c50 	.word	0x20002c50
 800106c:	2000004c 	.word	0x2000004c
 8001070:	20003bf4 	.word	0x20003bf4
 8001074:	20004c38 	.word	0x20004c38

08001078 <open_SD_card_song>:


void open_SD_card_song(const char *mypath){
 8001078:	b580      	push	{r7, lr}
 800107a:	b0ca      	sub	sp, #296	@ 0x128
 800107c:	af00      	add	r7, sp, #0
 800107e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001082:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001086:	6018      	str	r0, [r3, #0]

	FILINFO fileInfo;
	const TCHAR *songpath = _T(mypath);
 8001088:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800108c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

	fres = f_open(&file, songpath, FA_READ);
 8001096:	2201      	movs	r2, #1
 8001098:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800109c:	481b      	ldr	r0, [pc, #108]	@ (800110c <open_SD_card_song+0x94>)
 800109e:	f00a f995 	bl	800b3cc <f_open>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <open_SD_card_song+0x98>)
 80010a8:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <open_SD_card_song+0x98>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <open_SD_card_song+0x42>
		printf("Failed opening file\r\n");
 80010b2:	4818      	ldr	r0, [pc, #96]	@ (8001114 <open_SD_card_song+0x9c>)
 80010b4:	f00b fa28 	bl	800c508 <puts>
 80010b8:	e024      	b.n	8001104 <open_SD_card_song+0x8c>
		return;
	}

    fres = f_stat(songpath, &fileInfo);
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	4619      	mov	r1, r3
 80010c0:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80010c4:	f00a fee5 	bl	800be92 <f_stat>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <open_SD_card_song+0x98>)
 80010ce:	701a      	strb	r2, [r3, #0]
    if (fres == FR_OK) {
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <open_SD_card_song+0x98>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d110      	bne.n	80010fa <open_SD_card_song+0x82>
        // Print file size
    	printf("File size: %lu bytes\r\n", fileInfo.fsize);
 80010d8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80010dc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	480c      	ldr	r0, [pc, #48]	@ (8001118 <open_SD_card_song+0xa0>)
 80010e6:	f00b f9a7 	bl	800c438 <iprintf>
    	song_length = fileInfo.fsize;
 80010ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80010ee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <open_SD_card_song+0xa4>)
 80010f8:	601a      	str	r2, [r3, #0]
    }
    printf("path: %s\r\n", songpath);
 80010fa:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 80010fe:	4808      	ldr	r0, [pc, #32]	@ (8001120 <open_SD_card_song+0xa8>)
 8001100:	f00b f99a 	bl	800c438 <iprintf>

}
 8001104:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20004c38 	.word	0x20004c38
 8001110:	20004c34 	.word	0x20004c34
 8001114:	0800d3cc 	.word	0x0800d3cc
 8001118:	0800d3e4 	.word	0x0800d3e4
 800111c:	20002c40 	.word	0x20002c40
 8001120:	0800d3fc 	.word	0x0800d3fc

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	f5ad 5d1c 	sub.w	sp, sp, #9984	@ 0x2700
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112e:	f001 fc04 	bl	800293a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001132:	f000 fa2d 	bl	8001590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001136:	f000 fcff 	bl	8001b38 <MX_GPIO_Init>
  MX_DMA_Init();
 800113a:	f000 fcdf 	bl	8001afc <MX_DMA_Init>
  MX_SPI2_Init();
 800113e:	f000 fb4d 	bl	80017dc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001142:	f000 fc7b 	bl	8001a3c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001146:	f007 f90b 	bl	8008360 <MX_FATFS_Init>
  MX_DAC1_Init();
 800114a:	f000 fa73 	bl	8001634 <MX_DAC1_Init>
  MX_TIM2_Init();
 800114e:	f000 fb83 	bl	8001858 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001152:	f000 fbc3 	bl	80018dc <MX_TIM3_Init>
  MX_UART4_Init();
 8001156:	f000 fc11 	bl	800197c <MX_UART4_Init>
  MX_USART3_UART_Init();
 800115a:	f000 fc9f 	bl	8001a9c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800115e:	f000 fc3d 	bl	80019dc <MX_USART1_UART_Init>
  MX_DFSDM1_Init();
 8001162:	f000 fa99 	bl	8001698 <MX_DFSDM1_Init>
  MX_SPI1_Init();
 8001166:	f000 fafb 	bl	8001760 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  // UART Interrupt Init
  // LIGHT
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, data, 64);
 800116a:	2240      	movs	r2, #64	@ 0x40
 800116c:	49b2      	ldr	r1, [pc, #712]	@ (8001438 <main+0x314>)
 800116e:	48b3      	ldr	r0, [pc, #716]	@ (800143c <main+0x318>)
 8001170:	f006 ffd8 	bl	8008124 <HAL_UARTEx_ReceiveToIdle_IT>

  // DOOR
  HAL_UARTEx_ReceiveToIdle_IT(&huart3, data, 64);
 8001174:	2240      	movs	r2, #64	@ 0x40
 8001176:	49b0      	ldr	r1, [pc, #704]	@ (8001438 <main+0x314>)
 8001178:	48b1      	ldr	r0, [pc, #708]	@ (8001440 <main+0x31c>)
 800117a:	f006 ffd3 	bl	8008124 <HAL_UARTEx_ReceiveToIdle_IT>


  HAL_UARTEx_ReceiveToIdle_IT(&huart1, data, 64);
 800117e:	2240      	movs	r2, #64	@ 0x40
 8001180:	49ad      	ldr	r1, [pc, #692]	@ (8001438 <main+0x314>)
 8001182:	48b0      	ldr	r0, [pc, #704]	@ (8001444 <main+0x320>)
 8001184:	f006 ffce 	bl	8008124 <HAL_UARTEx_ReceiveToIdle_IT>

  // set status of light to off on start (Opposite than LED due to relay)
  HAL_GPIO_WritePin(lightStatus_GPIO_Port, lightStatus_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2102      	movs	r1, #2
 800118c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001190:	f002 ff02 	bl	8003f98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(doorStatus_GPIO_Port, doorStatus_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2101      	movs	r1, #1
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f002 fefc 	bl	8003f98 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Initilize SD Card and Play start up Sound*/

  mount_SD_card();
 80011a0:	f7ff fe90 	bl	8000ec4 <mount_SD_card>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80011a4:	2100      	movs	r1, #0
 80011a6:	48a8      	ldr	r0, [pc, #672]	@ (8001448 <main+0x324>)
 80011a8:	f001 fd93 	bl	8002cd2 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x7FF);
 80011ac:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	48a4      	ldr	r0, [pc, #656]	@ (8001448 <main+0x324>)
 80011b6:	f001 fe33 	bl	8002e20 <HAL_DAC_SetValue>

  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1,dfsdm_buffer,DFSDM_BUFFER_SIZE * 2) != HAL_OK){
 80011ba:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80011be:	49a3      	ldr	r1, [pc, #652]	@ (800144c <main+0x328>)
 80011c0:	48a3      	ldr	r0, [pc, #652]	@ (8001450 <main+0x32c>)
 80011c2:	f002 f96d 	bl	80034a0 <HAL_DFSDM_FilterRegularStart_DMA>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <main+0xae>
	  printf("Failed to start DFSDM");
 80011cc:	48a1      	ldr	r0, [pc, #644]	@ (8001454 <main+0x330>)
 80011ce:	f00b f933 	bl	800c438 <iprintf>

  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (start_playback_process && !audio_playing){
 80011d2:	4ba1      	ldr	r3, [pc, #644]	@ (8001458 <main+0x334>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <main+0xc2>
 80011da:	4ba0      	ldr	r3, [pc, #640]	@ (800145c <main+0x338>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <main+0xc2>
		  start_audio_playback();
 80011e2:	f7ff fe3b 	bl	8000e5c <start_audio_playback>
	  }
	  if (start_recording_process && !start_playback_process && !audio_playing){
 80011e6:	4b9e      	ldr	r3, [pc, #632]	@ (8001460 <main+0x33c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d009      	beq.n	8001202 <main+0xde>
 80011ee:	4b9a      	ldr	r3, [pc, #616]	@ (8001458 <main+0x334>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d105      	bne.n	8001202 <main+0xde>
 80011f6:	4b99      	ldr	r3, [pc, #612]	@ (800145c <main+0x338>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <main+0xde>
		  start_recording_from_mic();
 80011fe:	f7ff fdf3 	bl	8000de8 <start_recording_from_mic>
	  }
	  if (recording_audio){
 8001202:	4b98      	ldr	r3, [pc, #608]	@ (8001464 <main+0x340>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8157 	beq.w	80014ba <main+0x396>
			  printf("\r\n\n");

			  return 1;
		  }
		  */
		  if (finished_recording || bytes_written_to_file >= MAX_RECORDING_LENGTH){
 800120c:	4b96      	ldr	r3, [pc, #600]	@ (8001468 <main+0x344>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d104      	bne.n	800121e <main+0xfa>
 8001214:	4b95      	ldr	r3, [pc, #596]	@ (800146c <main+0x348>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a95      	ldr	r2, [pc, #596]	@ (8001470 <main+0x34c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	dd53      	ble.n	80012c6 <main+0x1a2>
			  printf("Finished Recording Audio\r\n");
 800121e:	4895      	ldr	r0, [pc, #596]	@ (8001474 <main+0x350>)
 8001220:	f00b f972 	bl	800c508 <puts>
			  recording_audio = 0;
 8001224:	4b8f      	ldr	r3, [pc, #572]	@ (8001464 <main+0x340>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
			  finished_recording = 0;
 800122a:	4b8f      	ldr	r3, [pc, #572]	@ (8001468 <main+0x344>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
			  mic_half_transfer = 0;
 8001230:	4b91      	ldr	r3, [pc, #580]	@ (8001478 <main+0x354>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
			  mic_transfer_complete = 0;
 8001236:	4b91      	ldr	r3, [pc, #580]	@ (800147c <main+0x358>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
			  bytes_written_to_file = 0;
 800123c:	4b8b      	ldr	r3, [pc, #556]	@ (800146c <main+0x348>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
			  f_close(&file);
 8001242:	488f      	ldr	r0, [pc, #572]	@ (8001480 <main+0x35c>)
 8001244:	f00a fdfb 	bl	800be3e <f_close>

			  HAL_UART_Transmit(&huart3, header_data, HEADER_SIZE, HAL_MAX_DELAY);
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	222c      	movs	r2, #44	@ 0x2c
 800124e:	498d      	ldr	r1, [pc, #564]	@ (8001484 <main+0x360>)
 8001250:	487b      	ldr	r0, [pc, #492]	@ (8001440 <main+0x31c>)
 8001252:	f005 fc3b 	bl	8006acc <HAL_UART_Transmit>
			  int bytes_read = 44;
 8001256:	232c      	movs	r3, #44	@ 0x2c
 8001258:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 800125c:	f102 021c 	add.w	r2, r2, #28
 8001260:	6013      	str	r3, [r2, #0]
			  uint8_t block[10000];
			  open_SD_card_song("recording1.wav");
 8001262:	4889      	ldr	r0, [pc, #548]	@ (8001488 <main+0x364>)
 8001264:	f7ff ff08 	bl	8001078 <open_SD_card_song>
			  while (bytes_read < 128044){
 8001268:	e022      	b.n	80012b0 <main+0x18c>
				  if (f_read(&file, &block[0], 10000, &bytesRead) == FR_OK) {
 800126a:	f107 0120 	add.w	r1, r7, #32
 800126e:	391c      	subs	r1, #28
 8001270:	4b86      	ldr	r3, [pc, #536]	@ (800148c <main+0x368>)
 8001272:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001276:	4882      	ldr	r0, [pc, #520]	@ (8001480 <main+0x35c>)
 8001278:	f00a fa70 	bl	800b75c <f_read>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d116      	bne.n	80012b0 <main+0x18c>
				 	HAL_UART_Transmit(&huart3, block, 10000, HAL_MAX_DELAY);
 8001282:	f107 0120 	add.w	r1, r7, #32
 8001286:	391c      	subs	r1, #28
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001290:	486b      	ldr	r0, [pc, #428]	@ (8001440 <main+0x31c>)
 8001292:	f005 fc1b 	bl	8006acc <HAL_UART_Transmit>
				 	//printf("Sent Data to Arduino\r\n");
				 	bytes_read += 10000;
 8001296:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 800129a:	f103 031c 	add.w	r3, r3, #28
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80012a4:	3310      	adds	r3, #16
 80012a6:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80012aa:	f102 021c 	add.w	r2, r2, #28
 80012ae:	6013      	str	r3, [r2, #0]
			  while (bytes_read < 128044){
 80012b0:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80012b4:	f103 031c 	add.w	r3, r3, #28
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6d      	ldr	r2, [pc, #436]	@ (8001470 <main+0x34c>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	ddd4      	ble.n	800126a <main+0x146>
				  }
			  }
			  f_close(&file);
 80012c0:	486f      	ldr	r0, [pc, #444]	@ (8001480 <main+0x35c>)
 80012c2:	f00a fdbc 	bl	800be3e <f_close>
		  }
		  if(mic_half_transfer){
 80012c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001478 <main+0x354>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d05a      	beq.n	8001384 <main+0x260>
			  for (int i = 0; i < DFSDM_BUFFER_SIZE; i++){
 80012ce:	2300      	movs	r3, #0
 80012d0:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80012d4:	f102 0218 	add.w	r2, r2, #24
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e02f      	b.n	800133c <main+0x218>
				  recording[i] = SaturaLH((dfsdm_buffer[i] >> 8), -32768, 32767);
 80012dc:	4a5b      	ldr	r2, [pc, #364]	@ (800144c <main+0x328>)
 80012de:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80012e2:	f103 0318 	add.w	r3, r3, #24
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	121b      	asrs	r3, r3, #8
 80012ee:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80012f2:	db0f      	blt.n	8001314 <main+0x1f0>
 80012f4:	4a55      	ldr	r2, [pc, #340]	@ (800144c <main+0x328>)
 80012f6:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80012fa:	f103 0318 	add.w	r3, r3, #24
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	121b      	asrs	r3, r3, #8
 8001306:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800130a:	4293      	cmp	r3, r2
 800130c:	bfa8      	it	ge
 800130e:	4613      	movge	r3, r2
 8001310:	b21a      	sxth	r2, r3
 8001312:	e000      	b.n	8001316 <main+0x1f2>
 8001314:	4a5e      	ldr	r2, [pc, #376]	@ (8001490 <main+0x36c>)
 8001316:	495f      	ldr	r1, [pc, #380]	@ (8001494 <main+0x370>)
 8001318:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 800131c:	f103 0318 	add.w	r3, r3, #24
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			  for (int i = 0; i < DFSDM_BUFFER_SIZE; i++){
 8001326:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 800132a:	f103 0318 	add.w	r3, r3, #24
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8001336:	f102 0218 	add.w	r2, r2, #24
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8001340:	f103 0318 	add.w	r3, r3, #24
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800134a:	dbc7      	blt.n	80012dc <main+0x1b8>
			  }
			  if (f_write(&file, recording, bytes_to_record, &bytesWritten) != FR_OK) {
 800134c:	4b52      	ldr	r3, [pc, #328]	@ (8001498 <main+0x374>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b52      	ldr	r3, [pc, #328]	@ (800149c <main+0x378>)
 8001352:	4950      	ldr	r1, [pc, #320]	@ (8001494 <main+0x370>)
 8001354:	484a      	ldr	r0, [pc, #296]	@ (8001480 <main+0x35c>)
 8001356:	f00a fb60 	bl	800ba1a <f_write>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <main+0x24c>
				  printf("Error Writing To File 1.\n");
 8001360:	484f      	ldr	r0, [pc, #316]	@ (80014a0 <main+0x37c>)
 8001362:	f00b f8d1 	bl	800c508 <puts>
				  f_close(&file);
 8001366:	4846      	ldr	r0, [pc, #280]	@ (8001480 <main+0x35c>)
 8001368:	f00a fd69 	bl	800be3e <f_close>
				  return 1;
 800136c:	2301      	movs	r3, #1
 800136e:	e0f0      	b.n	8001552 <main+0x42e>
			  }
			  bytes_written_to_file+= DFSDM_BUFFER_SIZE * 2;
 8001370:	4b3e      	ldr	r3, [pc, #248]	@ (800146c <main+0x348>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001378:	4a3c      	ldr	r2, [pc, #240]	@ (800146c <main+0x348>)
 800137a:	6013      	str	r3, [r2, #0]
			  mic_half_transfer = 0;
 800137c:	4b3e      	ldr	r3, [pc, #248]	@ (8001478 <main+0x354>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e09a      	b.n	80014ba <main+0x396>
		  }
		  else if (mic_transfer_complete){
 8001384:	4b3d      	ldr	r3, [pc, #244]	@ (800147c <main+0x358>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 8096 	beq.w	80014ba <main+0x396>
			  for (int i = DFSDM_BUFFER_SIZE; i < DFSDM_BUFFER_SIZE * 2; i++){
 800138e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001392:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8001396:	f102 0214 	add.w	r2, r2, #20
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e031      	b.n	8001402 <main+0x2de>
				  recording[i - DFSDM_BUFFER_SIZE] = SaturaLH((dfsdm_buffer[i] >> 8), -32768, 32767);
 800139e:	4a2b      	ldr	r2, [pc, #172]	@ (800144c <main+0x328>)
 80013a0:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80013a4:	f103 0314 	add.w	r3, r3, #20
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	121b      	asrs	r3, r3, #8
 80013b0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80013b4:	db0f      	blt.n	80013d6 <main+0x2b2>
 80013b6:	4a25      	ldr	r2, [pc, #148]	@ (800144c <main+0x328>)
 80013b8:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80013bc:	f103 0314 	add.w	r3, r3, #20
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c6:	121b      	asrs	r3, r3, #8
 80013c8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80013cc:	4293      	cmp	r3, r2
 80013ce:	bfa8      	it	ge
 80013d0:	4613      	movge	r3, r2
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	e000      	b.n	80013d8 <main+0x2b4>
 80013d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001490 <main+0x36c>)
 80013d8:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80013dc:	f103 0314 	add.w	r3, r3, #20
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013e6:	492b      	ldr	r1, [pc, #172]	@ (8001494 <main+0x370>)
 80013e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			  for (int i = DFSDM_BUFFER_SIZE; i < DFSDM_BUFFER_SIZE * 2; i++){
 80013ec:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80013f0:	f103 0314 	add.w	r3, r3, #20
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80013fc:	f102 0214 	add.w	r2, r2, #20
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8001406:	f103 0314 	add.w	r3, r3, #20
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001410:	dbc5      	blt.n	800139e <main+0x27a>
			  }
			  if (f_write(&file, recording, bytes_to_record, &bytesWritten) != FR_OK) {
 8001412:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <main+0x374>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b21      	ldr	r3, [pc, #132]	@ (800149c <main+0x378>)
 8001418:	491e      	ldr	r1, [pc, #120]	@ (8001494 <main+0x370>)
 800141a:	4819      	ldr	r0, [pc, #100]	@ (8001480 <main+0x35c>)
 800141c:	f00a fafd 	bl	800ba1a <f_write>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d040      	beq.n	80014a8 <main+0x384>
				  printf("Error Writing to File 2.\n");
 8001426:	481f      	ldr	r0, [pc, #124]	@ (80014a4 <main+0x380>)
 8001428:	f00b f86e 	bl	800c508 <puts>
				  f_close(&file);
 800142c:	4814      	ldr	r0, [pc, #80]	@ (8001480 <main+0x35c>)
 800142e:	f00a fd06 	bl	800be3e <f_close>
				  return 1;
 8001432:	2301      	movs	r3, #1
 8001434:	e08d      	b.n	8001552 <main+0x42e>
 8001436:	bf00      	nop
 8001438:	20005c70 	.word	0x20005c70
 800143c:	200002f0 	.word	0x200002f0
 8001440:	20000488 	.word	0x20000488
 8001444:	20000378 	.word	0x20000378
 8001448:	200000f4 	.word	0x200000f4
 800144c:	20000cec 	.word	0x20000cec
 8001450:	20000108 	.word	0x20000108
 8001454:	0800d408 	.word	0x0800d408
 8001458:	20003bf0 	.word	0x20003bf0
 800145c:	20002c3c 	.word	0x20002c3c
 8001460:	20002c34 	.word	0x20002c34
 8001464:	20000514 	.word	0x20000514
 8001468:	20000518 	.word	0x20000518
 800146c:	20002c38 	.word	0x20002c38
 8001470:	0001f42b 	.word	0x0001f42b
 8001474:	0800d420 	.word	0x0800d420
 8001478:	20002c30 	.word	0x20002c30
 800147c:	20002c2c 	.word	0x20002c2c
 8001480:	20004c38 	.word	0x20004c38
 8001484:	20000000 	.word	0x20000000
 8001488:	0800d2bc 	.word	0x0800d2bc
 800148c:	20003bf4 	.word	0x20003bf4
 8001490:	ffff8000 	.word	0xffff8000
 8001494:	2000051c 	.word	0x2000051c
 8001498:	20000050 	.word	0x20000050
 800149c:	20003bf8 	.word	0x20003bf8
 80014a0:	0800d43c 	.word	0x0800d43c
 80014a4:	0800d458 	.word	0x0800d458
			  }
			  bytes_written_to_file+= DFSDM_BUFFER_SIZE * 2;
 80014a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001560 <main+0x43c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80014b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001560 <main+0x43c>)
 80014b2:	6013      	str	r3, [r2, #0]
			  mic_transfer_complete = 0;
 80014b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001564 <main+0x440>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if (audio_playing){
 80014ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001568 <main+0x444>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d03b      	beq.n	800153a <main+0x416>
		  if (audio_position >= song_length_total - AUDIO_BUFFER_SIZE * 2){
 80014c2:	4b2a      	ldr	r3, [pc, #168]	@ (800156c <main+0x448>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80014ca:	4b29      	ldr	r3, [pc, #164]	@ (8001570 <main+0x44c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dc1e      	bgt.n	8001510 <main+0x3ec>
			  NVIC_DisableIRQ(TIM2_IRQn);
 80014d2:	201c      	movs	r0, #28
 80014d4:	f7ff fb76 	bl	8000bc4 <__NVIC_DisableIRQ>
			  LL_TIM_DisableCounter(TIM2);
 80014d8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80014dc:	f7ff fc03 	bl	8000ce6 <LL_TIM_DisableCounter>
			  printf("Song Finished at %d\r\n", audio_position);
 80014e0:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <main+0x44c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	4823      	ldr	r0, [pc, #140]	@ (8001574 <main+0x450>)
 80014e8:	f00a ffa6 	bl	800c438 <iprintf>
			  f_close(&file);
 80014ec:	4822      	ldr	r0, [pc, #136]	@ (8001578 <main+0x454>)
 80014ee:	f00a fca6 	bl	800be3e <f_close>
			  audio_playing = 0;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001568 <main+0x444>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
			  audio_position = 44;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <main+0x44c>)
 80014fa:	222c      	movs	r2, #44	@ 0x2c
 80014fc:	601a      	str	r2, [r3, #0]
			  samples_played = 44;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <main+0x458>)
 8001500:	222c      	movs	r2, #44	@ 0x2c
 8001502:	601a      	str	r2, [r3, #0]
			  buffer_half = 0;
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <main+0x45c>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
			  buffer_complete = 0;
 800150a:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <main+0x460>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
		  }
		  if (buffer_half){
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <main+0x45c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <main+0x400>
			  read_SD_card_song_at_position(0);
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fd79 	bl	8001010 <read_SD_card_song_at_position>
			  buffer_half = 0;
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <main+0x45c>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
		  }
		  if (buffer_complete){
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <main+0x460>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <main+0x416>
			  read_SD_card_song_at_position(AUDIO_BUFFER_SIZE);
 800152c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001530:	f7ff fd6e 	bl	8001010 <read_SD_card_song_at_position>
			  buffer_complete = 0;
 8001534:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <main+0x460>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if (error){
 800153a:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <main+0x464>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f43f ae47 	beq.w	80011d2 <main+0xae>
		  printf("There has been an error\r\n Terminating Program\r\n");
 8001544:	4811      	ldr	r0, [pc, #68]	@ (800158c <main+0x468>)
 8001546:	f00a ffdf 	bl	800c508 <puts>
		  unmount_SD_card();
 800154a:	f7ff fd27 	bl	8000f9c <unmount_SD_card>
		  return -1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
	  }

  }
  unmount_SD_card();
  /* USER CODE END 3 */
}
 8001552:	4618      	mov	r0, r3
 8001554:	f507 571c 	add.w	r7, r7, #9984	@ 0x2700
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20002c38 	.word	0x20002c38
 8001564:	20002c2c 	.word	0x20002c2c
 8001568:	20002c3c 	.word	0x20002c3c
 800156c:	20002c44 	.word	0x20002c44
 8001570:	2000002c 	.word	0x2000002c
 8001574:	0800d474 	.word	0x0800d474
 8001578:	20004c38 	.word	0x20004c38
 800157c:	20000030 	.word	0x20000030
 8001580:	20002c48 	.word	0x20002c48
 8001584:	20002c4c 	.word	0x20002c4c
 8001588:	20000510 	.word	0x20000510
 800158c:	0800d48c 	.word	0x0800d48c

08001590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b096      	sub	sp, #88	@ 0x58
 8001594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	2244      	movs	r2, #68	@ 0x44
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f00b f892 	bl	800c6c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a4:	463b      	mov	r3, r7
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015b6:	f002 fd2d 	bl	8004014 <HAL_PWREx_ControlVoltageScaling>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015c0:	f000 fc1c 	bl	8001dfc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015c4:	2310      	movs	r3, #16
 80015c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015c8:	2301      	movs	r3, #1
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015d0:	2360      	movs	r3, #96	@ 0x60
 80015d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d4:	2302      	movs	r3, #2
 80015d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015d8:	2301      	movs	r3, #1
 80015da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015dc:	2301      	movs	r3, #1
 80015de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 80015e0:	2320      	movs	r3, #32
 80015e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015e4:	2307      	movs	r3, #7
 80015e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 fd63 	bl	80040c0 <HAL_RCC_OscConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001600:	f000 fbfc 	bl	8001dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001604:	230f      	movs	r3, #15
 8001606:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001608:	2303      	movs	r3, #3
 800160a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001618:	463b      	mov	r3, r7
 800161a:	2103      	movs	r1, #3
 800161c:	4618      	mov	r0, r3
 800161e:	f003 f92b 	bl	8004878 <HAL_RCC_ClockConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001628:	f000 fbe8 	bl	8001dfc <Error_Handler>
  }
}
 800162c:	bf00      	nop
 800162e:	3758      	adds	r7, #88	@ 0x58
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2224      	movs	r2, #36	@ 0x24
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f00b f841 	bl	800c6c8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001646:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <MX_DAC1_Init+0x5c>)
 8001648:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <MX_DAC1_Init+0x60>)
 800164a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800164c:	4810      	ldr	r0, [pc, #64]	@ (8001690 <MX_DAC1_Init+0x5c>)
 800164e:	f001 fb1e 	bl	8002c8e <HAL_DAC_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001658:	f000 fbd0 	bl	8001dfc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	@ (8001690 <MX_DAC1_Init+0x5c>)
 8001678:	f001 fc01 	bl	8002e7e <HAL_DAC_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001682:	f000 fbbb 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	@ 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200000f4 	.word	0x200000f4
 8001694:	40007400 	.word	0x40007400

08001698 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 800169c:	4b2c      	ldr	r3, [pc, #176]	@ (8001750 <MX_DFSDM1_Init+0xb8>)
 800169e:	4a2d      	ldr	r2, [pc, #180]	@ (8001754 <MX_DFSDM1_Init+0xbc>)
 80016a0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80016a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <MX_DFSDM1_Init+0xb8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80016a8:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <MX_DFSDM1_Init+0xb8>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80016ae:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <MX_DFSDM1_Init+0xb8>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80016b4:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <MX_DFSDM1_Init+0xb8>)
 80016b6:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80016ba:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 125;
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <MX_DFSDM1_Init+0xb8>)
 80016be:	227d      	movs	r2, #125	@ 0x7d
 80016c0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80016c2:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <MX_DFSDM1_Init+0xb8>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 80016c8:	4821      	ldr	r0, [pc, #132]	@ (8001750 <MX_DFSDM1_Init+0xb8>)
 80016ca:	f001 fdc9 	bl	8003260 <HAL_DFSDM_FilterInit>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80016d4:	f000 fb92 	bl	8001dfc <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 80016da:	4a20      	ldr	r2, [pc, #128]	@ (800175c <MX_DFSDM1_Init+0xc4>)
 80016dc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80016de:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80016e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 31;
 80016ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 80016ec:	221f      	movs	r2, #31
 80016ee:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80016f0:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80016f6:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001708:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 800170a:	2204      	movs	r2, #4
 800170c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800170e:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 8001710:	2200      	movs	r2, #0
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 8001716:	2201      	movs	r2, #1
 8001718:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 800171c:	2200      	movs	r2, #0
 800171e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x02;
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 8001722:	2202      	movs	r2, #2
 8001724:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8001726:	480c      	ldr	r0, [pc, #48]	@ (8001758 <MX_DFSDM1_Init+0xc0>)
 8001728:	f001 fcda 	bl	80030e0 <HAL_DFSDM_ChannelInit>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8001732:	f000 fb63 	bl	8001dfc <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001736:	2201      	movs	r2, #1
 8001738:	2101      	movs	r1, #1
 800173a:	4805      	ldr	r0, [pc, #20]	@ (8001750 <MX_DFSDM1_Init+0xb8>)
 800173c:	f001 fe6a 	bl	8003414 <HAL_DFSDM_FilterConfigRegChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8001746:	f000 fb59 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000108 	.word	0x20000108
 8001754:	40016180 	.word	0x40016180
 8001758:	2000015c 	.word	0x2000015c
 800175c:	40016000 	.word	0x40016000

08001760 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <MX_SPI1_Init+0x74>)
 8001766:	4a1c      	ldr	r2, [pc, #112]	@ (80017d8 <MX_SPI1_Init+0x78>)
 8001768:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800176a:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <MX_SPI1_Init+0x74>)
 800176c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001770:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001772:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <MX_SPI1_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <MX_SPI1_Init+0x74>)
 800177a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800177e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <MX_SPI1_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001786:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <MX_SPI1_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <MX_SPI1_Init+0x74>)
 800178e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001792:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001794:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <MX_SPI1_Init+0x74>)
 8001796:	2208      	movs	r2, #8
 8001798:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <MX_SPI1_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <MX_SPI1_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <MX_SPI1_Init+0x74>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017ac:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <MX_SPI1_Init+0x74>)
 80017ae:	2207      	movs	r2, #7
 80017b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <MX_SPI1_Init+0x74>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <MX_SPI1_Init+0x74>)
 80017ba:	2208      	movs	r2, #8
 80017bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	@ (80017d4 <MX_SPI1_Init+0x74>)
 80017c0:	f003 ff3a 	bl	8005638 <HAL_SPI_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017ca:	f000 fb17 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200001dc 	.word	0x200001dc
 80017d8:	40013000 	.word	0x40013000

080017dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <MX_SPI2_Init+0x74>)
 80017e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001854 <MX_SPI2_Init+0x78>)
 80017e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <MX_SPI2_Init+0x74>)
 80017e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ee:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <MX_SPI2_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f4:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <MX_SPI2_Init+0x74>)
 80017f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80017fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017fc:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <MX_SPI2_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <MX_SPI2_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <MX_SPI2_Init+0x74>)
 800180a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800180e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001810:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <MX_SPI2_Init+0x74>)
 8001812:	2208      	movs	r2, #8
 8001814:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001816:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <MX_SPI2_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800181c:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <MX_SPI2_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001822:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <MX_SPI2_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <MX_SPI2_Init+0x74>)
 800182a:	2207      	movs	r2, #7
 800182c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <MX_SPI2_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <MX_SPI2_Init+0x74>)
 8001836:	2208      	movs	r2, #8
 8001838:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_SPI2_Init+0x74>)
 800183c:	f003 fefc 	bl	8005638 <HAL_SPI_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001846:	f000 fad9 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000240 	.word	0x20000240
 8001854:	40003800 	.word	0x40003800

08001858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800186c:	2001      	movs	r0, #1
 800186e:	f7ff faa3 	bl	8000db8 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001872:	f7ff f97b 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8001876:	4603      	mov	r3, r0
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff f9ef 	bl	8000c60 <NVIC_EncodePriority>
 8001882:	4603      	mov	r3, r0
 8001884:	4619      	mov	r1, r3
 8001886:	201c      	movs	r0, #28
 8001888:	f7ff f9c0 	bl	8000c0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 800188c:	201c      	movs	r0, #28
 800188e:	f7ff f97b 	bl	8000b88 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 8001892:	2301      	movs	r3, #1
 8001894:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 2000;
 800189a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800189e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80018ac:	f006 fcc4 	bl	8008238 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80018b0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80018b4:	f7ff fa27 	bl	8000d06 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80018b8:	2100      	movs	r1, #0
 80018ba:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80018be:	f7ff fa32 	bl	8000d26 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80018c2:	2100      	movs	r1, #0
 80018c4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80018c8:	f7ff fa42 	bl	8000d50 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80018cc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80018d0:	f7ff fa51 	bl	8000d76 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <MX_TIM3_Init+0x98>)
 80018fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001978 <MX_TIM3_Init+0x9c>)
 80018fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8001900:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <MX_TIM3_Init+0x98>)
 8001902:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001906:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <MX_TIM3_Init+0x98>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <MX_TIM3_Init+0x98>)
 8001910:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001914:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <MX_TIM3_Init+0x98>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <MX_TIM3_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001922:	4814      	ldr	r0, [pc, #80]	@ (8001974 <MX_TIM3_Init+0x98>)
 8001924:	f004 fc26 	bl	8006174 <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800192e:	f000 fa65 	bl	8001dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001936:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4619      	mov	r1, r3
 800193e:	480d      	ldr	r0, [pc, #52]	@ (8001974 <MX_TIM3_Init+0x98>)
 8001940:	f004 fda0 	bl	8006484 <HAL_TIM_ConfigClockSource>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800194a:	f000 fa57 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4806      	ldr	r0, [pc, #24]	@ (8001974 <MX_TIM3_Init+0x98>)
 800195c:	f004 ffc2 	bl	80068e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001966:	f000 fa49 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200002a4 	.word	0x200002a4
 8001978:	40000400 	.word	0x40000400

0800197c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001980:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <MX_UART4_Init+0x58>)
 8001982:	4a15      	ldr	r2, [pc, #84]	@ (80019d8 <MX_UART4_Init+0x5c>)
 8001984:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001986:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <MX_UART4_Init+0x58>)
 8001988:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800198c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <MX_UART4_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <MX_UART4_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <MX_UART4_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <MX_UART4_Init+0x58>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <MX_UART4_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <MX_UART4_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <MX_UART4_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <MX_UART4_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <MX_UART4_Init+0x58>)
 80019c0:	f005 f836 	bl	8006a30 <HAL_UART_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80019ca:	f000 fa17 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200002f0 	.word	0x200002f0
 80019d8:	40004c00 	.word	0x40004c00

080019dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019e0:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <MX_USART1_UART_Init+0x58>)
 80019e2:	4a15      	ldr	r2, [pc, #84]	@ (8001a38 <MX_USART1_UART_Init+0x5c>)
 80019e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019e6:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <MX_USART1_UART_Init+0x58>)
 80019e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ee:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <MX_USART1_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <MX_USART1_UART_Init+0x58>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <MX_USART1_UART_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <MX_USART1_UART_Init+0x58>)
 8001a02:	220c      	movs	r2, #12
 8001a04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <MX_USART1_UART_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <MX_USART1_UART_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a12:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <MX_USART1_UART_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <MX_USART1_UART_Init+0x58>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a1e:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <MX_USART1_UART_Init+0x58>)
 8001a20:	f005 f806 	bl	8006a30 <HAL_UART_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a2a:	f000 f9e7 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000378 	.word	0x20000378
 8001a38:	40013800 	.word	0x40013800

08001a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a40:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a42:	4a15      	ldr	r2, [pc, #84]	@ (8001a98 <MX_USART2_UART_Init+0x5c>)
 8001a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a46:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a62:	220c      	movs	r2, #12
 8001a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a80:	f004 ffd6 	bl	8006a30 <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a8a:	f000 f9b7 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000400 	.word	0x20000400
 8001a98:	40004400 	.word	0x40004400

08001a9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001aa0:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <MX_USART3_UART_Init+0x54>)
 8001aa2:	4a14      	ldr	r2, [pc, #80]	@ (8001af4 <MX_USART3_UART_Init+0x58>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8001aa6:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <MX_USART3_UART_Init+0x54>)
 8001aa8:	4a13      	ldr	r2, [pc, #76]	@ (8001af8 <MX_USART3_UART_Init+0x5c>)
 8001aaa:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aac:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <MX_USART3_UART_Init+0x54>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <MX_USART3_UART_Init+0x54>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <MX_USART3_UART_Init+0x54>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001abe:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <MX_USART3_UART_Init+0x54>)
 8001ac0:	220c      	movs	r2, #12
 8001ac2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <MX_USART3_UART_Init+0x54>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <MX_USART3_UART_Init+0x54>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <MX_USART3_UART_Init+0x54>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <MX_USART3_UART_Init+0x54>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001adc:	4804      	ldr	r0, [pc, #16]	@ (8001af0 <MX_USART3_UART_Init+0x54>)
 8001ade:	f004 ffa7 	bl	8006a30 <HAL_UART_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8001ae8:	f000 f988 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000488 	.word	0x20000488
 8001af4:	40004800 	.word	0x40004800
 8001af8:	001e8480 	.word	0x001e8480

08001afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <MX_DMA_Init+0x38>)
 8001b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b06:	4a0b      	ldr	r2, [pc, #44]	@ (8001b34 <MX_DMA_Init+0x38>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <MX_DMA_Init+0x38>)
 8001b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	200f      	movs	r0, #15
 8001b20:	f001 f87f 	bl	8002c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b24:	200f      	movs	r0, #15
 8001b26:	f001 f898 	bl	8002c5a <HAL_NVIC_EnableIRQ>

}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000

08001b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	@ 0x28
 8001b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c38 <MX_GPIO_Init+0x100>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	4a39      	ldr	r2, [pc, #228]	@ (8001c38 <MX_GPIO_Init+0x100>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5a:	4b37      	ldr	r3, [pc, #220]	@ (8001c38 <MX_GPIO_Init+0x100>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b66:	4b34      	ldr	r3, [pc, #208]	@ (8001c38 <MX_GPIO_Init+0x100>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	4a33      	ldr	r2, [pc, #204]	@ (8001c38 <MX_GPIO_Init+0x100>)
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b72:	4b31      	ldr	r3, [pc, #196]	@ (8001c38 <MX_GPIO_Init+0x100>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c38 <MX_GPIO_Init+0x100>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	4a2d      	ldr	r2, [pc, #180]	@ (8001c38 <MX_GPIO_Init+0x100>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c38 <MX_GPIO_Init+0x100>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	4b28      	ldr	r3, [pc, #160]	@ (8001c38 <MX_GPIO_Init+0x100>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	4a27      	ldr	r2, [pc, #156]	@ (8001c38 <MX_GPIO_Init+0x100>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba2:	4b25      	ldr	r3, [pc, #148]	@ (8001c38 <MX_GPIO_Init+0x100>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, doorStatus_Pin|lightStatus_Pin|NANOcsPIn_Pin, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2143      	movs	r1, #67	@ 0x43
 8001bb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb6:	f002 f9ef 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ChipSelectSD_GPIO_Port, ChipSelectSD_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bc0:	481e      	ldr	r0, [pc, #120]	@ (8001c3c <MX_GPIO_Init+0x104>)
 8001bc2:	f002 f9e9 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userControl_Pin */
  GPIO_InitStruct.Pin = userControl_Pin;
 8001bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bcc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(userControl_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4818      	ldr	r0, [pc, #96]	@ (8001c40 <MX_GPIO_Init+0x108>)
 8001bde:	f002 f831 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : doorStatus_Pin lightStatus_Pin NANOcsPIn_Pin */
  GPIO_InitStruct.Pin = doorStatus_Pin|lightStatus_Pin|NANOcsPIn_Pin;
 8001be2:	2343      	movs	r3, #67	@ 0x43
 8001be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bfc:	f002 f822 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ChipSelectSD_Pin */
  GPIO_InitStruct.Pin = ChipSelectSD_Pin;
 8001c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ChipSelectSD_GPIO_Port, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4808      	ldr	r0, [pc, #32]	@ (8001c3c <MX_GPIO_Init+0x104>)
 8001c1a:	f002 f813 	bl	8003c44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2102      	movs	r1, #2
 8001c22:	2028      	movs	r0, #40	@ 0x28
 8001c24:	f000 fffd 	bl	8002c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c28:	2028      	movs	r0, #40	@ 0x28
 8001c2a:	f001 f816 	bl	8002c5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c2e:	bf00      	nop
 8001c30:	3728      	adds	r7, #40	@ 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	48000400 	.word	0x48000400
 8001c40:	48000800 	.word	0x48000800

08001c44 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001c4c:	1d39      	adds	r1, r7, #4
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	2201      	movs	r2, #1
 8001c54:	4803      	ldr	r0, [pc, #12]	@ (8001c64 <__io_putchar+0x20>)
 8001c56:	f004 ff39 	bl	8006acc <HAL_UART_Transmit>
  return ch;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000400 	.word	0x20000400

08001c68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
	} else {
		printf("Sent message\r\n");
		HAL_GPIO_WritePin(ARDUINO_CS_PORT, ARDUINO_CS_PIN, GPIO_PIN_SET);
	}
*/
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:


void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	if (recording_audio){
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x24>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x16>
		mic_half_transfer = 1;
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]
	}

}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000514 	.word	0x20000514
 8001ca8:	20002c30 	.word	0x20002c30

08001cac <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	if( recording_audio){
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_DFSDM_FilterRegConvCpltCallback+0x24>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <HAL_DFSDM_FilterRegConvCpltCallback+0x16>
		mic_transfer_complete = 1;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <HAL_DFSDM_FilterRegConvCpltCallback+0x28>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
	}
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000514 	.word	0x20000514
 8001cd4:	20002c2c 	.word	0x20002c2c

08001cd8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
	if (strncmp((char*)data, "MIC_ON", strlen("MIC_ON")) == 0) {
 8001ce4:	2206      	movs	r2, #6
 8001ce6:	4932      	ldr	r1, [pc, #200]	@ (8001db0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001ce8:	4832      	ldr	r0, [pc, #200]	@ (8001db4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001cea:	f00a fcf5 	bl	800c6d8 <strncmp>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10c      	bne.n	8001d0e <HAL_UARTEx_RxEventCallback+0x36>
		printf("MIC_ON\r\n");
 8001cf4:	4830      	ldr	r0, [pc, #192]	@ (8001db8 <HAL_UARTEx_RxEventCallback+0xe0>)
 8001cf6:	f00a fc07 	bl	800c508 <puts>
		recordingPath = MICON;
 8001cfa:	4b30      	ldr	r3, [pc, #192]	@ (8001dbc <HAL_UARTEx_RxEventCallback+0xe4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a30      	ldr	r2, [pc, #192]	@ (8001dc0 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001d00:	6013      	str	r3, [r2, #0]
		start_playback_process = 1;
 8001d02:	4b30      	ldr	r3, [pc, #192]	@ (8001dc4 <HAL_UARTEx_RxEventCallback+0xec>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
		start_recording_process = 1;
 8001d08:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc8 <HAL_UARTEx_RxEventCallback+0xf0>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
	}
	if (strncmp((char*)data, "LIGHT_ON", strlen("LIGHT_ON")) == 0) {
 8001d0e:	2208      	movs	r2, #8
 8001d10:	492e      	ldr	r1, [pc, #184]	@ (8001dcc <HAL_UARTEx_RxEventCallback+0xf4>)
 8001d12:	4828      	ldr	r0, [pc, #160]	@ (8001db4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001d14:	f00a fce0 	bl	800c6d8 <strncmp>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_UARTEx_RxEventCallback+0x5a>
		printf("LIGHT_ON\r\n");
 8001d1e:	482c      	ldr	r0, [pc, #176]	@ (8001dd0 <HAL_UARTEx_RxEventCallback+0xf8>)
 8001d20:	f00a fbf2 	bl	800c508 <puts>
		recordingPath = LIGHTONAUDIO;
 8001d24:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd4 <HAL_UARTEx_RxEventCallback+0xfc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a25      	ldr	r2, [pc, #148]	@ (8001dc0 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001d2a:	6013      	str	r3, [r2, #0]
		start_playback_process = 1;
 8001d2c:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <HAL_UARTEx_RxEventCallback+0xec>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
	}
	if (strncmp((char*)data, "LIGHT_OFF", strlen("LIGHT_OFF")) == 0) {
 8001d32:	2209      	movs	r2, #9
 8001d34:	4928      	ldr	r1, [pc, #160]	@ (8001dd8 <HAL_UARTEx_RxEventCallback+0x100>)
 8001d36:	481f      	ldr	r0, [pc, #124]	@ (8001db4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001d38:	f00a fcce 	bl	800c6d8 <strncmp>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_UARTEx_RxEventCallback+0x7e>
		printf("LIGHT_OFF\r\n");
 8001d42:	4826      	ldr	r0, [pc, #152]	@ (8001ddc <HAL_UARTEx_RxEventCallback+0x104>)
 8001d44:	f00a fbe0 	bl	800c508 <puts>
		recordingPath = LIGHTOFFAUDIO;
 8001d48:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0x108>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc0 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001d4e:	6013      	str	r3, [r2, #0]
		start_playback_process = 1;
 8001d50:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc4 <HAL_UARTEx_RxEventCallback+0xec>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
	}
	if (strncmp((char*)data, "DOOR_OPEN", strlen("DOOR_OPEN")) == 0) {
 8001d56:	2209      	movs	r2, #9
 8001d58:	4922      	ldr	r1, [pc, #136]	@ (8001de4 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001d5a:	4816      	ldr	r0, [pc, #88]	@ (8001db4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001d5c:	f00a fcbc 	bl	800c6d8 <strncmp>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d109      	bne.n	8001d7a <HAL_UARTEx_RxEventCallback+0xa2>
		printf("DOOR_OPEN\r\n");
 8001d66:	4820      	ldr	r0, [pc, #128]	@ (8001de8 <HAL_UARTEx_RxEventCallback+0x110>)
 8001d68:	f00a fbce 	bl	800c508 <puts>
		recordingPath = DOOROPENAUDIO;
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dec <HAL_UARTEx_RxEventCallback+0x114>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a13      	ldr	r2, [pc, #76]	@ (8001dc0 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001d72:	6013      	str	r3, [r2, #0]
		start_playback_process = 1;
 8001d74:	4b13      	ldr	r3, [pc, #76]	@ (8001dc4 <HAL_UARTEx_RxEventCallback+0xec>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
	}
	if (strncmp((char*)data, "DOOR_CLOSE", strlen("DOOR_CLOSE")) == 0) {
 8001d7a:	220a      	movs	r2, #10
 8001d7c:	491c      	ldr	r1, [pc, #112]	@ (8001df0 <HAL_UARTEx_RxEventCallback+0x118>)
 8001d7e:	480d      	ldr	r0, [pc, #52]	@ (8001db4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001d80:	f00a fcaa 	bl	800c6d8 <strncmp>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d109      	bne.n	8001d9e <HAL_UARTEx_RxEventCallback+0xc6>
		printf("DOOR_CLOSE\r\n");
 8001d8a:	481a      	ldr	r0, [pc, #104]	@ (8001df4 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001d8c:	f00a fbbc 	bl	800c508 <puts>
		recordingPath = DOORCLOSEAUDIO;
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_UARTEx_RxEventCallback+0x120>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001d96:	6013      	str	r3, [r2, #0]
		start_playback_process = 1;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_UARTEx_RxEventCallback+0xec>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
	}
	HAL_UARTEx_ReceiveToIdle_IT(huart, data, 64);
 8001d9e:	2240      	movs	r2, #64	@ 0x40
 8001da0:	4904      	ldr	r1, [pc, #16]	@ (8001db4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f006 f9be 	bl	8008124 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	0800d4bc 	.word	0x0800d4bc
 8001db4:	20005c70 	.word	0x20005c70
 8001db8:	0800d4c4 	.word	0x0800d4c4
 8001dbc:	20000048 	.word	0x20000048
 8001dc0:	20000034 	.word	0x20000034
 8001dc4:	20003bf0 	.word	0x20003bf0
 8001dc8:	20002c34 	.word	0x20002c34
 8001dcc:	0800d4cc 	.word	0x0800d4cc
 8001dd0:	0800d4d8 	.word	0x0800d4d8
 8001dd4:	20000038 	.word	0x20000038
 8001dd8:	0800d4e4 	.word	0x0800d4e4
 8001ddc:	0800d4f0 	.word	0x0800d4f0
 8001de0:	2000003c 	.word	0x2000003c
 8001de4:	0800d4fc 	.word	0x0800d4fc
 8001de8:	0800d508 	.word	0x0800d508
 8001dec:	20000040 	.word	0x20000040
 8001df0:	0800d514 	.word	0x0800d514
 8001df4:	0800d520 	.word	0x0800d520
 8001df8:	20000044 	.word	0x20000044

08001dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e00:	b672      	cpsid	i
}
 8001e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <Error_Handler+0x8>

08001e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <HAL_MspInit+0x44>)
 8001e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e12:	4a0e      	ldr	r2, [pc, #56]	@ (8001e4c <HAL_MspInit+0x44>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <HAL_MspInit+0x44>)
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <HAL_MspInit+0x44>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2a:	4a08      	ldr	r2, [pc, #32]	@ (8001e4c <HAL_MspInit+0x44>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_MspInit+0x44>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000

08001e50 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a19      	ldr	r2, [pc, #100]	@ (8001ed4 <HAL_DAC_MspInit+0x84>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d12c      	bne.n	8001ecc <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <HAL_DAC_MspInit+0x88>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	4a18      	ldr	r2, [pc, #96]	@ (8001ed8 <HAL_DAC_MspInit+0x88>)
 8001e78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <HAL_DAC_MspInit+0x88>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <HAL_DAC_MspInit+0x88>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <HAL_DAC_MspInit+0x88>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <HAL_DAC_MspInit+0x88>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb8:	f001 fec4 	bl	8003c44 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2036      	movs	r0, #54	@ 0x36
 8001ec2:	f000 feae 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ec6:	2036      	movs	r0, #54	@ 0x36
 8001ec8:	f000 fec7 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001ecc:	bf00      	nop
 8001ece:	3728      	adds	r7, #40	@ 0x28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40007400 	.word	0x40007400
 8001ed8:	40021000 	.word	0x40021000

08001edc <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0ac      	sub	sp, #176	@ 0xb0
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2288      	movs	r2, #136	@ 0x88
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f00a fbe3 	bl	800c6c8 <memset>
  if(DFSDM1_Init == 0)
 8001f02:	4b55      	ldr	r3, [pc, #340]	@ (8002058 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d16b      	bne.n	8001fe2 <HAL_DFSDM_FilterMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001f0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 fed0 	bl	8004cc0 <HAL_RCCEx_PeriphCLKConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001f26:	f7ff ff69 	bl	8001dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800205c <HAL_DFSDM_FilterMspInit+0x180>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	4a4a      	ldr	r2, [pc, #296]	@ (800205c <HAL_DFSDM_FilterMspInit+0x180>)
 8001f32:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001f34:	4b49      	ldr	r3, [pc, #292]	@ (800205c <HAL_DFSDM_FilterMspInit+0x180>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d10b      	bne.n	8001f54 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001f3c:	4b48      	ldr	r3, [pc, #288]	@ (8002060 <HAL_DFSDM_FilterMspInit+0x184>)
 8001f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f40:	4a47      	ldr	r2, [pc, #284]	@ (8002060 <HAL_DFSDM_FilterMspInit+0x184>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f46:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f48:	4b45      	ldr	r3, [pc, #276]	@ (8002060 <HAL_DFSDM_FilterMspInit+0x184>)
 8001f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f54:	4b42      	ldr	r3, [pc, #264]	@ (8002060 <HAL_DFSDM_FilterMspInit+0x184>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f58:	4a41      	ldr	r2, [pc, #260]	@ (8002060 <HAL_DFSDM_FilterMspInit+0x184>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f60:	4b3f      	ldr	r3, [pc, #252]	@ (8002060 <HAL_DFSDM_FilterMspInit+0x184>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8002060 <HAL_DFSDM_FilterMspInit+0x184>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f70:	4a3b      	ldr	r2, [pc, #236]	@ (8002060 <HAL_DFSDM_FilterMspInit+0x184>)
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f78:	4b39      	ldr	r3, [pc, #228]	@ (8002060 <HAL_DFSDM_FilterMspInit+0x184>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f84:	2304      	movs	r3, #4
 8001f86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001f9c:	2306      	movs	r3, #6
 8001f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	482e      	ldr	r0, [pc, #184]	@ (8002064 <HAL_DFSDM_FilterMspInit+0x188>)
 8001faa:	f001 fe4b 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001fc6:	2306      	movs	r3, #6
 8001fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4825      	ldr	r0, [pc, #148]	@ (8002068 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001fd4:	f001 fe36 	bl	8003c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	4a1e      	ldr	r2, [pc, #120]	@ (8002058 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001fe0:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a21      	ldr	r2, [pc, #132]	@ (800206c <HAL_DFSDM_FilterMspInit+0x190>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d131      	bne.n	8002050 <HAL_DFSDM_FilterMspInit+0x174>
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8001fec:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 8001fee:	4a21      	ldr	r2, [pc, #132]	@ (8002074 <HAL_DFSDM_FilterMspInit+0x198>)
 8001ff0:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8002004:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 8002006:	2280      	movs	r2, #128	@ 0x80
 8002008:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800200a:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 800200c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002010:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002012:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 8002014:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002018:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 800201c:	2220      	movs	r2, #32
 800201e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8002020:	4b13      	ldr	r3, [pc, #76]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 8002022:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002026:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8002028:	4811      	ldr	r0, [pc, #68]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 800202a:	f001 fb95 	bl	8003758 <HAL_DMA_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_DFSDM_FilterMspInit+0x15c>
    {
      Error_Handler();
 8002034:	f7ff fee2 	bl	8001dfc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a0d      	ldr	r2, [pc, #52]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 800203c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800203e:	4a0c      	ldr	r2, [pc, #48]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 8002048:	629a      	str	r2, [r3, #40]	@ 0x28
 800204a:	4a09      	ldr	r2, [pc, #36]	@ (8002070 <HAL_DFSDM_FilterMspInit+0x194>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 8002050:	bf00      	nop
 8002052:	37b0      	adds	r7, #176	@ 0xb0
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20005cb4 	.word	0x20005cb4
 800205c:	20005cb0 	.word	0x20005cb0
 8002060:	40021000 	.word	0x40021000
 8002064:	48000800 	.word	0x48000800
 8002068:	48000400 	.word	0x48000400
 800206c:	40016180 	.word	0x40016180
 8002070:	20000194 	.word	0x20000194
 8002074:	40020058 	.word	0x40020058

08002078 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b0ac      	sub	sp, #176	@ 0xb0
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2288      	movs	r2, #136	@ 0x88
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f00a fb15 	bl	800c6c8 <memset>
  if(DFSDM1_Init == 0)
 800209e:	4b3a      	ldr	r3, [pc, #232]	@ (8002188 <HAL_DFSDM_ChannelMspInit+0x110>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d16b      	bne.n	800217e <HAL_DFSDM_ChannelMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80020a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4618      	mov	r0, r3
 80020b8:	f002 fe02 	bl	8004cc0 <HAL_RCCEx_PeriphCLKConfig>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80020c2:	f7ff fe9b 	bl	8001dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80020c6:	4b31      	ldr	r3, [pc, #196]	@ (800218c <HAL_DFSDM_ChannelMspInit+0x114>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	4a2f      	ldr	r2, [pc, #188]	@ (800218c <HAL_DFSDM_ChannelMspInit+0x114>)
 80020ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80020d0:	4b2e      	ldr	r3, [pc, #184]	@ (800218c <HAL_DFSDM_ChannelMspInit+0x114>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d10b      	bne.n	80020f0 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80020d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002190 <HAL_DFSDM_ChannelMspInit+0x118>)
 80020da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002190 <HAL_DFSDM_ChannelMspInit+0x118>)
 80020de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80020e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002190 <HAL_DFSDM_ChannelMspInit+0x118>)
 80020e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f0:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <HAL_DFSDM_ChannelMspInit+0x118>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f4:	4a26      	ldr	r2, [pc, #152]	@ (8002190 <HAL_DFSDM_ChannelMspInit+0x118>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020fc:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <HAL_DFSDM_ChannelMspInit+0x118>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002108:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <HAL_DFSDM_ChannelMspInit+0x118>)
 800210a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210c:	4a20      	ldr	r2, [pc, #128]	@ (8002190 <HAL_DFSDM_ChannelMspInit+0x118>)
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002114:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <HAL_DFSDM_ChannelMspInit+0x118>)
 8002116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002120:	2304      	movs	r3, #4
 8002122:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002138:	2306      	movs	r3, #6
 800213a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002142:	4619      	mov	r1, r3
 8002144:	4813      	ldr	r0, [pc, #76]	@ (8002194 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8002146:	f001 fd7d 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800214a:	2302      	movs	r3, #2
 800214c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002162:	2306      	movs	r3, #6
 8002164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800216c:	4619      	mov	r1, r3
 800216e:	480a      	ldr	r0, [pc, #40]	@ (8002198 <HAL_DFSDM_ChannelMspInit+0x120>)
 8002170:	f001 fd68 	bl	8003c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002174:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <HAL_DFSDM_ChannelMspInit+0x110>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3301      	adds	r3, #1
 800217a:	4a03      	ldr	r2, [pc, #12]	@ (8002188 <HAL_DFSDM_ChannelMspInit+0x110>)
 800217c:	6013      	str	r3, [r2, #0]
  }

}
 800217e:	bf00      	nop
 8002180:	37b0      	adds	r7, #176	@ 0xb0
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20005cb4 	.word	0x20005cb4
 800218c:	20005cb0 	.word	0x20005cb0
 8002190:	40021000 	.word	0x40021000
 8002194:	48000800 	.word	0x48000800
 8002198:	48000400 	.word	0x48000400

0800219c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	@ 0x30
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002278 <HAL_SPI_MspInit+0xdc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d129      	bne.n	8002212 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021be:	4b2f      	ldr	r3, [pc, #188]	@ (800227c <HAL_SPI_MspInit+0xe0>)
 80021c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c2:	4a2e      	ldr	r2, [pc, #184]	@ (800227c <HAL_SPI_MspInit+0xe0>)
 80021c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80021ca:	4b2c      	ldr	r3, [pc, #176]	@ (800227c <HAL_SPI_MspInit+0xe0>)
 80021cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	4b29      	ldr	r3, [pc, #164]	@ (800227c <HAL_SPI_MspInit+0xe0>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021da:	4a28      	ldr	r2, [pc, #160]	@ (800227c <HAL_SPI_MspInit+0xe0>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e2:	4b26      	ldr	r3, [pc, #152]	@ (800227c <HAL_SPI_MspInit+0xe0>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80021ee:	23a0      	movs	r3, #160	@ 0xa0
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021fe:	2305      	movs	r3, #5
 8002200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800220c:	f001 fd1a 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002210:	e02d      	b.n	800226e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a1a      	ldr	r2, [pc, #104]	@ (8002280 <HAL_SPI_MspInit+0xe4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d128      	bne.n	800226e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800221c:	4b17      	ldr	r3, [pc, #92]	@ (800227c <HAL_SPI_MspInit+0xe0>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002220:	4a16      	ldr	r2, [pc, #88]	@ (800227c <HAL_SPI_MspInit+0xe0>)
 8002222:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002226:	6593      	str	r3, [r2, #88]	@ 0x58
 8002228:	4b14      	ldr	r3, [pc, #80]	@ (800227c <HAL_SPI_MspInit+0xe0>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002234:	4b11      	ldr	r3, [pc, #68]	@ (800227c <HAL_SPI_MspInit+0xe0>)
 8002236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002238:	4a10      	ldr	r2, [pc, #64]	@ (800227c <HAL_SPI_MspInit+0xe0>)
 800223a:	f043 0302 	orr.w	r3, r3, #2
 800223e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002240:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <HAL_SPI_MspInit+0xe0>)
 8002242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800224c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800225e:	2305      	movs	r3, #5
 8002260:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	f107 031c 	add.w	r3, r7, #28
 8002266:	4619      	mov	r1, r3
 8002268:	4806      	ldr	r0, [pc, #24]	@ (8002284 <HAL_SPI_MspInit+0xe8>)
 800226a:	f001 fceb 	bl	8003c44 <HAL_GPIO_Init>
}
 800226e:	bf00      	nop
 8002270:	3730      	adds	r7, #48	@ 0x30
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40013000 	.word	0x40013000
 800227c:	40021000 	.word	0x40021000
 8002280:	40003800 	.word	0x40003800
 8002284:	48000400 	.word	0x48000400

08002288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0d      	ldr	r2, [pc, #52]	@ (80022cc <HAL_TIM_Base_MspInit+0x44>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d113      	bne.n	80022c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800229a:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <HAL_TIM_Base_MspInit+0x48>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229e:	4a0c      	ldr	r2, [pc, #48]	@ (80022d0 <HAL_TIM_Base_MspInit+0x48>)
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022a6:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <HAL_TIM_Base_MspInit+0x48>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	201d      	movs	r0, #29
 80022b8:	f000 fcb3 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022bc:	201d      	movs	r0, #29
 80022be:	f000 fccc 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b0b2      	sub	sp, #200	@ 0xc8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022f0:	2288      	movs	r2, #136	@ 0x88
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f00a f9e7 	bl	800c6c8 <memset>
  if(huart->Instance==UART4)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a90      	ldr	r2, [pc, #576]	@ (8002540 <HAL_UART_MspInit+0x26c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d144      	bne.n	800238e <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002304:	2308      	movs	r3, #8
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002308:	2300      	movs	r3, #0
 800230a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800230c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002310:	4618      	mov	r0, r3
 8002312:	f002 fcd5 	bl	8004cc0 <HAL_RCCEx_PeriphCLKConfig>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800231c:	f7ff fd6e 	bl	8001dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002320:	4b88      	ldr	r3, [pc, #544]	@ (8002544 <HAL_UART_MspInit+0x270>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002324:	4a87      	ldr	r2, [pc, #540]	@ (8002544 <HAL_UART_MspInit+0x270>)
 8002326:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800232a:	6593      	str	r3, [r2, #88]	@ 0x58
 800232c:	4b85      	ldr	r3, [pc, #532]	@ (8002544 <HAL_UART_MspInit+0x270>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002330:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002336:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002338:	4b82      	ldr	r3, [pc, #520]	@ (8002544 <HAL_UART_MspInit+0x270>)
 800233a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233c:	4a81      	ldr	r2, [pc, #516]	@ (8002544 <HAL_UART_MspInit+0x270>)
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002344:	4b7f      	ldr	r3, [pc, #508]	@ (8002544 <HAL_UART_MspInit+0x270>)
 8002346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002350:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800236a:	2308      	movs	r3, #8
 800236c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002370:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002374:	4619      	mov	r1, r3
 8002376:	4874      	ldr	r0, [pc, #464]	@ (8002548 <HAL_UART_MspInit+0x274>)
 8002378:	f001 fc64 	bl	8003c44 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	2034      	movs	r0, #52	@ 0x34
 8002382:	f000 fc4e 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002386:	2034      	movs	r0, #52	@ 0x34
 8002388:	f000 fc67 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800238c:	e0d4      	b.n	8002538 <HAL_UART_MspInit+0x264>
  else if(huart->Instance==USART1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a6e      	ldr	r2, [pc, #440]	@ (800254c <HAL_UART_MspInit+0x278>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d145      	bne.n	8002424 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002398:	2301      	movs	r3, #1
 800239a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800239c:	2300      	movs	r3, #0
 800239e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 fc8b 	bl	8004cc0 <HAL_RCCEx_PeriphCLKConfig>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80023b0:	f7ff fd24 	bl	8001dfc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b4:	4b63      	ldr	r3, [pc, #396]	@ (8002544 <HAL_UART_MspInit+0x270>)
 80023b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b8:	4a62      	ldr	r2, [pc, #392]	@ (8002544 <HAL_UART_MspInit+0x270>)
 80023ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023be:	6613      	str	r3, [r2, #96]	@ 0x60
 80023c0:	4b60      	ldr	r3, [pc, #384]	@ (8002544 <HAL_UART_MspInit+0x270>)
 80023c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c8:	623b      	str	r3, [r7, #32]
 80023ca:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	4b5d      	ldr	r3, [pc, #372]	@ (8002544 <HAL_UART_MspInit+0x270>)
 80023ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d0:	4a5c      	ldr	r2, [pc, #368]	@ (8002544 <HAL_UART_MspInit+0x270>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023d8:	4b5a      	ldr	r3, [pc, #360]	@ (8002544 <HAL_UART_MspInit+0x270>)
 80023da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f8:	2303      	movs	r3, #3
 80023fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023fe:	2307      	movs	r3, #7
 8002400:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002408:	4619      	mov	r1, r3
 800240a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800240e:	f001 fc19 	bl	8003c44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	2025      	movs	r0, #37	@ 0x25
 8002418:	f000 fc03 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800241c:	2025      	movs	r0, #37	@ 0x25
 800241e:	f000 fc1c 	bl	8002c5a <HAL_NVIC_EnableIRQ>
}
 8002422:	e089      	b.n	8002538 <HAL_UART_MspInit+0x264>
  else if(huart->Instance==USART2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a49      	ldr	r2, [pc, #292]	@ (8002550 <HAL_UART_MspInit+0x27c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d13c      	bne.n	80024a8 <HAL_UART_MspInit+0x1d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800242e:	2302      	movs	r3, #2
 8002430:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002432:	2300      	movs	r3, #0
 8002434:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002436:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800243a:	4618      	mov	r0, r3
 800243c:	f002 fc40 	bl	8004cc0 <HAL_RCCEx_PeriphCLKConfig>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_UART_MspInit+0x176>
      Error_Handler();
 8002446:	f7ff fcd9 	bl	8001dfc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800244a:	4b3e      	ldr	r3, [pc, #248]	@ (8002544 <HAL_UART_MspInit+0x270>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	4a3d      	ldr	r2, [pc, #244]	@ (8002544 <HAL_UART_MspInit+0x270>)
 8002450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002454:	6593      	str	r3, [r2, #88]	@ 0x58
 8002456:	4b3b      	ldr	r3, [pc, #236]	@ (8002544 <HAL_UART_MspInit+0x270>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	4b38      	ldr	r3, [pc, #224]	@ (8002544 <HAL_UART_MspInit+0x270>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	4a37      	ldr	r2, [pc, #220]	@ (8002544 <HAL_UART_MspInit+0x270>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800246e:	4b35      	ldr	r3, [pc, #212]	@ (8002544 <HAL_UART_MspInit+0x270>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800247a:	230c      	movs	r3, #12
 800247c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002492:	2307      	movs	r3, #7
 8002494:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800249c:	4619      	mov	r1, r3
 800249e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024a2:	f001 fbcf 	bl	8003c44 <HAL_GPIO_Init>
}
 80024a6:	e047      	b.n	8002538 <HAL_UART_MspInit+0x264>
  else if(huart->Instance==USART3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a29      	ldr	r2, [pc, #164]	@ (8002554 <HAL_UART_MspInit+0x280>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d142      	bne.n	8002538 <HAL_UART_MspInit+0x264>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024b2:	2304      	movs	r3, #4
 80024b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024b6:	2300      	movs	r3, #0
 80024b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024be:	4618      	mov	r0, r3
 80024c0:	f002 fbfe 	bl	8004cc0 <HAL_RCCEx_PeriphCLKConfig>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 80024ca:	f7ff fc97 	bl	8001dfc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002544 <HAL_UART_MspInit+0x270>)
 80024d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002544 <HAL_UART_MspInit+0x270>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024da:	4b1a      	ldr	r3, [pc, #104]	@ (8002544 <HAL_UART_MspInit+0x270>)
 80024dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e6:	4b17      	ldr	r3, [pc, #92]	@ (8002544 <HAL_UART_MspInit+0x270>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	4a16      	ldr	r2, [pc, #88]	@ (8002544 <HAL_UART_MspInit+0x270>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f2:	4b14      	ldr	r3, [pc, #80]	@ (8002544 <HAL_UART_MspInit+0x270>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024fe:	2330      	movs	r3, #48	@ 0x30
 8002500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002510:	2303      	movs	r3, #3
 8002512:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002516:	2307      	movs	r3, #7
 8002518:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002520:	4619      	mov	r1, r3
 8002522:	4809      	ldr	r0, [pc, #36]	@ (8002548 <HAL_UART_MspInit+0x274>)
 8002524:	f001 fb8e 	bl	8003c44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002528:	2200      	movs	r2, #0
 800252a:	2100      	movs	r1, #0
 800252c:	2027      	movs	r0, #39	@ 0x27
 800252e:	f000 fb78 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002532:	2027      	movs	r0, #39	@ 0x27
 8002534:	f000 fb91 	bl	8002c5a <HAL_NVIC_EnableIRQ>
}
 8002538:	bf00      	nop
 800253a:	37c8      	adds	r7, #200	@ 0xc8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40004c00 	.word	0x40004c00
 8002544:	40021000 	.word	0x40021000
 8002548:	48000800 	.word	0x48000800
 800254c:	40013800 	.word	0x40013800
 8002550:	40004400 	.word	0x40004400
 8002554:	40004800 	.word	0x40004800

08002558 <LL_TIM_ClearFlag_UPDATE>:
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f06f 0201 	mvn.w	r2, #1
 8002566:	611a      	str	r2, [r3, #16]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800259e:	bf00      	nop
 80025a0:	e7fd      	b.n	800259e <NMI_Handler+0x4>

080025a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a6:	bf00      	nop
 80025a8:	e7fd      	b.n	80025a6 <HardFault_Handler+0x4>

080025aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ae:	bf00      	nop
 80025b0:	e7fd      	b.n	80025ae <MemManage_Handler+0x4>

080025b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b6:	bf00      	nop
 80025b8:	e7fd      	b.n	80025b6 <BusFault_Handler+0x4>

080025ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025be:	bf00      	nop
 80025c0:	e7fd      	b.n	80025be <UsageFault_Handler+0x4>

080025c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80025f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002620 <SysTick_Handler+0x34>)
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <SysTick_Handler+0x18>
	  Timer1--;
 80025f8:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <SysTick_Handler+0x34>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b07      	ldr	r3, [pc, #28]	@ (8002620 <SysTick_Handler+0x34>)
 8002602:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002604:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <SysTick_Handler+0x38>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <SysTick_Handler+0x2c>
	  Timer2--;
 800260c:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <SysTick_Handler+0x38>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	4b03      	ldr	r3, [pc, #12]	@ (8002624 <SysTick_Handler+0x38>)
 8002616:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002618:	f000 f9e4 	bl	80029e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20005cf0 	.word	0x20005cf0
 8002624:	20005cf2 	.word	0x20005cf2

08002628 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 800262c:	4802      	ldr	r0, [pc, #8]	@ (8002638 <DMA1_Channel5_IRQHandler+0x10>)
 800262e:	f001 fa2a 	bl	8003a86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000194 	.word	0x20000194

0800263c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if (LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 8002640:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002644:	f7ff ff96 	bl	8002574 <LL_TIM_IsActiveFlag_UPDATE>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d03a      	beq.n	80026c4 <TIM2_IRQHandler+0x88>
		LL_TIM_ClearFlag_UPDATE(TIM2);
 800264e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002652:	f7ff ff81 	bl	8002558 <LL_TIM_ClearFlag_UPDATE>
		newSample.uShort = ((uint16_t)32768 + playback_buffer[sample_position]) / DIVISION_FACTOR;
 8002656:	4b1c      	ldr	r3, [pc, #112]	@ (80026c8 <TIM2_IRQHandler+0x8c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1c      	ldr	r2, [pc, #112]	@ (80026cc <TIM2_IRQHandler+0x90>)
 800265c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002660:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002664:	4a1a      	ldr	r2, [pc, #104]	@ (80026d0 <TIM2_IRQHandler+0x94>)
 8002666:	fb82 1203 	smull	r1, r2, r2, r3
 800266a:	10d2      	asrs	r2, r2, #3
 800266c:	17db      	asrs	r3, r3, #31
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	b29a      	uxth	r2, r3
 8002672:	4b18      	ldr	r3, [pc, #96]	@ (80026d4 <TIM2_IRQHandler+0x98>)
 8002674:	801a      	strh	r2, [r3, #0]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (newSample.uShort>>4));
 8002676:	4b17      	ldr	r3, [pc, #92]	@ (80026d4 <TIM2_IRQHandler+0x98>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	b29b      	uxth	r3, r3
 800267e:	2200      	movs	r2, #0
 8002680:	2100      	movs	r1, #0
 8002682:	4815      	ldr	r0, [pc, #84]	@ (80026d8 <TIM2_IRQHandler+0x9c>)
 8002684:	f000 fbcc 	bl	8002e20 <HAL_DAC_SetValue>

		sample_position++;
 8002688:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <TIM2_IRQHandler+0x8c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	4a0e      	ldr	r2, [pc, #56]	@ (80026c8 <TIM2_IRQHandler+0x8c>)
 8002690:	6013      	str	r3, [r2, #0]
		samples_played++;
 8002692:	4b12      	ldr	r3, [pc, #72]	@ (80026dc <TIM2_IRQHandler+0xa0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	4a10      	ldr	r2, [pc, #64]	@ (80026dc <TIM2_IRQHandler+0xa0>)
 800269a:	6013      	str	r3, [r2, #0]

		if (sample_position == AUDIO_BUFFER_SIZE){
 800269c:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <TIM2_IRQHandler+0x8c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026a4:	d102      	bne.n	80026ac <TIM2_IRQHandler+0x70>
			buffer_half = 1;
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <TIM2_IRQHandler+0xa4>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
		}
		if (sample_position == AUDIO_BUFFER_SIZE * 2){
 80026ac:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <TIM2_IRQHandler+0x8c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80026b4:	d106      	bne.n	80026c4 <TIM2_IRQHandler+0x88>
			buffer_complete = 1;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <TIM2_IRQHandler+0xa8>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
			sample_position = 0;
 80026bc:	4b02      	ldr	r3, [pc, #8]	@ (80026c8 <TIM2_IRQHandler+0x8c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
		}

	}
	return;
 80026c2:	bf00      	nop
 80026c4:	bf00      	nop
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000058 	.word	0x20000058
 80026cc:	20002c50 	.word	0x20002c50
 80026d0:	66666667 	.word	0x66666667
 80026d4:	20005cb8 	.word	0x20005cb8
 80026d8:	200000f4 	.word	0x200000f4
 80026dc:	20000030 	.word	0x20000030
 80026e0:	20002c48 	.word	0x20002c48
 80026e4:	20002c4c 	.word	0x20002c4c

080026e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  if(!buttonReady){
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <TIM3_IRQHandler+0x2c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d102      	bne.n	80026fa <TIM3_IRQHandler+0x12>
	buttonReady = 1;
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <TIM3_IRQHandler+0x2c>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026fa:	4807      	ldr	r0, [pc, #28]	@ (8002718 <TIM3_IRQHandler+0x30>)
 80026fc:	f003 fdc0 	bl	8006280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  if (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK) {
 8002700:	4805      	ldr	r0, [pc, #20]	@ (8002718 <TIM3_IRQHandler+0x30>)
 8002702:	f003 fd8e 	bl	8006222 <HAL_TIM_Base_Stop_IT>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <TIM3_IRQHandler+0x28>
    Error_Handler();
 800270c:	f7ff fb76 	bl	8001dfc <Error_Handler>
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000054 	.word	0x20000054
 8002718:	200002a4 	.word	0x200002a4

0800271c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002720:	4802      	ldr	r0, [pc, #8]	@ (800272c <USART1_IRQHandler+0x10>)
 8002722:	f004 fa5d 	bl	8006be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000378 	.word	0x20000378

08002730 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002734:	4802      	ldr	r0, [pc, #8]	@ (8002740 <USART3_IRQHandler+0x10>)
 8002736:	f004 fa53 	bl	8006be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */


  /* USER CODE END USART3_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000488 	.word	0x20000488

08002744 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userControl_Pin);
 8002748:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800274c:	f001 fc3c 	bl	8003fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002758:	4802      	ldr	r0, [pc, #8]	@ (8002764 <UART4_IRQHandler+0x10>)
 800275a:	f004 fa41 	bl	8006be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200002f0 	.word	0x200002f0

08002768 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <TIM6_DAC_IRQHandler+0x10>)
 800276e:	f000 fafd 	bl	8002d6c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200000f4 	.word	0x200000f4

0800277c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	e00a      	b.n	80027a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800278e:	f3af 8000 	nop.w
 8002792:	4601      	mov	r1, r0
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	60ba      	str	r2, [r7, #8]
 800279a:	b2ca      	uxtb	r2, r1
 800279c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dbf0      	blt.n	800278e <_read+0x12>
  }

  return len;
 80027ac:	687b      	ldr	r3, [r7, #4]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e009      	b.n	80027dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	60ba      	str	r2, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fa37 	bl	8001c44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3301      	adds	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	dbf1      	blt.n	80027c8 <_write+0x12>
  }
  return len;
 80027e4:	687b      	ldr	r3, [r7, #4]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_close>:

int _close(int file)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002816:	605a      	str	r2, [r3, #4]
  return 0;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <_isatty>:

int _isatty(int file)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800282e:	2301      	movs	r3, #1
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002860:	4a14      	ldr	r2, [pc, #80]	@ (80028b4 <_sbrk+0x5c>)
 8002862:	4b15      	ldr	r3, [pc, #84]	@ (80028b8 <_sbrk+0x60>)
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800286c:	4b13      	ldr	r3, [pc, #76]	@ (80028bc <_sbrk+0x64>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002874:	4b11      	ldr	r3, [pc, #68]	@ (80028bc <_sbrk+0x64>)
 8002876:	4a12      	ldr	r2, [pc, #72]	@ (80028c0 <_sbrk+0x68>)
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800287a:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <_sbrk+0x64>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	429a      	cmp	r2, r3
 8002886:	d207      	bcs.n	8002898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002888:	f009 ff7e 	bl	800c788 <__errno>
 800288c:	4603      	mov	r3, r0
 800288e:	220c      	movs	r2, #12
 8002890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
 8002896:	e009      	b.n	80028ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002898:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <_sbrk+0x64>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800289e:	4b07      	ldr	r3, [pc, #28]	@ (80028bc <_sbrk+0x64>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	4a05      	ldr	r2, [pc, #20]	@ (80028bc <_sbrk+0x64>)
 80028a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028aa:	68fb      	ldr	r3, [r7, #12]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20018000 	.word	0x20018000
 80028b8:	00005000 	.word	0x00005000
 80028bc:	20005cbc 	.word	0x20005cbc
 80028c0:	20006078 	.word	0x20006078

080028c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028c8:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <SystemInit+0x20>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ce:	4a05      	ldr	r2, [pc, #20]	@ (80028e4 <SystemInit+0x20>)
 80028d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002920 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028ec:	f7ff ffea 	bl	80028c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028f0:	480c      	ldr	r0, [pc, #48]	@ (8002924 <LoopForever+0x6>)
  ldr r1, =_edata
 80028f2:	490d      	ldr	r1, [pc, #52]	@ (8002928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028f4:	4a0d      	ldr	r2, [pc, #52]	@ (800292c <LoopForever+0xe>)
  movs r3, #0
 80028f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f8:	e002      	b.n	8002900 <LoopCopyDataInit>

080028fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028fe:	3304      	adds	r3, #4

08002900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002904:	d3f9      	bcc.n	80028fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002906:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002908:	4c0a      	ldr	r4, [pc, #40]	@ (8002934 <LoopForever+0x16>)
  movs r3, #0
 800290a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800290c:	e001      	b.n	8002912 <LoopFillZerobss>

0800290e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800290e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002910:	3204      	adds	r2, #4

08002912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002914:	d3fb      	bcc.n	800290e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002916:	f009 ff3d 	bl	800c794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800291a:	f7fe fc03 	bl	8001124 <main>

0800291e <LoopForever>:

LoopForever:
    b LoopForever
 800291e:	e7fe      	b.n	800291e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002920:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002928:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 800292c:	0800da40 	.word	0x0800da40
  ldr r2, =_sbss
 8002930:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002934:	20006078 	.word	0x20006078

08002938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002938:	e7fe      	b.n	8002938 <ADC1_2_IRQHandler>

0800293a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002944:	2003      	movs	r0, #3
 8002946:	f000 f961 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800294a:	2001      	movs	r0, #1
 800294c:	f000 f80e 	bl	800296c <HAL_InitTick>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	71fb      	strb	r3, [r7, #7]
 800295a:	e001      	b.n	8002960 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800295c:	f7ff fa54 	bl	8001e08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002960:	79fb      	ldrb	r3, [r7, #7]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002978:	4b17      	ldr	r3, [pc, #92]	@ (80029d8 <HAL_InitTick+0x6c>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d023      	beq.n	80029c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002980:	4b16      	ldr	r3, [pc, #88]	@ (80029dc <HAL_InitTick+0x70>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <HAL_InitTick+0x6c>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800298e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f96d 	bl	8002c76 <HAL_SYSTICK_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b0f      	cmp	r3, #15
 80029a6:	d809      	bhi.n	80029bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a8:	2200      	movs	r2, #0
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295
 80029b0:	f000 f937 	bl	8002c22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029b4:	4a0a      	ldr	r2, [pc, #40]	@ (80029e0 <HAL_InitTick+0x74>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e007      	b.n	80029cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	e004      	b.n	80029cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e001      	b.n	80029cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000064 	.word	0x20000064
 80029dc:	2000005c 	.word	0x2000005c
 80029e0:	20000060 	.word	0x20000060

080029e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029e8:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_IncTick+0x20>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <HAL_IncTick+0x24>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	4a04      	ldr	r2, [pc, #16]	@ (8002a08 <HAL_IncTick+0x24>)
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000064 	.word	0x20000064
 8002a08:	20005cc0 	.word	0x20005cc0

08002a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a10:	4b03      	ldr	r3, [pc, #12]	@ (8002a20 <HAL_GetTick+0x14>)
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20005cc0 	.word	0x20005cc0

08002a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a2c:	f7ff ffee 	bl	8002a0c <HAL_GetTick>
 8002a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3c:	d005      	beq.n	8002a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a68 <HAL_Delay+0x44>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4413      	add	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a4a:	bf00      	nop
 8002a4c:	f7ff ffde 	bl	8002a0c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d8f7      	bhi.n	8002a4c <HAL_Delay+0x28>
  {
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000064 	.word	0x20000064

08002a6c <__NVIC_SetPriorityGrouping>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9e:	4a04      	ldr	r2, [pc, #16]	@ (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	60d3      	str	r3, [r2, #12]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_GetPriorityGrouping>:
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab8:	4b04      	ldr	r3, [pc, #16]	@ (8002acc <__NVIC_GetPriorityGrouping+0x18>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 0307 	and.w	r3, r3, #7
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_EnableIRQ>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	db0b      	blt.n	8002afa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	f003 021f 	and.w	r2, r3, #31
 8002ae8:	4907      	ldr	r1, [pc, #28]	@ (8002b08 <__NVIC_EnableIRQ+0x38>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	2001      	movs	r0, #1
 8002af2:	fa00 f202 	lsl.w	r2, r0, r2
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000e100 	.word	0xe000e100

08002b0c <__NVIC_SetPriority>:
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db0a      	blt.n	8002b36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	490c      	ldr	r1, [pc, #48]	@ (8002b58 <__NVIC_SetPriority+0x4c>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002b34:	e00a      	b.n	8002b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4908      	ldr	r1, [pc, #32]	@ (8002b5c <__NVIC_SetPriority+0x50>)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	3b04      	subs	r3, #4
 8002b44:	0112      	lsls	r2, r2, #4
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	440b      	add	r3, r1
 8002b4a:	761a      	strb	r2, [r3, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000e100 	.word	0xe000e100
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <NVIC_EncodePriority>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	@ 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f1c3 0307 	rsb	r3, r3, #7
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	bf28      	it	cs
 8002b7e:	2304      	movcs	r3, #4
 8002b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d902      	bls.n	8002b90 <NVIC_EncodePriority+0x30>
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3b03      	subs	r3, #3
 8002b8e:	e000      	b.n	8002b92 <NVIC_EncodePriority+0x32>
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	f04f 32ff 	mov.w	r2, #4294967295
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43d9      	mvns	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	4313      	orrs	r3, r2
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3724      	adds	r7, #36	@ 0x24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bd8:	d301      	bcc.n	8002bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e00f      	b.n	8002bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bde:	4a0a      	ldr	r2, [pc, #40]	@ (8002c08 <SysTick_Config+0x40>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be6:	210f      	movs	r1, #15
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bec:	f7ff ff8e 	bl	8002b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf0:	4b05      	ldr	r3, [pc, #20]	@ (8002c08 <SysTick_Config+0x40>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf6:	4b04      	ldr	r3, [pc, #16]	@ (8002c08 <SysTick_Config+0x40>)
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	e000e010 	.word	0xe000e010

08002c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ff29 	bl	8002a6c <__NVIC_SetPriorityGrouping>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c34:	f7ff ff3e 	bl	8002ab4 <__NVIC_GetPriorityGrouping>
 8002c38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f7ff ff8e 	bl	8002b60 <NVIC_EncodePriority>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff5d 	bl	8002b0c <__NVIC_SetPriority>
}
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff31 	bl	8002ad0 <__NVIC_EnableIRQ>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffa2 	bl	8002bc8 <SysTick_Config>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e014      	b.n	8002cca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	791b      	ldrb	r3, [r3, #4]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d105      	bne.n	8002cb6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff f8cd 	bl	8001e50 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	795b      	ldrb	r3, [r3, #5]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_DAC_Start+0x16>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e03b      	b.n	8002d60 <HAL_DAC_Start+0x8e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6819      	ldr	r1, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2201      	movs	r2, #1
 8002d02:	409a      	lsls	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10f      	bne.n	8002d32 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d118      	bne.n	8002d52 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	e00f      	b.n	8002d52 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002d3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d40:	d107      	bne.n	8002d52 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0202 	orr.w	r2, r2, #2
 8002d50:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d82:	d120      	bne.n	8002dc6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d92:	d118      	bne.n	8002dc6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2204      	movs	r2, #4
 8002d98:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f043 0201 	orr.w	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f852 	bl	8002e6a <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dd4:	d120      	bne.n	8002e18 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ddc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002de4:	d118      	bne.n	8002e18 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2204      	movs	r2, #4
 8002dea:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f043 0202 	orr.w	r2, r3, #2
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002e00:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002e10:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f95a 	bl	80030cc <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	3308      	adds	r3, #8
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e004      	b.n	8002e54 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	3314      	adds	r3, #20
 8002e52:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	461a      	mov	r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b088      	sub	sp, #32
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	795b      	ldrb	r3, [r3, #5]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_DAC_ConfigChannel+0x1c>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e114      	b.n	80030c4 <HAL_DAC_ConfigChannel+0x246>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	f040 8081 	bne.w	8002fb2 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002eb0:	f7ff fdac 	bl	8002a0c <HAL_GetTick>
 8002eb4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d140      	bne.n	8002f3e <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ebc:	e018      	b.n	8002ef0 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ebe:	f7ff fda5 	bl	8002a0c <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d911      	bls.n	8002ef0 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f043 0208 	orr.w	r2, r3, #8
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2203      	movs	r2, #3
 8002eea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0e9      	b.n	80030c4 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1df      	bne.n	8002ebe <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7ff fd90 	bl	8002a24 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	6992      	ldr	r2, [r2, #24]
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f0e:	e023      	b.n	8002f58 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f10:	f7ff fd7c 	bl	8002a0c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d90f      	bls.n	8002f3e <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	da0a      	bge.n	8002f3e <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f043 0208 	orr.w	r2, r3, #8
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2203      	movs	r2, #3
 8002f38:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e0c2      	b.n	80030c4 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	dbe3      	blt.n	8002f10 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002f48:	2001      	movs	r0, #1
 8002f4a:	f7ff fd6b 	bl	8002a24 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	6992      	ldr	r2, [r2, #24]
 8002f56:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	ea02 0103 	and.w	r1, r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	21ff      	movs	r1, #255	@ 0xff
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	ea02 0103 	and.w	r1, r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d11d      	bne.n	8002ff6 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	221f      	movs	r2, #31
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffc:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2207      	movs	r2, #7
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	431a      	orrs	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	400a      	ands	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6819      	ldr	r1, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	22c0      	movs	r2, #192	@ 0xc0
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43da      	mvns	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	400a      	ands	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3720      	adds	r7, #32
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0ac      	b.n	800324c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fa8c 	bl	8003614 <DFSDM_GetChannelFromInstance>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4a55      	ldr	r2, [pc, #340]	@ (8003254 <HAL_DFSDM_ChannelInit+0x174>)
 8003100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e09f      	b.n	800324c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fe ffb3 	bl	8002078 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003112:	4b51      	ldr	r3, [pc, #324]	@ (8003258 <HAL_DFSDM_ChannelInit+0x178>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3301      	adds	r3, #1
 8003118:	4a4f      	ldr	r2, [pc, #316]	@ (8003258 <HAL_DFSDM_ChannelInit+0x178>)
 800311a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800311c:	4b4e      	ldr	r3, [pc, #312]	@ (8003258 <HAL_DFSDM_ChannelInit+0x178>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d125      	bne.n	8003170 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003124:	4b4d      	ldr	r3, [pc, #308]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a4c      	ldr	r2, [pc, #304]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 800312a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800312e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003130:	4b4a      	ldr	r3, [pc, #296]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4948      	ldr	r1, [pc, #288]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800313e:	4b47      	ldr	r3, [pc, #284]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a46      	ldr	r2, [pc, #280]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003144:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003148:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	791b      	ldrb	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d108      	bne.n	8003164 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003152:	4b42      	ldr	r3, [pc, #264]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	3b01      	subs	r3, #1
 800315c:	041b      	lsls	r3, r3, #16
 800315e:	493f      	ldr	r1, [pc, #252]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003164:	4b3d      	ldr	r3, [pc, #244]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a3c      	ldr	r2, [pc, #240]	@ (800325c <HAL_DFSDM_ChannelInit+0x17c>)
 800316a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800316e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800317e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6819      	ldr	r1, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800318e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003194:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 020f 	bic.w	r2, r2, #15
 80031ac:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6819      	ldr	r1, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80031d4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6899      	ldr	r1, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	3b01      	subs	r3, #1
 80031e6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f002 0207 	and.w	r2, r2, #7
 8003200:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800322c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f9ea 	bl	8003614 <DFSDM_GetChannelFromInstance>
 8003240:	4602      	mov	r2, r0
 8003242:	4904      	ldr	r1, [pc, #16]	@ (8003254 <HAL_DFSDM_ChannelInit+0x174>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	20005cc8 	.word	0x20005cc8
 8003258:	20005cc4 	.word	0x20005cc4
 800325c:	40016000 	.word	0x40016000

08003260 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0ca      	b.n	8003408 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a66      	ldr	r2, [pc, #408]	@ (8003410 <HAL_DFSDM_FilterInit+0x1b0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d109      	bne.n	8003290 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003280:	2b01      	cmp	r3, #1
 8003282:	d003      	beq.n	800328c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0bb      	b.n	8003408 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7fe fe17 	bl	8001edc <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 80032bc:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7a1b      	ldrb	r3, [r3, #8]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d108      	bne.n	80032d8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e007      	b.n	80032e8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80032e6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7a5b      	ldrb	r3, [r3, #9]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d108      	bne.n	8003302 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e007      	b.n	8003312 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8003310:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	f423 43ce 	bic.w	r3, r3, #26368	@ 0x6700
 8003320:	f023 0308 	bic.w	r3, r3, #8
 8003324:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d108      	bne.n	8003340 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	7c1b      	ldrb	r3, [r3, #16]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d108      	bne.n	800335a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0210 	orr.w	r2, r2, #16
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	e007      	b.n	800336a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0210 	bic.w	r2, r2, #16
 8003368:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7c5b      	ldrb	r3, [r3, #17]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d108      	bne.n	8003384 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0220 	orr.w	r2, r2, #32
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	e007      	b.n	8003394 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0220 	bic.w	r2, r2, #32
 8003392:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 80033a2:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80033a6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6959      	ldr	r1, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80033ba:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80033c2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699a      	ldr	r2, [r3, #24]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7c1a      	ldrb	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40016100 	.word	0x40016100

08003414 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d02e      	beq.n	800348c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003434:	2bff      	cmp	r3, #255	@ 0xff
 8003436:	d029      	beq.n	800348c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800344a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d10d      	bne.n	800346e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003460:	431a      	orrs	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e00a      	b.n	8003484 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6819      	ldr	r1, [r3, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30
 800348a:	e001      	b.n	8003490 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003490:	7dfb      	ldrb	r3, [r7, #23]
}
 8003492:	4618      	mov	r0, r3
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d102      	bne.n	80034c2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	75fb      	strb	r3, [r7, #23]
 80034c0:	e064      	b.n	800358c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034d0:	d002      	beq.n	80034d8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	75fb      	strb	r3, [r7, #23]
 80034d6:	e059      	b.n	800358c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10e      	bne.n	80034fe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d105      	bne.n	80034fe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d002      	beq.n	80034fe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	75fb      	strb	r3, [r7, #23]
 80034fc:	e046      	b.n	800358c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10b      	bne.n	800351e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800350a:	2b00      	cmp	r3, #0
 800350c:	d107      	bne.n	800351e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003512:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003514:	2b20      	cmp	r3, #32
 8003516:	d102      	bne.n	800351e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
 800351c:	e036      	b.n	800358c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003524:	2b01      	cmp	r3, #1
 8003526:	d004      	beq.n	8003532 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800352e:	2b03      	cmp	r3, #3
 8003530:	d12a      	bne.n	8003588 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003536:	4a18      	ldr	r2, [pc, #96]	@ (8003598 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003538:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353e:	4a17      	ldr	r2, [pc, #92]	@ (800359c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003540:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003546:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003548:	2b20      	cmp	r3, #32
 800354a:	d101      	bne.n	8003550 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 800354c:	4a14      	ldr	r2, [pc, #80]	@ (80035a0 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800354e:	e000      	b.n	8003552 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8003550:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	331c      	adds	r3, #28
 8003562:	4619      	mov	r1, r3
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f000 f9ae 	bl	80038c8 <HAL_DMA_Start_IT>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d006      	beq.n	8003580 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	22ff      	movs	r2, #255	@ 0xff
 8003576:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800357e:	e005      	b.n	800358c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f893 	bl	80036ac <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003586:	e001      	b.n	800358c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800358c:	7dfb      	ldrb	r3, [r7, #23]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	080035d5 	.word	0x080035d5
 800359c:	080035f1 	.word	0x080035f1
 80035a0:	080035b9 	.word	0x080035b9

080035a4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f7fe fb5a 	bl	8001c80 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f7fe fb62 	bl	8001cac <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2203      	movs	r2, #3
 8003602:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7ff ffcd 	bl	80035a4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a1c      	ldr	r2, [pc, #112]	@ (8003690 <DFSDM_GetChannelFromInstance+0x7c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d102      	bne.n	800362a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e02b      	b.n	8003682 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a19      	ldr	r2, [pc, #100]	@ (8003694 <DFSDM_GetChannelFromInstance+0x80>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d102      	bne.n	8003638 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003632:	2301      	movs	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	e024      	b.n	8003682 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a17      	ldr	r2, [pc, #92]	@ (8003698 <DFSDM_GetChannelFromInstance+0x84>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d102      	bne.n	8003646 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003640:	2302      	movs	r3, #2
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e01d      	b.n	8003682 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a14      	ldr	r2, [pc, #80]	@ (800369c <DFSDM_GetChannelFromInstance+0x88>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d102      	bne.n	8003654 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800364e:	2304      	movs	r3, #4
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e016      	b.n	8003682 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a12      	ldr	r2, [pc, #72]	@ (80036a0 <DFSDM_GetChannelFromInstance+0x8c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d102      	bne.n	8003662 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800365c:	2305      	movs	r3, #5
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e00f      	b.n	8003682 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a0f      	ldr	r2, [pc, #60]	@ (80036a4 <DFSDM_GetChannelFromInstance+0x90>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d102      	bne.n	8003670 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800366a:	2306      	movs	r3, #6
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	e008      	b.n	8003682 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a0d      	ldr	r2, [pc, #52]	@ (80036a8 <DFSDM_GetChannelFromInstance+0x94>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d102      	bne.n	800367e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003678:	2307      	movs	r3, #7
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e001      	b.n	8003682 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800367e:	2303      	movs	r3, #3
 8003680:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003682:	68fb      	ldr	r3, [r7, #12]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40016000 	.word	0x40016000
 8003694:	40016020 	.word	0x40016020
 8003698:	40016040 	.word	0x40016040
 800369c:	40016080 	.word	0x40016080
 80036a0:	400160a0 	.word	0x400160a0
 80036a4:	400160c0 	.word	0x400160c0
 80036a8:	400160e0 	.word	0x400160e0

080036ac <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d108      	bne.n	80036ce <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	e033      	b.n	8003736 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80036ec:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0201 	orr.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003704:	2b03      	cmp	r3, #3
 8003706:	d116      	bne.n	8003736 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	2b00      	cmp	r3, #0
 800370e:	d107      	bne.n	8003720 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0202 	orr.w	r2, r2, #2
 800371e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003726:	2b01      	cmp	r3, #1
 8003728:	d102      	bne.n	8003730 <DFSDM_RegConvStart+0x84>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	e000      	b.n	8003732 <DFSDM_RegConvStart+0x86>
 8003730:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <DFSDM_RegConvStart+0x98>
 8003740:	2202      	movs	r2, #2
 8003742:	e000      	b.n	8003746 <DFSDM_RegConvStart+0x9a>
 8003744:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e098      	b.n	800389c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	4b4d      	ldr	r3, [pc, #308]	@ (80038a8 <HAL_DMA_Init+0x150>)
 8003772:	429a      	cmp	r2, r3
 8003774:	d80f      	bhi.n	8003796 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	4b4b      	ldr	r3, [pc, #300]	@ (80038ac <HAL_DMA_Init+0x154>)
 800377e:	4413      	add	r3, r2
 8003780:	4a4b      	ldr	r2, [pc, #300]	@ (80038b0 <HAL_DMA_Init+0x158>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	009a      	lsls	r2, r3, #2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a48      	ldr	r2, [pc, #288]	@ (80038b4 <HAL_DMA_Init+0x15c>)
 8003792:	641a      	str	r2, [r3, #64]	@ 0x40
 8003794:	e00e      	b.n	80037b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	4b46      	ldr	r3, [pc, #280]	@ (80038b8 <HAL_DMA_Init+0x160>)
 800379e:	4413      	add	r3, r2
 80037a0:	4a43      	ldr	r2, [pc, #268]	@ (80038b0 <HAL_DMA_Init+0x158>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	009a      	lsls	r2, r3, #2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a42      	ldr	r2, [pc, #264]	@ (80038bc <HAL_DMA_Init+0x164>)
 80037b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80037ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800380e:	d039      	beq.n	8003884 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	4a27      	ldr	r2, [pc, #156]	@ (80038b4 <HAL_DMA_Init+0x15c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d11a      	bne.n	8003850 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800381a:	4b29      	ldr	r3, [pc, #164]	@ (80038c0 <HAL_DMA_Init+0x168>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003822:	f003 031c 	and.w	r3, r3, #28
 8003826:	210f      	movs	r1, #15
 8003828:	fa01 f303 	lsl.w	r3, r1, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	4924      	ldr	r1, [pc, #144]	@ (80038c0 <HAL_DMA_Init+0x168>)
 8003830:	4013      	ands	r3, r2
 8003832:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003834:	4b22      	ldr	r3, [pc, #136]	@ (80038c0 <HAL_DMA_Init+0x168>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003840:	f003 031c 	and.w	r3, r3, #28
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	491d      	ldr	r1, [pc, #116]	@ (80038c0 <HAL_DMA_Init+0x168>)
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]
 800384e:	e019      	b.n	8003884 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003850:	4b1c      	ldr	r3, [pc, #112]	@ (80038c4 <HAL_DMA_Init+0x16c>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003858:	f003 031c 	and.w	r3, r3, #28
 800385c:	210f      	movs	r1, #15
 800385e:	fa01 f303 	lsl.w	r3, r1, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	4917      	ldr	r1, [pc, #92]	@ (80038c4 <HAL_DMA_Init+0x16c>)
 8003866:	4013      	ands	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800386a:	4b16      	ldr	r3, [pc, #88]	@ (80038c4 <HAL_DMA_Init+0x16c>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	f003 031c 	and.w	r3, r3, #28
 800387a:	fa01 f303 	lsl.w	r3, r1, r3
 800387e:	4911      	ldr	r1, [pc, #68]	@ (80038c4 <HAL_DMA_Init+0x16c>)
 8003880:	4313      	orrs	r3, r2
 8003882:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	40020407 	.word	0x40020407
 80038ac:	bffdfff8 	.word	0xbffdfff8
 80038b0:	cccccccd 	.word	0xcccccccd
 80038b4:	40020000 	.word	0x40020000
 80038b8:	bffdfbf8 	.word	0xbffdfbf8
 80038bc:	40020400 	.word	0x40020400
 80038c0:	400200a8 	.word	0x400200a8
 80038c4:	400204a8 	.word	0x400204a8

080038c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_DMA_Start_IT+0x20>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e04b      	b.n	8003980 <HAL_DMA_Start_IT+0xb8>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d13a      	bne.n	8003972 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f95f 	bl	8003be4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 020e 	orr.w	r2, r2, #14
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	e00f      	b.n	8003960 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0204 	bic.w	r2, r2, #4
 800394e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 020a 	orr.w	r2, r2, #10
 800395e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e005      	b.n	800397e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800397a:	2302      	movs	r3, #2
 800397c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800397e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d008      	beq.n	80039b2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2204      	movs	r2, #4
 80039a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e022      	b.n	80039f8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 020e 	bic.w	r2, r2, #14
 80039c0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0201 	bic.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d6:	f003 021c 	and.w	r2, r3, #28
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	2101      	movs	r1, #1
 80039e0:	fa01 f202 	lsl.w	r2, r1, r2
 80039e4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d005      	beq.n	8003a28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
 8003a26:	e029      	b.n	8003a7c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 020e 	bic.w	r2, r2, #14
 8003a36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4c:	f003 021c 	and.w	r2, r3, #28
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	2101      	movs	r1, #1
 8003a56:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
    }
  }
  return status;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	f003 031c 	and.w	r3, r3, #28
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d026      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x7a>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d021      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d107      	bne.n	8003ada <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0204 	bic.w	r2, r2, #4
 8003ad8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	f003 021c 	and.w	r2, r3, #28
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	2104      	movs	r1, #4
 8003ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8003aec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d071      	beq.n	8003bda <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003afe:	e06c      	b.n	8003bda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b04:	f003 031c 	and.w	r3, r3, #28
 8003b08:	2202      	movs	r2, #2
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d02e      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xec>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d029      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10b      	bne.n	8003b44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 020a 	bic.w	r2, r2, #10
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b48:	f003 021c 	and.w	r2, r3, #28
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	2102      	movs	r1, #2
 8003b52:	fa01 f202 	lsl.w	r2, r1, r2
 8003b56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d038      	beq.n	8003bda <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b70:	e033      	b.n	8003bda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	f003 031c 	and.w	r3, r3, #28
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d02a      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x156>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d025      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 020e 	bic.w	r2, r2, #14
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba4:	f003 021c 	and.w	r2, r3, #28
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
}
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf6:	f003 021c 	and.w	r2, r3, #28
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	2101      	movs	r1, #1
 8003c00:	fa01 f202 	lsl.w	r2, r1, r2
 8003c04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d108      	bne.n	8003c28 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c26:	e007      	b.n	8003c38 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c52:	e17f      	b.n	8003f54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	2101      	movs	r1, #1
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c60:	4013      	ands	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8171 	beq.w	8003f4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d005      	beq.n	8003c84 <HAL_GPIO_Init+0x40>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d130      	bne.n	8003ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	2203      	movs	r2, #3
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cba:	2201      	movs	r2, #1
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	091b      	lsrs	r3, r3, #4
 8003cd0:	f003 0201 	and.w	r2, r3, #1
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d118      	bne.n	8003d24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4013      	ands	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	08db      	lsrs	r3, r3, #3
 8003d0e:	f003 0201 	and.w	r2, r3, #1
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d017      	beq.n	8003d60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4013      	ands	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d123      	bne.n	8003db4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	08da      	lsrs	r2, r3, #3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3208      	adds	r2, #8
 8003d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	220f      	movs	r2, #15
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	08da      	lsrs	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3208      	adds	r2, #8
 8003dae:	6939      	ldr	r1, [r7, #16]
 8003db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0203 	and.w	r2, r3, #3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80ac 	beq.w	8003f4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df6:	4b5f      	ldr	r3, [pc, #380]	@ (8003f74 <HAL_GPIO_Init+0x330>)
 8003df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfa:	4a5e      	ldr	r2, [pc, #376]	@ (8003f74 <HAL_GPIO_Init+0x330>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e02:	4b5c      	ldr	r3, [pc, #368]	@ (8003f74 <HAL_GPIO_Init+0x330>)
 8003e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e0e:	4a5a      	ldr	r2, [pc, #360]	@ (8003f78 <HAL_GPIO_Init+0x334>)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	089b      	lsrs	r3, r3, #2
 8003e14:	3302      	adds	r3, #2
 8003e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	220f      	movs	r2, #15
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e38:	d025      	beq.n	8003e86 <HAL_GPIO_Init+0x242>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a4f      	ldr	r2, [pc, #316]	@ (8003f7c <HAL_GPIO_Init+0x338>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01f      	beq.n	8003e82 <HAL_GPIO_Init+0x23e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a4e      	ldr	r2, [pc, #312]	@ (8003f80 <HAL_GPIO_Init+0x33c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d019      	beq.n	8003e7e <HAL_GPIO_Init+0x23a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a4d      	ldr	r2, [pc, #308]	@ (8003f84 <HAL_GPIO_Init+0x340>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_GPIO_Init+0x236>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a4c      	ldr	r2, [pc, #304]	@ (8003f88 <HAL_GPIO_Init+0x344>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00d      	beq.n	8003e76 <HAL_GPIO_Init+0x232>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a4b      	ldr	r2, [pc, #300]	@ (8003f8c <HAL_GPIO_Init+0x348>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d007      	beq.n	8003e72 <HAL_GPIO_Init+0x22e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a4a      	ldr	r2, [pc, #296]	@ (8003f90 <HAL_GPIO_Init+0x34c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d101      	bne.n	8003e6e <HAL_GPIO_Init+0x22a>
 8003e6a:	2306      	movs	r3, #6
 8003e6c:	e00c      	b.n	8003e88 <HAL_GPIO_Init+0x244>
 8003e6e:	2307      	movs	r3, #7
 8003e70:	e00a      	b.n	8003e88 <HAL_GPIO_Init+0x244>
 8003e72:	2305      	movs	r3, #5
 8003e74:	e008      	b.n	8003e88 <HAL_GPIO_Init+0x244>
 8003e76:	2304      	movs	r3, #4
 8003e78:	e006      	b.n	8003e88 <HAL_GPIO_Init+0x244>
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e004      	b.n	8003e88 <HAL_GPIO_Init+0x244>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e002      	b.n	8003e88 <HAL_GPIO_Init+0x244>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_GPIO_Init+0x244>
 8003e86:	2300      	movs	r3, #0
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	f002 0203 	and.w	r2, r2, #3
 8003e8e:	0092      	lsls	r2, r2, #2
 8003e90:	4093      	lsls	r3, r2
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e98:	4937      	ldr	r1, [pc, #220]	@ (8003f78 <HAL_GPIO_Init+0x334>)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8003f94 <HAL_GPIO_Init+0x350>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003eca:	4a32      	ldr	r2, [pc, #200]	@ (8003f94 <HAL_GPIO_Init+0x350>)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ed0:	4b30      	ldr	r3, [pc, #192]	@ (8003f94 <HAL_GPIO_Init+0x350>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4013      	ands	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ef4:	4a27      	ldr	r2, [pc, #156]	@ (8003f94 <HAL_GPIO_Init+0x350>)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003efa:	4b26      	ldr	r3, [pc, #152]	@ (8003f94 <HAL_GPIO_Init+0x350>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	43db      	mvns	r3, r3
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4013      	ands	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003f94 <HAL_GPIO_Init+0x350>)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f24:	4b1b      	ldr	r3, [pc, #108]	@ (8003f94 <HAL_GPIO_Init+0x350>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4013      	ands	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f48:	4a12      	ldr	r2, [pc, #72]	@ (8003f94 <HAL_GPIO_Init+0x350>)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	3301      	adds	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f47f ae78 	bne.w	8003c54 <HAL_GPIO_Init+0x10>
  }
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	48000400 	.word	0x48000400
 8003f80:	48000800 	.word	0x48000800
 8003f84:	48000c00 	.word	0x48000c00
 8003f88:	48001000 	.word	0x48001000
 8003f8c:	48001400 	.word	0x48001400
 8003f90:	48001800 	.word	0x48001800
 8003f94:	40010400 	.word	0x40010400

08003f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	807b      	strh	r3, [r7, #2]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa8:	787b      	ldrb	r3, [r7, #1]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fae:	887a      	ldrh	r2, [r7, #2]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fb4:	e002      	b.n	8003fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fb6:	887a      	ldrh	r2, [r7, #2]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fd2:	4b08      	ldr	r3, [pc, #32]	@ (8003ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d006      	beq.n	8003fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fde:	4a05      	ldr	r2, [pc, #20]	@ (8003ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fd fe3e 	bl	8001c68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ffc:	4b04      	ldr	r3, [pc, #16]	@ (8004010 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004004:	4618      	mov	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40007000 	.word	0x40007000

08004014 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004022:	d130      	bne.n	8004086 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004024:	4b23      	ldr	r3, [pc, #140]	@ (80040b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800402c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004030:	d038      	beq.n	80040a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004032:	4b20      	ldr	r3, [pc, #128]	@ (80040b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800403a:	4a1e      	ldr	r2, [pc, #120]	@ (80040b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800403c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004040:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004042:	4b1d      	ldr	r3, [pc, #116]	@ (80040b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2232      	movs	r2, #50	@ 0x32
 8004048:	fb02 f303 	mul.w	r3, r2, r3
 800404c:	4a1b      	ldr	r2, [pc, #108]	@ (80040bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	0c9b      	lsrs	r3, r3, #18
 8004054:	3301      	adds	r3, #1
 8004056:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004058:	e002      	b.n	8004060 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3b01      	subs	r3, #1
 800405e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004060:	4b14      	ldr	r3, [pc, #80]	@ (80040b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406c:	d102      	bne.n	8004074 <HAL_PWREx_ControlVoltageScaling+0x60>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f2      	bne.n	800405a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004074:	4b0f      	ldr	r3, [pc, #60]	@ (80040b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004080:	d110      	bne.n	80040a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e00f      	b.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004086:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800408e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004092:	d007      	beq.n	80040a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004094:	4b07      	ldr	r3, [pc, #28]	@ (80040b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800409c:	4a05      	ldr	r2, [pc, #20]	@ (80040b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800409e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40007000 	.word	0x40007000
 80040b8:	2000005c 	.word	0x2000005c
 80040bc:	431bde83 	.word	0x431bde83

080040c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e3ca      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d2:	4b97      	ldr	r3, [pc, #604]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040dc:	4b94      	ldr	r3, [pc, #592]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80e4 	beq.w	80042bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <HAL_RCC_OscConfig+0x4a>
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b0c      	cmp	r3, #12
 80040fe:	f040 808b 	bne.w	8004218 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b01      	cmp	r3, #1
 8004106:	f040 8087 	bne.w	8004218 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800410a:	4b89      	ldr	r3, [pc, #548]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_RCC_OscConfig+0x62>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e3a2      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1a      	ldr	r2, [r3, #32]
 8004126:	4b82      	ldr	r3, [pc, #520]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d004      	beq.n	800413c <HAL_RCC_OscConfig+0x7c>
 8004132:	4b7f      	ldr	r3, [pc, #508]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800413a:	e005      	b.n	8004148 <HAL_RCC_OscConfig+0x88>
 800413c:	4b7c      	ldr	r3, [pc, #496]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 800413e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004148:	4293      	cmp	r3, r2
 800414a:	d223      	bcs.n	8004194 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fd55 	bl	8004c00 <RCC_SetFlashLatencyFromMSIRange>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e383      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004160:	4b73      	ldr	r3, [pc, #460]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a72      	ldr	r2, [pc, #456]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004166:	f043 0308 	orr.w	r3, r3, #8
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	4b70      	ldr	r3, [pc, #448]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	496d      	ldr	r1, [pc, #436]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 800417a:	4313      	orrs	r3, r2
 800417c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800417e:	4b6c      	ldr	r3, [pc, #432]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	4968      	ldr	r1, [pc, #416]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 800418e:	4313      	orrs	r3, r2
 8004190:	604b      	str	r3, [r1, #4]
 8004192:	e025      	b.n	80041e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004194:	4b66      	ldr	r3, [pc, #408]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a65      	ldr	r2, [pc, #404]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 800419a:	f043 0308 	orr.w	r3, r3, #8
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	4b63      	ldr	r3, [pc, #396]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4960      	ldr	r1, [pc, #384]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	495b      	ldr	r1, [pc, #364]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fd15 	bl	8004c00 <RCC_SetFlashLatencyFromMSIRange>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e343      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041e0:	f000 fc4a 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 80041e4:	4602      	mov	r2, r0
 80041e6:	4b52      	ldr	r3, [pc, #328]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	091b      	lsrs	r3, r3, #4
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	4950      	ldr	r1, [pc, #320]	@ (8004334 <HAL_RCC_OscConfig+0x274>)
 80041f2:	5ccb      	ldrb	r3, [r1, r3]
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
 80041fc:	4a4e      	ldr	r2, [pc, #312]	@ (8004338 <HAL_RCC_OscConfig+0x278>)
 80041fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004200:	4b4e      	ldr	r3, [pc, #312]	@ (800433c <HAL_RCC_OscConfig+0x27c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7fe fbb1 	bl	800296c <HAL_InitTick>
 800420a:	4603      	mov	r3, r0
 800420c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d052      	beq.n	80042ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	e327      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d032      	beq.n	8004286 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004220:	4b43      	ldr	r3, [pc, #268]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a42      	ldr	r2, [pc, #264]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800422c:	f7fe fbee 	bl	8002a0c <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004234:	f7fe fbea 	bl	8002a0c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e310      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004246:	4b3a      	ldr	r3, [pc, #232]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004252:	4b37      	ldr	r3, [pc, #220]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a36      	ldr	r2, [pc, #216]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004258:	f043 0308 	orr.w	r3, r3, #8
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	4b34      	ldr	r3, [pc, #208]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	4931      	ldr	r1, [pc, #196]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004270:	4b2f      	ldr	r3, [pc, #188]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	492c      	ldr	r1, [pc, #176]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
 8004284:	e01a      	b.n	80042bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004286:	4b2a      	ldr	r3, [pc, #168]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a29      	ldr	r2, [pc, #164]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004292:	f7fe fbbb 	bl	8002a0c <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800429a:	f7fe fbb7 	bl	8002a0c <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e2dd      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042ac:	4b20      	ldr	r3, [pc, #128]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1f0      	bne.n	800429a <HAL_RCC_OscConfig+0x1da>
 80042b8:	e000      	b.n	80042bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d074      	beq.n	80043b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d005      	beq.n	80042da <HAL_RCC_OscConfig+0x21a>
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	2b0c      	cmp	r3, #12
 80042d2:	d10e      	bne.n	80042f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d10b      	bne.n	80042f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042da:	4b15      	ldr	r3, [pc, #84]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d064      	beq.n	80043b0 <HAL_RCC_OscConfig+0x2f0>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d160      	bne.n	80043b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e2ba      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042fa:	d106      	bne.n	800430a <HAL_RCC_OscConfig+0x24a>
 80042fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a0b      	ldr	r2, [pc, #44]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	e026      	b.n	8004358 <HAL_RCC_OscConfig+0x298>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004312:	d115      	bne.n	8004340 <HAL_RCC_OscConfig+0x280>
 8004314:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a05      	ldr	r2, [pc, #20]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 800431a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4b03      	ldr	r3, [pc, #12]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a02      	ldr	r2, [pc, #8]	@ (8004330 <HAL_RCC_OscConfig+0x270>)
 8004326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	e014      	b.n	8004358 <HAL_RCC_OscConfig+0x298>
 800432e:	bf00      	nop
 8004330:	40021000 	.word	0x40021000
 8004334:	0800d574 	.word	0x0800d574
 8004338:	2000005c 	.word	0x2000005c
 800433c:	20000060 	.word	0x20000060
 8004340:	4ba0      	ldr	r3, [pc, #640]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a9f      	ldr	r2, [pc, #636]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b9d      	ldr	r3, [pc, #628]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a9c      	ldr	r2, [pc, #624]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 8004352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d013      	beq.n	8004388 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fe fb54 	bl	8002a0c <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004368:	f7fe fb50 	bl	8002a0c <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	@ 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e276      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800437a:	4b92      	ldr	r3, [pc, #584]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x2a8>
 8004386:	e014      	b.n	80043b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fe fb40 	bl	8002a0c <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004390:	f7fe fb3c 	bl	8002a0c <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	@ 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e262      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043a2:	4b88      	ldr	r3, [pc, #544]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x2d0>
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d060      	beq.n	8004480 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_OscConfig+0x310>
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	2b0c      	cmp	r3, #12
 80043c8:	d119      	bne.n	80043fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d116      	bne.n	80043fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d0:	4b7c      	ldr	r3, [pc, #496]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_OscConfig+0x328>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e23f      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e8:	4b76      	ldr	r3, [pc, #472]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	4973      	ldr	r1, [pc, #460]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043fc:	e040      	b.n	8004480 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d023      	beq.n	800444e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004406:	4b6f      	ldr	r3, [pc, #444]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a6e      	ldr	r2, [pc, #440]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 800440c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004412:	f7fe fafb 	bl	8002a0c <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441a:	f7fe faf7 	bl	8002a0c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e21d      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800442c:	4b65      	ldr	r3, [pc, #404]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004438:	4b62      	ldr	r3, [pc, #392]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	061b      	lsls	r3, r3, #24
 8004446:	495f      	ldr	r1, [pc, #380]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 8004448:	4313      	orrs	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
 800444c:	e018      	b.n	8004480 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800444e:	4b5d      	ldr	r3, [pc, #372]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a5c      	ldr	r2, [pc, #368]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 8004454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7fe fad7 	bl	8002a0c <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004462:	f7fe fad3 	bl	8002a0c <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e1f9      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004474:	4b53      	ldr	r3, [pc, #332]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f0      	bne.n	8004462 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d03c      	beq.n	8004506 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01c      	beq.n	80044ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004494:	4b4b      	ldr	r3, [pc, #300]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 8004496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800449a:	4a4a      	ldr	r2, [pc, #296]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a4:	f7fe fab2 	bl	8002a0c <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ac:	f7fe faae 	bl	8002a0c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e1d4      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044be:	4b41      	ldr	r3, [pc, #260]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 80044c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0ef      	beq.n	80044ac <HAL_RCC_OscConfig+0x3ec>
 80044cc:	e01b      	b.n	8004506 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ce:	4b3d      	ldr	r3, [pc, #244]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 80044d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044d4:	4a3b      	ldr	r2, [pc, #236]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044de:	f7fe fa95 	bl	8002a0c <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e6:	f7fe fa91 	bl	8002a0c <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e1b7      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044f8:	4b32      	ldr	r3, [pc, #200]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 80044fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1ef      	bne.n	80044e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 80a6 	beq.w	8004660 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004514:	2300      	movs	r3, #0
 8004516:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004518:	4b2a      	ldr	r3, [pc, #168]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 800451a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10d      	bne.n	8004540 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004524:	4b27      	ldr	r3, [pc, #156]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 8004526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004528:	4a26      	ldr	r2, [pc, #152]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 800452a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800452e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004530:	4b24      	ldr	r3, [pc, #144]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 8004532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800453c:	2301      	movs	r3, #1
 800453e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004540:	4b21      	ldr	r3, [pc, #132]	@ (80045c8 <HAL_RCC_OscConfig+0x508>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d118      	bne.n	800457e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800454c:	4b1e      	ldr	r3, [pc, #120]	@ (80045c8 <HAL_RCC_OscConfig+0x508>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1d      	ldr	r2, [pc, #116]	@ (80045c8 <HAL_RCC_OscConfig+0x508>)
 8004552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004556:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004558:	f7fe fa58 	bl	8002a0c <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004560:	f7fe fa54 	bl	8002a0c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e17a      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004572:	4b15      	ldr	r3, [pc, #84]	@ (80045c8 <HAL_RCC_OscConfig+0x508>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d108      	bne.n	8004598 <HAL_RCC_OscConfig+0x4d8>
 8004586:	4b0f      	ldr	r3, [pc, #60]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458c:	4a0d      	ldr	r2, [pc, #52]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004596:	e029      	b.n	80045ec <HAL_RCC_OscConfig+0x52c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b05      	cmp	r3, #5
 800459e:	d115      	bne.n	80045cc <HAL_RCC_OscConfig+0x50c>
 80045a0:	4b08      	ldr	r3, [pc, #32]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a6:	4a07      	ldr	r2, [pc, #28]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 80045a8:	f043 0304 	orr.w	r3, r3, #4
 80045ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045b0:	4b04      	ldr	r3, [pc, #16]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b6:	4a03      	ldr	r2, [pc, #12]	@ (80045c4 <HAL_RCC_OscConfig+0x504>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045c0:	e014      	b.n	80045ec <HAL_RCC_OscConfig+0x52c>
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40007000 	.word	0x40007000
 80045cc:	4b9c      	ldr	r3, [pc, #624]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d2:	4a9b      	ldr	r2, [pc, #620]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045dc:	4b98      	ldr	r3, [pc, #608]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e2:	4a97      	ldr	r2, [pc, #604]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 80045e4:	f023 0304 	bic.w	r3, r3, #4
 80045e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d016      	beq.n	8004622 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fe fa0a 	bl	8002a0c <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fc:	f7fe fa06 	bl	8002a0c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e12a      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004612:	4b8b      	ldr	r3, [pc, #556]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0ed      	beq.n	80045fc <HAL_RCC_OscConfig+0x53c>
 8004620:	e015      	b.n	800464e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004622:	f7fe f9f3 	bl	8002a0c <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004628:	e00a      	b.n	8004640 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800462a:	f7fe f9ef 	bl	8002a0c <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004638:	4293      	cmp	r3, r2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e113      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004640:	4b7f      	ldr	r3, [pc, #508]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1ed      	bne.n	800462a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800464e:	7ffb      	ldrb	r3, [r7, #31]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d105      	bne.n	8004660 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004654:	4b7a      	ldr	r3, [pc, #488]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 8004656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004658:	4a79      	ldr	r2, [pc, #484]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 800465a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800465e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80fe 	beq.w	8004866 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	2b02      	cmp	r3, #2
 8004670:	f040 80d0 	bne.w	8004814 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004674:	4b72      	ldr	r3, [pc, #456]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f003 0203 	and.w	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	429a      	cmp	r2, r3
 8004686:	d130      	bne.n	80046ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004692:	3b01      	subs	r3, #1
 8004694:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004696:	429a      	cmp	r2, r3
 8004698:	d127      	bne.n	80046ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d11f      	bne.n	80046ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046b4:	2a07      	cmp	r2, #7
 80046b6:	bf14      	ite	ne
 80046b8:	2201      	movne	r2, #1
 80046ba:	2200      	moveq	r2, #0
 80046bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046be:	4293      	cmp	r3, r2
 80046c0:	d113      	bne.n	80046ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	3b01      	subs	r3, #1
 80046d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d109      	bne.n	80046ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e0:	085b      	lsrs	r3, r3, #1
 80046e2:	3b01      	subs	r3, #1
 80046e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d06e      	beq.n	80047c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b0c      	cmp	r3, #12
 80046ee:	d069      	beq.n	80047c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046f0:	4b53      	ldr	r3, [pc, #332]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d105      	bne.n	8004708 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046fc:	4b50      	ldr	r3, [pc, #320]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0ad      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800470c:	4b4c      	ldr	r3, [pc, #304]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a4b      	ldr	r2, [pc, #300]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 8004712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004716:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004718:	f7fe f978 	bl	8002a0c <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004720:	f7fe f974 	bl	8002a0c <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e09a      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004732:	4b43      	ldr	r3, [pc, #268]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800473e:	4b40      	ldr	r3, [pc, #256]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	4b40      	ldr	r3, [pc, #256]	@ (8004844 <HAL_RCC_OscConfig+0x784>)
 8004744:	4013      	ands	r3, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800474e:	3a01      	subs	r2, #1
 8004750:	0112      	lsls	r2, r2, #4
 8004752:	4311      	orrs	r1, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004758:	0212      	lsls	r2, r2, #8
 800475a:	4311      	orrs	r1, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004760:	0852      	lsrs	r2, r2, #1
 8004762:	3a01      	subs	r2, #1
 8004764:	0552      	lsls	r2, r2, #21
 8004766:	4311      	orrs	r1, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800476c:	0852      	lsrs	r2, r2, #1
 800476e:	3a01      	subs	r2, #1
 8004770:	0652      	lsls	r2, r2, #25
 8004772:	4311      	orrs	r1, r2
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004778:	0912      	lsrs	r2, r2, #4
 800477a:	0452      	lsls	r2, r2, #17
 800477c:	430a      	orrs	r2, r1
 800477e:	4930      	ldr	r1, [pc, #192]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 8004780:	4313      	orrs	r3, r2
 8004782:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004784:	4b2e      	ldr	r3, [pc, #184]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2d      	ldr	r2, [pc, #180]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 800478a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800478e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004790:	4b2b      	ldr	r3, [pc, #172]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a2a      	ldr	r2, [pc, #168]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 8004796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800479a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800479c:	f7fe f936 	bl	8002a0c <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fe f932 	bl	8002a0c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e058      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b6:	4b22      	ldr	r3, [pc, #136]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047c2:	e050      	b.n	8004866 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e04f      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d148      	bne.n	8004866 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a19      	ldr	r2, [pc, #100]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 80047da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047e0:	4b17      	ldr	r3, [pc, #92]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a16      	ldr	r2, [pc, #88]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 80047e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047ec:	f7fe f90e 	bl	8002a0c <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f4:	f7fe f90a 	bl	8002a0c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e030      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004806:	4b0e      	ldr	r3, [pc, #56]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0x734>
 8004812:	e028      	b.n	8004866 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d023      	beq.n	8004862 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481a:	4b09      	ldr	r3, [pc, #36]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a08      	ldr	r2, [pc, #32]	@ (8004840 <HAL_RCC_OscConfig+0x780>)
 8004820:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004826:	f7fe f8f1 	bl	8002a0c <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482c:	e00c      	b.n	8004848 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482e:	f7fe f8ed 	bl	8002a0c <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d905      	bls.n	8004848 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e013      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
 8004840:	40021000 	.word	0x40021000
 8004844:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004848:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <HAL_RCC_OscConfig+0x7b0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1ec      	bne.n	800482e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004854:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <HAL_RCC_OscConfig+0x7b0>)
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	4905      	ldr	r1, [pc, #20]	@ (8004870 <HAL_RCC_OscConfig+0x7b0>)
 800485a:	4b06      	ldr	r3, [pc, #24]	@ (8004874 <HAL_RCC_OscConfig+0x7b4>)
 800485c:	4013      	ands	r3, r2
 800485e:	60cb      	str	r3, [r1, #12]
 8004860:	e001      	b.n	8004866 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3720      	adds	r7, #32
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000
 8004874:	feeefffc 	.word	0xfeeefffc

08004878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0e7      	b.n	8004a5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800488c:	4b75      	ldr	r3, [pc, #468]	@ (8004a64 <HAL_RCC_ClockConfig+0x1ec>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d910      	bls.n	80048bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b72      	ldr	r3, [pc, #456]	@ (8004a64 <HAL_RCC_ClockConfig+0x1ec>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 0207 	bic.w	r2, r3, #7
 80048a2:	4970      	ldr	r1, [pc, #448]	@ (8004a64 <HAL_RCC_ClockConfig+0x1ec>)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	4b6e      	ldr	r3, [pc, #440]	@ (8004a64 <HAL_RCC_ClockConfig+0x1ec>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0cf      	b.n	8004a5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d010      	beq.n	80048ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	4b66      	ldr	r3, [pc, #408]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d908      	bls.n	80048ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d8:	4b63      	ldr	r3, [pc, #396]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4960      	ldr	r1, [pc, #384]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d04c      	beq.n	8004990 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d107      	bne.n	800490e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fe:	4b5a      	ldr	r3, [pc, #360]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d121      	bne.n	800494e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e0a6      	b.n	8004a5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d107      	bne.n	8004926 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004916:	4b54      	ldr	r3, [pc, #336]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d115      	bne.n	800494e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e09a      	b.n	8004a5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d107      	bne.n	800493e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800492e:	4b4e      	ldr	r3, [pc, #312]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e08e      	b.n	8004a5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800493e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e086      	b.n	8004a5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800494e:	4b46      	ldr	r3, [pc, #280]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f023 0203 	bic.w	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	4943      	ldr	r1, [pc, #268]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 800495c:	4313      	orrs	r3, r2
 800495e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004960:	f7fe f854 	bl	8002a0c <HAL_GetTick>
 8004964:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004966:	e00a      	b.n	800497e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004968:	f7fe f850 	bl	8002a0c <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e06e      	b.n	8004a5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	4b3a      	ldr	r3, [pc, #232]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 020c 	and.w	r2, r3, #12
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	429a      	cmp	r2, r3
 800498e:	d1eb      	bne.n	8004968 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d010      	beq.n	80049be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	4b31      	ldr	r3, [pc, #196]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d208      	bcs.n	80049be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	492b      	ldr	r1, [pc, #172]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049be:	4b29      	ldr	r3, [pc, #164]	@ (8004a64 <HAL_RCC_ClockConfig+0x1ec>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d210      	bcs.n	80049ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049cc:	4b25      	ldr	r3, [pc, #148]	@ (8004a64 <HAL_RCC_ClockConfig+0x1ec>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f023 0207 	bic.w	r2, r3, #7
 80049d4:	4923      	ldr	r1, [pc, #140]	@ (8004a64 <HAL_RCC_ClockConfig+0x1ec>)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049dc:	4b21      	ldr	r3, [pc, #132]	@ (8004a64 <HAL_RCC_ClockConfig+0x1ec>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d001      	beq.n	80049ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e036      	b.n	8004a5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d008      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	4918      	ldr	r1, [pc, #96]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d009      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a18:	4b13      	ldr	r3, [pc, #76]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4910      	ldr	r1, [pc, #64]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a2c:	f000 f824 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <HAL_RCC_ClockConfig+0x1f0>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	091b      	lsrs	r3, r3, #4
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	490b      	ldr	r1, [pc, #44]	@ (8004a6c <HAL_RCC_ClockConfig+0x1f4>)
 8004a3e:	5ccb      	ldrb	r3, [r1, r3]
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
 8004a48:	4a09      	ldr	r2, [pc, #36]	@ (8004a70 <HAL_RCC_ClockConfig+0x1f8>)
 8004a4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a4c:	4b09      	ldr	r3, [pc, #36]	@ (8004a74 <HAL_RCC_ClockConfig+0x1fc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fd ff8b 	bl	800296c <HAL_InitTick>
 8004a56:	4603      	mov	r3, r0
 8004a58:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a5a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40022000 	.word	0x40022000
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	0800d574 	.word	0x0800d574
 8004a70:	2000005c 	.word	0x2000005c
 8004a74:	20000060 	.word	0x20000060

08004a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	@ 0x24
 8004a7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	2300      	movs	r3, #0
 8004a84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a86:	4b3e      	ldr	r3, [pc, #248]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a90:	4b3b      	ldr	r3, [pc, #236]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0303 	and.w	r3, r3, #3
 8004a98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0x34>
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b0c      	cmp	r3, #12
 8004aa4:	d121      	bne.n	8004aea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d11e      	bne.n	8004aea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004aac:	4b34      	ldr	r3, [pc, #208]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d107      	bne.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ab8:	4b31      	ldr	r3, [pc, #196]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	e005      	b.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004adc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10d      	bne.n	8004b00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ae8:	e00a      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d102      	bne.n	8004af6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004af0:	4b25      	ldr	r3, [pc, #148]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	e004      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004afc:	4b23      	ldr	r3, [pc, #140]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8004afe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b0c      	cmp	r3, #12
 8004b04:	d134      	bne.n	8004b70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b06:	4b1e      	ldr	r3, [pc, #120]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d003      	beq.n	8004b1e <HAL_RCC_GetSysClockFreq+0xa6>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d003      	beq.n	8004b24 <HAL_RCC_GetSysClockFreq+0xac>
 8004b1c:	e005      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b20:	617b      	str	r3, [r7, #20]
      break;
 8004b22:	e005      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b24:	4b19      	ldr	r3, [pc, #100]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8004b26:	617b      	str	r3, [r7, #20]
      break;
 8004b28:	e002      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	617b      	str	r3, [r7, #20]
      break;
 8004b2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b30:	4b13      	ldr	r3, [pc, #76]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b3e:	4b10      	ldr	r3, [pc, #64]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	fb03 f202 	mul.w	r2, r3, r2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b56:	4b0a      	ldr	r3, [pc, #40]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	0e5b      	lsrs	r3, r3, #25
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	3301      	adds	r3, #1
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b70:	69bb      	ldr	r3, [r7, #24]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3724      	adds	r7, #36	@ 0x24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40021000 	.word	0x40021000
 8004b84:	0800d58c 	.word	0x0800d58c
 8004b88:	00f42400 	.word	0x00f42400
 8004b8c:	007a1200 	.word	0x007a1200

08004b90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b94:	4b03      	ldr	r3, [pc, #12]	@ (8004ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b96:	681b      	ldr	r3, [r3, #0]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	2000005c 	.word	0x2000005c

08004ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bac:	f7ff fff0 	bl	8004b90 <HAL_RCC_GetHCLKFreq>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	4b06      	ldr	r3, [pc, #24]	@ (8004bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	4904      	ldr	r1, [pc, #16]	@ (8004bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bbe:	5ccb      	ldrb	r3, [r1, r3]
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	0800d584 	.word	0x0800d584

08004bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bd8:	f7ff ffda 	bl	8004b90 <HAL_RCC_GetHCLKFreq>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	0adb      	lsrs	r3, r3, #11
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	4904      	ldr	r1, [pc, #16]	@ (8004bfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bea:	5ccb      	ldrb	r3, [r1, r3]
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	0800d584 	.word	0x0800d584

08004c00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c08:	2300      	movs	r3, #0
 8004c0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c18:	f7ff f9ee 	bl	8003ff8 <HAL_PWREx_GetVoltageRange>
 8004c1c:	6178      	str	r0, [r7, #20]
 8004c1e:	e014      	b.n	8004c4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c20:	4b25      	ldr	r3, [pc, #148]	@ (8004cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c24:	4a24      	ldr	r2, [pc, #144]	@ (8004cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c2c:	4b22      	ldr	r3, [pc, #136]	@ (8004cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c38:	f7ff f9de 	bl	8003ff8 <HAL_PWREx_GetVoltageRange>
 8004c3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c42:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c48:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c50:	d10b      	bne.n	8004c6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b80      	cmp	r3, #128	@ 0x80
 8004c56:	d919      	bls.n	8004c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c5c:	d902      	bls.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c5e:	2302      	movs	r3, #2
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	e013      	b.n	8004c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c64:	2301      	movs	r3, #1
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	e010      	b.n	8004c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b80      	cmp	r3, #128	@ 0x80
 8004c6e:	d902      	bls.n	8004c76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c70:	2303      	movs	r3, #3
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	e00a      	b.n	8004c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b80      	cmp	r3, #128	@ 0x80
 8004c7a:	d102      	bne.n	8004c82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	e004      	b.n	8004c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b70      	cmp	r3, #112	@ 0x70
 8004c86:	d101      	bne.n	8004c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c88:	2301      	movs	r3, #1
 8004c8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f023 0207 	bic.w	r2, r3, #7
 8004c94:	4909      	ldr	r1, [pc, #36]	@ (8004cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c9c:	4b07      	ldr	r3, [pc, #28]	@ (8004cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d001      	beq.n	8004cae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	40022000 	.word	0x40022000

08004cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cc8:	2300      	movs	r3, #0
 8004cca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ccc:	2300      	movs	r3, #0
 8004cce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d041      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ce0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ce4:	d02a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ce6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cea:	d824      	bhi.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cf0:	d008      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004cf2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cf6:	d81e      	bhi.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004cfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d00:	d010      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d02:	e018      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d04:	4b86      	ldr	r3, [pc, #536]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a85      	ldr	r2, [pc, #532]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d10:	e015      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3304      	adds	r3, #4
 8004d16:	2100      	movs	r1, #0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fabb 	bl	8005294 <RCCEx_PLLSAI1_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d22:	e00c      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3320      	adds	r3, #32
 8004d28:	2100      	movs	r1, #0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fba6 	bl	800547c <RCCEx_PLLSAI2_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d34:	e003      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	74fb      	strb	r3, [r7, #19]
      break;
 8004d3a:	e000      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d3e:	7cfb      	ldrb	r3, [r7, #19]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10b      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d44:	4b76      	ldr	r3, [pc, #472]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d52:	4973      	ldr	r1, [pc, #460]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d5a:	e001      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5c:	7cfb      	ldrb	r3, [r7, #19]
 8004d5e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d041      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d74:	d02a      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d7a:	d824      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d80:	d008      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d86:	d81e      	bhi.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d90:	d010      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d92:	e018      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d94:	4b62      	ldr	r3, [pc, #392]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4a61      	ldr	r2, [pc, #388]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d9e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004da0:	e015      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3304      	adds	r3, #4
 8004da6:	2100      	movs	r1, #0
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fa73 	bl	8005294 <RCCEx_PLLSAI1_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004db2:	e00c      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3320      	adds	r3, #32
 8004db8:	2100      	movs	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fb5e 	bl	800547c <RCCEx_PLLSAI2_Config>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dc4:	e003      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	74fb      	strb	r3, [r7, #19]
      break;
 8004dca:	e000      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dce:	7cfb      	ldrb	r3, [r7, #19]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dd4:	4b52      	ldr	r3, [pc, #328]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dda:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004de2:	494f      	ldr	r1, [pc, #316]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004dea:	e001      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dec:	7cfb      	ldrb	r3, [r7, #19]
 8004dee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80a0 	beq.w	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e02:	4b47      	ldr	r3, [pc, #284]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00d      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e18:	4b41      	ldr	r3, [pc, #260]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1c:	4a40      	ldr	r2, [pc, #256]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e24:	4b3e      	ldr	r3, [pc, #248]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e30:	2301      	movs	r3, #1
 8004e32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e34:	4b3b      	ldr	r3, [pc, #236]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a3a      	ldr	r2, [pc, #232]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e40:	f7fd fde4 	bl	8002a0c <HAL_GetTick>
 8004e44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e46:	e009      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e48:	f7fd fde0 	bl	8002a0c <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d902      	bls.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	74fb      	strb	r3, [r7, #19]
        break;
 8004e5a:	e005      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e5c:	4b31      	ldr	r3, [pc, #196]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0ef      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d15c      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01f      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d019      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e8c:	4b24      	ldr	r3, [pc, #144]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e98:	4b21      	ldr	r3, [pc, #132]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9e:	4a20      	ldr	r2, [pc, #128]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eae:	4a1c      	ldr	r2, [pc, #112]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004eb8:	4a19      	ldr	r2, [pc, #100]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d016      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eca:	f7fd fd9f 	bl	8002a0c <HAL_GetTick>
 8004ece:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ed0:	e00b      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed2:	f7fd fd9b 	bl	8002a0c <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d902      	bls.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	74fb      	strb	r3, [r7, #19]
            break;
 8004ee8:	e006      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eea:	4b0d      	ldr	r3, [pc, #52]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0ec      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ef8:	7cfb      	ldrb	r3, [r7, #19]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004efe:	4b08      	ldr	r3, [pc, #32]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f0e:	4904      	ldr	r1, [pc, #16]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f16:	e009      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	74bb      	strb	r3, [r7, #18]
 8004f1c:	e006      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f1e:	bf00      	nop
 8004f20:	40021000 	.word	0x40021000
 8004f24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f2c:	7c7b      	ldrb	r3, [r7, #17]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d105      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f32:	4b9e      	ldr	r3, [pc, #632]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f36:	4a9d      	ldr	r2, [pc, #628]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f4a:	4b98      	ldr	r3, [pc, #608]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f50:	f023 0203 	bic.w	r2, r3, #3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f58:	4994      	ldr	r1, [pc, #592]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f6c:	4b8f      	ldr	r3, [pc, #572]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f72:	f023 020c 	bic.w	r2, r3, #12
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7a:	498c      	ldr	r1, [pc, #560]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f8e:	4b87      	ldr	r3, [pc, #540]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9c:	4983      	ldr	r1, [pc, #524]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fbe:	497b      	ldr	r1, [pc, #492]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fd2:	4b76      	ldr	r3, [pc, #472]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe0:	4972      	ldr	r1, [pc, #456]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0320 	and.w	r3, r3, #32
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ff4:	4b6d      	ldr	r3, [pc, #436]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005002:	496a      	ldr	r1, [pc, #424]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005016:	4b65      	ldr	r3, [pc, #404]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005024:	4961      	ldr	r1, [pc, #388]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005038:	4b5c      	ldr	r3, [pc, #368]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005046:	4959      	ldr	r1, [pc, #356]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800505a:	4b54      	ldr	r3, [pc, #336]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005060:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005068:	4950      	ldr	r1, [pc, #320]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800507c:	4b4b      	ldr	r3, [pc, #300]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005082:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508a:	4948      	ldr	r1, [pc, #288]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800509e:	4b43      	ldr	r3, [pc, #268]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ac:	493f      	ldr	r1, [pc, #252]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d028      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050c0:	4b3a      	ldr	r3, [pc, #232]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ce:	4937      	ldr	r1, [pc, #220]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050de:	d106      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050e0:	4b32      	ldr	r3, [pc, #200]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4a31      	ldr	r2, [pc, #196]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050ea:	60d3      	str	r3, [r2, #12]
 80050ec:	e011      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050f6:	d10c      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	2101      	movs	r1, #1
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 f8c8 	bl	8005294 <RCCEx_PLLSAI1_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005108:	7cfb      	ldrb	r3, [r7, #19]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800510e:	7cfb      	ldrb	r3, [r7, #19]
 8005110:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d028      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800511e:	4b23      	ldr	r3, [pc, #140]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005124:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512c:	491f      	ldr	r1, [pc, #124]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800513c:	d106      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800513e:	4b1b      	ldr	r3, [pc, #108]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	4a1a      	ldr	r2, [pc, #104]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005144:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005148:	60d3      	str	r3, [r2, #12]
 800514a:	e011      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005150:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005154:	d10c      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3304      	adds	r3, #4
 800515a:	2101      	movs	r1, #1
 800515c:	4618      	mov	r0, r3
 800515e:	f000 f899 	bl	8005294 <RCCEx_PLLSAI1_Config>
 8005162:	4603      	mov	r3, r0
 8005164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005166:	7cfb      	ldrb	r3, [r7, #19]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d02b      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800517c:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005182:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800518a:	4908      	ldr	r1, [pc, #32]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005196:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800519a:	d109      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800519c:	4b03      	ldr	r3, [pc, #12]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4a02      	ldr	r2, [pc, #8]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051a6:	60d3      	str	r3, [r2, #12]
 80051a8:	e014      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80051aa:	bf00      	nop
 80051ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3304      	adds	r3, #4
 80051be:	2101      	movs	r1, #1
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 f867 	bl	8005294 <RCCEx_PLLSAI1_Config>
 80051c6:	4603      	mov	r3, r0
 80051c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ca:	7cfb      	ldrb	r3, [r7, #19]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80051d0:	7cfb      	ldrb	r3, [r7, #19]
 80051d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d02f      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051ee:	4928      	ldr	r1, [pc, #160]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051fe:	d10d      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	2102      	movs	r1, #2
 8005206:	4618      	mov	r0, r3
 8005208:	f000 f844 	bl	8005294 <RCCEx_PLLSAI1_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005210:	7cfb      	ldrb	r3, [r7, #19]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d014      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005216:	7cfb      	ldrb	r3, [r7, #19]
 8005218:	74bb      	strb	r3, [r7, #18]
 800521a:	e011      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005224:	d10c      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3320      	adds	r3, #32
 800522a:	2102      	movs	r1, #2
 800522c:	4618      	mov	r0, r3
 800522e:	f000 f925 	bl	800547c <RCCEx_PLLSAI2_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005236:	7cfb      	ldrb	r3, [r7, #19]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800523c:	7cfb      	ldrb	r3, [r7, #19]
 800523e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800524c:	4b10      	ldr	r3, [pc, #64]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005252:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800525a:	490d      	ldr	r1, [pc, #52]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00b      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800526e:	4b08      	ldr	r3, [pc, #32]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005274:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800527e:	4904      	ldr	r1, [pc, #16]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005286:	7cbb      	ldrb	r3, [r7, #18]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40021000 	.word	0x40021000

08005294 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052a2:	4b75      	ldr	r3, [pc, #468]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d018      	beq.n	80052e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052ae:	4b72      	ldr	r3, [pc, #456]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0203 	and.w	r2, r3, #3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d10d      	bne.n	80052da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
       ||
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80052c6:	4b6c      	ldr	r3, [pc, #432]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	091b      	lsrs	r3, r3, #4
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
       ||
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d047      	beq.n	800536a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	73fb      	strb	r3, [r7, #15]
 80052de:	e044      	b.n	800536a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d018      	beq.n	800531a <RCCEx_PLLSAI1_Config+0x86>
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d825      	bhi.n	8005338 <RCCEx_PLLSAI1_Config+0xa4>
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d002      	beq.n	80052f6 <RCCEx_PLLSAI1_Config+0x62>
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d009      	beq.n	8005308 <RCCEx_PLLSAI1_Config+0x74>
 80052f4:	e020      	b.n	8005338 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052f6:	4b60      	ldr	r3, [pc, #384]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d11d      	bne.n	800533e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005306:	e01a      	b.n	800533e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005308:	4b5b      	ldr	r3, [pc, #364]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005310:	2b00      	cmp	r3, #0
 8005312:	d116      	bne.n	8005342 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005318:	e013      	b.n	8005342 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800531a:	4b57      	ldr	r3, [pc, #348]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10f      	bne.n	8005346 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005326:	4b54      	ldr	r3, [pc, #336]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005336:	e006      	b.n	8005346 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
      break;
 800533c:	e004      	b.n	8005348 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800533e:	bf00      	nop
 8005340:	e002      	b.n	8005348 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005342:	bf00      	nop
 8005344:	e000      	b.n	8005348 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005346:	bf00      	nop
    }

    if(status == HAL_OK)
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10d      	bne.n	800536a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800534e:	4b4a      	ldr	r3, [pc, #296]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6819      	ldr	r1, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	3b01      	subs	r3, #1
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	430b      	orrs	r3, r1
 8005364:	4944      	ldr	r1, [pc, #272]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005366:	4313      	orrs	r3, r2
 8005368:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d17d      	bne.n	800546c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005370:	4b41      	ldr	r3, [pc, #260]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a40      	ldr	r2, [pc, #256]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005376:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800537a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800537c:	f7fd fb46 	bl	8002a0c <HAL_GetTick>
 8005380:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005382:	e009      	b.n	8005398 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005384:	f7fd fb42 	bl	8002a0c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d902      	bls.n	8005398 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	73fb      	strb	r3, [r7, #15]
        break;
 8005396:	e005      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005398:	4b37      	ldr	r3, [pc, #220]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1ef      	bne.n	8005384 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d160      	bne.n	800546c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d111      	bne.n	80053d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053b0:	4b31      	ldr	r3, [pc, #196]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80053b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6892      	ldr	r2, [r2, #8]
 80053c0:	0211      	lsls	r1, r2, #8
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	68d2      	ldr	r2, [r2, #12]
 80053c6:	0912      	lsrs	r2, r2, #4
 80053c8:	0452      	lsls	r2, r2, #17
 80053ca:	430a      	orrs	r2, r1
 80053cc:	492a      	ldr	r1, [pc, #168]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	610b      	str	r3, [r1, #16]
 80053d2:	e027      	b.n	8005424 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d112      	bne.n	8005400 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053da:	4b27      	ldr	r3, [pc, #156]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80053e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6892      	ldr	r2, [r2, #8]
 80053ea:	0211      	lsls	r1, r2, #8
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6912      	ldr	r2, [r2, #16]
 80053f0:	0852      	lsrs	r2, r2, #1
 80053f2:	3a01      	subs	r2, #1
 80053f4:	0552      	lsls	r2, r2, #21
 80053f6:	430a      	orrs	r2, r1
 80053f8:	491f      	ldr	r1, [pc, #124]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	610b      	str	r3, [r1, #16]
 80053fe:	e011      	b.n	8005424 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005400:	4b1d      	ldr	r3, [pc, #116]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005408:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6892      	ldr	r2, [r2, #8]
 8005410:	0211      	lsls	r1, r2, #8
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6952      	ldr	r2, [r2, #20]
 8005416:	0852      	lsrs	r2, r2, #1
 8005418:	3a01      	subs	r2, #1
 800541a:	0652      	lsls	r2, r2, #25
 800541c:	430a      	orrs	r2, r1
 800541e:	4916      	ldr	r1, [pc, #88]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005420:	4313      	orrs	r3, r2
 8005422:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005424:	4b14      	ldr	r3, [pc, #80]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a13      	ldr	r2, [pc, #76]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 800542a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800542e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005430:	f7fd faec 	bl	8002a0c <HAL_GetTick>
 8005434:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005436:	e009      	b.n	800544c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005438:	f7fd fae8 	bl	8002a0c <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d902      	bls.n	800544c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	73fb      	strb	r3, [r7, #15]
          break;
 800544a:	e005      	b.n	8005458 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800544c:	4b0a      	ldr	r3, [pc, #40]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0ef      	beq.n	8005438 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800545e:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	4904      	ldr	r1, [pc, #16]	@ (8005478 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005468:	4313      	orrs	r3, r2
 800546a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800546c:	7bfb      	ldrb	r3, [r7, #15]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40021000 	.word	0x40021000

0800547c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800548a:	4b6a      	ldr	r3, [pc, #424]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d018      	beq.n	80054c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005496:	4b67      	ldr	r3, [pc, #412]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0203 	and.w	r2, r3, #3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d10d      	bne.n	80054c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
       ||
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80054ae:	4b61      	ldr	r3, [pc, #388]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
       ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d047      	beq.n	8005552 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	73fb      	strb	r3, [r7, #15]
 80054c6:	e044      	b.n	8005552 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d018      	beq.n	8005502 <RCCEx_PLLSAI2_Config+0x86>
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d825      	bhi.n	8005520 <RCCEx_PLLSAI2_Config+0xa4>
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d002      	beq.n	80054de <RCCEx_PLLSAI2_Config+0x62>
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d009      	beq.n	80054f0 <RCCEx_PLLSAI2_Config+0x74>
 80054dc:	e020      	b.n	8005520 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054de:	4b55      	ldr	r3, [pc, #340]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d11d      	bne.n	8005526 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ee:	e01a      	b.n	8005526 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054f0:	4b50      	ldr	r3, [pc, #320]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d116      	bne.n	800552a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005500:	e013      	b.n	800552a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005502:	4b4c      	ldr	r3, [pc, #304]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800550e:	4b49      	ldr	r3, [pc, #292]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800551e:	e006      	b.n	800552e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
      break;
 8005524:	e004      	b.n	8005530 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005526:	bf00      	nop
 8005528:	e002      	b.n	8005530 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800552a:	bf00      	nop
 800552c:	e000      	b.n	8005530 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800552e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10d      	bne.n	8005552 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005536:	4b3f      	ldr	r3, [pc, #252]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6819      	ldr	r1, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	3b01      	subs	r3, #1
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	430b      	orrs	r3, r1
 800554c:	4939      	ldr	r1, [pc, #228]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 800554e:	4313      	orrs	r3, r2
 8005550:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d167      	bne.n	8005628 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005558:	4b36      	ldr	r3, [pc, #216]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a35      	ldr	r2, [pc, #212]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 800555e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005564:	f7fd fa52 	bl	8002a0c <HAL_GetTick>
 8005568:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800556a:	e009      	b.n	8005580 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800556c:	f7fd fa4e 	bl	8002a0c <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d902      	bls.n	8005580 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	73fb      	strb	r3, [r7, #15]
        break;
 800557e:	e005      	b.n	800558c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005580:	4b2c      	ldr	r3, [pc, #176]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1ef      	bne.n	800556c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d14a      	bne.n	8005628 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d111      	bne.n	80055bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005598:	4b26      	ldr	r3, [pc, #152]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80055a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6892      	ldr	r2, [r2, #8]
 80055a8:	0211      	lsls	r1, r2, #8
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68d2      	ldr	r2, [r2, #12]
 80055ae:	0912      	lsrs	r2, r2, #4
 80055b0:	0452      	lsls	r2, r2, #17
 80055b2:	430a      	orrs	r2, r1
 80055b4:	491f      	ldr	r1, [pc, #124]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	614b      	str	r3, [r1, #20]
 80055ba:	e011      	b.n	80055e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80055c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6892      	ldr	r2, [r2, #8]
 80055cc:	0211      	lsls	r1, r2, #8
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6912      	ldr	r2, [r2, #16]
 80055d2:	0852      	lsrs	r2, r2, #1
 80055d4:	3a01      	subs	r2, #1
 80055d6:	0652      	lsls	r2, r2, #25
 80055d8:	430a      	orrs	r2, r1
 80055da:	4916      	ldr	r1, [pc, #88]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80055e0:	4b14      	ldr	r3, [pc, #80]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a13      	ldr	r2, [pc, #76]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ec:	f7fd fa0e 	bl	8002a0c <HAL_GetTick>
 80055f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055f2:	e009      	b.n	8005608 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055f4:	f7fd fa0a 	bl	8002a0c <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d902      	bls.n	8005608 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	73fb      	strb	r3, [r7, #15]
          break;
 8005606:	e005      	b.n	8005614 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005608:	4b0a      	ldr	r3, [pc, #40]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0ef      	beq.n	80055f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800561a:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 800561c:	695a      	ldr	r2, [r3, #20]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	4904      	ldr	r1, [pc, #16]	@ (8005634 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005624:	4313      	orrs	r3, r2
 8005626:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005628:	7bfb      	ldrb	r3, [r7, #15]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40021000 	.word	0x40021000

08005638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e095      	b.n	8005776 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564e:	2b00      	cmp	r3, #0
 8005650:	d108      	bne.n	8005664 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800565a:	d009      	beq.n	8005670 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	61da      	str	r2, [r3, #28]
 8005662:	e005      	b.n	8005670 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fc fd86 	bl	800219c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056b0:	d902      	bls.n	80056b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	e002      	b.n	80056be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80056c6:	d007      	beq.n	80056d8 <HAL_SPI_Init+0xa0>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056d0:	d002      	beq.n	80056d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571a:	ea42 0103 	orr.w	r1, r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005722:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	0c1b      	lsrs	r3, r3, #16
 8005734:	f003 0204 	and.w	r2, r3, #4
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005754:	ea42 0103 	orr.w	r1, r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b088      	sub	sp, #32
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4613      	mov	r3, r2
 800578c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_SPI_Transmit+0x22>
 800579c:	2302      	movs	r3, #2
 800579e:	e15f      	b.n	8005a60 <HAL_SPI_Transmit+0x2e2>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057a8:	f7fd f930 	bl	8002a0c <HAL_GetTick>
 80057ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d002      	beq.n	80057c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057be:	2302      	movs	r3, #2
 80057c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057c2:	e148      	b.n	8005a56 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_SPI_Transmit+0x52>
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d102      	bne.n	80057d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057d4:	e13f      	b.n	8005a56 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2203      	movs	r2, #3
 80057da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	88fa      	ldrh	r2, [r7, #6]
 80057ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	88fa      	ldrh	r2, [r7, #6]
 80057f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005820:	d10f      	bne.n	8005842 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005830:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005840:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584c:	2b40      	cmp	r3, #64	@ 0x40
 800584e:	d007      	beq.n	8005860 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800585e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005868:	d94f      	bls.n	800590a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_SPI_Transmit+0xfa>
 8005872:	8afb      	ldrh	r3, [r7, #22]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d142      	bne.n	80058fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587c:	881a      	ldrh	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005888:	1c9a      	adds	r2, r3, #2
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800589c:	e02f      	b.n	80058fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d112      	bne.n	80058d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b0:	881a      	ldrh	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058bc:	1c9a      	adds	r2, r3, #2
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058d0:	e015      	b.n	80058fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d2:	f7fd f89b 	bl	8002a0c <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d803      	bhi.n	80058ea <HAL_SPI_Transmit+0x16c>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d102      	bne.n	80058f0 <HAL_SPI_Transmit+0x172>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80058fc:	e0ab      	b.n	8005a56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005902:	b29b      	uxth	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ca      	bne.n	800589e <HAL_SPI_Transmit+0x120>
 8005908:	e080      	b.n	8005a0c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <HAL_SPI_Transmit+0x19a>
 8005912:	8afb      	ldrh	r3, [r7, #22]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d174      	bne.n	8005a02 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	d912      	bls.n	8005948 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005926:	881a      	ldrh	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005932:	1c9a      	adds	r2, r3, #2
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b02      	subs	r3, #2
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005946:	e05c      	b.n	8005a02 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	330c      	adds	r3, #12
 8005952:	7812      	ldrb	r2, [r2, #0]
 8005954:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800596e:	e048      	b.n	8005a02 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b02      	cmp	r3, #2
 800597c:	d12b      	bne.n	80059d6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b01      	cmp	r3, #1
 8005986:	d912      	bls.n	80059ae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598c:	881a      	ldrh	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005998:	1c9a      	adds	r2, r3, #2
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b02      	subs	r3, #2
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059ac:	e029      	b.n	8005a02 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	330c      	adds	r3, #12
 80059b8:	7812      	ldrb	r2, [r2, #0]
 80059ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059d4:	e015      	b.n	8005a02 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059d6:	f7fd f819 	bl	8002a0c <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d803      	bhi.n	80059ee <HAL_SPI_Transmit+0x270>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d102      	bne.n	80059f4 <HAL_SPI_Transmit+0x276>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005a00:	e029      	b.n	8005a56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1b1      	bne.n	8005970 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fb69 	bl	80060e8 <SPI_EndRxTxTransaction>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	77fb      	strb	r3, [r7, #31]
 8005a4c:	e003      	b.n	8005a56 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005a5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	@ 0x28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a76:	2301      	movs	r3, #1
 8005a78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_SPI_TransmitReceive+0x26>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e20a      	b.n	8005ea4 <HAL_SPI_TransmitReceive+0x43c>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a96:	f7fc ffb9 	bl	8002a0c <HAL_GetTick>
 8005a9a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005aa2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005aaa:	887b      	ldrh	r3, [r7, #2]
 8005aac:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005aae:	887b      	ldrh	r3, [r7, #2]
 8005ab0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ab2:	7efb      	ldrb	r3, [r7, #27]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d00e      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x6e>
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005abe:	d106      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x66>
 8005ac8:	7efb      	ldrb	r3, [r7, #27]
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d003      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005ad4:	e1e0      	b.n	8005e98 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x80>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x80>
 8005ae2:	887b      	ldrh	r3, [r7, #2]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005aee:	e1d3      	b.n	8005e98 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d003      	beq.n	8005b04 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2205      	movs	r2, #5
 8005b00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	887a      	ldrh	r2, [r7, #2]
 8005b14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	887a      	ldrh	r2, [r7, #2]
 8005b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	887a      	ldrh	r2, [r7, #2]
 8005b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	887a      	ldrh	r2, [r7, #2]
 8005b30:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b46:	d802      	bhi.n	8005b4e <HAL_SPI_TransmitReceive+0xe6>
 8005b48:	8a3b      	ldrh	r3, [r7, #16]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d908      	bls.n	8005b60 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b5c:	605a      	str	r2, [r3, #4]
 8005b5e:	e007      	b.n	8005b70 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b6e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b7a:	2b40      	cmp	r3, #64	@ 0x40
 8005b7c:	d007      	beq.n	8005b8e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b96:	f240 8081 	bls.w	8005c9c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_SPI_TransmitReceive+0x140>
 8005ba2:	8a7b      	ldrh	r3, [r7, #18]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d16d      	bne.n	8005c84 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bac:	881a      	ldrh	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb8:	1c9a      	adds	r2, r3, #2
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bcc:	e05a      	b.n	8005c84 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d11b      	bne.n	8005c14 <HAL_SPI_TransmitReceive+0x1ac>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d016      	beq.n	8005c14 <HAL_SPI_TransmitReceive+0x1ac>
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d113      	bne.n	8005c14 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf0:	881a      	ldrh	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfc:	1c9a      	adds	r2, r3, #2
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d11c      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x1f4>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d016      	beq.n	8005c5c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c38:	b292      	uxth	r2, r2
 8005c3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c40:	1c9a      	adds	r2, r3, #2
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c5c:	f7fc fed6 	bl	8002a0c <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d80b      	bhi.n	8005c84 <HAL_SPI_TransmitReceive+0x21c>
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c72:	d007      	beq.n	8005c84 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005c82:	e109      	b.n	8005e98 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d19f      	bne.n	8005bce <HAL_SPI_TransmitReceive+0x166>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d199      	bne.n	8005bce <HAL_SPI_TransmitReceive+0x166>
 8005c9a:	e0e3      	b.n	8005e64 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_SPI_TransmitReceive+0x244>
 8005ca4:	8a7b      	ldrh	r3, [r7, #18]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	f040 80cf 	bne.w	8005e4a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d912      	bls.n	8005cdc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cba:	881a      	ldrh	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	1c9a      	adds	r2, r3, #2
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b02      	subs	r3, #2
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cda:	e0b6      	b.n	8005e4a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	7812      	ldrb	r2, [r2, #0]
 8005ce8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d02:	e0a2      	b.n	8005e4a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d134      	bne.n	8005d7c <HAL_SPI_TransmitReceive+0x314>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d02f      	beq.n	8005d7c <HAL_SPI_TransmitReceive+0x314>
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d12c      	bne.n	8005d7c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d912      	bls.n	8005d52 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d30:	881a      	ldrh	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3c:	1c9a      	adds	r2, r3, #2
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b02      	subs	r3, #2
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d50:	e012      	b.n	8005d78 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	330c      	adds	r3, #12
 8005d5c:	7812      	ldrb	r2, [r2, #0]
 8005d5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d148      	bne.n	8005e1c <HAL_SPI_TransmitReceive+0x3b4>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d042      	beq.n	8005e1c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d923      	bls.n	8005dea <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dac:	b292      	uxth	r2, r2
 8005dae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db4:	1c9a      	adds	r2, r3, #2
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b02      	subs	r3, #2
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d81f      	bhi.n	8005e18 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005de6:	605a      	str	r2, [r3, #4]
 8005de8:	e016      	b.n	8005e18 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f103 020c 	add.w	r2, r3, #12
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e1c:	f7fc fdf6 	bl	8002a0c <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d803      	bhi.n	8005e34 <HAL_SPI_TransmitReceive+0x3cc>
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d102      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x3d2>
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d107      	bne.n	8005e4a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005e48:	e026      	b.n	8005e98 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f47f af57 	bne.w	8005d04 <HAL_SPI_TransmitReceive+0x29c>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f47f af50 	bne.w	8005d04 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f93d 	bl	80060e8 <SPI_EndRxTxTransaction>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8e:	e003      	b.n	8005e98 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3728      	adds	r7, #40	@ 0x28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	603b      	str	r3, [r7, #0]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ebc:	f7fc fda6 	bl	8002a0c <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec4:	1a9b      	subs	r3, r3, r2
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	4413      	add	r3, r2
 8005eca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ecc:	f7fc fd9e 	bl	8002a0c <HAL_GetTick>
 8005ed0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ed2:	4b39      	ldr	r3, [pc, #228]	@ (8005fb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	015b      	lsls	r3, r3, #5
 8005ed8:	0d1b      	lsrs	r3, r3, #20
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	fb02 f303 	mul.w	r3, r2, r3
 8005ee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ee2:	e054      	b.n	8005f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d050      	beq.n	8005f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eec:	f7fc fd8e 	bl	8002a0c <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d902      	bls.n	8005f02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d13d      	bne.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f1a:	d111      	bne.n	8005f40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f24:	d004      	beq.n	8005f30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f2e:	d107      	bne.n	8005f40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f48:	d10f      	bne.n	8005f6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e017      	b.n	8005fae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4013      	ands	r3, r2
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	bf0c      	ite	eq
 8005f9e:	2301      	moveq	r3, #1
 8005fa0:	2300      	movne	r3, #0
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d19b      	bne.n	8005ee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3720      	adds	r7, #32
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	2000005c 	.word	0x2000005c

08005fbc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08a      	sub	sp, #40	@ 0x28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005fce:	f7fc fd1d 	bl	8002a0c <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd6:	1a9b      	subs	r3, r3, r2
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	4413      	add	r3, r2
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005fde:	f7fc fd15 	bl	8002a0c <HAL_GetTick>
 8005fe2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fec:	4b3d      	ldr	r3, [pc, #244]	@ (80060e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	00da      	lsls	r2, r3, #3
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	0d1b      	lsrs	r3, r3, #20
 8005ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffe:	fb02 f303 	mul.w	r3, r2, r3
 8006002:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006004:	e060      	b.n	80060c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800600c:	d107      	bne.n	800601e <SPI_WaitFifoStateUntilTimeout+0x62>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d104      	bne.n	800601e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	b2db      	uxtb	r3, r3
 800601a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800601c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d050      	beq.n	80060c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006026:	f7fc fcf1 	bl	8002a0c <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006032:	429a      	cmp	r2, r3
 8006034:	d902      	bls.n	800603c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	2b00      	cmp	r3, #0
 800603a:	d13d      	bne.n	80060b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800604a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006054:	d111      	bne.n	800607a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800605e:	d004      	beq.n	800606a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006068:	d107      	bne.n	800607a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006078:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006082:	d10f      	bne.n	80060a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e010      	b.n	80060da <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4013      	ands	r3, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d196      	bne.n	8006006 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3728      	adds	r7, #40	@ 0x28
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	2000005c 	.word	0x2000005c

080060e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f7ff ff5b 	bl	8005fbc <SPI_WaitFifoStateUntilTimeout>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006110:	f043 0220 	orr.w	r2, r3, #32
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e027      	b.n	800616c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2200      	movs	r2, #0
 8006124:	2180      	movs	r1, #128	@ 0x80
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7ff fec0 	bl	8005eac <SPI_WaitFlagStateUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006136:	f043 0220 	orr.w	r2, r3, #32
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e014      	b.n	800616c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2200      	movs	r2, #0
 800614a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7ff ff34 	bl	8005fbc <SPI_WaitFifoStateUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d007      	beq.n	800616a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800615e:	f043 0220 	orr.w	r2, r3, #32
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e000      	b.n	800616c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e049      	b.n	800621a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fc f874 	bl	8002288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f000 fa62 	bl	800667c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0201 	bic.w	r2, r2, #1
 8006238:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6a1a      	ldr	r2, [r3, #32]
 8006240:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006244:	4013      	ands	r3, r2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10f      	bne.n	800626a <HAL_TIM_Base_Stop_IT+0x48>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6a1a      	ldr	r2, [r3, #32]
 8006250:	f240 4344 	movw	r3, #1092	@ 0x444
 8006254:	4013      	ands	r3, r2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d107      	bne.n	800626a <HAL_TIM_Base_Stop_IT+0x48>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d020      	beq.n	80062e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01b      	beq.n	80062e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0202 	mvn.w	r2, #2
 80062b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f9b7 	bl	800663e <HAL_TIM_IC_CaptureCallback>
 80062d0:	e005      	b.n	80062de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f9a9 	bl	800662a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f9ba 	bl	8006652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f003 0304 	and.w	r3, r3, #4
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d020      	beq.n	8006330 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01b      	beq.n	8006330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0204 	mvn.w	r2, #4
 8006300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2202      	movs	r2, #2
 8006306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f991 	bl	800663e <HAL_TIM_IC_CaptureCallback>
 800631c:	e005      	b.n	800632a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f983 	bl	800662a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f994 	bl	8006652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d020      	beq.n	800637c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d01b      	beq.n	800637c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0208 	mvn.w	r2, #8
 800634c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2204      	movs	r2, #4
 8006352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f96b 	bl	800663e <HAL_TIM_IC_CaptureCallback>
 8006368:	e005      	b.n	8006376 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f95d 	bl	800662a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f96e 	bl	8006652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f003 0310 	and.w	r3, r3, #16
 8006382:	2b00      	cmp	r3, #0
 8006384:	d020      	beq.n	80063c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f003 0310 	and.w	r3, r3, #16
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01b      	beq.n	80063c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0210 	mvn.w	r2, #16
 8006398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2208      	movs	r2, #8
 800639e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f945 	bl	800663e <HAL_TIM_IC_CaptureCallback>
 80063b4:	e005      	b.n	80063c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f937 	bl	800662a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f948 	bl	8006652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00c      	beq.n	80063ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d007      	beq.n	80063ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0201 	mvn.w	r2, #1
 80063e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f915 	bl	8006616 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00c      	beq.n	8006410 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d007      	beq.n	8006410 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fafc 	bl	8006a08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00c      	beq.n	8006434 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006420:	2b00      	cmp	r3, #0
 8006422:	d007      	beq.n	8006434 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800642c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 faf4 	bl	8006a1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00c      	beq.n	8006458 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d007      	beq.n	8006458 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f907 	bl	8006666 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00c      	beq.n	800647c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0220 	mvn.w	r2, #32
 8006474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fabc 	bl	80069f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_TIM_ConfigClockSource+0x1c>
 800649c:	2302      	movs	r3, #2
 800649e:	e0b6      	b.n	800660e <HAL_TIM_ConfigClockSource+0x18a>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064dc:	d03e      	beq.n	800655c <HAL_TIM_ConfigClockSource+0xd8>
 80064de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064e2:	f200 8087 	bhi.w	80065f4 <HAL_TIM_ConfigClockSource+0x170>
 80064e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ea:	f000 8086 	beq.w	80065fa <HAL_TIM_ConfigClockSource+0x176>
 80064ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064f2:	d87f      	bhi.n	80065f4 <HAL_TIM_ConfigClockSource+0x170>
 80064f4:	2b70      	cmp	r3, #112	@ 0x70
 80064f6:	d01a      	beq.n	800652e <HAL_TIM_ConfigClockSource+0xaa>
 80064f8:	2b70      	cmp	r3, #112	@ 0x70
 80064fa:	d87b      	bhi.n	80065f4 <HAL_TIM_ConfigClockSource+0x170>
 80064fc:	2b60      	cmp	r3, #96	@ 0x60
 80064fe:	d050      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x11e>
 8006500:	2b60      	cmp	r3, #96	@ 0x60
 8006502:	d877      	bhi.n	80065f4 <HAL_TIM_ConfigClockSource+0x170>
 8006504:	2b50      	cmp	r3, #80	@ 0x50
 8006506:	d03c      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0xfe>
 8006508:	2b50      	cmp	r3, #80	@ 0x50
 800650a:	d873      	bhi.n	80065f4 <HAL_TIM_ConfigClockSource+0x170>
 800650c:	2b40      	cmp	r3, #64	@ 0x40
 800650e:	d058      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x13e>
 8006510:	2b40      	cmp	r3, #64	@ 0x40
 8006512:	d86f      	bhi.n	80065f4 <HAL_TIM_ConfigClockSource+0x170>
 8006514:	2b30      	cmp	r3, #48	@ 0x30
 8006516:	d064      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006518:	2b30      	cmp	r3, #48	@ 0x30
 800651a:	d86b      	bhi.n	80065f4 <HAL_TIM_ConfigClockSource+0x170>
 800651c:	2b20      	cmp	r3, #32
 800651e:	d060      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006520:	2b20      	cmp	r3, #32
 8006522:	d867      	bhi.n	80065f4 <HAL_TIM_ConfigClockSource+0x170>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d05c      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006528:	2b10      	cmp	r3, #16
 800652a:	d05a      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0x15e>
 800652c:	e062      	b.n	80065f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800653e:	f000 f9b1 	bl	80068a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	609a      	str	r2, [r3, #8]
      break;
 800655a:	e04f      	b.n	80065fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800656c:	f000 f99a 	bl	80068a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800657e:	609a      	str	r2, [r3, #8]
      break;
 8006580:	e03c      	b.n	80065fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	461a      	mov	r2, r3
 8006590:	f000 f90e 	bl	80067b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2150      	movs	r1, #80	@ 0x50
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f967 	bl	800686e <TIM_ITRx_SetConfig>
      break;
 80065a0:	e02c      	b.n	80065fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ae:	461a      	mov	r2, r3
 80065b0:	f000 f92d 	bl	800680e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2160      	movs	r1, #96	@ 0x60
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 f957 	bl	800686e <TIM_ITRx_SetConfig>
      break;
 80065c0:	e01c      	b.n	80065fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ce:	461a      	mov	r2, r3
 80065d0:	f000 f8ee 	bl	80067b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2140      	movs	r1, #64	@ 0x40
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 f947 	bl	800686e <TIM_ITRx_SetConfig>
      break;
 80065e0:	e00c      	b.n	80065fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4619      	mov	r1, r3
 80065ec:	4610      	mov	r0, r2
 80065ee:	f000 f93e 	bl	800686e <TIM_ITRx_SetConfig>
      break;
 80065f2:	e003      	b.n	80065fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	73fb      	strb	r3, [r7, #15]
      break;
 80065f8:	e000      	b.n	80065fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80065fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800663e:	b480      	push	{r7}
 8006640:	b083      	sub	sp, #12
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a40      	ldr	r2, [pc, #256]	@ (8006790 <TIM_Base_SetConfig+0x114>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d013      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800669a:	d00f      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a3d      	ldr	r2, [pc, #244]	@ (8006794 <TIM_Base_SetConfig+0x118>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00b      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a3c      	ldr	r2, [pc, #240]	@ (8006798 <TIM_Base_SetConfig+0x11c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d007      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a3b      	ldr	r2, [pc, #236]	@ (800679c <TIM_Base_SetConfig+0x120>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a3a      	ldr	r2, [pc, #232]	@ (80067a0 <TIM_Base_SetConfig+0x124>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d108      	bne.n	80066ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006790 <TIM_Base_SetConfig+0x114>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d01f      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066dc:	d01b      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006794 <TIM_Base_SetConfig+0x118>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d017      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006798 <TIM_Base_SetConfig+0x11c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d013      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a2a      	ldr	r2, [pc, #168]	@ (800679c <TIM_Base_SetConfig+0x120>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00f      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a29      	ldr	r2, [pc, #164]	@ (80067a0 <TIM_Base_SetConfig+0x124>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00b      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a28      	ldr	r2, [pc, #160]	@ (80067a4 <TIM_Base_SetConfig+0x128>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d007      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a27      	ldr	r2, [pc, #156]	@ (80067a8 <TIM_Base_SetConfig+0x12c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a26      	ldr	r2, [pc, #152]	@ (80067ac <TIM_Base_SetConfig+0x130>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d108      	bne.n	8006728 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800671c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a10      	ldr	r2, [pc, #64]	@ (8006790 <TIM_Base_SetConfig+0x114>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00f      	beq.n	8006774 <TIM_Base_SetConfig+0xf8>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a12      	ldr	r2, [pc, #72]	@ (80067a0 <TIM_Base_SetConfig+0x124>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00b      	beq.n	8006774 <TIM_Base_SetConfig+0xf8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a11      	ldr	r2, [pc, #68]	@ (80067a4 <TIM_Base_SetConfig+0x128>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d007      	beq.n	8006774 <TIM_Base_SetConfig+0xf8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a10      	ldr	r2, [pc, #64]	@ (80067a8 <TIM_Base_SetConfig+0x12c>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_Base_SetConfig+0xf8>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a0f      	ldr	r2, [pc, #60]	@ (80067ac <TIM_Base_SetConfig+0x130>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d103      	bne.n	800677c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	615a      	str	r2, [r3, #20]
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40012c00 	.word	0x40012c00
 8006794:	40000400 	.word	0x40000400
 8006798:	40000800 	.word	0x40000800
 800679c:	40000c00 	.word	0x40000c00
 80067a0:	40013400 	.word	0x40013400
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40014400 	.word	0x40014400
 80067ac:	40014800 	.word	0x40014800

080067b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f023 0201 	bic.w	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f023 030a 	bic.w	r3, r3, #10
 80067ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	621a      	str	r2, [r3, #32]
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800680e:	b480      	push	{r7}
 8006810:	b087      	sub	sp, #28
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	f023 0210 	bic.w	r2, r3, #16
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	031b      	lsls	r3, r3, #12
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800684a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800686e:	b480      	push	{r7}
 8006870:	b085      	sub	sp, #20
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	f043 0307 	orr.w	r3, r3, #7
 8006890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	609a      	str	r2, [r3, #8]
}
 8006898:	bf00      	nop
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	021a      	lsls	r2, r3, #8
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	609a      	str	r2, [r3, #8]
}
 80068d8:	bf00      	nop
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e068      	b.n	80069ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a2e      	ldr	r2, [pc, #184]	@ (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d004      	beq.n	8006930 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a2d      	ldr	r2, [pc, #180]	@ (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d108      	bne.n	8006942 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006936:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006948:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1e      	ldr	r2, [pc, #120]	@ (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01d      	beq.n	80069a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800696e:	d018      	beq.n	80069a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a1b      	ldr	r2, [pc, #108]	@ (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d013      	beq.n	80069a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a1a      	ldr	r2, [pc, #104]	@ (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00e      	beq.n	80069a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a18      	ldr	r2, [pc, #96]	@ (80069ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d009      	beq.n	80069a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a13      	ldr	r2, [pc, #76]	@ (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d004      	beq.n	80069a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a14      	ldr	r2, [pc, #80]	@ (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d10c      	bne.n	80069bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40012c00 	.word	0x40012c00
 80069e0:	40013400 	.word	0x40013400
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800
 80069ec:	40000c00 	.word	0x40000c00
 80069f0:	40014000 	.word	0x40014000

080069f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e040      	b.n	8006ac4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fb fc3e 	bl	80022d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2224      	movs	r2, #36	@ 0x24
 8006a5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0201 	bic.w	r2, r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fe72 	bl	8007760 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fbb7 	bl	80071f0 <UART_SetConfig>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d101      	bne.n	8006a8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e01b      	b.n	8006ac4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006aaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fef1 	bl	80078a4 <UART_CheckIdleState>
 8006ac2:	4603      	mov	r3, r0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08a      	sub	sp, #40	@ 0x28
 8006ad0:	af02      	add	r7, sp, #8
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	d177      	bne.n	8006bd4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <HAL_UART_Transmit+0x24>
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e070      	b.n	8006bd6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2221      	movs	r2, #33	@ 0x21
 8006b00:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b02:	f7fb ff83 	bl	8002a0c <HAL_GetTick>
 8006b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	88fa      	ldrh	r2, [r7, #6]
 8006b0c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	88fa      	ldrh	r2, [r7, #6]
 8006b14:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b20:	d108      	bne.n	8006b34 <HAL_UART_Transmit+0x68>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d104      	bne.n	8006b34 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	e003      	b.n	8006b3c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b3c:	e02f      	b.n	8006b9e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2200      	movs	r2, #0
 8006b46:	2180      	movs	r1, #128	@ 0x80
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 ff53 	bl	80079f4 <UART_WaitOnFlagUntilTimeout>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d004      	beq.n	8006b5e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e03b      	b.n	8006bd6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10b      	bne.n	8006b7c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	881a      	ldrh	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b70:	b292      	uxth	r2, r2
 8006b72:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	3302      	adds	r3, #2
 8006b78:	61bb      	str	r3, [r7, #24]
 8006b7a:	e007      	b.n	8006b8c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	781a      	ldrb	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1c9      	bne.n	8006b3e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2140      	movs	r1, #64	@ 0x40
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 ff1d 	bl	80079f4 <UART_WaitOnFlagUntilTimeout>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d004      	beq.n	8006bca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e005      	b.n	8006bd6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e000      	b.n	8006bd6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006bd4:	2302      	movs	r3, #2
  }
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3720      	adds	r7, #32
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b0ba      	sub	sp, #232	@ 0xe8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006c0a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006c0e:	4013      	ands	r3, r2
 8006c10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d115      	bne.n	8006c48 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00f      	beq.n	8006c48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d009      	beq.n	8006c48 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 82ae 	beq.w	800719a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
      }
      return;
 8006c46:	e2a8      	b.n	800719a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006c48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 8117 	beq.w	8006e80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006c62:	4b85      	ldr	r3, [pc, #532]	@ (8006e78 <HAL_UART_IRQHandler+0x298>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 810a 	beq.w	8006e80 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d011      	beq.n	8006c9c <HAL_UART_IRQHandler+0xbc>
 8006c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c92:	f043 0201 	orr.w	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d011      	beq.n	8006ccc <HAL_UART_IRQHandler+0xec>
 8006ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cc2:	f043 0204 	orr.w	r2, r3, #4
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d011      	beq.n	8006cfc <HAL_UART_IRQHandler+0x11c>
 8006cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2204      	movs	r2, #4
 8006cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cf2:	f043 0202 	orr.w	r2, r3, #2
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d017      	beq.n	8006d38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d105      	bne.n	8006d20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00b      	beq.n	8006d38 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2208      	movs	r2, #8
 8006d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d2e:	f043 0208 	orr.w	r2, r3, #8
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d012      	beq.n	8006d6a <HAL_UART_IRQHandler+0x18a>
 8006d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00c      	beq.n	8006d6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d60:	f043 0220 	orr.w	r2, r3, #32
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 8214 	beq.w	800719e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00d      	beq.n	8006d9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006da4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db2:	2b40      	cmp	r3, #64	@ 0x40
 8006db4:	d005      	beq.n	8006dc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d04f      	beq.n	8006e62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 ff44 	bl	8007c50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd2:	2b40      	cmp	r3, #64	@ 0x40
 8006dd4:	d141      	bne.n	8006e5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006df4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1d9      	bne.n	8006dd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d013      	beq.n	8006e52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e2e:	4a13      	ldr	r2, [pc, #76]	@ (8006e7c <HAL_UART_IRQHandler+0x29c>)
 8006e30:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fc fde4 	bl	8003a04 <HAL_DMA_Abort_IT>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d017      	beq.n	8006e72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e50:	e00f      	b.n	8006e72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f9c2 	bl	80071dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e58:	e00b      	b.n	8006e72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f9be 	bl	80071dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e60:	e007      	b.n	8006e72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f9ba 	bl	80071dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006e70:	e195      	b.n	800719e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e72:	bf00      	nop
    return;
 8006e74:	e193      	b.n	800719e <HAL_UART_IRQHandler+0x5be>
 8006e76:	bf00      	nop
 8006e78:	04000120 	.word	0x04000120
 8006e7c:	08007d19 	.word	0x08007d19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	f040 814e 	bne.w	8007126 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e8e:	f003 0310 	and.w	r3, r3, #16
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8147 	beq.w	8007126 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8140 	beq.w	8007126 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2210      	movs	r2, #16
 8006eac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb8:	2b40      	cmp	r3, #64	@ 0x40
 8006eba:	f040 80b8 	bne.w	800702e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006eca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 8167 	beq.w	80071a2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	f080 815f 	bcs.w	80071a2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006eea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 8086 	bne.w	800700c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1da      	bne.n	8006f00 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3308      	adds	r3, #8
 8006f50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f5c:	f023 0301 	bic.w	r3, r3, #1
 8006f60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3308      	adds	r3, #8
 8006f6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e1      	bne.n	8006f4a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006faa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006fac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006fb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006fb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e3      	bne.n	8006f86 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fdc:	f023 0310 	bic.w	r3, r3, #16
 8006fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ff0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ff4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ffc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e4      	bne.n	8006fcc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007006:	4618      	mov	r0, r3
 8007008:	f7fc fcbe 	bl	8003988 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800701e:	b29b      	uxth	r3, r3
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	b29b      	uxth	r3, r3
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fa fe56 	bl	8001cd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800702c:	e0b9      	b.n	80071a2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800703a:	b29b      	uxth	r3, r3
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 80ab 	beq.w	80071a6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 80a6 	beq.w	80071a6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800706a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800706e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800707c:	647b      	str	r3, [r7, #68]	@ 0x44
 800707e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800708a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e4      	bne.n	800705a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3308      	adds	r3, #8
 8007096:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	623b      	str	r3, [r7, #32]
   return(result);
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3308      	adds	r3, #8
 80070b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80070b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80070b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e3      	bne.n	8007090 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f023 0310 	bic.w	r3, r3, #16
 80070f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80070fe:	61fb      	str	r3, [r7, #28]
 8007100:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007102:	69b9      	ldr	r1, [r7, #24]
 8007104:	69fa      	ldr	r2, [r7, #28]
 8007106:	e841 2300 	strex	r3, r2, [r1]
 800710a:	617b      	str	r3, [r7, #20]
   return(result);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e4      	bne.n	80070dc <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2202      	movs	r2, #2
 8007116:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fa fdda 	bl	8001cd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007124:	e03f      	b.n	80071a6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800712a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00e      	beq.n	8007150 <HAL_UART_IRQHandler+0x570>
 8007132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d008      	beq.n	8007150 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007146:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 ffe1 	bl	8008110 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800714e:	e02d      	b.n	80071ac <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00e      	beq.n	800717a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800715c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007164:	2b00      	cmp	r3, #0
 8007166:	d008      	beq.n	800717a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d01c      	beq.n	80071aa <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
    }
    return;
 8007178:	e017      	b.n	80071aa <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800717a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800717e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	d012      	beq.n	80071ac <HAL_UART_IRQHandler+0x5cc>
 8007186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800718a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00c      	beq.n	80071ac <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fdd6 	bl	8007d44 <UART_EndTransmit_IT>
    return;
 8007198:	e008      	b.n	80071ac <HAL_UART_IRQHandler+0x5cc>
      return;
 800719a:	bf00      	nop
 800719c:	e006      	b.n	80071ac <HAL_UART_IRQHandler+0x5cc>
    return;
 800719e:	bf00      	nop
 80071a0:	e004      	b.n	80071ac <HAL_UART_IRQHandler+0x5cc>
      return;
 80071a2:	bf00      	nop
 80071a4:	e002      	b.n	80071ac <HAL_UART_IRQHandler+0x5cc>
      return;
 80071a6:	bf00      	nop
 80071a8:	e000      	b.n	80071ac <HAL_UART_IRQHandler+0x5cc>
    return;
 80071aa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80071ac:	37e8      	adds	r7, #232	@ 0xe8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop

080071b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071f4:	b08a      	sub	sp, #40	@ 0x28
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	431a      	orrs	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	431a      	orrs	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	4313      	orrs	r3, r2
 8007216:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4ba4      	ldr	r3, [pc, #656]	@ (80074b0 <UART_SetConfig+0x2c0>)
 8007220:	4013      	ands	r3, r2
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007228:	430b      	orrs	r3, r1
 800722a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a99      	ldr	r2, [pc, #612]	@ (80074b4 <UART_SetConfig+0x2c4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007258:	4313      	orrs	r3, r2
 800725a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800726c:	430a      	orrs	r2, r1
 800726e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a90      	ldr	r2, [pc, #576]	@ (80074b8 <UART_SetConfig+0x2c8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d126      	bne.n	80072c8 <UART_SetConfig+0xd8>
 800727a:	4b90      	ldr	r3, [pc, #576]	@ (80074bc <UART_SetConfig+0x2cc>)
 800727c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	2b03      	cmp	r3, #3
 8007286:	d81b      	bhi.n	80072c0 <UART_SetConfig+0xd0>
 8007288:	a201      	add	r2, pc, #4	@ (adr r2, 8007290 <UART_SetConfig+0xa0>)
 800728a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728e:	bf00      	nop
 8007290:	080072a1 	.word	0x080072a1
 8007294:	080072b1 	.word	0x080072b1
 8007298:	080072a9 	.word	0x080072a9
 800729c:	080072b9 	.word	0x080072b9
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072a6:	e116      	b.n	80074d6 <UART_SetConfig+0x2e6>
 80072a8:	2302      	movs	r3, #2
 80072aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ae:	e112      	b.n	80074d6 <UART_SetConfig+0x2e6>
 80072b0:	2304      	movs	r3, #4
 80072b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072b6:	e10e      	b.n	80074d6 <UART_SetConfig+0x2e6>
 80072b8:	2308      	movs	r3, #8
 80072ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072be:	e10a      	b.n	80074d6 <UART_SetConfig+0x2e6>
 80072c0:	2310      	movs	r3, #16
 80072c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072c6:	e106      	b.n	80074d6 <UART_SetConfig+0x2e6>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a7c      	ldr	r2, [pc, #496]	@ (80074c0 <UART_SetConfig+0x2d0>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d138      	bne.n	8007344 <UART_SetConfig+0x154>
 80072d2:	4b7a      	ldr	r3, [pc, #488]	@ (80074bc <UART_SetConfig+0x2cc>)
 80072d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d8:	f003 030c 	and.w	r3, r3, #12
 80072dc:	2b0c      	cmp	r3, #12
 80072de:	d82d      	bhi.n	800733c <UART_SetConfig+0x14c>
 80072e0:	a201      	add	r2, pc, #4	@ (adr r2, 80072e8 <UART_SetConfig+0xf8>)
 80072e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e6:	bf00      	nop
 80072e8:	0800731d 	.word	0x0800731d
 80072ec:	0800733d 	.word	0x0800733d
 80072f0:	0800733d 	.word	0x0800733d
 80072f4:	0800733d 	.word	0x0800733d
 80072f8:	0800732d 	.word	0x0800732d
 80072fc:	0800733d 	.word	0x0800733d
 8007300:	0800733d 	.word	0x0800733d
 8007304:	0800733d 	.word	0x0800733d
 8007308:	08007325 	.word	0x08007325
 800730c:	0800733d 	.word	0x0800733d
 8007310:	0800733d 	.word	0x0800733d
 8007314:	0800733d 	.word	0x0800733d
 8007318:	08007335 	.word	0x08007335
 800731c:	2300      	movs	r3, #0
 800731e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007322:	e0d8      	b.n	80074d6 <UART_SetConfig+0x2e6>
 8007324:	2302      	movs	r3, #2
 8007326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800732a:	e0d4      	b.n	80074d6 <UART_SetConfig+0x2e6>
 800732c:	2304      	movs	r3, #4
 800732e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007332:	e0d0      	b.n	80074d6 <UART_SetConfig+0x2e6>
 8007334:	2308      	movs	r3, #8
 8007336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800733a:	e0cc      	b.n	80074d6 <UART_SetConfig+0x2e6>
 800733c:	2310      	movs	r3, #16
 800733e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007342:	e0c8      	b.n	80074d6 <UART_SetConfig+0x2e6>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a5e      	ldr	r2, [pc, #376]	@ (80074c4 <UART_SetConfig+0x2d4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d125      	bne.n	800739a <UART_SetConfig+0x1aa>
 800734e:	4b5b      	ldr	r3, [pc, #364]	@ (80074bc <UART_SetConfig+0x2cc>)
 8007350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007354:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007358:	2b30      	cmp	r3, #48	@ 0x30
 800735a:	d016      	beq.n	800738a <UART_SetConfig+0x19a>
 800735c:	2b30      	cmp	r3, #48	@ 0x30
 800735e:	d818      	bhi.n	8007392 <UART_SetConfig+0x1a2>
 8007360:	2b20      	cmp	r3, #32
 8007362:	d00a      	beq.n	800737a <UART_SetConfig+0x18a>
 8007364:	2b20      	cmp	r3, #32
 8007366:	d814      	bhi.n	8007392 <UART_SetConfig+0x1a2>
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <UART_SetConfig+0x182>
 800736c:	2b10      	cmp	r3, #16
 800736e:	d008      	beq.n	8007382 <UART_SetConfig+0x192>
 8007370:	e00f      	b.n	8007392 <UART_SetConfig+0x1a2>
 8007372:	2300      	movs	r3, #0
 8007374:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007378:	e0ad      	b.n	80074d6 <UART_SetConfig+0x2e6>
 800737a:	2302      	movs	r3, #2
 800737c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007380:	e0a9      	b.n	80074d6 <UART_SetConfig+0x2e6>
 8007382:	2304      	movs	r3, #4
 8007384:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007388:	e0a5      	b.n	80074d6 <UART_SetConfig+0x2e6>
 800738a:	2308      	movs	r3, #8
 800738c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007390:	e0a1      	b.n	80074d6 <UART_SetConfig+0x2e6>
 8007392:	2310      	movs	r3, #16
 8007394:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007398:	e09d      	b.n	80074d6 <UART_SetConfig+0x2e6>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a4a      	ldr	r2, [pc, #296]	@ (80074c8 <UART_SetConfig+0x2d8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d125      	bne.n	80073f0 <UART_SetConfig+0x200>
 80073a4:	4b45      	ldr	r3, [pc, #276]	@ (80074bc <UART_SetConfig+0x2cc>)
 80073a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80073b0:	d016      	beq.n	80073e0 <UART_SetConfig+0x1f0>
 80073b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80073b4:	d818      	bhi.n	80073e8 <UART_SetConfig+0x1f8>
 80073b6:	2b80      	cmp	r3, #128	@ 0x80
 80073b8:	d00a      	beq.n	80073d0 <UART_SetConfig+0x1e0>
 80073ba:	2b80      	cmp	r3, #128	@ 0x80
 80073bc:	d814      	bhi.n	80073e8 <UART_SetConfig+0x1f8>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <UART_SetConfig+0x1d8>
 80073c2:	2b40      	cmp	r3, #64	@ 0x40
 80073c4:	d008      	beq.n	80073d8 <UART_SetConfig+0x1e8>
 80073c6:	e00f      	b.n	80073e8 <UART_SetConfig+0x1f8>
 80073c8:	2300      	movs	r3, #0
 80073ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073ce:	e082      	b.n	80074d6 <UART_SetConfig+0x2e6>
 80073d0:	2302      	movs	r3, #2
 80073d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073d6:	e07e      	b.n	80074d6 <UART_SetConfig+0x2e6>
 80073d8:	2304      	movs	r3, #4
 80073da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073de:	e07a      	b.n	80074d6 <UART_SetConfig+0x2e6>
 80073e0:	2308      	movs	r3, #8
 80073e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073e6:	e076      	b.n	80074d6 <UART_SetConfig+0x2e6>
 80073e8:	2310      	movs	r3, #16
 80073ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073ee:	e072      	b.n	80074d6 <UART_SetConfig+0x2e6>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a35      	ldr	r2, [pc, #212]	@ (80074cc <UART_SetConfig+0x2dc>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d12a      	bne.n	8007450 <UART_SetConfig+0x260>
 80073fa:	4b30      	ldr	r3, [pc, #192]	@ (80074bc <UART_SetConfig+0x2cc>)
 80073fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007400:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007408:	d01a      	beq.n	8007440 <UART_SetConfig+0x250>
 800740a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800740e:	d81b      	bhi.n	8007448 <UART_SetConfig+0x258>
 8007410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007414:	d00c      	beq.n	8007430 <UART_SetConfig+0x240>
 8007416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800741a:	d815      	bhi.n	8007448 <UART_SetConfig+0x258>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <UART_SetConfig+0x238>
 8007420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007424:	d008      	beq.n	8007438 <UART_SetConfig+0x248>
 8007426:	e00f      	b.n	8007448 <UART_SetConfig+0x258>
 8007428:	2300      	movs	r3, #0
 800742a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800742e:	e052      	b.n	80074d6 <UART_SetConfig+0x2e6>
 8007430:	2302      	movs	r3, #2
 8007432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007436:	e04e      	b.n	80074d6 <UART_SetConfig+0x2e6>
 8007438:	2304      	movs	r3, #4
 800743a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800743e:	e04a      	b.n	80074d6 <UART_SetConfig+0x2e6>
 8007440:	2308      	movs	r3, #8
 8007442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007446:	e046      	b.n	80074d6 <UART_SetConfig+0x2e6>
 8007448:	2310      	movs	r3, #16
 800744a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800744e:	e042      	b.n	80074d6 <UART_SetConfig+0x2e6>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a17      	ldr	r2, [pc, #92]	@ (80074b4 <UART_SetConfig+0x2c4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d13a      	bne.n	80074d0 <UART_SetConfig+0x2e0>
 800745a:	4b18      	ldr	r3, [pc, #96]	@ (80074bc <UART_SetConfig+0x2cc>)
 800745c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007460:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007464:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007468:	d01a      	beq.n	80074a0 <UART_SetConfig+0x2b0>
 800746a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800746e:	d81b      	bhi.n	80074a8 <UART_SetConfig+0x2b8>
 8007470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007474:	d00c      	beq.n	8007490 <UART_SetConfig+0x2a0>
 8007476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800747a:	d815      	bhi.n	80074a8 <UART_SetConfig+0x2b8>
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <UART_SetConfig+0x298>
 8007480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007484:	d008      	beq.n	8007498 <UART_SetConfig+0x2a8>
 8007486:	e00f      	b.n	80074a8 <UART_SetConfig+0x2b8>
 8007488:	2300      	movs	r3, #0
 800748a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800748e:	e022      	b.n	80074d6 <UART_SetConfig+0x2e6>
 8007490:	2302      	movs	r3, #2
 8007492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007496:	e01e      	b.n	80074d6 <UART_SetConfig+0x2e6>
 8007498:	2304      	movs	r3, #4
 800749a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800749e:	e01a      	b.n	80074d6 <UART_SetConfig+0x2e6>
 80074a0:	2308      	movs	r3, #8
 80074a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074a6:	e016      	b.n	80074d6 <UART_SetConfig+0x2e6>
 80074a8:	2310      	movs	r3, #16
 80074aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ae:	e012      	b.n	80074d6 <UART_SetConfig+0x2e6>
 80074b0:	efff69f3 	.word	0xefff69f3
 80074b4:	40008000 	.word	0x40008000
 80074b8:	40013800 	.word	0x40013800
 80074bc:	40021000 	.word	0x40021000
 80074c0:	40004400 	.word	0x40004400
 80074c4:	40004800 	.word	0x40004800
 80074c8:	40004c00 	.word	0x40004c00
 80074cc:	40005000 	.word	0x40005000
 80074d0:	2310      	movs	r3, #16
 80074d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a9f      	ldr	r2, [pc, #636]	@ (8007758 <UART_SetConfig+0x568>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d17a      	bne.n	80075d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d824      	bhi.n	8007532 <UART_SetConfig+0x342>
 80074e8:	a201      	add	r2, pc, #4	@ (adr r2, 80074f0 <UART_SetConfig+0x300>)
 80074ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ee:	bf00      	nop
 80074f0:	08007515 	.word	0x08007515
 80074f4:	08007533 	.word	0x08007533
 80074f8:	0800751d 	.word	0x0800751d
 80074fc:	08007533 	.word	0x08007533
 8007500:	08007523 	.word	0x08007523
 8007504:	08007533 	.word	0x08007533
 8007508:	08007533 	.word	0x08007533
 800750c:	08007533 	.word	0x08007533
 8007510:	0800752b 	.word	0x0800752b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007514:	f7fd fb48 	bl	8004ba8 <HAL_RCC_GetPCLK1Freq>
 8007518:	61f8      	str	r0, [r7, #28]
        break;
 800751a:	e010      	b.n	800753e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800751c:	4b8f      	ldr	r3, [pc, #572]	@ (800775c <UART_SetConfig+0x56c>)
 800751e:	61fb      	str	r3, [r7, #28]
        break;
 8007520:	e00d      	b.n	800753e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007522:	f7fd faa9 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8007526:	61f8      	str	r0, [r7, #28]
        break;
 8007528:	e009      	b.n	800753e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800752a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800752e:	61fb      	str	r3, [r7, #28]
        break;
 8007530:	e005      	b.n	800753e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800753c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 80fb 	beq.w	800773c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	4413      	add	r3, r2
 8007550:	69fa      	ldr	r2, [r7, #28]
 8007552:	429a      	cmp	r2, r3
 8007554:	d305      	bcc.n	8007562 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800755c:	69fa      	ldr	r2, [r7, #28]
 800755e:	429a      	cmp	r2, r3
 8007560:	d903      	bls.n	800756a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007568:	e0e8      	b.n	800773c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	2200      	movs	r2, #0
 800756e:	461c      	mov	r4, r3
 8007570:	4615      	mov	r5, r2
 8007572:	f04f 0200 	mov.w	r2, #0
 8007576:	f04f 0300 	mov.w	r3, #0
 800757a:	022b      	lsls	r3, r5, #8
 800757c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007580:	0222      	lsls	r2, r4, #8
 8007582:	68f9      	ldr	r1, [r7, #12]
 8007584:	6849      	ldr	r1, [r1, #4]
 8007586:	0849      	lsrs	r1, r1, #1
 8007588:	2000      	movs	r0, #0
 800758a:	4688      	mov	r8, r1
 800758c:	4681      	mov	r9, r0
 800758e:	eb12 0a08 	adds.w	sl, r2, r8
 8007592:	eb43 0b09 	adc.w	fp, r3, r9
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	603b      	str	r3, [r7, #0]
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a4:	4650      	mov	r0, sl
 80075a6:	4659      	mov	r1, fp
 80075a8:	f7f9 f968 	bl	800087c <__aeabi_uldivmod>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4613      	mov	r3, r2
 80075b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075ba:	d308      	bcc.n	80075ce <UART_SetConfig+0x3de>
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075c2:	d204      	bcs.n	80075ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	60da      	str	r2, [r3, #12]
 80075cc:	e0b6      	b.n	800773c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80075d4:	e0b2      	b.n	800773c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075de:	d15e      	bne.n	800769e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80075e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d828      	bhi.n	800763a <UART_SetConfig+0x44a>
 80075e8:	a201      	add	r2, pc, #4	@ (adr r2, 80075f0 <UART_SetConfig+0x400>)
 80075ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ee:	bf00      	nop
 80075f0:	08007615 	.word	0x08007615
 80075f4:	0800761d 	.word	0x0800761d
 80075f8:	08007625 	.word	0x08007625
 80075fc:	0800763b 	.word	0x0800763b
 8007600:	0800762b 	.word	0x0800762b
 8007604:	0800763b 	.word	0x0800763b
 8007608:	0800763b 	.word	0x0800763b
 800760c:	0800763b 	.word	0x0800763b
 8007610:	08007633 	.word	0x08007633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007614:	f7fd fac8 	bl	8004ba8 <HAL_RCC_GetPCLK1Freq>
 8007618:	61f8      	str	r0, [r7, #28]
        break;
 800761a:	e014      	b.n	8007646 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800761c:	f7fd fada 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8007620:	61f8      	str	r0, [r7, #28]
        break;
 8007622:	e010      	b.n	8007646 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007624:	4b4d      	ldr	r3, [pc, #308]	@ (800775c <UART_SetConfig+0x56c>)
 8007626:	61fb      	str	r3, [r7, #28]
        break;
 8007628:	e00d      	b.n	8007646 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800762a:	f7fd fa25 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 800762e:	61f8      	str	r0, [r7, #28]
        break;
 8007630:	e009      	b.n	8007646 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007636:	61fb      	str	r3, [r7, #28]
        break;
 8007638:	e005      	b.n	8007646 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007644:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d077      	beq.n	800773c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	005a      	lsls	r2, r3, #1
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	085b      	lsrs	r3, r3, #1
 8007656:	441a      	add	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007660:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2b0f      	cmp	r3, #15
 8007666:	d916      	bls.n	8007696 <UART_SetConfig+0x4a6>
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800766e:	d212      	bcs.n	8007696 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f023 030f 	bic.w	r3, r3, #15
 8007678:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	085b      	lsrs	r3, r3, #1
 800767e:	b29b      	uxth	r3, r3
 8007680:	f003 0307 	and.w	r3, r3, #7
 8007684:	b29a      	uxth	r2, r3
 8007686:	8afb      	ldrh	r3, [r7, #22]
 8007688:	4313      	orrs	r3, r2
 800768a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	8afa      	ldrh	r2, [r7, #22]
 8007692:	60da      	str	r2, [r3, #12]
 8007694:	e052      	b.n	800773c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800769c:	e04e      	b.n	800773c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800769e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	d827      	bhi.n	80076f6 <UART_SetConfig+0x506>
 80076a6:	a201      	add	r2, pc, #4	@ (adr r2, 80076ac <UART_SetConfig+0x4bc>)
 80076a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ac:	080076d1 	.word	0x080076d1
 80076b0:	080076d9 	.word	0x080076d9
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	080076f7 	.word	0x080076f7
 80076bc:	080076e7 	.word	0x080076e7
 80076c0:	080076f7 	.word	0x080076f7
 80076c4:	080076f7 	.word	0x080076f7
 80076c8:	080076f7 	.word	0x080076f7
 80076cc:	080076ef 	.word	0x080076ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076d0:	f7fd fa6a 	bl	8004ba8 <HAL_RCC_GetPCLK1Freq>
 80076d4:	61f8      	str	r0, [r7, #28]
        break;
 80076d6:	e014      	b.n	8007702 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076d8:	f7fd fa7c 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 80076dc:	61f8      	str	r0, [r7, #28]
        break;
 80076de:	e010      	b.n	8007702 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076e0:	4b1e      	ldr	r3, [pc, #120]	@ (800775c <UART_SetConfig+0x56c>)
 80076e2:	61fb      	str	r3, [r7, #28]
        break;
 80076e4:	e00d      	b.n	8007702 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076e6:	f7fd f9c7 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 80076ea:	61f8      	str	r0, [r7, #28]
        break;
 80076ec:	e009      	b.n	8007702 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076f2:	61fb      	str	r3, [r7, #28]
        break;
 80076f4:	e005      	b.n	8007702 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007700:	bf00      	nop
    }

    if (pclk != 0U)
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d019      	beq.n	800773c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	085a      	lsrs	r2, r3, #1
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	441a      	add	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	fbb2 f3f3 	udiv	r3, r2, r3
 800771a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	2b0f      	cmp	r3, #15
 8007720:	d909      	bls.n	8007736 <UART_SetConfig+0x546>
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007728:	d205      	bcs.n	8007736 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	b29a      	uxth	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60da      	str	r2, [r3, #12]
 8007734:	e002      	b.n	800773c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007748:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800774c:	4618      	mov	r0, r3
 800774e:	3728      	adds	r7, #40	@ 0x28
 8007750:	46bd      	mov	sp, r7
 8007752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007756:	bf00      	nop
 8007758:	40008000 	.word	0x40008000
 800775c:	00f42400 	.word	0x00f42400

08007760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00a      	beq.n	800778a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00a      	beq.n	80077ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00a      	beq.n	80077ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d2:	f003 0304 	and.w	r3, r3, #4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00a      	beq.n	80077f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f4:	f003 0310 	and.w	r3, r3, #16
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00a      	beq.n	8007812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01a      	beq.n	8007876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800785e:	d10a      	bne.n	8007876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	605a      	str	r2, [r3, #4]
  }
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b098      	sub	sp, #96	@ 0x60
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078b4:	f7fb f8aa 	bl	8002a0c <HAL_GetTick>
 80078b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d12e      	bne.n	8007926 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078d0:	2200      	movs	r2, #0
 80078d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f88c 	bl	80079f4 <UART_WaitOnFlagUntilTimeout>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d021      	beq.n	8007926 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	461a      	mov	r2, r3
 80078fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007900:	647b      	str	r3, [r7, #68]	@ 0x44
 8007902:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007906:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007908:	e841 2300 	strex	r3, r2, [r1]
 800790c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800790e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e6      	bne.n	80078e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e062      	b.n	80079ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b04      	cmp	r3, #4
 8007932:	d149      	bne.n	80079c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007934:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800793c:	2200      	movs	r2, #0
 800793e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f856 	bl	80079f4 <UART_WaitOnFlagUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d03c      	beq.n	80079c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	e853 3f00 	ldrex	r3, [r3]
 800795a:	623b      	str	r3, [r7, #32]
   return(result);
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800796c:	633b      	str	r3, [r7, #48]	@ 0x30
 800796e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800797a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e6      	bne.n	800794e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3308      	adds	r3, #8
 8007986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	e853 3f00 	ldrex	r3, [r3]
 800798e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 0301 	bic.w	r3, r3, #1
 8007996:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3308      	adds	r3, #8
 800799e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079a0:	61fa      	str	r2, [r7, #28]
 80079a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a4:	69b9      	ldr	r1, [r7, #24]
 80079a6:	69fa      	ldr	r2, [r7, #28]
 80079a8:	e841 2300 	strex	r3, r2, [r1]
 80079ac:	617b      	str	r3, [r7, #20]
   return(result);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e5      	bne.n	8007980 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e011      	b.n	80079ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2220      	movs	r2, #32
 80079cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3758      	adds	r7, #88	@ 0x58
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	4613      	mov	r3, r2
 8007a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a04:	e049      	b.n	8007a9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0c:	d045      	beq.n	8007a9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a0e:	f7fa fffd 	bl	8002a0c <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d302      	bcc.n	8007a24 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e048      	b.n	8007aba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d031      	beq.n	8007a9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	f003 0308 	and.w	r3, r3, #8
 8007a40:	2b08      	cmp	r3, #8
 8007a42:	d110      	bne.n	8007a66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2208      	movs	r2, #8
 8007a4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 f8ff 	bl	8007c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2208      	movs	r2, #8
 8007a56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e029      	b.n	8007aba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a74:	d111      	bne.n	8007a9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 f8e5 	bl	8007c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e00f      	b.n	8007aba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69da      	ldr	r2, [r3, #28]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	bf0c      	ite	eq
 8007aaa:	2301      	moveq	r3, #1
 8007aac:	2300      	movne	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d0a6      	beq.n	8007a06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b097      	sub	sp, #92	@ 0x5c
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	88fa      	ldrh	r2, [r7, #6]
 8007adc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	88fa      	ldrh	r2, [r7, #6]
 8007ae4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007af6:	d10e      	bne.n	8007b16 <UART_Start_Receive_IT+0x52>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d105      	bne.n	8007b0c <UART_Start_Receive_IT+0x48>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007b06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007b0a:	e02d      	b.n	8007b68 <UART_Start_Receive_IT+0xa4>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	22ff      	movs	r2, #255	@ 0xff
 8007b10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007b14:	e028      	b.n	8007b68 <UART_Start_Receive_IT+0xa4>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10d      	bne.n	8007b3a <UART_Start_Receive_IT+0x76>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d104      	bne.n	8007b30 <UART_Start_Receive_IT+0x6c>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	22ff      	movs	r2, #255	@ 0xff
 8007b2a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007b2e:	e01b      	b.n	8007b68 <UART_Start_Receive_IT+0xa4>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	227f      	movs	r2, #127	@ 0x7f
 8007b34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007b38:	e016      	b.n	8007b68 <UART_Start_Receive_IT+0xa4>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b42:	d10d      	bne.n	8007b60 <UART_Start_Receive_IT+0x9c>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d104      	bne.n	8007b56 <UART_Start_Receive_IT+0x92>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	227f      	movs	r2, #127	@ 0x7f
 8007b50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007b54:	e008      	b.n	8007b68 <UART_Start_Receive_IT+0xa4>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	223f      	movs	r2, #63	@ 0x3f
 8007b5a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007b5e:	e003      	b.n	8007b68 <UART_Start_Receive_IT+0xa4>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2222      	movs	r2, #34	@ 0x22
 8007b74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8a:	f043 0301 	orr.w	r3, r3, #1
 8007b8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b98:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007b9a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e5      	bne.n	8007b78 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb4:	d107      	bne.n	8007bc6 <UART_Start_Receive_IT+0x102>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d103      	bne.n	8007bc6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4a21      	ldr	r2, [pc, #132]	@ (8007c48 <UART_Start_Receive_IT+0x184>)
 8007bc2:	669a      	str	r2, [r3, #104]	@ 0x68
 8007bc4:	e002      	b.n	8007bcc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4a20      	ldr	r2, [pc, #128]	@ (8007c4c <UART_Start_Receive_IT+0x188>)
 8007bca:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d019      	beq.n	8007c08 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bf4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007bf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e6      	bne.n	8007bd4 <UART_Start_Receive_IT+0x110>
 8007c06:	e018      	b.n	8007c3a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	613b      	str	r3, [r7, #16]
   return(result);
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f043 0320 	orr.w	r3, r3, #32
 8007c1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c26:	623b      	str	r3, [r7, #32]
 8007c28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	69f9      	ldr	r1, [r7, #28]
 8007c2c:	6a3a      	ldr	r2, [r7, #32]
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e6      	bne.n	8007c08 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	375c      	adds	r7, #92	@ 0x5c
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	08007f55 	.word	0x08007f55
 8007c4c:	08007d99 	.word	0x08007d99

08007c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b095      	sub	sp, #84	@ 0x54
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c76:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c78:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e6      	bne.n	8007c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	f023 0301 	bic.w	r3, r3, #1
 8007ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e5      	bne.n	8007c8a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d118      	bne.n	8007cf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	f023 0310 	bic.w	r3, r3, #16
 8007cda:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ce4:	61bb      	str	r3, [r7, #24]
 8007ce6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce8:	6979      	ldr	r1, [r7, #20]
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e6      	bne.n	8007cc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007d0c:	bf00      	nop
 8007d0e:	3754      	adds	r7, #84	@ 0x54
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff fa50 	bl	80071dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d3c:	bf00      	nop
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d60:	61fb      	str	r3, [r7, #28]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	61bb      	str	r3, [r7, #24]
 8007d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6e:	6979      	ldr	r1, [r7, #20]
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	613b      	str	r3, [r7, #16]
   return(result);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e6      	bne.n	8007d4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2220      	movs	r2, #32
 8007d82:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7ff fa12 	bl	80071b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d90:	bf00      	nop
 8007d92:	3720      	adds	r7, #32
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b09c      	sub	sp, #112	@ 0x70
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007da6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007db0:	2b22      	cmp	r3, #34	@ 0x22
 8007db2:	f040 80be 	bne.w	8007f32 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007dbc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007dc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007dc4:	b2d9      	uxtb	r1, r3
 8007dc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd0:	400a      	ands	r2, r1
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	3b01      	subs	r3, #1
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f040 80a3 	bne.w	8007f46 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e6      	bne.n	8007e00 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3308      	adds	r3, #8
 8007e38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e44:	f023 0301 	bic.w	r3, r3, #1
 8007e48:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3308      	adds	r3, #8
 8007e50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007e52:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e5      	bne.n	8007e32 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a34      	ldr	r2, [pc, #208]	@ (8007f50 <UART_RxISR_8BIT+0x1b8>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d01f      	beq.n	8007ec4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d018      	beq.n	8007ec4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ea6:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e6      	bne.n	8007e92 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d12e      	bne.n	8007f2a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	e853 3f00 	ldrex	r3, [r3]
 8007ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f023 0310 	bic.w	r3, r3, #16
 8007ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	461a      	mov	r2, r3
 8007eee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ef0:	61fb      	str	r3, [r7, #28]
 8007ef2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef4:	69b9      	ldr	r1, [r7, #24]
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	e841 2300 	strex	r3, r2, [r1]
 8007efc:	617b      	str	r3, [r7, #20]
   return(result);
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e6      	bne.n	8007ed2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	f003 0310 	and.w	r3, r3, #16
 8007f0e:	2b10      	cmp	r3, #16
 8007f10:	d103      	bne.n	8007f1a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2210      	movs	r2, #16
 8007f18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7f9 fed8 	bl	8001cd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f28:	e00d      	b.n	8007f46 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff f94c 	bl	80071c8 <HAL_UART_RxCpltCallback>
}
 8007f30:	e009      	b.n	8007f46 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	8b1b      	ldrh	r3, [r3, #24]
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f042 0208 	orr.w	r2, r2, #8
 8007f42:	b292      	uxth	r2, r2
 8007f44:	831a      	strh	r2, [r3, #24]
}
 8007f46:	bf00      	nop
 8007f48:	3770      	adds	r7, #112	@ 0x70
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	40008000 	.word	0x40008000

08007f54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b09c      	sub	sp, #112	@ 0x70
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f62:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f6c:	2b22      	cmp	r3, #34	@ 0x22
 8007f6e:	f040 80be 	bne.w	80080ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007f78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f80:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f82:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007f86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f96:	1c9a      	adds	r2, r3, #2
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f040 80a3 	bne.w	8008102 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fda:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fdc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007fe0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e6      	bne.n	8007fbc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff8:	e853 3f00 	ldrex	r3, [r3]
 8007ffc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	663b      	str	r3, [r7, #96]	@ 0x60
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3308      	adds	r3, #8
 800800c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800800e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008010:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008014:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800801c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e5      	bne.n	8007fee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2220      	movs	r2, #32
 8008026:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a34      	ldr	r2, [pc, #208]	@ (800810c <UART_RxISR_16BIT+0x1b8>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d01f      	beq.n	8008080 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d018      	beq.n	8008080 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	e853 3f00 	ldrex	r3, [r3]
 800805a:	61fb      	str	r3, [r7, #28]
   return(result);
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008062:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800806c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800806e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008074:	e841 2300 	strex	r3, r2, [r1]
 8008078:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e6      	bne.n	800804e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008084:	2b01      	cmp	r3, #1
 8008086:	d12e      	bne.n	80080e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	60bb      	str	r3, [r7, #8]
   return(result);
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f023 0310 	bic.w	r3, r3, #16
 80080a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	461a      	mov	r2, r3
 80080aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080ac:	61bb      	str	r3, [r7, #24]
 80080ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	6979      	ldr	r1, [r7, #20]
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	e841 2300 	strex	r3, r2, [r1]
 80080b8:	613b      	str	r3, [r7, #16]
   return(result);
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e6      	bne.n	800808e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	f003 0310 	and.w	r3, r3, #16
 80080ca:	2b10      	cmp	r3, #16
 80080cc:	d103      	bne.n	80080d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2210      	movs	r2, #16
 80080d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7f9 fdfa 	bl	8001cd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080e4:	e00d      	b.n	8008102 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7ff f86e 	bl	80071c8 <HAL_UART_RxCpltCallback>
}
 80080ec:	e009      	b.n	8008102 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	8b1b      	ldrh	r3, [r3, #24]
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0208 	orr.w	r2, r2, #8
 80080fe:	b292      	uxth	r2, r2
 8008100:	831a      	strh	r2, [r3, #24]
}
 8008102:	bf00      	nop
 8008104:	3770      	adds	r7, #112	@ 0x70
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	40008000 	.word	0x40008000

08008110 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08c      	sub	sp, #48	@ 0x30
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	4613      	mov	r3, r2
 8008130:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800813e:	2b20      	cmp	r3, #32
 8008140:	d13b      	bne.n	80081ba <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8008148:	88fb      	ldrh	r3, [r7, #6]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e034      	b.n	80081bc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2201      	movs	r2, #1
 8008156:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800815e:	88fb      	ldrh	r3, [r7, #6]
 8008160:	461a      	mov	r2, r3
 8008162:	68b9      	ldr	r1, [r7, #8]
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f7ff fcad 	bl	8007ac4 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800816e:	2b01      	cmp	r3, #1
 8008170:	d11d      	bne.n	80081ae <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2210      	movs	r2, #16
 8008178:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	e853 3f00 	ldrex	r3, [r3]
 8008186:	617b      	str	r3, [r7, #20]
   return(result);
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f043 0310 	orr.w	r3, r3, #16
 800818e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	461a      	mov	r2, r3
 8008196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008198:	627b      	str	r3, [r7, #36]	@ 0x24
 800819a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	6a39      	ldr	r1, [r7, #32]
 800819e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e6      	bne.n	800817a <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80081ac:	e002      	b.n	80081b4 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80081b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081b8:	e000      	b.n	80081bc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80081ba:	2302      	movs	r3, #2
  }
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3730      	adds	r7, #48	@ 0x30
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <LL_TIM_SetPrescaler>:
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <LL_TIM_SetAutoReload>:
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <LL_TIM_SetRepetitionCounter>:
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	f043 0201 	orr.w	r2, r3, #1
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	615a      	str	r2, [r3, #20]
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a3d      	ldr	r2, [pc, #244]	@ (8008340 <LL_TIM_Init+0x108>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d013      	beq.n	8008278 <LL_TIM_Init+0x40>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008256:	d00f      	beq.n	8008278 <LL_TIM_Init+0x40>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a3a      	ldr	r2, [pc, #232]	@ (8008344 <LL_TIM_Init+0x10c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00b      	beq.n	8008278 <LL_TIM_Init+0x40>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a39      	ldr	r2, [pc, #228]	@ (8008348 <LL_TIM_Init+0x110>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d007      	beq.n	8008278 <LL_TIM_Init+0x40>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a38      	ldr	r2, [pc, #224]	@ (800834c <LL_TIM_Init+0x114>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d003      	beq.n	8008278 <LL_TIM_Init+0x40>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a37      	ldr	r2, [pc, #220]	@ (8008350 <LL_TIM_Init+0x118>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d106      	bne.n	8008286 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a2d      	ldr	r2, [pc, #180]	@ (8008340 <LL_TIM_Init+0x108>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d01f      	beq.n	80082ce <LL_TIM_Init+0x96>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008294:	d01b      	beq.n	80082ce <LL_TIM_Init+0x96>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a2a      	ldr	r2, [pc, #168]	@ (8008344 <LL_TIM_Init+0x10c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d017      	beq.n	80082ce <LL_TIM_Init+0x96>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a29      	ldr	r2, [pc, #164]	@ (8008348 <LL_TIM_Init+0x110>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d013      	beq.n	80082ce <LL_TIM_Init+0x96>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a28      	ldr	r2, [pc, #160]	@ (800834c <LL_TIM_Init+0x114>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d00f      	beq.n	80082ce <LL_TIM_Init+0x96>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a27      	ldr	r2, [pc, #156]	@ (8008350 <LL_TIM_Init+0x118>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00b      	beq.n	80082ce <LL_TIM_Init+0x96>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a26      	ldr	r2, [pc, #152]	@ (8008354 <LL_TIM_Init+0x11c>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d007      	beq.n	80082ce <LL_TIM_Init+0x96>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a25      	ldr	r2, [pc, #148]	@ (8008358 <LL_TIM_Init+0x120>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d003      	beq.n	80082ce <LL_TIM_Init+0x96>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a24      	ldr	r2, [pc, #144]	@ (800835c <LL_TIM_Init+0x124>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d106      	bne.n	80082dc <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7ff ff79 	bl	80081e0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff ff65 	bl	80081c4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a10      	ldr	r2, [pc, #64]	@ (8008340 <LL_TIM_Init+0x108>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00f      	beq.n	8008322 <LL_TIM_Init+0xea>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a12      	ldr	r2, [pc, #72]	@ (8008350 <LL_TIM_Init+0x118>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00b      	beq.n	8008322 <LL_TIM_Init+0xea>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a11      	ldr	r2, [pc, #68]	@ (8008354 <LL_TIM_Init+0x11c>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d007      	beq.n	8008322 <LL_TIM_Init+0xea>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a10      	ldr	r2, [pc, #64]	@ (8008358 <LL_TIM_Init+0x120>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d003      	beq.n	8008322 <LL_TIM_Init+0xea>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a0f      	ldr	r2, [pc, #60]	@ (800835c <LL_TIM_Init+0x124>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d105      	bne.n	800832e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7ff ff67 	bl	80081fc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7ff ff72 	bl	8008218 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	40012c00 	.word	0x40012c00
 8008344:	40000400 	.word	0x40000400
 8008348:	40000800 	.word	0x40000800
 800834c:	40000c00 	.word	0x40000c00
 8008350:	40013400 	.word	0x40013400
 8008354:	40014000 	.word	0x40014000
 8008358:	40014400 	.word	0x40014400
 800835c:	40014800 	.word	0x40014800

08008360 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008364:	4904      	ldr	r1, [pc, #16]	@ (8008378 <MX_FATFS_Init+0x18>)
 8008366:	4805      	ldr	r0, [pc, #20]	@ (800837c <MX_FATFS_Init+0x1c>)
 8008368:	f003 fece 	bl	800c108 <FATFS_LinkDriver>
 800836c:	4603      	mov	r3, r0
 800836e:	461a      	mov	r2, r3
 8008370:	4b03      	ldr	r3, [pc, #12]	@ (8008380 <MX_FATFS_Init+0x20>)
 8008372:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008374:	bf00      	nop
 8008376:	bd80      	pop	{r7, pc}
 8008378:	20005cec 	.word	0x20005cec
 800837c:	20000068 	.word	0x20000068
 8008380:	20005ce8 	.word	0x20005ce8

08008384 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008388:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800838a:	4618      	mov	r0, r3
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8008398:	2200      	movs	r2, #0
 800839a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800839e:	4804      	ldr	r0, [pc, #16]	@ (80083b0 <SELECT+0x1c>)
 80083a0:	f7fb fdfa 	bl	8003f98 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80083a4:	2001      	movs	r0, #1
 80083a6:	f7fa fb3d 	bl	8002a24 <HAL_Delay>
}
 80083aa:	bf00      	nop
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	48000400 	.word	0x48000400

080083b4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80083b8:	2201      	movs	r2, #1
 80083ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80083be:	4804      	ldr	r0, [pc, #16]	@ (80083d0 <DESELECT+0x1c>)
 80083c0:	f7fb fdea 	bl	8003f98 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80083c4:	2001      	movs	r0, #1
 80083c6:	f7fa fb2d 	bl	8002a24 <HAL_Delay>
}
 80083ca:	bf00      	nop
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	48000400 	.word	0x48000400

080083d4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	4603      	mov	r3, r0
 80083dc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80083de:	bf00      	nop
 80083e0:	4b08      	ldr	r3, [pc, #32]	@ (8008404 <SPI_TxByte+0x30>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d1f8      	bne.n	80083e0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80083ee:	1df9      	adds	r1, r7, #7
 80083f0:	2364      	movs	r3, #100	@ 0x64
 80083f2:	2201      	movs	r2, #1
 80083f4:	4803      	ldr	r0, [pc, #12]	@ (8008404 <SPI_TxByte+0x30>)
 80083f6:	f7fd f9c2 	bl	800577e <HAL_SPI_Transmit>
}
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000240 	.word	0x20000240

08008408 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8008414:	bf00      	nop
 8008416:	4b08      	ldr	r3, [pc, #32]	@ (8008438 <SPI_TxBuffer+0x30>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b02      	cmp	r3, #2
 8008422:	d1f8      	bne.n	8008416 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8008424:	887a      	ldrh	r2, [r7, #2]
 8008426:	2364      	movs	r3, #100	@ 0x64
 8008428:	6879      	ldr	r1, [r7, #4]
 800842a:	4803      	ldr	r0, [pc, #12]	@ (8008438 <SPI_TxBuffer+0x30>)
 800842c:	f7fd f9a7 	bl	800577e <HAL_SPI_Transmit>
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20000240 	.word	0x20000240

0800843c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8008442:	23ff      	movs	r3, #255	@ 0xff
 8008444:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8008446:	bf00      	nop
 8008448:	4b09      	ldr	r3, [pc, #36]	@ (8008470 <SPI_RxByte+0x34>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f003 0302 	and.w	r3, r3, #2
 8008452:	2b02      	cmp	r3, #2
 8008454:	d1f8      	bne.n	8008448 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8008456:	1dba      	adds	r2, r7, #6
 8008458:	1df9      	adds	r1, r7, #7
 800845a:	2364      	movs	r3, #100	@ 0x64
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	2301      	movs	r3, #1
 8008460:	4803      	ldr	r0, [pc, #12]	@ (8008470 <SPI_RxByte+0x34>)
 8008462:	f7fd fb01 	bl	8005a68 <HAL_SPI_TransmitReceive>

  return data;
 8008466:	79bb      	ldrb	r3, [r7, #6]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	20000240 	.word	0x20000240

08008474 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800847c:	f7ff ffde 	bl	800843c <SPI_RxByte>
 8008480:	4603      	mov	r3, r0
 8008482:	461a      	mov	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	701a      	strb	r2, [r3, #0]
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8008496:	4b0a      	ldr	r3, [pc, #40]	@ (80084c0 <SD_ReadyWait+0x30>)
 8008498:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800849c:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800849e:	f7ff ffcd 	bl	800843c <SPI_RxByte>
 80084a2:	4603      	mov	r3, r0
 80084a4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	2bff      	cmp	r3, #255	@ 0xff
 80084aa:	d003      	beq.n	80084b4 <SD_ReadyWait+0x24>
 80084ac:	4b04      	ldr	r3, [pc, #16]	@ (80084c0 <SD_ReadyWait+0x30>)
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1f4      	bne.n	800849e <SD_ReadyWait+0xe>

  return res;
 80084b4:	79fb      	ldrb	r3, [r7, #7]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	20005cf2 	.word	0x20005cf2

080084c4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80084ca:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80084ce:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80084d0:	f7ff ff70 	bl	80083b4 <DESELECT>
  for(int i = 0; i < 10; i++)
 80084d4:	2300      	movs	r3, #0
 80084d6:	60bb      	str	r3, [r7, #8]
 80084d8:	e005      	b.n	80084e6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80084da:	20ff      	movs	r0, #255	@ 0xff
 80084dc:	f7ff ff7a 	bl	80083d4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	3301      	adds	r3, #1
 80084e4:	60bb      	str	r3, [r7, #8]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2b09      	cmp	r3, #9
 80084ea:	ddf6      	ble.n	80084da <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80084ec:	f7ff ff52 	bl	8008394 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80084f0:	2340      	movs	r3, #64	@ 0x40
 80084f2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80084fc:	2300      	movs	r3, #0
 80084fe:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8008504:	2395      	movs	r3, #149	@ 0x95
 8008506:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8008508:	463b      	mov	r3, r7
 800850a:	2106      	movs	r1, #6
 800850c:	4618      	mov	r0, r3
 800850e:	f7ff ff7b 	bl	8008408 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8008512:	e002      	b.n	800851a <SD_PowerOn+0x56>
  {
    cnt--;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3b01      	subs	r3, #1
 8008518:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800851a:	f7ff ff8f 	bl	800843c <SPI_RxByte>
 800851e:	4603      	mov	r3, r0
 8008520:	2b01      	cmp	r3, #1
 8008522:	d002      	beq.n	800852a <SD_PowerOn+0x66>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1f4      	bne.n	8008514 <SD_PowerOn+0x50>
  }

  DESELECT();
 800852a:	f7ff ff43 	bl	80083b4 <DESELECT>
  SPI_TxByte(0XFF);
 800852e:	20ff      	movs	r0, #255	@ 0xff
 8008530:	f7ff ff50 	bl	80083d4 <SPI_TxByte>

  PowerFlag = 1;
 8008534:	4b03      	ldr	r3, [pc, #12]	@ (8008544 <SD_PowerOn+0x80>)
 8008536:	2201      	movs	r2, #1
 8008538:	701a      	strb	r2, [r3, #0]
}
 800853a:	bf00      	nop
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20005cf5 	.word	0x20005cf5

08008548 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800854c:	4b03      	ldr	r3, [pc, #12]	@ (800855c <SD_PowerOff+0x14>)
 800854e:	2200      	movs	r2, #0
 8008550:	701a      	strb	r2, [r3, #0]
}
 8008552:	bf00      	nop
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	20005cf5 	.word	0x20005cf5

08008560 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0
  return PowerFlag;
 8008564:	4b03      	ldr	r3, [pc, #12]	@ (8008574 <SD_CheckPower+0x14>)
 8008566:	781b      	ldrb	r3, [r3, #0]
}
 8008568:	4618      	mov	r0, r3
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20005cf5 	.word	0x20005cf5

08008578 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8008582:	4b13      	ldr	r3, [pc, #76]	@ (80085d0 <SD_RxDataBlock+0x58>)
 8008584:	22c8      	movs	r2, #200	@ 0xc8
 8008586:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8008588:	f7ff ff58 	bl	800843c <SPI_RxByte>
 800858c:	4603      	mov	r3, r0
 800858e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8008590:	7bfb      	ldrb	r3, [r7, #15]
 8008592:	2bff      	cmp	r3, #255	@ 0xff
 8008594:	d103      	bne.n	800859e <SD_RxDataBlock+0x26>
 8008596:	4b0e      	ldr	r3, [pc, #56]	@ (80085d0 <SD_RxDataBlock+0x58>)
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1f4      	bne.n	8008588 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	2bfe      	cmp	r3, #254	@ 0xfe
 80085a2:	d001      	beq.n	80085a8 <SD_RxDataBlock+0x30>
 80085a4:	2300      	movs	r3, #0
 80085a6:	e00f      	b.n	80085c8 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	607a      	str	r2, [r7, #4]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff ff60 	bl	8008474 <SPI_RxBytePtr>
  } while(len--);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	1e5a      	subs	r2, r3, #1
 80085b8:	603a      	str	r2, [r7, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1f4      	bne.n	80085a8 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80085be:	f7ff ff3d 	bl	800843c <SPI_RxByte>
  SPI_RxByte();
 80085c2:	f7ff ff3b 	bl	800843c <SPI_RxByte>

  return TRUE;
 80085c6:	2301      	movs	r3, #1
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	20005cf0 	.word	0x20005cf0

080085d4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80085e4:	f7ff ff54 	bl	8008490 <SD_ReadyWait>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2bff      	cmp	r3, #255	@ 0xff
 80085ec:	d001      	beq.n	80085f2 <SD_TxDataBlock+0x1e>
 80085ee:	2300      	movs	r3, #0
 80085f0:	e02f      	b.n	8008652 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80085f2:	78fb      	ldrb	r3, [r7, #3]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7ff feed 	bl	80083d4 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	2bfd      	cmp	r3, #253	@ 0xfd
 80085fe:	d020      	beq.n	8008642 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8008600:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7ff feff 	bl	8008408 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800860a:	f7ff ff17 	bl	800843c <SPI_RxByte>
    SPI_RxByte();
 800860e:	f7ff ff15 	bl	800843c <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8008612:	e00b      	b.n	800862c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8008614:	f7ff ff12 	bl	800843c <SPI_RxByte>
 8008618:	4603      	mov	r3, r0
 800861a:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	f003 031f 	and.w	r3, r3, #31
 8008622:	2b05      	cmp	r3, #5
 8008624:	d006      	beq.n	8008634 <SD_TxDataBlock+0x60>
      i++;
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	3301      	adds	r3, #1
 800862a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	2b40      	cmp	r3, #64	@ 0x40
 8008630:	d9f0      	bls.n	8008614 <SD_TxDataBlock+0x40>
 8008632:	e000      	b.n	8008636 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8008634:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8008636:	bf00      	nop
 8008638:	f7ff ff00 	bl	800843c <SPI_RxByte>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0fa      	beq.n	8008638 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8008642:	7bfb      	ldrb	r3, [r7, #15]
 8008644:	f003 031f 	and.w	r3, r3, #31
 8008648:	2b05      	cmp	r3, #5
 800864a:	d101      	bne.n	8008650 <SD_TxDataBlock+0x7c>
 800864c:	2301      	movs	r3, #1
 800864e:	e000      	b.n	8008652 <SD_TxDataBlock+0x7e>

  return FALSE;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	4603      	mov	r3, r0
 8008662:	6039      	str	r1, [r7, #0]
 8008664:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8008666:	f7ff ff13 	bl	8008490 <SD_ReadyWait>
 800866a:	4603      	mov	r3, r0
 800866c:	2bff      	cmp	r3, #255	@ 0xff
 800866e:	d001      	beq.n	8008674 <SD_SendCmd+0x1a>
 8008670:	23ff      	movs	r3, #255	@ 0xff
 8008672:	e042      	b.n	80086fa <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8008674:	79fb      	ldrb	r3, [r7, #7]
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff feac 	bl	80083d4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	0e1b      	lsrs	r3, r3, #24
 8008680:	b2db      	uxtb	r3, r3
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff fea6 	bl	80083d4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	0c1b      	lsrs	r3, r3, #16
 800868c:	b2db      	uxtb	r3, r3
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff fea0 	bl	80083d4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	0a1b      	lsrs	r3, r3, #8
 8008698:	b2db      	uxtb	r3, r3
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff fe9a 	bl	80083d4 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7ff fe95 	bl	80083d4 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	2b40      	cmp	r3, #64	@ 0x40
 80086ae:	d102      	bne.n	80086b6 <SD_SendCmd+0x5c>
 80086b0:	2395      	movs	r3, #149	@ 0x95
 80086b2:	73fb      	strb	r3, [r7, #15]
 80086b4:	e007      	b.n	80086c6 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80086b6:	79fb      	ldrb	r3, [r7, #7]
 80086b8:	2b48      	cmp	r3, #72	@ 0x48
 80086ba:	d102      	bne.n	80086c2 <SD_SendCmd+0x68>
 80086bc:	2387      	movs	r3, #135	@ 0x87
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	e001      	b.n	80086c6 <SD_SendCmd+0x6c>
  else crc = 1;
 80086c2:	2301      	movs	r3, #1
 80086c4:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff fe83 	bl	80083d4 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80086ce:	79fb      	ldrb	r3, [r7, #7]
 80086d0:	2b4c      	cmp	r3, #76	@ 0x4c
 80086d2:	d101      	bne.n	80086d8 <SD_SendCmd+0x7e>
 80086d4:	f7ff feb2 	bl	800843c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80086d8:	230a      	movs	r3, #10
 80086da:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80086dc:	f7ff feae 	bl	800843c <SPI_RxByte>
 80086e0:	4603      	mov	r3, r0
 80086e2:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80086e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da05      	bge.n	80086f8 <SD_SendCmd+0x9e>
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	73bb      	strb	r3, [r7, #14]
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1f1      	bne.n	80086dc <SD_SendCmd+0x82>

  return res;
 80086f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8008704:	b590      	push	{r4, r7, lr}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <SD_disk_initialize+0x14>
 8008714:	2301      	movs	r3, #1
 8008716:	e0d1      	b.n	80088bc <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8008718:	4b6a      	ldr	r3, [pc, #424]	@ (80088c4 <SD_disk_initialize+0x1c0>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	b2db      	uxtb	r3, r3
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <SD_disk_initialize+0x2a>
 8008726:	4b67      	ldr	r3, [pc, #412]	@ (80088c4 <SD_disk_initialize+0x1c0>)
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	b2db      	uxtb	r3, r3
 800872c:	e0c6      	b.n	80088bc <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 800872e:	f7ff fec9 	bl	80084c4 <SD_PowerOn>

  /* slave select */
  SELECT();
 8008732:	f7ff fe2f 	bl	8008394 <SELECT>

  /* check disk type */
  type = 0;
 8008736:	2300      	movs	r3, #0
 8008738:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800873a:	2100      	movs	r1, #0
 800873c:	2040      	movs	r0, #64	@ 0x40
 800873e:	f7ff ff8c 	bl	800865a <SD_SendCmd>
 8008742:	4603      	mov	r3, r0
 8008744:	2b01      	cmp	r3, #1
 8008746:	f040 80a1 	bne.w	800888c <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800874a:	4b5f      	ldr	r3, [pc, #380]	@ (80088c8 <SD_disk_initialize+0x1c4>)
 800874c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008750:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8008752:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008756:	2048      	movs	r0, #72	@ 0x48
 8008758:	f7ff ff7f 	bl	800865a <SD_SendCmd>
 800875c:	4603      	mov	r3, r0
 800875e:	2b01      	cmp	r3, #1
 8008760:	d155      	bne.n	800880e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
 8008766:	e00c      	b.n	8008782 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8008768:	7bfc      	ldrb	r4, [r7, #15]
 800876a:	f7ff fe67 	bl	800843c <SPI_RxByte>
 800876e:	4603      	mov	r3, r0
 8008770:	461a      	mov	r2, r3
 8008772:	f104 0310 	add.w	r3, r4, #16
 8008776:	443b      	add	r3, r7
 8008778:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	3301      	adds	r3, #1
 8008780:	73fb      	strb	r3, [r7, #15]
 8008782:	7bfb      	ldrb	r3, [r7, #15]
 8008784:	2b03      	cmp	r3, #3
 8008786:	d9ef      	bls.n	8008768 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8008788:	7abb      	ldrb	r3, [r7, #10]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d17e      	bne.n	800888c <SD_disk_initialize+0x188>
 800878e:	7afb      	ldrb	r3, [r7, #11]
 8008790:	2baa      	cmp	r3, #170	@ 0xaa
 8008792:	d17b      	bne.n	800888c <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8008794:	2100      	movs	r1, #0
 8008796:	2077      	movs	r0, #119	@ 0x77
 8008798:	f7ff ff5f 	bl	800865a <SD_SendCmd>
 800879c:	4603      	mov	r3, r0
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d807      	bhi.n	80087b2 <SD_disk_initialize+0xae>
 80087a2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80087a6:	2069      	movs	r0, #105	@ 0x69
 80087a8:	f7ff ff57 	bl	800865a <SD_SendCmd>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d004      	beq.n	80087bc <SD_disk_initialize+0xb8>
        } while (Timer1);
 80087b2:	4b45      	ldr	r3, [pc, #276]	@ (80088c8 <SD_disk_initialize+0x1c4>)
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1ec      	bne.n	8008794 <SD_disk_initialize+0x90>
 80087ba:	e000      	b.n	80087be <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80087bc:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80087be:	4b42      	ldr	r3, [pc, #264]	@ (80088c8 <SD_disk_initialize+0x1c4>)
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d062      	beq.n	800888c <SD_disk_initialize+0x188>
 80087c6:	2100      	movs	r1, #0
 80087c8:	207a      	movs	r0, #122	@ 0x7a
 80087ca:	f7ff ff46 	bl	800865a <SD_SendCmd>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d15b      	bne.n	800888c <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80087d4:	2300      	movs	r3, #0
 80087d6:	73fb      	strb	r3, [r7, #15]
 80087d8:	e00c      	b.n	80087f4 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80087da:	7bfc      	ldrb	r4, [r7, #15]
 80087dc:	f7ff fe2e 	bl	800843c <SPI_RxByte>
 80087e0:	4603      	mov	r3, r0
 80087e2:	461a      	mov	r2, r3
 80087e4:	f104 0310 	add.w	r3, r4, #16
 80087e8:	443b      	add	r3, r7
 80087ea:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	3301      	adds	r3, #1
 80087f2:	73fb      	strb	r3, [r7, #15]
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d9ef      	bls.n	80087da <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80087fa:	7a3b      	ldrb	r3, [r7, #8]
 80087fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <SD_disk_initialize+0x104>
 8008804:	230c      	movs	r3, #12
 8008806:	e000      	b.n	800880a <SD_disk_initialize+0x106>
 8008808:	2304      	movs	r3, #4
 800880a:	73bb      	strb	r3, [r7, #14]
 800880c:	e03e      	b.n	800888c <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800880e:	2100      	movs	r1, #0
 8008810:	2077      	movs	r0, #119	@ 0x77
 8008812:	f7ff ff22 	bl	800865a <SD_SendCmd>
 8008816:	4603      	mov	r3, r0
 8008818:	2b01      	cmp	r3, #1
 800881a:	d808      	bhi.n	800882e <SD_disk_initialize+0x12a>
 800881c:	2100      	movs	r1, #0
 800881e:	2069      	movs	r0, #105	@ 0x69
 8008820:	f7ff ff1b 	bl	800865a <SD_SendCmd>
 8008824:	4603      	mov	r3, r0
 8008826:	2b01      	cmp	r3, #1
 8008828:	d801      	bhi.n	800882e <SD_disk_initialize+0x12a>
 800882a:	2302      	movs	r3, #2
 800882c:	e000      	b.n	8008830 <SD_disk_initialize+0x12c>
 800882e:	2301      	movs	r3, #1
 8008830:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8008832:	7bbb      	ldrb	r3, [r7, #14]
 8008834:	2b02      	cmp	r3, #2
 8008836:	d10e      	bne.n	8008856 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8008838:	2100      	movs	r1, #0
 800883a:	2077      	movs	r0, #119	@ 0x77
 800883c:	f7ff ff0d 	bl	800865a <SD_SendCmd>
 8008840:	4603      	mov	r3, r0
 8008842:	2b01      	cmp	r3, #1
 8008844:	d80e      	bhi.n	8008864 <SD_disk_initialize+0x160>
 8008846:	2100      	movs	r1, #0
 8008848:	2069      	movs	r0, #105	@ 0x69
 800884a:	f7ff ff06 	bl	800865a <SD_SendCmd>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d107      	bne.n	8008864 <SD_disk_initialize+0x160>
 8008854:	e00c      	b.n	8008870 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8008856:	2100      	movs	r1, #0
 8008858:	2041      	movs	r0, #65	@ 0x41
 800885a:	f7ff fefe 	bl	800865a <SD_SendCmd>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d004      	beq.n	800886e <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8008864:	4b18      	ldr	r3, [pc, #96]	@ (80088c8 <SD_disk_initialize+0x1c4>)
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e2      	bne.n	8008832 <SD_disk_initialize+0x12e>
 800886c:	e000      	b.n	8008870 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800886e:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8008870:	4b15      	ldr	r3, [pc, #84]	@ (80088c8 <SD_disk_initialize+0x1c4>)
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d007      	beq.n	8008888 <SD_disk_initialize+0x184>
 8008878:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800887c:	2050      	movs	r0, #80	@ 0x50
 800887e:	f7ff feec 	bl	800865a <SD_SendCmd>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <SD_disk_initialize+0x188>
 8008888:	2300      	movs	r3, #0
 800888a:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 800888c:	4a0f      	ldr	r2, [pc, #60]	@ (80088cc <SD_disk_initialize+0x1c8>)
 800888e:	7bbb      	ldrb	r3, [r7, #14]
 8008890:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8008892:	f7ff fd8f 	bl	80083b4 <DESELECT>
  SPI_RxByte();
 8008896:	f7ff fdd1 	bl	800843c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d008      	beq.n	80088b2 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80088a0:	4b08      	ldr	r3, [pc, #32]	@ (80088c4 <SD_disk_initialize+0x1c0>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	f023 0301 	bic.w	r3, r3, #1
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	4b05      	ldr	r3, [pc, #20]	@ (80088c4 <SD_disk_initialize+0x1c0>)
 80088ae:	701a      	strb	r2, [r3, #0]
 80088b0:	e001      	b.n	80088b6 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80088b2:	f7ff fe49 	bl	8008548 <SD_PowerOff>
  }

  return Stat;
 80088b6:	4b03      	ldr	r3, [pc, #12]	@ (80088c4 <SD_disk_initialize+0x1c0>)
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	b2db      	uxtb	r3, r3
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd90      	pop	{r4, r7, pc}
 80088c4:	20000065 	.word	0x20000065
 80088c8:	20005cf0 	.word	0x20005cf0
 80088cc:	20005cf4 	.word	0x20005cf4

080088d0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <SD_disk_status+0x14>
 80088e0:	2301      	movs	r3, #1
 80088e2:	e002      	b.n	80088ea <SD_disk_status+0x1a>
  return Stat;
 80088e4:	4b04      	ldr	r3, [pc, #16]	@ (80088f8 <SD_disk_status+0x28>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	b2db      	uxtb	r3, r3
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	20000065 	.word	0x20000065

080088fc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	607a      	str	r2, [r7, #4]
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d102      	bne.n	8008918 <SD_disk_read+0x1c>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <SD_disk_read+0x20>
 8008918:	2304      	movs	r3, #4
 800891a:	e051      	b.n	80089c0 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800891c:	4b2a      	ldr	r3, [pc, #168]	@ (80089c8 <SD_disk_read+0xcc>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	b2db      	uxtb	r3, r3
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <SD_disk_read+0x32>
 800892a:	2303      	movs	r3, #3
 800892c:	e048      	b.n	80089c0 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800892e:	4b27      	ldr	r3, [pc, #156]	@ (80089cc <SD_disk_read+0xd0>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <SD_disk_read+0x44>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	025b      	lsls	r3, r3, #9
 800893e:	607b      	str	r3, [r7, #4]

  SELECT();
 8008940:	f7ff fd28 	bl	8008394 <SELECT>

  if (count == 1)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d111      	bne.n	800896e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	2051      	movs	r0, #81	@ 0x51
 800894e:	f7ff fe84 	bl	800865a <SD_SendCmd>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d129      	bne.n	80089ac <SD_disk_read+0xb0>
 8008958:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800895c:	68b8      	ldr	r0, [r7, #8]
 800895e:	f7ff fe0b 	bl	8008578 <SD_RxDataBlock>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d021      	beq.n	80089ac <SD_disk_read+0xb0>
 8008968:	2300      	movs	r3, #0
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	e01e      	b.n	80089ac <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	2052      	movs	r0, #82	@ 0x52
 8008972:	f7ff fe72 	bl	800865a <SD_SendCmd>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d117      	bne.n	80089ac <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800897c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008980:	68b8      	ldr	r0, [r7, #8]
 8008982:	f7ff fdf9 	bl	8008578 <SD_RxDataBlock>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00a      	beq.n	80089a2 <SD_disk_read+0xa6>
        buff += 512;
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008992:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	3b01      	subs	r3, #1
 8008998:	603b      	str	r3, [r7, #0]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1ed      	bne.n	800897c <SD_disk_read+0x80>
 80089a0:	e000      	b.n	80089a4 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80089a2:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80089a4:	2100      	movs	r1, #0
 80089a6:	204c      	movs	r0, #76	@ 0x4c
 80089a8:	f7ff fe57 	bl	800865a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80089ac:	f7ff fd02 	bl	80083b4 <DESELECT>
  SPI_RxByte();
 80089b0:	f7ff fd44 	bl	800843c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	bf14      	ite	ne
 80089ba:	2301      	movne	r3, #1
 80089bc:	2300      	moveq	r3, #0
 80089be:	b2db      	uxtb	r3, r3
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	20000065 	.word	0x20000065
 80089cc:	20005cf4 	.word	0x20005cf4

080089d0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	607a      	str	r2, [r7, #4]
 80089da:	603b      	str	r3, [r7, #0]
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d102      	bne.n	80089ec <SD_disk_write+0x1c>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <SD_disk_write+0x20>
 80089ec:	2304      	movs	r3, #4
 80089ee:	e06b      	b.n	8008ac8 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80089f0:	4b37      	ldr	r3, [pc, #220]	@ (8008ad0 <SD_disk_write+0x100>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <SD_disk_write+0x32>
 80089fe:	2303      	movs	r3, #3
 8008a00:	e062      	b.n	8008ac8 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8008a02:	4b33      	ldr	r3, [pc, #204]	@ (8008ad0 <SD_disk_write+0x100>)
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <SD_disk_write+0x44>
 8008a10:	2302      	movs	r3, #2
 8008a12:	e059      	b.n	8008ac8 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8008a14:	4b2f      	ldr	r3, [pc, #188]	@ (8008ad4 <SD_disk_write+0x104>)
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <SD_disk_write+0x56>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	025b      	lsls	r3, r3, #9
 8008a24:	607b      	str	r3, [r7, #4]

  SELECT();
 8008a26:	f7ff fcb5 	bl	8008394 <SELECT>

  if (count == 1)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d110      	bne.n	8008a52 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	2058      	movs	r0, #88	@ 0x58
 8008a34:	f7ff fe11 	bl	800865a <SD_SendCmd>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d13a      	bne.n	8008ab4 <SD_disk_write+0xe4>
 8008a3e:	21fe      	movs	r1, #254	@ 0xfe
 8008a40:	68b8      	ldr	r0, [r7, #8]
 8008a42:	f7ff fdc7 	bl	80085d4 <SD_TxDataBlock>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d033      	beq.n	8008ab4 <SD_disk_write+0xe4>
      count = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	603b      	str	r3, [r7, #0]
 8008a50:	e030      	b.n	8008ab4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8008a52:	4b20      	ldr	r3, [pc, #128]	@ (8008ad4 <SD_disk_write+0x104>)
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d007      	beq.n	8008a6e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8008a5e:	2100      	movs	r1, #0
 8008a60:	2077      	movs	r0, #119	@ 0x77
 8008a62:	f7ff fdfa 	bl	800865a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	2057      	movs	r0, #87	@ 0x57
 8008a6a:	f7ff fdf6 	bl	800865a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	2059      	movs	r0, #89	@ 0x59
 8008a72:	f7ff fdf2 	bl	800865a <SD_SendCmd>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d11b      	bne.n	8008ab4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8008a7c:	21fc      	movs	r1, #252	@ 0xfc
 8008a7e:	68b8      	ldr	r0, [r7, #8]
 8008a80:	f7ff fda8 	bl	80085d4 <SD_TxDataBlock>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <SD_disk_write+0xd0>
        buff += 512;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008a90:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	3b01      	subs	r3, #1
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1ee      	bne.n	8008a7c <SD_disk_write+0xac>
 8008a9e:	e000      	b.n	8008aa2 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8008aa0:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8008aa2:	21fd      	movs	r1, #253	@ 0xfd
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	f7ff fd95 	bl	80085d4 <SD_TxDataBlock>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <SD_disk_write+0xe4>
      {
        count = 1;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8008ab4:	f7ff fc7e 	bl	80083b4 <DESELECT>
  SPI_RxByte();
 8008ab8:	f7ff fcc0 	bl	800843c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bf14      	ite	ne
 8008ac2:	2301      	movne	r3, #1
 8008ac4:	2300      	moveq	r3, #0
 8008ac6:	b2db      	uxtb	r3, r3
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	20000065 	.word	0x20000065
 8008ad4:	20005cf4 	.word	0x20005cf4

08008ad8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8008ad8:	b590      	push	{r4, r7, lr}
 8008ada:	b08b      	sub	sp, #44	@ 0x2c
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	603a      	str	r2, [r7, #0]
 8008ae2:	71fb      	strb	r3, [r7, #7]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8008aec:	79fb      	ldrb	r3, [r7, #7]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <SD_disk_ioctl+0x1e>
 8008af2:	2304      	movs	r3, #4
 8008af4:	e113      	b.n	8008d1e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8008afc:	79bb      	ldrb	r3, [r7, #6]
 8008afe:	2b05      	cmp	r3, #5
 8008b00:	d124      	bne.n	8008b4c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8008b02:	6a3b      	ldr	r3, [r7, #32]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d012      	beq.n	8008b30 <SD_disk_ioctl+0x58>
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	dc1a      	bgt.n	8008b44 <SD_disk_ioctl+0x6c>
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <SD_disk_ioctl+0x40>
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d006      	beq.n	8008b24 <SD_disk_ioctl+0x4c>
 8008b16:	e015      	b.n	8008b44 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8008b18:	f7ff fd16 	bl	8008548 <SD_PowerOff>
      res = RES_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008b22:	e0fa      	b.n	8008d1a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8008b24:	f7ff fcce 	bl	80084c4 <SD_PowerOn>
      res = RES_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008b2e:	e0f4      	b.n	8008d1a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	1c5c      	adds	r4, r3, #1
 8008b34:	f7ff fd14 	bl	8008560 <SD_CheckPower>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008b42:	e0ea      	b.n	8008d1a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8008b44:	2304      	movs	r3, #4
 8008b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008b4a:	e0e6      	b.n	8008d1a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008b4c:	4b76      	ldr	r3, [pc, #472]	@ (8008d28 <SD_disk_ioctl+0x250>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <SD_disk_ioctl+0x86>
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e0df      	b.n	8008d1e <SD_disk_ioctl+0x246>

    SELECT();
 8008b5e:	f7ff fc19 	bl	8008394 <SELECT>

    switch (ctrl)
 8008b62:	79bb      	ldrb	r3, [r7, #6]
 8008b64:	2b0d      	cmp	r3, #13
 8008b66:	f200 80c9 	bhi.w	8008cfc <SD_disk_ioctl+0x224>
 8008b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b70 <SD_disk_ioctl+0x98>)
 8008b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b70:	08008c67 	.word	0x08008c67
 8008b74:	08008ba9 	.word	0x08008ba9
 8008b78:	08008c57 	.word	0x08008c57
 8008b7c:	08008cfd 	.word	0x08008cfd
 8008b80:	08008cfd 	.word	0x08008cfd
 8008b84:	08008cfd 	.word	0x08008cfd
 8008b88:	08008cfd 	.word	0x08008cfd
 8008b8c:	08008cfd 	.word	0x08008cfd
 8008b90:	08008cfd 	.word	0x08008cfd
 8008b94:	08008cfd 	.word	0x08008cfd
 8008b98:	08008cfd 	.word	0x08008cfd
 8008b9c:	08008c79 	.word	0x08008c79
 8008ba0:	08008c9d 	.word	0x08008c9d
 8008ba4:	08008cc1 	.word	0x08008cc1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8008ba8:	2100      	movs	r1, #0
 8008baa:	2049      	movs	r0, #73	@ 0x49
 8008bac:	f7ff fd55 	bl	800865a <SD_SendCmd>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f040 80a6 	bne.w	8008d04 <SD_disk_ioctl+0x22c>
 8008bb8:	f107 030c 	add.w	r3, r7, #12
 8008bbc:	2110      	movs	r1, #16
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7ff fcda 	bl	8008578 <SD_RxDataBlock>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 809c 	beq.w	8008d04 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8008bcc:	7b3b      	ldrb	r3, [r7, #12]
 8008bce:	099b      	lsrs	r3, r3, #6
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d10d      	bne.n	8008bf2 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8008bd6:	7d7b      	ldrb	r3, [r7, #21]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	7d3b      	ldrb	r3, [r7, #20]
 8008bdc:	021b      	lsls	r3, r3, #8
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	4413      	add	r3, r2
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	3301      	adds	r3, #1
 8008be6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8008be8:	8bfb      	ldrh	r3, [r7, #30]
 8008bea:	029a      	lsls	r2, r3, #10
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	e02d      	b.n	8008c4e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008bf2:	7c7b      	ldrb	r3, [r7, #17]
 8008bf4:	f003 030f 	and.w	r3, r3, #15
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	7dbb      	ldrb	r3, [r7, #22]
 8008bfc:	09db      	lsrs	r3, r3, #7
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	4413      	add	r3, r2
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	7d7b      	ldrb	r3, [r7, #21]
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	f003 0306 	and.w	r3, r3, #6
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	4413      	add	r3, r2
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	3302      	adds	r3, #2
 8008c16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8008c1a:	7d3b      	ldrb	r3, [r7, #20]
 8008c1c:	099b      	lsrs	r3, r3, #6
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	461a      	mov	r2, r3
 8008c22:	7cfb      	ldrb	r3, [r7, #19]
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	4413      	add	r3, r2
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	7cbb      	ldrb	r3, [r7, #18]
 8008c2e:	029b      	lsls	r3, r3, #10
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	4413      	add	r3, r2
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8008c40:	8bfa      	ldrh	r2, [r7, #30]
 8008c42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c46:	3b09      	subs	r3, #9
 8008c48:	409a      	lsls	r2, r3
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8008c54:	e056      	b.n	8008d04 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c5c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008c64:	e055      	b.n	8008d12 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8008c66:	f7ff fc13 	bl	8008490 <SD_ReadyWait>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2bff      	cmp	r3, #255	@ 0xff
 8008c6e:	d14b      	bne.n	8008d08 <SD_disk_ioctl+0x230>
 8008c70:	2300      	movs	r3, #0
 8008c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008c76:	e047      	b.n	8008d08 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8008c78:	2100      	movs	r1, #0
 8008c7a:	2049      	movs	r0, #73	@ 0x49
 8008c7c:	f7ff fced 	bl	800865a <SD_SendCmd>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d142      	bne.n	8008d0c <SD_disk_ioctl+0x234>
 8008c86:	2110      	movs	r1, #16
 8008c88:	6a38      	ldr	r0, [r7, #32]
 8008c8a:	f7ff fc75 	bl	8008578 <SD_RxDataBlock>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d03b      	beq.n	8008d0c <SD_disk_ioctl+0x234>
 8008c94:	2300      	movs	r3, #0
 8008c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008c9a:	e037      	b.n	8008d0c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	204a      	movs	r0, #74	@ 0x4a
 8008ca0:	f7ff fcdb 	bl	800865a <SD_SendCmd>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d132      	bne.n	8008d10 <SD_disk_ioctl+0x238>
 8008caa:	2110      	movs	r1, #16
 8008cac:	6a38      	ldr	r0, [r7, #32]
 8008cae:	f7ff fc63 	bl	8008578 <SD_RxDataBlock>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d02b      	beq.n	8008d10 <SD_disk_ioctl+0x238>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008cbe:	e027      	b.n	8008d10 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	207a      	movs	r0, #122	@ 0x7a
 8008cc4:	f7ff fcc9 	bl	800865a <SD_SendCmd>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d116      	bne.n	8008cfc <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008cd4:	e00b      	b.n	8008cee <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8008cd6:	6a3c      	ldr	r4, [r7, #32]
 8008cd8:	1c63      	adds	r3, r4, #1
 8008cda:	623b      	str	r3, [r7, #32]
 8008cdc:	f7ff fbae 	bl	800843c <SPI_RxByte>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8008ce4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ce8:	3301      	adds	r3, #1
 8008cea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008cee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d9ef      	bls.n	8008cd6 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8008cfc:	2304      	movs	r3, #4
 8008cfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008d02:	e006      	b.n	8008d12 <SD_disk_ioctl+0x23a>
      break;
 8008d04:	bf00      	nop
 8008d06:	e004      	b.n	8008d12 <SD_disk_ioctl+0x23a>
      break;
 8008d08:	bf00      	nop
 8008d0a:	e002      	b.n	8008d12 <SD_disk_ioctl+0x23a>
      break;
 8008d0c:	bf00      	nop
 8008d0e:	e000      	b.n	8008d12 <SD_disk_ioctl+0x23a>
      break;
 8008d10:	bf00      	nop
    }

    DESELECT();
 8008d12:	f7ff fb4f 	bl	80083b4 <DESELECT>
    SPI_RxByte();
 8008d16:	f7ff fb91 	bl	800843c <SPI_RxByte>
  }

  return res;
 8008d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	372c      	adds	r7, #44	@ 0x2c
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd90      	pop	{r4, r7, pc}
 8008d26:	bf00      	nop
 8008d28:	20000065 	.word	0x20000065

08008d2c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff fce3 	bl	8008704 <SD_disk_initialize>
 8008d3e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8008d52:	79fb      	ldrb	r3, [r7, #7]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7ff fdbb 	bl	80088d0 <SD_disk_status>
 8008d5a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	607a      	str	r2, [r7, #4]
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	4603      	mov	r3, r0
 8008d72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8008d74:	7bf8      	ldrb	r0, [r7, #15]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	68b9      	ldr	r1, [r7, #8]
 8008d7c:	f7ff fdbe 	bl	80088fc <SD_disk_read>
 8008d80:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
 8008d94:	603b      	str	r3, [r7, #0]
 8008d96:	4603      	mov	r3, r0
 8008d98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8008d9a:	7bf8      	ldrb	r0, [r7, #15]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	68b9      	ldr	r1, [r7, #8]
 8008da2:	f7ff fe15 	bl	80089d0 <SD_disk_write>
 8008da6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	603a      	str	r2, [r7, #0]
 8008dba:	71fb      	strb	r3, [r7, #7]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8008dc0:	79b9      	ldrb	r1, [r7, #6]
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7ff fe86 	bl	8008ad8 <SD_disk_ioctl>
 8008dcc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	4a08      	ldr	r2, [pc, #32]	@ (8008e08 <disk_status+0x30>)
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	79fa      	ldrb	r2, [r7, #7]
 8008df0:	4905      	ldr	r1, [pc, #20]	@ (8008e08 <disk_status+0x30>)
 8008df2:	440a      	add	r2, r1
 8008df4:	7a12      	ldrb	r2, [r2, #8]
 8008df6:	4610      	mov	r0, r2
 8008df8:	4798      	blx	r3
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	20005f20 	.word	0x20005f20

08008e0c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4603      	mov	r3, r0
 8008e14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008e1a:	79fb      	ldrb	r3, [r7, #7]
 8008e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8008e54 <disk_initialize+0x48>)
 8008e1e:	5cd3      	ldrb	r3, [r2, r3]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d111      	bne.n	8008e48 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008e24:	79fb      	ldrb	r3, [r7, #7]
 8008e26:	4a0b      	ldr	r2, [pc, #44]	@ (8008e54 <disk_initialize+0x48>)
 8008e28:	2101      	movs	r1, #1
 8008e2a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	4a09      	ldr	r2, [pc, #36]	@ (8008e54 <disk_initialize+0x48>)
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4413      	add	r3, r2
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	79fa      	ldrb	r2, [r7, #7]
 8008e3a:	4906      	ldr	r1, [pc, #24]	@ (8008e54 <disk_initialize+0x48>)
 8008e3c:	440a      	add	r2, r1
 8008e3e:	7a12      	ldrb	r2, [r2, #8]
 8008e40:	4610      	mov	r0, r2
 8008e42:	4798      	blx	r3
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	20005f20 	.word	0x20005f20

08008e58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008e58:	b590      	push	{r4, r7, lr}
 8008e5a:	b087      	sub	sp, #28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60b9      	str	r1, [r7, #8]
 8008e60:	607a      	str	r2, [r7, #4]
 8008e62:	603b      	str	r3, [r7, #0]
 8008e64:	4603      	mov	r3, r0
 8008e66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8008e94 <disk_read+0x3c>)
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	689c      	ldr	r4, [r3, #8]
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
 8008e76:	4a07      	ldr	r2, [pc, #28]	@ (8008e94 <disk_read+0x3c>)
 8008e78:	4413      	add	r3, r2
 8008e7a:	7a18      	ldrb	r0, [r3, #8]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	68b9      	ldr	r1, [r7, #8]
 8008e82:	47a0      	blx	r4
 8008e84:	4603      	mov	r3, r0
 8008e86:	75fb      	strb	r3, [r7, #23]
  return res;
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	371c      	adds	r7, #28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd90      	pop	{r4, r7, pc}
 8008e92:	bf00      	nop
 8008e94:	20005f20 	.word	0x20005f20

08008e98 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008e98:	b590      	push	{r4, r7, lr}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60b9      	str	r1, [r7, #8]
 8008ea0:	607a      	str	r2, [r7, #4]
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
 8008eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8008ed4 <disk_write+0x3c>)
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	68dc      	ldr	r4, [r3, #12]
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	4a07      	ldr	r2, [pc, #28]	@ (8008ed4 <disk_write+0x3c>)
 8008eb8:	4413      	add	r3, r2
 8008eba:	7a18      	ldrb	r0, [r3, #8]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	68b9      	ldr	r1, [r7, #8]
 8008ec2:	47a0      	blx	r4
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	371c      	adds	r7, #28
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd90      	pop	{r4, r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20005f20 	.word	0x20005f20

08008ed8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	603a      	str	r2, [r7, #0]
 8008ee2:	71fb      	strb	r3, [r7, #7]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008ee8:	79fb      	ldrb	r3, [r7, #7]
 8008eea:	4a09      	ldr	r2, [pc, #36]	@ (8008f10 <disk_ioctl+0x38>)
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	79fa      	ldrb	r2, [r7, #7]
 8008ef6:	4906      	ldr	r1, [pc, #24]	@ (8008f10 <disk_ioctl+0x38>)
 8008ef8:	440a      	add	r2, r1
 8008efa:	7a10      	ldrb	r0, [r2, #8]
 8008efc:	79b9      	ldrb	r1, [r7, #6]
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	4798      	blx	r3
 8008f02:	4603      	mov	r3, r0
 8008f04:	73fb      	strb	r3, [r7, #15]
  return res;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	20005f20 	.word	0x20005f20

08008f14 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008f24:	89fb      	ldrh	r3, [r7, #14]
 8008f26:	021b      	lsls	r3, r3, #8
 8008f28:	b21a      	sxth	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	b21b      	sxth	r3, r3
 8008f30:	4313      	orrs	r3, r2
 8008f32:	b21b      	sxth	r3, r3
 8008f34:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008f36:	89fb      	ldrh	r3, [r7, #14]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3303      	adds	r3, #3
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	021b      	lsls	r3, r3, #8
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	3202      	adds	r2, #2
 8008f5c:	7812      	ldrb	r2, [r2, #0]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	021b      	lsls	r3, r3, #8
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	3201      	adds	r2, #1
 8008f6a:	7812      	ldrb	r2, [r2, #0]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	021b      	lsls	r3, r3, #8
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	7812      	ldrb	r2, [r2, #0]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]
	return rv;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b083      	sub	sp, #12
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	607a      	str	r2, [r7, #4]
 8008f9c:	887a      	ldrh	r2, [r7, #2]
 8008f9e:	b2d2      	uxtb	r2, r2
 8008fa0:	701a      	strb	r2, [r3, #0]
 8008fa2:	887b      	ldrh	r3, [r7, #2]
 8008fa4:	0a1b      	lsrs	r3, r3, #8
 8008fa6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	607a      	str	r2, [r7, #4]
 8008fae:	887a      	ldrh	r2, [r7, #2]
 8008fb0:	b2d2      	uxtb	r2, r2
 8008fb2:	701a      	strb	r2, [r3, #0]
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	b2d2      	uxtb	r2, r2
 8008fd4:	701a      	strb	r2, [r3, #0]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	0a1b      	lsrs	r3, r3, #8
 8008fda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	607a      	str	r2, [r7, #4]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	b2d2      	uxtb	r2, r2
 8008fe6:	701a      	strb	r2, [r3, #0]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	0a1b      	lsrs	r3, r3, #8
 8008fec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	b2d2      	uxtb	r2, r2
 8008ff8:	701a      	strb	r2, [r3, #0]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	0a1b      	lsrs	r3, r3, #8
 8008ffe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	607a      	str	r2, [r7, #4]
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	b2d2      	uxtb	r2, r2
 800900a:	701a      	strb	r2, [r3, #0]
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009018:	b480      	push	{r7}
 800901a:	b087      	sub	sp, #28
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00d      	beq.n	800904e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	1c53      	adds	r3, r2, #1
 8009036:	613b      	str	r3, [r7, #16]
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	1c59      	adds	r1, r3, #1
 800903c:	6179      	str	r1, [r7, #20]
 800903e:	7812      	ldrb	r2, [r2, #0]
 8009040:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	3b01      	subs	r3, #1
 8009046:	607b      	str	r3, [r7, #4]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1f1      	bne.n	8009032 <mem_cpy+0x1a>
	}
}
 800904e:	bf00      	nop
 8009050:	371c      	adds	r7, #28
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800905a:	b480      	push	{r7}
 800905c:	b087      	sub	sp, #28
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	1c5a      	adds	r2, r3, #1
 800906e:	617a      	str	r2, [r7, #20]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	b2d2      	uxtb	r2, r2
 8009074:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3b01      	subs	r3, #1
 800907a:	607b      	str	r3, [r7, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1f3      	bne.n	800906a <mem_set+0x10>
}
 8009082:	bf00      	nop
 8009084:	bf00      	nop
 8009086:	371c      	adds	r7, #28
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009090:	b480      	push	{r7}
 8009092:	b089      	sub	sp, #36	@ 0x24
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	61fb      	str	r3, [r7, #28]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	61fa      	str	r2, [r7, #28]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	4619      	mov	r1, r3
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	1c5a      	adds	r2, r3, #1
 80090b6:	61ba      	str	r2, [r7, #24]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	1acb      	subs	r3, r1, r3
 80090bc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	607b      	str	r3, [r7, #4]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <mem_cmp+0x40>
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d0eb      	beq.n	80090a8 <mem_cmp+0x18>

	return r;
 80090d0:	697b      	ldr	r3, [r7, #20]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3724      	adds	r7, #36	@ 0x24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80090de:	b480      	push	{r7}
 80090e0:	b083      	sub	sp, #12
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80090e8:	e002      	b.n	80090f0 <chk_chr+0x12>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	3301      	adds	r3, #1
 80090ee:	607b      	str	r3, [r7, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d005      	beq.n	8009104 <chk_chr+0x26>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	4293      	cmp	r3, r2
 8009102:	d1f2      	bne.n	80090ea <chk_chr+0xc>
	return *str;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	781b      	ldrb	r3, [r3, #0]
}
 8009108:	4618      	mov	r0, r3
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800911e:	2300      	movs	r3, #0
 8009120:	60bb      	str	r3, [r7, #8]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	e029      	b.n	800917c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009128:	4a27      	ldr	r2, [pc, #156]	@ (80091c8 <chk_lock+0xb4>)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	011b      	lsls	r3, r3, #4
 800912e:	4413      	add	r3, r2
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d01d      	beq.n	8009172 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009136:	4a24      	ldr	r2, [pc, #144]	@ (80091c8 <chk_lock+0xb4>)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	011b      	lsls	r3, r3, #4
 800913c:	4413      	add	r3, r2
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	429a      	cmp	r2, r3
 8009146:	d116      	bne.n	8009176 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009148:	4a1f      	ldr	r2, [pc, #124]	@ (80091c8 <chk_lock+0xb4>)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	011b      	lsls	r3, r3, #4
 800914e:	4413      	add	r3, r2
 8009150:	3304      	adds	r3, #4
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009158:	429a      	cmp	r2, r3
 800915a:	d10c      	bne.n	8009176 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800915c:	4a1a      	ldr	r2, [pc, #104]	@ (80091c8 <chk_lock+0xb4>)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	011b      	lsls	r3, r3, #4
 8009162:	4413      	add	r3, r2
 8009164:	3308      	adds	r3, #8
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800916c:	429a      	cmp	r2, r3
 800916e:	d102      	bne.n	8009176 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009170:	e007      	b.n	8009182 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009172:	2301      	movs	r3, #1
 8009174:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	3301      	adds	r3, #1
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d9d2      	bls.n	8009128 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2b02      	cmp	r3, #2
 8009186:	d109      	bne.n	800919c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d102      	bne.n	8009194 <chk_lock+0x80>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b02      	cmp	r3, #2
 8009192:	d101      	bne.n	8009198 <chk_lock+0x84>
 8009194:	2300      	movs	r3, #0
 8009196:	e010      	b.n	80091ba <chk_lock+0xa6>
 8009198:	2312      	movs	r3, #18
 800919a:	e00e      	b.n	80091ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d108      	bne.n	80091b4 <chk_lock+0xa0>
 80091a2:	4a09      	ldr	r2, [pc, #36]	@ (80091c8 <chk_lock+0xb4>)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	011b      	lsls	r3, r3, #4
 80091a8:	4413      	add	r3, r2
 80091aa:	330c      	adds	r3, #12
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091b2:	d101      	bne.n	80091b8 <chk_lock+0xa4>
 80091b4:	2310      	movs	r3, #16
 80091b6:	e000      	b.n	80091ba <chk_lock+0xa6>
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	20005d00 	.word	0x20005d00

080091cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80091d2:	2300      	movs	r3, #0
 80091d4:	607b      	str	r3, [r7, #4]
 80091d6:	e002      	b.n	80091de <enq_lock+0x12>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3301      	adds	r3, #1
 80091dc:	607b      	str	r3, [r7, #4]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d806      	bhi.n	80091f2 <enq_lock+0x26>
 80091e4:	4a09      	ldr	r2, [pc, #36]	@ (800920c <enq_lock+0x40>)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	4413      	add	r3, r2
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f2      	bne.n	80091d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	bf14      	ite	ne
 80091f8:	2301      	movne	r3, #1
 80091fa:	2300      	moveq	r3, #0
 80091fc:	b2db      	uxtb	r3, r3
}
 80091fe:	4618      	mov	r0, r3
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	20005d00 	.word	0x20005d00

08009210 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800921a:	2300      	movs	r3, #0
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	e01f      	b.n	8009260 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009220:	4a41      	ldr	r2, [pc, #260]	@ (8009328 <inc_lock+0x118>)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	011b      	lsls	r3, r3, #4
 8009226:	4413      	add	r3, r2
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	429a      	cmp	r2, r3
 8009230:	d113      	bne.n	800925a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009232:	4a3d      	ldr	r2, [pc, #244]	@ (8009328 <inc_lock+0x118>)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	011b      	lsls	r3, r3, #4
 8009238:	4413      	add	r3, r2
 800923a:	3304      	adds	r3, #4
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009242:	429a      	cmp	r2, r3
 8009244:	d109      	bne.n	800925a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009246:	4a38      	ldr	r2, [pc, #224]	@ (8009328 <inc_lock+0x118>)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	011b      	lsls	r3, r3, #4
 800924c:	4413      	add	r3, r2
 800924e:	3308      	adds	r3, #8
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009256:	429a      	cmp	r2, r3
 8009258:	d006      	beq.n	8009268 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	3301      	adds	r3, #1
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d9dc      	bls.n	8009220 <inc_lock+0x10>
 8009266:	e000      	b.n	800926a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009268:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b02      	cmp	r3, #2
 800926e:	d132      	bne.n	80092d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009270:	2300      	movs	r3, #0
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	e002      	b.n	800927c <inc_lock+0x6c>
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	3301      	adds	r3, #1
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d806      	bhi.n	8009290 <inc_lock+0x80>
 8009282:	4a29      	ldr	r2, [pc, #164]	@ (8009328 <inc_lock+0x118>)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	011b      	lsls	r3, r3, #4
 8009288:	4413      	add	r3, r2
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1f2      	bne.n	8009276 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b02      	cmp	r3, #2
 8009294:	d101      	bne.n	800929a <inc_lock+0x8a>
 8009296:	2300      	movs	r3, #0
 8009298:	e040      	b.n	800931c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	4922      	ldr	r1, [pc, #136]	@ (8009328 <inc_lock+0x118>)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	440b      	add	r3, r1
 80092a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689a      	ldr	r2, [r3, #8]
 80092ac:	491e      	ldr	r1, [pc, #120]	@ (8009328 <inc_lock+0x118>)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	440b      	add	r3, r1
 80092b4:	3304      	adds	r3, #4
 80092b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	695a      	ldr	r2, [r3, #20]
 80092bc:	491a      	ldr	r1, [pc, #104]	@ (8009328 <inc_lock+0x118>)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	011b      	lsls	r3, r3, #4
 80092c2:	440b      	add	r3, r1
 80092c4:	3308      	adds	r3, #8
 80092c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80092c8:	4a17      	ldr	r2, [pc, #92]	@ (8009328 <inc_lock+0x118>)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	011b      	lsls	r3, r3, #4
 80092ce:	4413      	add	r3, r2
 80092d0:	330c      	adds	r3, #12
 80092d2:	2200      	movs	r2, #0
 80092d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d009      	beq.n	80092f0 <inc_lock+0xe0>
 80092dc:	4a12      	ldr	r2, [pc, #72]	@ (8009328 <inc_lock+0x118>)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	011b      	lsls	r3, r3, #4
 80092e2:	4413      	add	r3, r2
 80092e4:	330c      	adds	r3, #12
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <inc_lock+0xe0>
 80092ec:	2300      	movs	r3, #0
 80092ee:	e015      	b.n	800931c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d108      	bne.n	8009308 <inc_lock+0xf8>
 80092f6:	4a0c      	ldr	r2, [pc, #48]	@ (8009328 <inc_lock+0x118>)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	011b      	lsls	r3, r3, #4
 80092fc:	4413      	add	r3, r2
 80092fe:	330c      	adds	r3, #12
 8009300:	881b      	ldrh	r3, [r3, #0]
 8009302:	3301      	adds	r3, #1
 8009304:	b29a      	uxth	r2, r3
 8009306:	e001      	b.n	800930c <inc_lock+0xfc>
 8009308:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800930c:	4906      	ldr	r1, [pc, #24]	@ (8009328 <inc_lock+0x118>)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	011b      	lsls	r3, r3, #4
 8009312:	440b      	add	r3, r1
 8009314:	330c      	adds	r3, #12
 8009316:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	3301      	adds	r3, #1
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	20005d00 	.word	0x20005d00

0800932c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3b01      	subs	r3, #1
 8009338:	607b      	str	r3, [r7, #4]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d825      	bhi.n	800938c <dec_lock+0x60>
		n = Files[i].ctr;
 8009340:	4a17      	ldr	r2, [pc, #92]	@ (80093a0 <dec_lock+0x74>)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	011b      	lsls	r3, r3, #4
 8009346:	4413      	add	r3, r2
 8009348:	330c      	adds	r3, #12
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800934e:	89fb      	ldrh	r3, [r7, #14]
 8009350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009354:	d101      	bne.n	800935a <dec_lock+0x2e>
 8009356:	2300      	movs	r3, #0
 8009358:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800935a:	89fb      	ldrh	r3, [r7, #14]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <dec_lock+0x3a>
 8009360:	89fb      	ldrh	r3, [r7, #14]
 8009362:	3b01      	subs	r3, #1
 8009364:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009366:	4a0e      	ldr	r2, [pc, #56]	@ (80093a0 <dec_lock+0x74>)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	011b      	lsls	r3, r3, #4
 800936c:	4413      	add	r3, r2
 800936e:	330c      	adds	r3, #12
 8009370:	89fa      	ldrh	r2, [r7, #14]
 8009372:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009374:	89fb      	ldrh	r3, [r7, #14]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d105      	bne.n	8009386 <dec_lock+0x5a>
 800937a:	4a09      	ldr	r2, [pc, #36]	@ (80093a0 <dec_lock+0x74>)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	011b      	lsls	r3, r3, #4
 8009380:	4413      	add	r3, r2
 8009382:	2200      	movs	r2, #0
 8009384:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	737b      	strb	r3, [r7, #13]
 800938a:	e001      	b.n	8009390 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800938c:	2302      	movs	r3, #2
 800938e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009390:	7b7b      	ldrb	r3, [r7, #13]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	20005d00 	.word	0x20005d00

080093a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80093ac:	2300      	movs	r3, #0
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	e010      	b.n	80093d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80093b2:	4a0d      	ldr	r2, [pc, #52]	@ (80093e8 <clear_lock+0x44>)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	011b      	lsls	r3, r3, #4
 80093b8:	4413      	add	r3, r2
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d105      	bne.n	80093ce <clear_lock+0x2a>
 80093c2:	4a09      	ldr	r2, [pc, #36]	@ (80093e8 <clear_lock+0x44>)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	011b      	lsls	r3, r3, #4
 80093c8:	4413      	add	r3, r2
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	3301      	adds	r3, #1
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d9eb      	bls.n	80093b2 <clear_lock+0xe>
	}
}
 80093da:	bf00      	nop
 80093dc:	bf00      	nop
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	20005d00 	.word	0x20005d00

080093ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	78db      	ldrb	r3, [r3, #3]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d034      	beq.n	800946a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009404:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	7858      	ldrb	r0, [r3, #1]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009410:	2301      	movs	r3, #1
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	f7ff fd40 	bl	8008e98 <disk_write>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <sync_window+0x38>
			res = FR_DISK_ERR;
 800941e:	2301      	movs	r3, #1
 8009420:	73fb      	strb	r3, [r7, #15]
 8009422:	e022      	b.n	800946a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	1ad2      	subs	r2, r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	429a      	cmp	r2, r3
 8009438:	d217      	bcs.n	800946a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	789b      	ldrb	r3, [r3, #2]
 800943e:	613b      	str	r3, [r7, #16]
 8009440:	e010      	b.n	8009464 <sync_window+0x78>
					wsect += fs->fsize;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	4413      	add	r3, r2
 800944a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	7858      	ldrb	r0, [r3, #1]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009456:	2301      	movs	r3, #1
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	f7ff fd1d 	bl	8008e98 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	3b01      	subs	r3, #1
 8009462:	613b      	str	r3, [r7, #16]
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d8eb      	bhi.n	8009442 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800946a:	7bfb      	ldrb	r3, [r7, #15]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d01b      	beq.n	80094c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7ff ffad 	bl	80093ec <sync_window>
 8009492:	4603      	mov	r3, r0
 8009494:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009496:	7bfb      	ldrb	r3, [r7, #15]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d113      	bne.n	80094c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	7858      	ldrb	r0, [r3, #1]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80094a6:	2301      	movs	r3, #1
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	f7ff fcd5 	bl	8008e58 <disk_read>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d004      	beq.n	80094be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80094b4:	f04f 33ff 	mov.w	r3, #4294967295
 80094b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff ff87 	bl	80093ec <sync_window>
 80094de:	4603      	mov	r3, r0
 80094e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d159      	bne.n	800959c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b03      	cmp	r3, #3
 80094ee:	d149      	bne.n	8009584 <sync_fs+0xb4>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	791b      	ldrb	r3, [r3, #4]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d145      	bne.n	8009584 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	899b      	ldrh	r3, [r3, #12]
 8009502:	461a      	mov	r2, r3
 8009504:	2100      	movs	r1, #0
 8009506:	f7ff fda8 	bl	800905a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	3338      	adds	r3, #56	@ 0x38
 800950e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009512:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff fd37 	bl	8008f8a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3338      	adds	r3, #56	@ 0x38
 8009520:	4921      	ldr	r1, [pc, #132]	@ (80095a8 <sync_fs+0xd8>)
 8009522:	4618      	mov	r0, r3
 8009524:	f7ff fd4c 	bl	8008fc0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3338      	adds	r3, #56	@ 0x38
 800952c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009530:	491e      	ldr	r1, [pc, #120]	@ (80095ac <sync_fs+0xdc>)
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff fd44 	bl	8008fc0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	3338      	adds	r3, #56	@ 0x38
 800953c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	4619      	mov	r1, r3
 8009546:	4610      	mov	r0, r2
 8009548:	f7ff fd3a 	bl	8008fc0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3338      	adds	r3, #56	@ 0x38
 8009550:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	4619      	mov	r1, r3
 800955a:	4610      	mov	r0, r2
 800955c:	f7ff fd30 	bl	8008fc0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	7858      	ldrb	r0, [r3, #1]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009578:	2301      	movs	r3, #1
 800957a:	f7ff fc8d 	bl	8008e98 <disk_write>
			fs->fsi_flag = 0;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	785b      	ldrb	r3, [r3, #1]
 8009588:	2200      	movs	r2, #0
 800958a:	2100      	movs	r1, #0
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff fca3 	bl	8008ed8 <disk_ioctl>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <sync_fs+0xcc>
 8009598:	2301      	movs	r3, #1
 800959a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800959c:	7bfb      	ldrb	r3, [r7, #15]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	41615252 	.word	0x41615252
 80095ac:	61417272 	.word	0x61417272

080095b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	3b02      	subs	r3, #2
 80095be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	3b02      	subs	r3, #2
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d301      	bcc.n	80095d0 <clust2sect+0x20>
 80095cc:	2300      	movs	r3, #0
 80095ce:	e008      	b.n	80095e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	895b      	ldrh	r3, [r3, #10]
 80095d4:	461a      	mov	r2, r3
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	fb03 f202 	mul.w	r2, r3, r2
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e0:	4413      	add	r3, r2
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b086      	sub	sp, #24
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d904      	bls.n	800960e <get_fat+0x20>
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	69db      	ldr	r3, [r3, #28]
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d302      	bcc.n	8009614 <get_fat+0x26>
		val = 1;	/* Internal error */
 800960e:	2301      	movs	r3, #1
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	e0ba      	b.n	800978a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009614:	f04f 33ff 	mov.w	r3, #4294967295
 8009618:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	2b03      	cmp	r3, #3
 8009620:	f000 8082 	beq.w	8009728 <get_fat+0x13a>
 8009624:	2b03      	cmp	r3, #3
 8009626:	f300 80a6 	bgt.w	8009776 <get_fat+0x188>
 800962a:	2b01      	cmp	r3, #1
 800962c:	d002      	beq.n	8009634 <get_fat+0x46>
 800962e:	2b02      	cmp	r3, #2
 8009630:	d055      	beq.n	80096de <get_fat+0xf0>
 8009632:	e0a0      	b.n	8009776 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	085b      	lsrs	r3, r3, #1
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	4413      	add	r3, r2
 8009640:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	899b      	ldrh	r3, [r3, #12]
 800964a:	4619      	mov	r1, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009652:	4413      	add	r3, r2
 8009654:	4619      	mov	r1, r3
 8009656:	6938      	ldr	r0, [r7, #16]
 8009658:	f7ff ff0c 	bl	8009474 <move_window>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	f040 808c 	bne.w	800977c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	1c5a      	adds	r2, r3, #1
 8009668:	60fa      	str	r2, [r7, #12]
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	8992      	ldrh	r2, [r2, #12]
 800966e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009672:	fb01 f202 	mul.w	r2, r1, r2
 8009676:	1a9b      	subs	r3, r3, r2
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	4413      	add	r3, r2
 800967c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009680:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	899b      	ldrh	r3, [r3, #12]
 800968a:	4619      	mov	r1, r3
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009692:	4413      	add	r3, r2
 8009694:	4619      	mov	r1, r3
 8009696:	6938      	ldr	r0, [r7, #16]
 8009698:	f7ff feec 	bl	8009474 <move_window>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d16e      	bne.n	8009780 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	899b      	ldrh	r3, [r3, #12]
 80096a6:	461a      	mov	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80096ae:	fb01 f202 	mul.w	r2, r1, r2
 80096b2:	1a9b      	subs	r3, r3, r2
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	4413      	add	r3, r2
 80096b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80096bc:	021b      	lsls	r3, r3, #8
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	f003 0301 	and.w	r3, r3, #1
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <get_fat+0xe6>
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	091b      	lsrs	r3, r3, #4
 80096d2:	e002      	b.n	80096da <get_fat+0xec>
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096da:	617b      	str	r3, [r7, #20]
			break;
 80096dc:	e055      	b.n	800978a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	899b      	ldrh	r3, [r3, #12]
 80096e6:	085b      	lsrs	r3, r3, #1
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	4619      	mov	r1, r3
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80096f2:	4413      	add	r3, r2
 80096f4:	4619      	mov	r1, r3
 80096f6:	6938      	ldr	r0, [r7, #16]
 80096f8:	f7ff febc 	bl	8009474 <move_window>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d140      	bne.n	8009784 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	005b      	lsls	r3, r3, #1
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	8992      	ldrh	r2, [r2, #12]
 8009710:	fbb3 f0f2 	udiv	r0, r3, r2
 8009714:	fb00 f202 	mul.w	r2, r0, r2
 8009718:	1a9b      	subs	r3, r3, r2
 800971a:	440b      	add	r3, r1
 800971c:	4618      	mov	r0, r3
 800971e:	f7ff fbf9 	bl	8008f14 <ld_word>
 8009722:	4603      	mov	r3, r0
 8009724:	617b      	str	r3, [r7, #20]
			break;
 8009726:	e030      	b.n	800978a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	899b      	ldrh	r3, [r3, #12]
 8009730:	089b      	lsrs	r3, r3, #2
 8009732:	b29b      	uxth	r3, r3
 8009734:	4619      	mov	r1, r3
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	fbb3 f3f1 	udiv	r3, r3, r1
 800973c:	4413      	add	r3, r2
 800973e:	4619      	mov	r1, r3
 8009740:	6938      	ldr	r0, [r7, #16]
 8009742:	f7ff fe97 	bl	8009474 <move_window>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d11d      	bne.n	8009788 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	8992      	ldrh	r2, [r2, #12]
 800975a:	fbb3 f0f2 	udiv	r0, r3, r2
 800975e:	fb00 f202 	mul.w	r2, r0, r2
 8009762:	1a9b      	subs	r3, r3, r2
 8009764:	440b      	add	r3, r1
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff fbec 	bl	8008f44 <ld_dword>
 800976c:	4603      	mov	r3, r0
 800976e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009772:	617b      	str	r3, [r7, #20]
			break;
 8009774:	e009      	b.n	800978a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009776:	2301      	movs	r3, #1
 8009778:	617b      	str	r3, [r7, #20]
 800977a:	e006      	b.n	800978a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800977c:	bf00      	nop
 800977e:	e004      	b.n	800978a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009780:	bf00      	nop
 8009782:	e002      	b.n	800978a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009784:	bf00      	nop
 8009786:	e000      	b.n	800978a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009788:	bf00      	nop
		}
	}

	return val;
 800978a:	697b      	ldr	r3, [r7, #20]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009794:	b590      	push	{r4, r7, lr}
 8009796:	b089      	sub	sp, #36	@ 0x24
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80097a0:	2302      	movs	r3, #2
 80097a2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	f240 8109 	bls.w	80099be <put_fat+0x22a>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	f080 8103 	bcs.w	80099be <put_fat+0x22a>
		switch (fs->fs_type) {
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b03      	cmp	r3, #3
 80097be:	f000 80b6 	beq.w	800992e <put_fat+0x19a>
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	f300 80fb 	bgt.w	80099be <put_fat+0x22a>
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d003      	beq.n	80097d4 <put_fat+0x40>
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	f000 8083 	beq.w	80098d8 <put_fat+0x144>
 80097d2:	e0f4      	b.n	80099be <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	61bb      	str	r3, [r7, #24]
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	085b      	lsrs	r3, r3, #1
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	4413      	add	r3, r2
 80097e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	899b      	ldrh	r3, [r3, #12]
 80097ea:	4619      	mov	r1, r3
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80097f2:	4413      	add	r3, r2
 80097f4:	4619      	mov	r1, r3
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f7ff fe3c 	bl	8009474 <move_window>
 80097fc:	4603      	mov	r3, r0
 80097fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009800:	7ffb      	ldrb	r3, [r7, #31]
 8009802:	2b00      	cmp	r3, #0
 8009804:	f040 80d4 	bne.w	80099b0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	1c5a      	adds	r2, r3, #1
 8009812:	61ba      	str	r2, [r7, #24]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	8992      	ldrh	r2, [r2, #12]
 8009818:	fbb3 f0f2 	udiv	r0, r3, r2
 800981c:	fb00 f202 	mul.w	r2, r0, r2
 8009820:	1a9b      	subs	r3, r3, r2
 8009822:	440b      	add	r3, r1
 8009824:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00d      	beq.n	800984c <put_fat+0xb8>
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	b25b      	sxtb	r3, r3
 8009836:	f003 030f 	and.w	r3, r3, #15
 800983a:	b25a      	sxtb	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	b2db      	uxtb	r3, r3
 8009840:	011b      	lsls	r3, r3, #4
 8009842:	b25b      	sxtb	r3, r3
 8009844:	4313      	orrs	r3, r2
 8009846:	b25b      	sxtb	r3, r3
 8009848:	b2db      	uxtb	r3, r3
 800984a:	e001      	b.n	8009850 <put_fat+0xbc>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	b2db      	uxtb	r3, r3
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2201      	movs	r2, #1
 8009858:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	899b      	ldrh	r3, [r3, #12]
 8009862:	4619      	mov	r1, r3
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	fbb3 f3f1 	udiv	r3, r3, r1
 800986a:	4413      	add	r3, r2
 800986c:	4619      	mov	r1, r3
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7ff fe00 	bl	8009474 <move_window>
 8009874:	4603      	mov	r3, r0
 8009876:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009878:	7ffb      	ldrb	r3, [r7, #31]
 800987a:	2b00      	cmp	r3, #0
 800987c:	f040 809a 	bne.w	80099b4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	899b      	ldrh	r3, [r3, #12]
 800988a:	461a      	mov	r2, r3
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009892:	fb00 f202 	mul.w	r2, r0, r2
 8009896:	1a9b      	subs	r3, r3, r2
 8009898:	440b      	add	r3, r1
 800989a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <put_fat+0x11a>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	091b      	lsrs	r3, r3, #4
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	e00e      	b.n	80098cc <put_fat+0x138>
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	b25b      	sxtb	r3, r3
 80098b4:	f023 030f 	bic.w	r3, r3, #15
 80098b8:	b25a      	sxtb	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	0a1b      	lsrs	r3, r3, #8
 80098be:	b25b      	sxtb	r3, r3
 80098c0:	f003 030f 	and.w	r3, r3, #15
 80098c4:	b25b      	sxtb	r3, r3
 80098c6:	4313      	orrs	r3, r2
 80098c8:	b25b      	sxtb	r3, r3
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2201      	movs	r2, #1
 80098d4:	70da      	strb	r2, [r3, #3]
			break;
 80098d6:	e072      	b.n	80099be <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	899b      	ldrh	r3, [r3, #12]
 80098e0:	085b      	lsrs	r3, r3, #1
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	4619      	mov	r1, r3
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80098ec:	4413      	add	r3, r2
 80098ee:	4619      	mov	r1, r3
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f7ff fdbf 	bl	8009474 <move_window>
 80098f6:	4603      	mov	r3, r0
 80098f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098fa:	7ffb      	ldrb	r3, [r7, #31]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d15b      	bne.n	80099b8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	8992      	ldrh	r2, [r2, #12]
 800990e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009912:	fb00 f202 	mul.w	r2, r0, r2
 8009916:	1a9b      	subs	r3, r3, r2
 8009918:	440b      	add	r3, r1
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	b292      	uxth	r2, r2
 800991e:	4611      	mov	r1, r2
 8009920:	4618      	mov	r0, r3
 8009922:	f7ff fb32 	bl	8008f8a <st_word>
			fs->wflag = 1;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2201      	movs	r2, #1
 800992a:	70da      	strb	r2, [r3, #3]
			break;
 800992c:	e047      	b.n	80099be <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	899b      	ldrh	r3, [r3, #12]
 8009936:	089b      	lsrs	r3, r3, #2
 8009938:	b29b      	uxth	r3, r3
 800993a:	4619      	mov	r1, r3
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009942:	4413      	add	r3, r2
 8009944:	4619      	mov	r1, r3
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f7ff fd94 	bl	8009474 <move_window>
 800994c:	4603      	mov	r3, r0
 800994e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009950:	7ffb      	ldrb	r3, [r7, #31]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d132      	bne.n	80099bc <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	8992      	ldrh	r2, [r2, #12]
 800996a:	fbb3 f0f2 	udiv	r0, r3, r2
 800996e:	fb00 f202 	mul.w	r2, r0, r2
 8009972:	1a9b      	subs	r3, r3, r2
 8009974:	440b      	add	r3, r1
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff fae4 	bl	8008f44 <ld_dword>
 800997c:	4603      	mov	r3, r0
 800997e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009982:	4323      	orrs	r3, r4
 8009984:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	8992      	ldrh	r2, [r2, #12]
 8009994:	fbb3 f0f2 	udiv	r0, r3, r2
 8009998:	fb00 f202 	mul.w	r2, r0, r2
 800999c:	1a9b      	subs	r3, r3, r2
 800999e:	440b      	add	r3, r1
 80099a0:	6879      	ldr	r1, [r7, #4]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7ff fb0c 	bl	8008fc0 <st_dword>
			fs->wflag = 1;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2201      	movs	r2, #1
 80099ac:	70da      	strb	r2, [r3, #3]
			break;
 80099ae:	e006      	b.n	80099be <put_fat+0x22a>
			if (res != FR_OK) break;
 80099b0:	bf00      	nop
 80099b2:	e004      	b.n	80099be <put_fat+0x22a>
			if (res != FR_OK) break;
 80099b4:	bf00      	nop
 80099b6:	e002      	b.n	80099be <put_fat+0x22a>
			if (res != FR_OK) break;
 80099b8:	bf00      	nop
 80099ba:	e000      	b.n	80099be <put_fat+0x22a>
			if (res != FR_OK) break;
 80099bc:	bf00      	nop
		}
	}
	return res;
 80099be:	7ffb      	ldrb	r3, [r7, #31]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3724      	adds	r7, #36	@ 0x24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd90      	pop	{r4, r7, pc}

080099c8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d904      	bls.n	80099ee <remove_chain+0x26>
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d301      	bcc.n	80099f2 <remove_chain+0x2a>
 80099ee:	2302      	movs	r3, #2
 80099f0:	e04b      	b.n	8009a8a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00c      	beq.n	8009a12 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80099f8:	f04f 32ff 	mov.w	r2, #4294967295
 80099fc:	6879      	ldr	r1, [r7, #4]
 80099fe:	69b8      	ldr	r0, [r7, #24]
 8009a00:	f7ff fec8 	bl	8009794 <put_fat>
 8009a04:	4603      	mov	r3, r0
 8009a06:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009a08:	7ffb      	ldrb	r3, [r7, #31]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d001      	beq.n	8009a12 <remove_chain+0x4a>
 8009a0e:	7ffb      	ldrb	r3, [r7, #31]
 8009a10:	e03b      	b.n	8009a8a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f7ff fdea 	bl	80095ee <get_fat>
 8009a1a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d031      	beq.n	8009a86 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d101      	bne.n	8009a2c <remove_chain+0x64>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e02e      	b.n	8009a8a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a32:	d101      	bne.n	8009a38 <remove_chain+0x70>
 8009a34:	2301      	movs	r3, #1
 8009a36:	e028      	b.n	8009a8a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009a38:	2200      	movs	r2, #0
 8009a3a:	68b9      	ldr	r1, [r7, #8]
 8009a3c:	69b8      	ldr	r0, [r7, #24]
 8009a3e:	f7ff fea9 	bl	8009794 <put_fat>
 8009a42:	4603      	mov	r3, r0
 8009a44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009a46:	7ffb      	ldrb	r3, [r7, #31]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <remove_chain+0x88>
 8009a4c:	7ffb      	ldrb	r3, [r7, #31]
 8009a4e:	e01c      	b.n	8009a8a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	699a      	ldr	r2, [r3, #24]
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	69db      	ldr	r3, [r3, #28]
 8009a58:	3b02      	subs	r3, #2
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d20b      	bcs.n	8009a76 <remove_chain+0xae>
			fs->free_clst++;
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	1c5a      	adds	r2, r3, #1
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	791b      	ldrb	r3, [r3, #4]
 8009a6c:	f043 0301 	orr.w	r3, r3, #1
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	69db      	ldr	r3, [r3, #28]
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d3c6      	bcc.n	8009a12 <remove_chain+0x4a>
 8009a84:	e000      	b.n	8009a88 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009a86:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3720      	adds	r7, #32
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b088      	sub	sp, #32
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10d      	bne.n	8009ac4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d004      	beq.n	8009abe <create_chain+0x2c>
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	69db      	ldr	r3, [r3, #28]
 8009ab8:	69ba      	ldr	r2, [r7, #24]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d31b      	bcc.n	8009af6 <create_chain+0x64>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	61bb      	str	r3, [r7, #24]
 8009ac2:	e018      	b.n	8009af6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff fd91 	bl	80095ee <get_fat>
 8009acc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d801      	bhi.n	8009ad8 <create_chain+0x46>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e070      	b.n	8009bba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ade:	d101      	bne.n	8009ae4 <create_chain+0x52>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	e06a      	b.n	8009bba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	69db      	ldr	r3, [r3, #28]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d201      	bcs.n	8009af2 <create_chain+0x60>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	e063      	b.n	8009bba <create_chain+0x128>
		scl = clst;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	3301      	adds	r3, #1
 8009afe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	69db      	ldr	r3, [r3, #28]
 8009b04:	69fa      	ldr	r2, [r7, #28]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d307      	bcc.n	8009b1a <create_chain+0x88>
				ncl = 2;
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d901      	bls.n	8009b1a <create_chain+0x88>
 8009b16:	2300      	movs	r3, #0
 8009b18:	e04f      	b.n	8009bba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009b1a:	69f9      	ldr	r1, [r7, #28]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7ff fd66 	bl	80095ee <get_fat>
 8009b22:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00e      	beq.n	8009b48 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d003      	beq.n	8009b38 <create_chain+0xa6>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b36:	d101      	bne.n	8009b3c <create_chain+0xaa>
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	e03e      	b.n	8009bba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d1da      	bne.n	8009afa <create_chain+0x68>
 8009b44:	2300      	movs	r3, #0
 8009b46:	e038      	b.n	8009bba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009b48:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4e:	69f9      	ldr	r1, [r7, #28]
 8009b50:	6938      	ldr	r0, [r7, #16]
 8009b52:	f7ff fe1f 	bl	8009794 <put_fat>
 8009b56:	4603      	mov	r3, r0
 8009b58:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d109      	bne.n	8009b74 <create_chain+0xe2>
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d006      	beq.n	8009b74 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009b66:	69fa      	ldr	r2, [r7, #28]
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6938      	ldr	r0, [r7, #16]
 8009b6c:	f7ff fe12 	bl	8009794 <put_fat>
 8009b70:	4603      	mov	r3, r0
 8009b72:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d116      	bne.n	8009ba8 <create_chain+0x116>
		fs->last_clst = ncl;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	699a      	ldr	r2, [r3, #24]
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	3b02      	subs	r3, #2
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d804      	bhi.n	8009b98 <create_chain+0x106>
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	1e5a      	subs	r2, r3, #1
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	791b      	ldrb	r3, [r3, #4]
 8009b9c:	f043 0301 	orr.w	r3, r3, #1
 8009ba0:	b2da      	uxtb	r2, r3
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	711a      	strb	r2, [r3, #4]
 8009ba6:	e007      	b.n	8009bb8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d102      	bne.n	8009bb4 <create_chain+0x122>
 8009bae:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb2:	e000      	b.n	8009bb6 <create_chain+0x124>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009bb8:	69fb      	ldr	r3, [r7, #28]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3720      	adds	r7, #32
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b087      	sub	sp, #28
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	899b      	ldrh	r3, [r3, #12]
 8009bde:	461a      	mov	r2, r3
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	8952      	ldrh	r2, [r2, #10]
 8009bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	1d1a      	adds	r2, r3, #4
 8009bf4:	613a      	str	r2, [r7, #16]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d101      	bne.n	8009c04 <clmt_clust+0x42>
 8009c00:	2300      	movs	r3, #0
 8009c02:	e010      	b.n	8009c26 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d307      	bcc.n	8009c1c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	617b      	str	r3, [r7, #20]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	3304      	adds	r3, #4
 8009c18:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009c1a:	e7e9      	b.n	8009bf0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009c1c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	4413      	add	r3, r2
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	371c      	adds	r7, #28
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b086      	sub	sp, #24
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c48:	d204      	bcs.n	8009c54 <dir_sdi+0x22>
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	f003 031f 	and.w	r3, r3, #31
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009c54:	2302      	movs	r3, #2
 8009c56:	e071      	b.n	8009d3c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	683a      	ldr	r2, [r7, #0]
 8009c5c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d106      	bne.n	8009c78 <dir_sdi+0x46>
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d902      	bls.n	8009c78 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c76:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10c      	bne.n	8009c98 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	095b      	lsrs	r3, r3, #5
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	8912      	ldrh	r2, [r2, #8]
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d301      	bcc.n	8009c8e <dir_sdi+0x5c>
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	e056      	b.n	8009d3c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	61da      	str	r2, [r3, #28]
 8009c96:	e02d      	b.n	8009cf4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	895b      	ldrh	r3, [r3, #10]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	899b      	ldrh	r3, [r3, #12]
 8009ca2:	fb02 f303 	mul.w	r3, r2, r3
 8009ca6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ca8:	e019      	b.n	8009cde <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6979      	ldr	r1, [r7, #20]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7ff fc9d 	bl	80095ee <get_fat>
 8009cb4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbc:	d101      	bne.n	8009cc2 <dir_sdi+0x90>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e03c      	b.n	8009d3c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d904      	bls.n	8009cd2 <dir_sdi+0xa0>
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	69db      	ldr	r3, [r3, #28]
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d301      	bcc.n	8009cd6 <dir_sdi+0xa4>
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	e032      	b.n	8009d3c <dir_sdi+0x10a>
			ofs -= csz;
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d2e1      	bcs.n	8009caa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009ce6:	6979      	ldr	r1, [r7, #20]
 8009ce8:	6938      	ldr	r0, [r7, #16]
 8009cea:	f7ff fc61 	bl	80095b0 <clust2sect>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <dir_sdi+0xd4>
 8009d02:	2302      	movs	r3, #2
 8009d04:	e01a      	b.n	8009d3c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	69da      	ldr	r2, [r3, #28]
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	899b      	ldrh	r3, [r3, #12]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d16:	441a      	add	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	899b      	ldrh	r3, [r3, #12]
 8009d26:	461a      	mov	r2, r3
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d2e:	fb00 f202 	mul.w	r2, r0, r2
 8009d32:	1a9b      	subs	r3, r3, r2
 8009d34:	18ca      	adds	r2, r1, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	3320      	adds	r3, #32
 8009d5a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d003      	beq.n	8009d6c <dir_next+0x28>
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d6a:	d301      	bcc.n	8009d70 <dir_next+0x2c>
 8009d6c:	2304      	movs	r3, #4
 8009d6e:	e0bb      	b.n	8009ee8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	899b      	ldrh	r3, [r3, #12]
 8009d74:	461a      	mov	r2, r3
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d7c:	fb01 f202 	mul.w	r2, r1, r2
 8009d80:	1a9b      	subs	r3, r3, r2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f040 809d 	bne.w	8009ec2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10b      	bne.n	8009db2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	095b      	lsrs	r3, r3, #5
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	8912      	ldrh	r2, [r2, #8]
 8009da2:	4293      	cmp	r3, r2
 8009da4:	f0c0 808d 	bcc.w	8009ec2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	61da      	str	r2, [r3, #28]
 8009dae:	2304      	movs	r3, #4
 8009db0:	e09a      	b.n	8009ee8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	899b      	ldrh	r3, [r3, #12]
 8009db6:	461a      	mov	r2, r3
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	8952      	ldrh	r2, [r2, #10]
 8009dc2:	3a01      	subs	r2, #1
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d17b      	bne.n	8009ec2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	f7ff fc0b 	bl	80095ee <get_fat>
 8009dd8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d801      	bhi.n	8009de4 <dir_next+0xa0>
 8009de0:	2302      	movs	r3, #2
 8009de2:	e081      	b.n	8009ee8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dea:	d101      	bne.n	8009df0 <dir_next+0xac>
 8009dec:	2301      	movs	r3, #1
 8009dee:	e07b      	b.n	8009ee8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	69db      	ldr	r3, [r3, #28]
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d359      	bcc.n	8009eae <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d104      	bne.n	8009e0a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	61da      	str	r2, [r3, #28]
 8009e06:	2304      	movs	r3, #4
 8009e08:	e06e      	b.n	8009ee8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	699b      	ldr	r3, [r3, #24]
 8009e10:	4619      	mov	r1, r3
 8009e12:	4610      	mov	r0, r2
 8009e14:	f7ff fe3d 	bl	8009a92 <create_chain>
 8009e18:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d101      	bne.n	8009e24 <dir_next+0xe0>
 8009e20:	2307      	movs	r3, #7
 8009e22:	e061      	b.n	8009ee8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d101      	bne.n	8009e2e <dir_next+0xea>
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	e05c      	b.n	8009ee8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e34:	d101      	bne.n	8009e3a <dir_next+0xf6>
 8009e36:	2301      	movs	r3, #1
 8009e38:	e056      	b.n	8009ee8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f7ff fad6 	bl	80093ec <sync_window>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <dir_next+0x106>
 8009e46:	2301      	movs	r3, #1
 8009e48:	e04e      	b.n	8009ee8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	899b      	ldrh	r3, [r3, #12]
 8009e54:	461a      	mov	r2, r3
 8009e56:	2100      	movs	r1, #0
 8009e58:	f7ff f8ff 	bl	800905a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	613b      	str	r3, [r7, #16]
 8009e60:	6979      	ldr	r1, [r7, #20]
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f7ff fba4 	bl	80095b0 <clust2sect>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8009e6e:	e012      	b.n	8009e96 <dir_next+0x152>
						fs->wflag = 1;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2201      	movs	r2, #1
 8009e74:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f7ff fab8 	bl	80093ec <sync_window>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <dir_next+0x142>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e030      	b.n	8009ee8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	613b      	str	r3, [r7, #16]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e90:	1c5a      	adds	r2, r3, #1
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	635a      	str	r2, [r3, #52]	@ 0x34
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	895b      	ldrh	r3, [r3, #10]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d3e6      	bcc.n	8009e70 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	1ad2      	subs	r2, r2, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009eb4:	6979      	ldr	r1, [r7, #20]
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f7ff fb7a 	bl	80095b0 <clust2sect>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	899b      	ldrh	r3, [r3, #12]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	fbb3 f0f2 	udiv	r0, r3, r2
 8009eda:	fb00 f202 	mul.w	r2, r0, r2
 8009ede:	1a9b      	subs	r3, r3, r2
 8009ee0:	18ca      	adds	r2, r1, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009f00:	2100      	movs	r1, #0
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff fe95 	bl	8009c32 <dir_sdi>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009f0c:	7dfb      	ldrb	r3, [r7, #23]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d12b      	bne.n	8009f6a <dir_alloc+0x7a>
		n = 0;
 8009f12:	2300      	movs	r3, #0
 8009f14:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7ff faa9 	bl	8009474 <move_window>
 8009f22:	4603      	mov	r3, r0
 8009f24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009f26:	7dfb      	ldrb	r3, [r7, #23]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d11d      	bne.n	8009f68 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a1b      	ldr	r3, [r3, #32]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2be5      	cmp	r3, #229	@ 0xe5
 8009f34:	d004      	beq.n	8009f40 <dir_alloc+0x50>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d107      	bne.n	8009f50 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	3301      	adds	r3, #1
 8009f44:	613b      	str	r3, [r7, #16]
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d102      	bne.n	8009f54 <dir_alloc+0x64>
 8009f4e:	e00c      	b.n	8009f6a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009f50:	2300      	movs	r3, #0
 8009f52:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009f54:	2101      	movs	r1, #1
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7ff fef4 	bl	8009d44 <dir_next>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d0d7      	beq.n	8009f16 <dir_alloc+0x26>
 8009f66:	e000      	b.n	8009f6a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009f68:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009f6a:	7dfb      	ldrb	r3, [r7, #23]
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	d101      	bne.n	8009f74 <dir_alloc+0x84>
 8009f70:	2307      	movs	r3, #7
 8009f72:	75fb      	strb	r3, [r7, #23]
	return res;
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b084      	sub	sp, #16
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	331a      	adds	r3, #26
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fe ffc1 	bl	8008f14 <ld_word>
 8009f92:	4603      	mov	r3, r0
 8009f94:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d109      	bne.n	8009fb2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	3314      	adds	r3, #20
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fe ffb6 	bl	8008f14 <ld_word>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	041b      	lsls	r3, r3, #16
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	331a      	adds	r3, #26
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	b292      	uxth	r2, r2
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fe ffd9 	bl	8008f8a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d109      	bne.n	8009ff4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	f103 0214 	add.w	r2, r3, #20
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	0c1b      	lsrs	r3, r3, #16
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	4619      	mov	r1, r3
 8009fee:	4610      	mov	r0, r2
 8009ff0:	f7fe ffcb 	bl	8008f8a <st_word>
	}
}
 8009ff4:	bf00      	nop
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009ffc:	b590      	push	{r4, r7, lr}
 8009ffe:	b087      	sub	sp, #28
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	331a      	adds	r3, #26
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe ff82 	bl	8008f14 <ld_word>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <cmp_lfn+0x1e>
 800a016:	2300      	movs	r3, #0
 800a018:	e059      	b.n	800a0ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a022:	1e5a      	subs	r2, r3, #1
 800a024:	4613      	mov	r3, r2
 800a026:	005b      	lsls	r3, r3, #1
 800a028:	4413      	add	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a030:	2301      	movs	r3, #1
 800a032:	81fb      	strh	r3, [r7, #14]
 800a034:	2300      	movs	r3, #0
 800a036:	613b      	str	r3, [r7, #16]
 800a038:	e033      	b.n	800a0a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a03a:	4a27      	ldr	r2, [pc, #156]	@ (800a0d8 <cmp_lfn+0xdc>)
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	4413      	add	r3, r2
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	4413      	add	r3, r2
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fe ff63 	bl	8008f14 <ld_word>
 800a04e:	4603      	mov	r3, r0
 800a050:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a052:	89fb      	ldrh	r3, [r7, #14]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d01a      	beq.n	800a08e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2bfe      	cmp	r3, #254	@ 0xfe
 800a05c:	d812      	bhi.n	800a084 <cmp_lfn+0x88>
 800a05e:	89bb      	ldrh	r3, [r7, #12]
 800a060:	4618      	mov	r0, r3
 800a062:	f002 f89d 	bl	800c1a0 <ff_wtoupper>
 800a066:	4603      	mov	r3, r0
 800a068:	461c      	mov	r4, r3
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	617a      	str	r2, [r7, #20]
 800a070:	005b      	lsls	r3, r3, #1
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	4413      	add	r3, r2
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	4618      	mov	r0, r3
 800a07a:	f002 f891 	bl	800c1a0 <ff_wtoupper>
 800a07e:	4603      	mov	r3, r0
 800a080:	429c      	cmp	r4, r3
 800a082:	d001      	beq.n	800a088 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a084:	2300      	movs	r3, #0
 800a086:	e022      	b.n	800a0ce <cmp_lfn+0xd2>
			}
			wc = uc;
 800a088:	89bb      	ldrh	r3, [r7, #12]
 800a08a:	81fb      	strh	r3, [r7, #14]
 800a08c:	e006      	b.n	800a09c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a08e:	89bb      	ldrh	r3, [r7, #12]
 800a090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a094:	4293      	cmp	r3, r2
 800a096:	d001      	beq.n	800a09c <cmp_lfn+0xa0>
 800a098:	2300      	movs	r3, #0
 800a09a:	e018      	b.n	800a0ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	613b      	str	r3, [r7, #16]
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	2b0c      	cmp	r3, #12
 800a0a6:	d9c8      	bls.n	800a03a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00b      	beq.n	800a0cc <cmp_lfn+0xd0>
 800a0b4:	89fb      	ldrh	r3, [r7, #14]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d008      	beq.n	800a0cc <cmp_lfn+0xd0>
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	881b      	ldrh	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <cmp_lfn+0xd0>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	e000      	b.n	800a0ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a0cc:	2301      	movs	r3, #1
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	371c      	adds	r7, #28
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd90      	pop	{r4, r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	0800d63c 	.word	0x0800d63c

0800a0dc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	71fb      	strb	r3, [r7, #7]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	330d      	adds	r3, #13
 800a0f6:	79ba      	ldrb	r2, [r7, #6]
 800a0f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	330b      	adds	r3, #11
 800a0fe:	220f      	movs	r2, #15
 800a100:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	330c      	adds	r3, #12
 800a106:	2200      	movs	r2, #0
 800a108:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	331a      	adds	r3, #26
 800a10e:	2100      	movs	r1, #0
 800a110:	4618      	mov	r0, r3
 800a112:	f7fe ff3a 	bl	8008f8a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a116:	79fb      	ldrb	r3, [r7, #7]
 800a118:	1e5a      	subs	r2, r3, #1
 800a11a:	4613      	mov	r3, r2
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	4413      	add	r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4413      	add	r3, r2
 800a124:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	82fb      	strh	r3, [r7, #22]
 800a12a:	2300      	movs	r3, #0
 800a12c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a12e:	8afb      	ldrh	r3, [r7, #22]
 800a130:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a134:	4293      	cmp	r3, r2
 800a136:	d007      	beq.n	800a148 <put_lfn+0x6c>
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	61fa      	str	r2, [r7, #28]
 800a13e:	005b      	lsls	r3, r3, #1
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	4413      	add	r3, r2
 800a144:	881b      	ldrh	r3, [r3, #0]
 800a146:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a148:	4a17      	ldr	r2, [pc, #92]	@ (800a1a8 <put_lfn+0xcc>)
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	4413      	add	r3, r2
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	4413      	add	r3, r2
 800a156:	8afa      	ldrh	r2, [r7, #22]
 800a158:	4611      	mov	r1, r2
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fe ff15 	bl	8008f8a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a160:	8afb      	ldrh	r3, [r7, #22]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d102      	bne.n	800a16c <put_lfn+0x90>
 800a166:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a16a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	3301      	adds	r3, #1
 800a170:	61bb      	str	r3, [r7, #24]
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	2b0c      	cmp	r3, #12
 800a176:	d9da      	bls.n	800a12e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a178:	8afb      	ldrh	r3, [r7, #22]
 800a17a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a17e:	4293      	cmp	r3, r2
 800a180:	d006      	beq.n	800a190 <put_lfn+0xb4>
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	4413      	add	r3, r2
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d103      	bne.n	800a198 <put_lfn+0xbc>
 800a190:	79fb      	ldrb	r3, [r7, #7]
 800a192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a196:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	79fa      	ldrb	r2, [r7, #7]
 800a19c:	701a      	strb	r2, [r3, #0]
}
 800a19e:	bf00      	nop
 800a1a0:	3720      	adds	r7, #32
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	0800d63c 	.word	0x0800d63c

0800a1ac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08c      	sub	sp, #48	@ 0x30
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a1ba:	220b      	movs	r2, #11
 800a1bc:	68b9      	ldr	r1, [r7, #8]
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f7fe ff2a 	bl	8009018 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2b05      	cmp	r3, #5
 800a1c8:	d92b      	bls.n	800a222 <gen_numname+0x76>
		sr = seq;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a1ce:	e022      	b.n	800a216 <gen_numname+0x6a>
			wc = *lfn++;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	1c9a      	adds	r2, r3, #2
 800a1d4:	607a      	str	r2, [r7, #4]
 800a1d6:	881b      	ldrh	r3, [r3, #0]
 800a1d8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800a1da:	2300      	movs	r3, #0
 800a1dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1de:	e017      	b.n	800a210 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	005a      	lsls	r2, r3, #1
 800a1e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a1e6:	f003 0301 	and.w	r3, r3, #1
 800a1ea:	4413      	add	r3, r2
 800a1ec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a1ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a1f0:	085b      	lsrs	r3, r3, #1
 800a1f2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d005      	beq.n	800a20a <gen_numname+0x5e>
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800a204:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800a208:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20c:	3301      	adds	r3, #1
 800a20e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a212:	2b0f      	cmp	r3, #15
 800a214:	d9e4      	bls.n	800a1e0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1d8      	bne.n	800a1d0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a222:	2307      	movs	r3, #7
 800a224:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	f003 030f 	and.w	r3, r3, #15
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	3330      	adds	r3, #48	@ 0x30
 800a232:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800a236:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a23a:	2b39      	cmp	r3, #57	@ 0x39
 800a23c:	d904      	bls.n	800a248 <gen_numname+0x9c>
 800a23e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a242:	3307      	adds	r3, #7
 800a244:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800a248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24a:	1e5a      	subs	r2, r3, #1
 800a24c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a24e:	3330      	adds	r3, #48	@ 0x30
 800a250:	443b      	add	r3, r7
 800a252:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a256:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	091b      	lsrs	r3, r3, #4
 800a25e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1df      	bne.n	800a226 <gen_numname+0x7a>
	ns[i] = '~';
 800a266:	f107 0214 	add.w	r2, r7, #20
 800a26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26c:	4413      	add	r3, r2
 800a26e:	227e      	movs	r2, #126	@ 0x7e
 800a270:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a272:	2300      	movs	r3, #0
 800a274:	627b      	str	r3, [r7, #36]	@ 0x24
 800a276:	e002      	b.n	800a27e <gen_numname+0xd2>
 800a278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27a:	3301      	adds	r3, #1
 800a27c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a27e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a282:	429a      	cmp	r2, r3
 800a284:	d205      	bcs.n	800a292 <gen_numname+0xe6>
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28a:	4413      	add	r3, r2
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	2b20      	cmp	r3, #32
 800a290:	d1f2      	bne.n	800a278 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a294:	2b07      	cmp	r3, #7
 800a296:	d807      	bhi.n	800a2a8 <gen_numname+0xfc>
 800a298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29a:	1c5a      	adds	r2, r3, #1
 800a29c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a29e:	3330      	adds	r3, #48	@ 0x30
 800a2a0:	443b      	add	r3, r7
 800a2a2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a2a6:	e000      	b.n	800a2aa <gen_numname+0xfe>
 800a2a8:	2120      	movs	r1, #32
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ac:	1c5a      	adds	r2, r3, #1
 800a2ae:	627a      	str	r2, [r7, #36]	@ 0x24
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	460a      	mov	r2, r1
 800a2b6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ba:	2b07      	cmp	r3, #7
 800a2bc:	d9e9      	bls.n	800a292 <gen_numname+0xe6>
}
 800a2be:	bf00      	nop
 800a2c0:	bf00      	nop
 800a2c2:	3730      	adds	r7, #48	@ 0x30
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a2d4:	230b      	movs	r3, #11
 800a2d6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
 800a2da:	b2da      	uxtb	r2, r3
 800a2dc:	0852      	lsrs	r2, r2, #1
 800a2de:	01db      	lsls	r3, r3, #7
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	1c59      	adds	r1, r3, #1
 800a2e8:	6079      	str	r1, [r7, #4]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	60bb      	str	r3, [r7, #8]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1ed      	bne.n	800a2d8 <sum_sfn+0x10>
	return sum;
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b086      	sub	sp, #24
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a318:	2100      	movs	r1, #0
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7ff fc89 	bl	8009c32 <dir_sdi>
 800a320:	4603      	mov	r3, r0
 800a322:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a324:	7dfb      	ldrb	r3, [r7, #23]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <dir_find+0x24>
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
 800a32c:	e0a9      	b.n	800a482 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a32e:	23ff      	movs	r3, #255	@ 0xff
 800a330:	753b      	strb	r3, [r7, #20]
 800a332:	7d3b      	ldrb	r3, [r7, #20]
 800a334:	757b      	strb	r3, [r7, #21]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f04f 32ff 	mov.w	r2, #4294967295
 800a33c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	4619      	mov	r1, r3
 800a344:	6938      	ldr	r0, [r7, #16]
 800a346:	f7ff f895 	bl	8009474 <move_window>
 800a34a:	4603      	mov	r3, r0
 800a34c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a34e:	7dfb      	ldrb	r3, [r7, #23]
 800a350:	2b00      	cmp	r3, #0
 800a352:	f040 8090 	bne.w	800a476 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a35e:	7dbb      	ldrb	r3, [r7, #22]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d102      	bne.n	800a36a <dir_find+0x60>
 800a364:	2304      	movs	r3, #4
 800a366:	75fb      	strb	r3, [r7, #23]
 800a368:	e08a      	b.n	800a480 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	330b      	adds	r3, #11
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a376:	73fb      	strb	r3, [r7, #15]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	7bfa      	ldrb	r2, [r7, #15]
 800a37c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a37e:	7dbb      	ldrb	r3, [r7, #22]
 800a380:	2be5      	cmp	r3, #229	@ 0xe5
 800a382:	d007      	beq.n	800a394 <dir_find+0x8a>
 800a384:	7bfb      	ldrb	r3, [r7, #15]
 800a386:	f003 0308 	and.w	r3, r3, #8
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d009      	beq.n	800a3a2 <dir_find+0x98>
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	2b0f      	cmp	r3, #15
 800a392:	d006      	beq.n	800a3a2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a394:	23ff      	movs	r3, #255	@ 0xff
 800a396:	757b      	strb	r3, [r7, #21]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f04f 32ff 	mov.w	r2, #4294967295
 800a39e:	631a      	str	r2, [r3, #48]	@ 0x30
 800a3a0:	e05e      	b.n	800a460 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a3a2:	7bfb      	ldrb	r3, [r7, #15]
 800a3a4:	2b0f      	cmp	r3, #15
 800a3a6:	d136      	bne.n	800a416 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a3ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d154      	bne.n	800a460 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a3b6:	7dbb      	ldrb	r3, [r7, #22]
 800a3b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00d      	beq.n	800a3dc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	7b5b      	ldrb	r3, [r3, #13]
 800a3c6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a3c8:	7dbb      	ldrb	r3, [r7, #22]
 800a3ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3ce:	75bb      	strb	r3, [r7, #22]
 800a3d0:	7dbb      	ldrb	r3, [r7, #22]
 800a3d2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	695a      	ldr	r2, [r3, #20]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a3dc:	7dba      	ldrb	r2, [r7, #22]
 800a3de:	7d7b      	ldrb	r3, [r7, #21]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d115      	bne.n	800a410 <dir_find+0x106>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a1b      	ldr	r3, [r3, #32]
 800a3e8:	330d      	adds	r3, #13
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	7d3a      	ldrb	r2, [r7, #20]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d10e      	bne.n	800a410 <dir_find+0x106>
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	691a      	ldr	r2, [r3, #16]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	4610      	mov	r0, r2
 800a3fe:	f7ff fdfd 	bl	8009ffc <cmp_lfn>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d003      	beq.n	800a410 <dir_find+0x106>
 800a408:	7d7b      	ldrb	r3, [r7, #21]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	e000      	b.n	800a412 <dir_find+0x108>
 800a410:	23ff      	movs	r3, #255	@ 0xff
 800a412:	757b      	strb	r3, [r7, #21]
 800a414:	e024      	b.n	800a460 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a416:	7d7b      	ldrb	r3, [r7, #21]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d109      	bne.n	800a430 <dir_find+0x126>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a1b      	ldr	r3, [r3, #32]
 800a420:	4618      	mov	r0, r3
 800a422:	f7ff ff51 	bl	800a2c8 <sum_sfn>
 800a426:	4603      	mov	r3, r0
 800a428:	461a      	mov	r2, r3
 800a42a:	7d3b      	ldrb	r3, [r7, #20]
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d024      	beq.n	800a47a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10a      	bne.n	800a454 <dir_find+0x14a>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a18      	ldr	r0, [r3, #32]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	3324      	adds	r3, #36	@ 0x24
 800a446:	220b      	movs	r2, #11
 800a448:	4619      	mov	r1, r3
 800a44a:	f7fe fe21 	bl	8009090 <mem_cmp>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d014      	beq.n	800a47e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a454:	23ff      	movs	r3, #255	@ 0xff
 800a456:	757b      	strb	r3, [r7, #21]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f04f 32ff 	mov.w	r2, #4294967295
 800a45e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a460:	2100      	movs	r1, #0
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7ff fc6e 	bl	8009d44 <dir_next>
 800a468:	4603      	mov	r3, r0
 800a46a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a46c:	7dfb      	ldrb	r3, [r7, #23]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f43f af65 	beq.w	800a33e <dir_find+0x34>
 800a474:	e004      	b.n	800a480 <dir_find+0x176>
		if (res != FR_OK) break;
 800a476:	bf00      	nop
 800a478:	e002      	b.n	800a480 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a47a:	bf00      	nop
 800a47c:	e000      	b.n	800a480 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a47e:	bf00      	nop

	return res;
 800a480:	7dfb      	ldrb	r3, [r7, #23]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3718      	adds	r7, #24
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b08c      	sub	sp, #48	@ 0x30
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a4a0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <dir_register+0x20>
 800a4a8:	2306      	movs	r3, #6
 800a4aa:	e0e0      	b.n	800a66e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4b0:	e002      	b.n	800a4b8 <dir_register+0x2c>
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	4413      	add	r3, r2
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1f4      	bne.n	800a4b2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800a4ce:	f107 030c 	add.w	r3, r7, #12
 800a4d2:	220c      	movs	r2, #12
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fe fd9f 	bl	8009018 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a4da:	7dfb      	ldrb	r3, [r7, #23]
 800a4dc:	f003 0301 	and.w	r3, r3, #1
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d032      	beq.n	800a54a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2240      	movs	r2, #64	@ 0x40
 800a4e8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4f0:	e016      	b.n	800a520 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	691a      	ldr	r2, [r3, #16]
 800a4fc:	f107 010c 	add.w	r1, r7, #12
 800a500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a502:	f7ff fe53 	bl	800a1ac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff feff 	bl	800a30a <dir_find>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800a512:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51c:	3301      	adds	r3, #1
 800a51e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a522:	2b63      	cmp	r3, #99	@ 0x63
 800a524:	d9e5      	bls.n	800a4f2 <dir_register+0x66>
 800a526:	e000      	b.n	800a52a <dir_register+0x9e>
			if (res != FR_OK) break;
 800a528:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a52c:	2b64      	cmp	r3, #100	@ 0x64
 800a52e:	d101      	bne.n	800a534 <dir_register+0xa8>
 800a530:	2307      	movs	r3, #7
 800a532:	e09c      	b.n	800a66e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a534:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a538:	2b04      	cmp	r3, #4
 800a53a:	d002      	beq.n	800a542 <dir_register+0xb6>
 800a53c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a540:	e095      	b.n	800a66e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a542:	7dfa      	ldrb	r2, [r7, #23]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a54a:	7dfb      	ldrb	r3, [r7, #23]
 800a54c:	f003 0302 	and.w	r3, r3, #2
 800a550:	2b00      	cmp	r3, #0
 800a552:	d007      	beq.n	800a564 <dir_register+0xd8>
 800a554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a556:	330c      	adds	r3, #12
 800a558:	4a47      	ldr	r2, [pc, #284]	@ (800a678 <dir_register+0x1ec>)
 800a55a:	fba2 2303 	umull	r2, r3, r2, r3
 800a55e:	089b      	lsrs	r3, r3, #2
 800a560:	3301      	adds	r3, #1
 800a562:	e000      	b.n	800a566 <dir_register+0xda>
 800a564:	2301      	movs	r3, #1
 800a566:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a568:	6a39      	ldr	r1, [r7, #32]
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7ff fcc0 	bl	8009ef0 <dir_alloc>
 800a570:	4603      	mov	r3, r0
 800a572:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a576:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d148      	bne.n	800a610 <dir_register+0x184>
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	3b01      	subs	r3, #1
 800a582:	623b      	str	r3, [r7, #32]
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d042      	beq.n	800a610 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	695a      	ldr	r2, [r3, #20]
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	015b      	lsls	r3, r3, #5
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7ff fb4b 	bl	8009c32 <dir_sdi>
 800a59c:	4603      	mov	r3, r0
 800a59e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800a5a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d132      	bne.n	800a610 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3324      	adds	r3, #36	@ 0x24
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7ff fe8a 	bl	800a2c8 <sum_sfn>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	69f8      	ldr	r0, [r7, #28]
 800a5c0:	f7fe ff58 	bl	8009474 <move_window>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800a5ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d11d      	bne.n	800a60e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	6918      	ldr	r0, [r3, #16]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a19      	ldr	r1, [r3, #32]
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	7efb      	ldrb	r3, [r7, #27]
 800a5e0:	f7ff fd7c 	bl	800a0dc <put_lfn>
				fs->wflag = 1;
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff fba9 	bl	8009d44 <dir_next>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800a5f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d107      	bne.n	800a610 <dir_register+0x184>
 800a600:	6a3b      	ldr	r3, [r7, #32]
 800a602:	3b01      	subs	r3, #1
 800a604:	623b      	str	r3, [r7, #32]
 800a606:	6a3b      	ldr	r3, [r7, #32]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1d5      	bne.n	800a5b8 <dir_register+0x12c>
 800a60c:	e000      	b.n	800a610 <dir_register+0x184>
				if (res != FR_OK) break;
 800a60e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a610:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a614:	2b00      	cmp	r3, #0
 800a616:	d128      	bne.n	800a66a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	4619      	mov	r1, r3
 800a61e:	69f8      	ldr	r0, [r7, #28]
 800a620:	f7fe ff28 	bl	8009474 <move_window>
 800a624:	4603      	mov	r3, r0
 800a626:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800a62a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d11b      	bne.n	800a66a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	2220      	movs	r2, #32
 800a638:	2100      	movs	r1, #0
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fe fd0d 	bl	800905a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a18      	ldr	r0, [r3, #32]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	3324      	adds	r3, #36	@ 0x24
 800a648:	220b      	movs	r2, #11
 800a64a:	4619      	mov	r1, r3
 800a64c:	f7fe fce4 	bl	8009018 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6a1b      	ldr	r3, [r3, #32]
 800a65a:	330c      	adds	r3, #12
 800a65c:	f002 0218 	and.w	r2, r2, #24
 800a660:	b2d2      	uxtb	r2, r2
 800a662:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	2201      	movs	r2, #1
 800a668:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a66a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3730      	adds	r7, #48	@ 0x30
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	4ec4ec4f 	.word	0x4ec4ec4f

0800a67c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	2200      	movs	r2, #0
 800a690:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	2b00      	cmp	r3, #0
 800a698:	f000 80ca 	beq.w	800a830 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a4:	d032      	beq.n	800a70c <get_fileinfo+0x90>
			i = j = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	61bb      	str	r3, [r7, #24]
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a6ae:	e01b      	b.n	800a6e8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800a6b0:	89fb      	ldrh	r3, [r7, #14]
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f001 fd37 	bl	800c128 <ff_convert>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800a6be:	89fb      	ldrh	r3, [r7, #14]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d102      	bne.n	800a6ca <get_fileinfo+0x4e>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	61fb      	str	r3, [r7, #28]
 800a6c8:	e01a      	b.n	800a700 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	2bfe      	cmp	r3, #254	@ 0xfe
 800a6ce:	d902      	bls.n	800a6d6 <get_fileinfo+0x5a>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	61fb      	str	r3, [r7, #28]
 800a6d4:	e014      	b.n	800a700 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	61fa      	str	r2, [r7, #28]
 800a6dc:	89fa      	ldrh	r2, [r7, #14]
 800a6de:	b2d1      	uxtb	r1, r2
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	460a      	mov	r2, r1
 800a6e6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	691a      	ldr	r2, [r3, #16]
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	1c59      	adds	r1, r3, #1
 800a6f0:	61b9      	str	r1, [r7, #24]
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	4413      	add	r3, r2
 800a6f6:	881b      	ldrh	r3, [r3, #0]
 800a6f8:	81fb      	strh	r3, [r7, #14]
 800a6fa:	89fb      	ldrh	r3, [r7, #14]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1d7      	bne.n	800a6b0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	4413      	add	r3, r2
 800a706:	3316      	adds	r3, #22
 800a708:	2200      	movs	r2, #0
 800a70a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800a70c:	2300      	movs	r3, #0
 800a70e:	61bb      	str	r3, [r7, #24]
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	4413      	add	r3, r2
 800a71a:	3316      	adds	r3, #22
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800a720:	e04d      	b.n	800a7be <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a1a      	ldr	r2, [r3, #32]
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	1c59      	adds	r1, r3, #1
 800a72a:	61f9      	str	r1, [r7, #28]
 800a72c:	4413      	add	r3, r2
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a732:	7dfb      	ldrb	r3, [r7, #23]
 800a734:	2b20      	cmp	r3, #32
 800a736:	d041      	beq.n	800a7bc <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a738:	7dfb      	ldrb	r3, [r7, #23]
 800a73a:	2b05      	cmp	r3, #5
 800a73c:	d101      	bne.n	800a742 <get_fileinfo+0xc6>
 800a73e:	23e5      	movs	r3, #229	@ 0xe5
 800a740:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	2b09      	cmp	r3, #9
 800a746:	d10f      	bne.n	800a768 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800a748:	89bb      	ldrh	r3, [r7, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d105      	bne.n	800a75a <get_fileinfo+0xde>
 800a74e:	683a      	ldr	r2, [r7, #0]
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	4413      	add	r3, r2
 800a754:	3316      	adds	r3, #22
 800a756:	222e      	movs	r2, #46	@ 0x2e
 800a758:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	1c5a      	adds	r2, r3, #1
 800a75e:	61ba      	str	r2, [r7, #24]
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	4413      	add	r3, r2
 800a764:	222e      	movs	r2, #46	@ 0x2e
 800a766:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	4413      	add	r3, r2
 800a76e:	3309      	adds	r3, #9
 800a770:	7dfa      	ldrb	r2, [r7, #23]
 800a772:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800a774:	89bb      	ldrh	r3, [r7, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d11c      	bne.n	800a7b4 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
 800a77c:	2b40      	cmp	r3, #64	@ 0x40
 800a77e:	d913      	bls.n	800a7a8 <get_fileinfo+0x12c>
 800a780:	7dfb      	ldrb	r3, [r7, #23]
 800a782:	2b5a      	cmp	r3, #90	@ 0x5a
 800a784:	d810      	bhi.n	800a7a8 <get_fileinfo+0x12c>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a1b      	ldr	r3, [r3, #32]
 800a78a:	330c      	adds	r3, #12
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	2b08      	cmp	r3, #8
 800a794:	d901      	bls.n	800a79a <get_fileinfo+0x11e>
 800a796:	2310      	movs	r3, #16
 800a798:	e000      	b.n	800a79c <get_fileinfo+0x120>
 800a79a:	2308      	movs	r3, #8
 800a79c:	4013      	ands	r3, r2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d002      	beq.n	800a7a8 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
 800a7a4:	3320      	adds	r3, #32
 800a7a6:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	3316      	adds	r3, #22
 800a7b0:	7dfa      	ldrb	r2, [r7, #23]
 800a7b2:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	61bb      	str	r3, [r7, #24]
 800a7ba:	e000      	b.n	800a7be <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800a7bc:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	2b0a      	cmp	r3, #10
 800a7c2:	d9ae      	bls.n	800a722 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800a7c4:	89bb      	ldrh	r3, [r7, #12]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10d      	bne.n	800a7e6 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	3316      	adds	r3, #22
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a1b      	ldr	r3, [r3, #32]
 800a7da:	330c      	adds	r3, #12
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <get_fileinfo+0x16a>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	3309      	adds	r3, #9
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a1b      	ldr	r3, [r3, #32]
 800a7f6:	7ada      	ldrb	r2, [r3, #11]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	331c      	adds	r3, #28
 800a802:	4618      	mov	r0, r3
 800a804:	f7fe fb9e 	bl	8008f44 <ld_dword>
 800a808:	4602      	mov	r2, r0
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	3316      	adds	r3, #22
 800a814:	4618      	mov	r0, r3
 800a816:	f7fe fb95 	bl	8008f44 <ld_dword>
 800a81a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	b29a      	uxth	r2, r3
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	80da      	strh	r2, [r3, #6]
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	0c1b      	lsrs	r3, r3, #16
 800a828:	b29a      	uxth	r2, r3
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	809a      	strh	r2, [r3, #4]
 800a82e:	e000      	b.n	800a832 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a830:	bf00      	nop
}
 800a832:	3720      	adds	r7, #32
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08a      	sub	sp, #40	@ 0x28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	613b      	str	r3, [r7, #16]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	60fb      	str	r3, [r7, #12]
 800a850:	2300      	movs	r3, #0
 800a852:	617b      	str	r3, [r7, #20]
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	1c5a      	adds	r2, r3, #1
 800a85c:	61ba      	str	r2, [r7, #24]
 800a85e:	693a      	ldr	r2, [r7, #16]
 800a860:	4413      	add	r3, r2
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a866:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a868:	2b1f      	cmp	r3, #31
 800a86a:	d940      	bls.n	800a8ee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a86c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a86e:	2b2f      	cmp	r3, #47	@ 0x2f
 800a870:	d006      	beq.n	800a880 <create_name+0x48>
 800a872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a874:	2b5c      	cmp	r3, #92	@ 0x5c
 800a876:	d110      	bne.n	800a89a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a878:	e002      	b.n	800a880 <create_name+0x48>
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	3301      	adds	r3, #1
 800a87e:	61bb      	str	r3, [r7, #24]
 800a880:	693a      	ldr	r2, [r7, #16]
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	4413      	add	r3, r2
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	2b2f      	cmp	r3, #47	@ 0x2f
 800a88a:	d0f6      	beq.n	800a87a <create_name+0x42>
 800a88c:	693a      	ldr	r2, [r7, #16]
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	4413      	add	r3, r2
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	2b5c      	cmp	r3, #92	@ 0x5c
 800a896:	d0f0      	beq.n	800a87a <create_name+0x42>
			break;
 800a898:	e02a      	b.n	800a8f0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2bfe      	cmp	r3, #254	@ 0xfe
 800a89e:	d901      	bls.n	800a8a4 <create_name+0x6c>
 800a8a0:	2306      	movs	r3, #6
 800a8a2:	e17d      	b.n	800aba0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a8a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a8aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f001 fc3a 	bl	800c128 <ff_convert>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a8b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <create_name+0x8a>
 800a8be:	2306      	movs	r3, #6
 800a8c0:	e16e      	b.n	800aba0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a8c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8c4:	2b7f      	cmp	r3, #127	@ 0x7f
 800a8c6:	d809      	bhi.n	800a8dc <create_name+0xa4>
 800a8c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	488d      	ldr	r0, [pc, #564]	@ (800ab04 <create_name+0x2cc>)
 800a8ce:	f7fe fc06 	bl	80090de <chk_chr>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d001      	beq.n	800a8dc <create_name+0xa4>
 800a8d8:	2306      	movs	r3, #6
 800a8da:	e161      	b.n	800aba0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	617a      	str	r2, [r7, #20]
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a8ea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a8ec:	e7b4      	b.n	800a858 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a8ee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	441a      	add	r2, r3
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a8fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8fc:	2b1f      	cmp	r3, #31
 800a8fe:	d801      	bhi.n	800a904 <create_name+0xcc>
 800a900:	2304      	movs	r3, #4
 800a902:	e000      	b.n	800a906 <create_name+0xce>
 800a904:	2300      	movs	r3, #0
 800a906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a90a:	e011      	b.n	800a930 <create_name+0xf8>
		w = lfn[di - 1];
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a912:	3b01      	subs	r3, #1
 800a914:	005b      	lsls	r3, r3, #1
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	4413      	add	r3, r2
 800a91a:	881b      	ldrh	r3, [r3, #0]
 800a91c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800a91e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a920:	2b20      	cmp	r3, #32
 800a922:	d002      	beq.n	800a92a <create_name+0xf2>
 800a924:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a926:	2b2e      	cmp	r3, #46	@ 0x2e
 800a928:	d106      	bne.n	800a938 <create_name+0x100>
		di--;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1ea      	bne.n	800a90c <create_name+0xd4>
 800a936:	e000      	b.n	800a93a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a938:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	005b      	lsls	r3, r3, #1
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	4413      	add	r3, r2
 800a942:	2200      	movs	r2, #0
 800a944:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <create_name+0x118>
 800a94c:	2306      	movs	r3, #6
 800a94e:	e127      	b.n	800aba0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3324      	adds	r3, #36	@ 0x24
 800a954:	220b      	movs	r2, #11
 800a956:	2120      	movs	r1, #32
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fe fb7e 	bl	800905a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a95e:	2300      	movs	r3, #0
 800a960:	61bb      	str	r3, [r7, #24]
 800a962:	e002      	b.n	800a96a <create_name+0x132>
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	3301      	adds	r3, #1
 800a968:	61bb      	str	r3, [r7, #24]
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	005b      	lsls	r3, r3, #1
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	2b20      	cmp	r3, #32
 800a976:	d0f5      	beq.n	800a964 <create_name+0x12c>
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	005b      	lsls	r3, r3, #1
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	2b2e      	cmp	r3, #46	@ 0x2e
 800a984:	d0ee      	beq.n	800a964 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d009      	beq.n	800a9a0 <create_name+0x168>
 800a98c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a990:	f043 0303 	orr.w	r3, r3, #3
 800a994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a998:	e002      	b.n	800a9a0 <create_name+0x168>
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	3b01      	subs	r3, #1
 800a99e:	617b      	str	r3, [r7, #20]
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d009      	beq.n	800a9ba <create_name+0x182>
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	881b      	ldrh	r3, [r3, #0]
 800a9b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9b8:	d1ef      	bne.n	800a99a <create_name+0x162>

	i = b = 0; ni = 8;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	623b      	str	r3, [r7, #32]
 800a9c4:	2308      	movs	r3, #8
 800a9c6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	1c5a      	adds	r2, r3, #1
 800a9cc:	61ba      	str	r2, [r7, #24]
 800a9ce:	005b      	lsls	r3, r3, #1
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a9d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 8090 	beq.w	800ab00 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a9e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9e2:	2b20      	cmp	r3, #32
 800a9e4:	d006      	beq.n	800a9f4 <create_name+0x1bc>
 800a9e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9ea:	d10a      	bne.n	800aa02 <create_name+0x1ca>
 800a9ec:	69ba      	ldr	r2, [r7, #24]
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d006      	beq.n	800aa02 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9f8:	f043 0303 	orr.w	r3, r3, #3
 800a9fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aa00:	e07d      	b.n	800aafe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800aa02:	6a3a      	ldr	r2, [r7, #32]
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d203      	bcs.n	800aa12 <create_name+0x1da>
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d123      	bne.n	800aa5a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	2b0b      	cmp	r3, #11
 800aa16:	d106      	bne.n	800aa26 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800aa18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa1c:	f043 0303 	orr.w	r3, r3, #3
 800aa20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aa24:	e075      	b.n	800ab12 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800aa26:	69ba      	ldr	r2, [r7, #24]
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d005      	beq.n	800aa3a <create_name+0x202>
 800aa2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa32:	f043 0303 	orr.w	r3, r3, #3
 800aa36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d866      	bhi.n	800ab10 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	61bb      	str	r3, [r7, #24]
 800aa46:	2308      	movs	r3, #8
 800aa48:	623b      	str	r3, [r7, #32]
 800aa4a:	230b      	movs	r3, #11
 800aa4c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800aa4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aa58:	e051      	b.n	800aafe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800aa5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa5c:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa5e:	d914      	bls.n	800aa8a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800aa60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa62:	2100      	movs	r1, #0
 800aa64:	4618      	mov	r0, r3
 800aa66:	f001 fb5f 	bl	800c128 <ff_convert>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800aa6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d004      	beq.n	800aa7e <create_name+0x246>
 800aa74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa76:	3b80      	subs	r3, #128	@ 0x80
 800aa78:	4a23      	ldr	r2, [pc, #140]	@ (800ab08 <create_name+0x2d0>)
 800aa7a:	5cd3      	ldrb	r3, [r2, r3]
 800aa7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800aa7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa82:	f043 0302 	orr.w	r3, r3, #2
 800aa86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800aa8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d007      	beq.n	800aaa0 <create_name+0x268>
 800aa90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa92:	4619      	mov	r1, r3
 800aa94:	481d      	ldr	r0, [pc, #116]	@ (800ab0c <create_name+0x2d4>)
 800aa96:	f7fe fb22 	bl	80090de <chk_chr>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d008      	beq.n	800aab2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800aaa0:	235f      	movs	r3, #95	@ 0x5f
 800aaa2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800aaa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aaa8:	f043 0303 	orr.w	r3, r3, #3
 800aaac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aab0:	e01b      	b.n	800aaea <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800aab2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aab4:	2b40      	cmp	r3, #64	@ 0x40
 800aab6:	d909      	bls.n	800aacc <create_name+0x294>
 800aab8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aaba:	2b5a      	cmp	r3, #90	@ 0x5a
 800aabc:	d806      	bhi.n	800aacc <create_name+0x294>
					b |= 2;
 800aabe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aac2:	f043 0302 	orr.w	r3, r3, #2
 800aac6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aaca:	e00e      	b.n	800aaea <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800aacc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aace:	2b60      	cmp	r3, #96	@ 0x60
 800aad0:	d90b      	bls.n	800aaea <create_name+0x2b2>
 800aad2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aad4:	2b7a      	cmp	r3, #122	@ 0x7a
 800aad6:	d808      	bhi.n	800aaea <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800aad8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aadc:	f043 0301 	orr.w	r3, r3, #1
 800aae0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aae4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aae6:	3b20      	subs	r3, #32
 800aae8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	623a      	str	r2, [r7, #32]
 800aaf0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aaf2:	b2d1      	uxtb	r1, r2
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	460a      	mov	r2, r1
 800aafa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800aafe:	e763      	b.n	800a9c8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ab00:	bf00      	nop
 800ab02:	e006      	b.n	800ab12 <create_name+0x2da>
 800ab04:	0800d52c 	.word	0x0800d52c
 800ab08:	0800d5bc 	.word	0x0800d5bc
 800ab0c:	0800d538 	.word	0x0800d538
			if (si > di) break;			/* No extension */
 800ab10:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ab18:	2be5      	cmp	r3, #229	@ 0xe5
 800ab1a:	d103      	bne.n	800ab24 <create_name+0x2ec>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2205      	movs	r2, #5
 800ab20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	2b08      	cmp	r3, #8
 800ab28:	d104      	bne.n	800ab34 <create_name+0x2fc>
 800ab2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ab34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab38:	f003 030c 	and.w	r3, r3, #12
 800ab3c:	2b0c      	cmp	r3, #12
 800ab3e:	d005      	beq.n	800ab4c <create_name+0x314>
 800ab40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab44:	f003 0303 	and.w	r3, r3, #3
 800ab48:	2b03      	cmp	r3, #3
 800ab4a:	d105      	bne.n	800ab58 <create_name+0x320>
 800ab4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab50:	f043 0302 	orr.w	r3, r3, #2
 800ab54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ab58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab5c:	f003 0302 	and.w	r3, r3, #2
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d117      	bne.n	800ab94 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ab64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab68:	f003 0303 	and.w	r3, r3, #3
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d105      	bne.n	800ab7c <create_name+0x344>
 800ab70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab74:	f043 0310 	orr.w	r3, r3, #16
 800ab78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ab7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab80:	f003 030c 	and.w	r3, r3, #12
 800ab84:	2b04      	cmp	r3, #4
 800ab86:	d105      	bne.n	800ab94 <create_name+0x35c>
 800ab88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab8c:	f043 0308 	orr.w	r3, r3, #8
 800ab90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ab9a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800ab9e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3728      	adds	r7, #40	@ 0x28
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800abbc:	e002      	b.n	800abc4 <follow_path+0x1c>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	3301      	adds	r3, #1
 800abc2:	603b      	str	r3, [r7, #0]
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	2b2f      	cmp	r3, #47	@ 0x2f
 800abca:	d0f8      	beq.n	800abbe <follow_path+0x16>
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	2b5c      	cmp	r3, #92	@ 0x5c
 800abd2:	d0f4      	beq.n	800abbe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	2200      	movs	r2, #0
 800abd8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	2b1f      	cmp	r3, #31
 800abe0:	d80a      	bhi.n	800abf8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2280      	movs	r2, #128	@ 0x80
 800abe6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800abea:	2100      	movs	r1, #0
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f7ff f820 	bl	8009c32 <dir_sdi>
 800abf2:	4603      	mov	r3, r0
 800abf4:	75fb      	strb	r3, [r7, #23]
 800abf6:	e048      	b.n	800ac8a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800abf8:	463b      	mov	r3, r7
 800abfa:	4619      	mov	r1, r3
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f7ff fe1b 	bl	800a838 <create_name>
 800ac02:	4603      	mov	r3, r0
 800ac04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ac06:	7dfb      	ldrb	r3, [r7, #23]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d139      	bne.n	800ac80 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7ff fb7c 	bl	800a30a <dir_find>
 800ac12:	4603      	mov	r3, r0
 800ac14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ac1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ac1e:	7dfb      	ldrb	r3, [r7, #23]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00a      	beq.n	800ac3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ac24:	7dfb      	ldrb	r3, [r7, #23]
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	d12c      	bne.n	800ac84 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ac2a:	7afb      	ldrb	r3, [r7, #11]
 800ac2c:	f003 0304 	and.w	r3, r3, #4
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d127      	bne.n	800ac84 <follow_path+0xdc>
 800ac34:	2305      	movs	r3, #5
 800ac36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ac38:	e024      	b.n	800ac84 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac3a:	7afb      	ldrb	r3, [r7, #11]
 800ac3c:	f003 0304 	and.w	r3, r3, #4
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d121      	bne.n	800ac88 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	799b      	ldrb	r3, [r3, #6]
 800ac48:	f003 0310 	and.w	r3, r3, #16
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d102      	bne.n	800ac56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ac50:	2305      	movs	r3, #5
 800ac52:	75fb      	strb	r3, [r7, #23]
 800ac54:	e019      	b.n	800ac8a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	695b      	ldr	r3, [r3, #20]
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	8992      	ldrh	r2, [r2, #12]
 800ac64:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac68:	fb00 f202 	mul.w	r2, r0, r2
 800ac6c:	1a9b      	subs	r3, r3, r2
 800ac6e:	440b      	add	r3, r1
 800ac70:	4619      	mov	r1, r3
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f7ff f983 	bl	8009f7e <ld_clust>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac7e:	e7bb      	b.n	800abf8 <follow_path+0x50>
			if (res != FR_OK) break;
 800ac80:	bf00      	nop
 800ac82:	e002      	b.n	800ac8a <follow_path+0xe2>
				break;
 800ac84:	bf00      	nop
 800ac86:	e000      	b.n	800ac8a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac88:	bf00      	nop
			}
		}
	}

	return res;
 800ac8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3718      	adds	r7, #24
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ac9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aca0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d031      	beq.n	800ad0e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	617b      	str	r3, [r7, #20]
 800acb0:	e002      	b.n	800acb8 <get_ldnumber+0x24>
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	3301      	adds	r3, #1
 800acb6:	617b      	str	r3, [r7, #20]
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	2b1f      	cmp	r3, #31
 800acbe:	d903      	bls.n	800acc8 <get_ldnumber+0x34>
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	2b3a      	cmp	r3, #58	@ 0x3a
 800acc6:	d1f4      	bne.n	800acb2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	2b3a      	cmp	r3, #58	@ 0x3a
 800acce:	d11c      	bne.n	800ad0a <get_ldnumber+0x76>
			tp = *path;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	1c5a      	adds	r2, r3, #1
 800acda:	60fa      	str	r2, [r7, #12]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	3b30      	subs	r3, #48	@ 0x30
 800ace0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	2b09      	cmp	r3, #9
 800ace6:	d80e      	bhi.n	800ad06 <get_ldnumber+0x72>
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	429a      	cmp	r2, r3
 800acee:	d10a      	bne.n	800ad06 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d107      	bne.n	800ad06 <get_ldnumber+0x72>
					vol = (int)i;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	3301      	adds	r3, #1
 800acfe:	617b      	str	r3, [r7, #20]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	e002      	b.n	800ad10 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ad0e:	693b      	ldr	r3, [r7, #16]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	371c      	adds	r7, #28
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	70da      	strb	r2, [r3, #3]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad32:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7fe fb9c 	bl	8009474 <move_window>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <check_fs+0x2a>
 800ad42:	2304      	movs	r3, #4
 800ad44:	e038      	b.n	800adb8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	3338      	adds	r3, #56	@ 0x38
 800ad4a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe f8e0 	bl	8008f14 <ld_word>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d001      	beq.n	800ad64 <check_fs+0x48>
 800ad60:	2303      	movs	r3, #3
 800ad62:	e029      	b.n	800adb8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ad6a:	2be9      	cmp	r3, #233	@ 0xe9
 800ad6c:	d009      	beq.n	800ad82 <check_fs+0x66>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ad74:	2beb      	cmp	r3, #235	@ 0xeb
 800ad76:	d11e      	bne.n	800adb6 <check_fs+0x9a>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ad7e:	2b90      	cmp	r3, #144	@ 0x90
 800ad80:	d119      	bne.n	800adb6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	3338      	adds	r3, #56	@ 0x38
 800ad86:	3336      	adds	r3, #54	@ 0x36
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fe f8db 	bl	8008f44 <ld_dword>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ad94:	4a0a      	ldr	r2, [pc, #40]	@ (800adc0 <check_fs+0xa4>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d101      	bne.n	800ad9e <check_fs+0x82>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e00c      	b.n	800adb8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	3338      	adds	r3, #56	@ 0x38
 800ada2:	3352      	adds	r3, #82	@ 0x52
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fe f8cd 	bl	8008f44 <ld_dword>
 800adaa:	4603      	mov	r3, r0
 800adac:	4a05      	ldr	r2, [pc, #20]	@ (800adc4 <check_fs+0xa8>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d101      	bne.n	800adb6 <check_fs+0x9a>
 800adb2:	2300      	movs	r3, #0
 800adb4:	e000      	b.n	800adb8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800adb6:	2302      	movs	r3, #2
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	00544146 	.word	0x00544146
 800adc4:	33544146 	.word	0x33544146

0800adc8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b096      	sub	sp, #88	@ 0x58
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2200      	movs	r2, #0
 800adda:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f7ff ff59 	bl	800ac94 <get_ldnumber>
 800ade2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ade4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	da01      	bge.n	800adee <find_volume+0x26>
 800adea:	230b      	movs	r3, #11
 800adec:	e265      	b.n	800b2ba <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800adee:	4a9f      	ldr	r2, [pc, #636]	@ (800b06c <find_volume+0x2a4>)
 800adf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adf6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800adf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d101      	bne.n	800ae02 <find_volume+0x3a>
 800adfe:	230c      	movs	r3, #12
 800ae00:	e25b      	b.n	800b2ba <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae06:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ae08:	79fb      	ldrb	r3, [r7, #7]
 800ae0a:	f023 0301 	bic.w	r3, r3, #1
 800ae0e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ae10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d01a      	beq.n	800ae4e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ae18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1a:	785b      	ldrb	r3, [r3, #1]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fd ffdb 	bl	8008dd8 <disk_status>
 800ae22:	4603      	mov	r3, r0
 800ae24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ae28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ae2c:	f003 0301 	and.w	r3, r3, #1
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10c      	bne.n	800ae4e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ae34:	79fb      	ldrb	r3, [r7, #7]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d007      	beq.n	800ae4a <find_volume+0x82>
 800ae3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ae3e:	f003 0304 	and.w	r3, r3, #4
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ae46:	230a      	movs	r3, #10
 800ae48:	e237      	b.n	800b2ba <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e235      	b.n	800b2ba <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ae4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae50:	2200      	movs	r2, #0
 800ae52:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ae54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ae5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5e:	785b      	ldrb	r3, [r3, #1]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7fd ffd3 	bl	8008e0c <disk_initialize>
 800ae66:	4603      	mov	r3, r0
 800ae68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ae6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ae70:	f003 0301 	and.w	r3, r3, #1
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ae78:	2303      	movs	r3, #3
 800ae7a:	e21e      	b.n	800b2ba <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ae7c:	79fb      	ldrb	r3, [r7, #7]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d007      	beq.n	800ae92 <find_volume+0xca>
 800ae82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ae86:	f003 0304 	and.w	r3, r3, #4
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ae8e:	230a      	movs	r3, #10
 800ae90:	e213      	b.n	800b2ba <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ae92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae94:	7858      	ldrb	r0, [r3, #1]
 800ae96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae98:	330c      	adds	r3, #12
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	2102      	movs	r1, #2
 800ae9e:	f7fe f81b 	bl	8008ed8 <disk_ioctl>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <find_volume+0xe4>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e206      	b.n	800b2ba <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800aeac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeae:	899b      	ldrh	r3, [r3, #12]
 800aeb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeb4:	d80d      	bhi.n	800aed2 <find_volume+0x10a>
 800aeb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb8:	899b      	ldrh	r3, [r3, #12]
 800aeba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aebe:	d308      	bcc.n	800aed2 <find_volume+0x10a>
 800aec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec2:	899b      	ldrh	r3, [r3, #12]
 800aec4:	461a      	mov	r2, r3
 800aec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec8:	899b      	ldrh	r3, [r3, #12]
 800aeca:	3b01      	subs	r3, #1
 800aecc:	4013      	ands	r3, r2
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d001      	beq.n	800aed6 <find_volume+0x10e>
 800aed2:	2301      	movs	r3, #1
 800aed4:	e1f1      	b.n	800b2ba <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800aed6:	2300      	movs	r3, #0
 800aed8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800aeda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aedc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aede:	f7ff ff1d 	bl	800ad1c <check_fs>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800aee8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d149      	bne.n	800af84 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aef0:	2300      	movs	r3, #0
 800aef2:	643b      	str	r3, [r7, #64]	@ 0x40
 800aef4:	e01e      	b.n	800af34 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800aef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800aefc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aefe:	011b      	lsls	r3, r3, #4
 800af00:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800af04:	4413      	add	r3, r2
 800af06:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0a:	3304      	adds	r3, #4
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d006      	beq.n	800af20 <find_volume+0x158>
 800af12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af14:	3308      	adds	r3, #8
 800af16:	4618      	mov	r0, r3
 800af18:	f7fe f814 	bl	8008f44 <ld_dword>
 800af1c:	4602      	mov	r2, r0
 800af1e:	e000      	b.n	800af22 <find_volume+0x15a>
 800af20:	2200      	movs	r2, #0
 800af22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	3358      	adds	r3, #88	@ 0x58
 800af28:	443b      	add	r3, r7
 800af2a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af30:	3301      	adds	r3, #1
 800af32:	643b      	str	r3, [r7, #64]	@ 0x40
 800af34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af36:	2b03      	cmp	r3, #3
 800af38:	d9dd      	bls.n	800aef6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800af3a:	2300      	movs	r3, #0
 800af3c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800af3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <find_volume+0x182>
 800af44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af46:	3b01      	subs	r3, #1
 800af48:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800af4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	3358      	adds	r3, #88	@ 0x58
 800af50:	443b      	add	r3, r7
 800af52:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800af56:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800af58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d005      	beq.n	800af6a <find_volume+0x1a2>
 800af5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800af60:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800af62:	f7ff fedb 	bl	800ad1c <check_fs>
 800af66:	4603      	mov	r3, r0
 800af68:	e000      	b.n	800af6c <find_volume+0x1a4>
 800af6a:	2303      	movs	r3, #3
 800af6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800af70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800af74:	2b01      	cmp	r3, #1
 800af76:	d905      	bls.n	800af84 <find_volume+0x1bc>
 800af78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af7a:	3301      	adds	r3, #1
 800af7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800af7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af80:	2b03      	cmp	r3, #3
 800af82:	d9e2      	bls.n	800af4a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800af84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800af88:	2b04      	cmp	r3, #4
 800af8a:	d101      	bne.n	800af90 <find_volume+0x1c8>
 800af8c:	2301      	movs	r3, #1
 800af8e:	e194      	b.n	800b2ba <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800af90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800af94:	2b01      	cmp	r3, #1
 800af96:	d901      	bls.n	800af9c <find_volume+0x1d4>
 800af98:	230d      	movs	r3, #13
 800af9a:	e18e      	b.n	800b2ba <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800af9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9e:	3338      	adds	r3, #56	@ 0x38
 800afa0:	330b      	adds	r3, #11
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fd ffb6 	bl	8008f14 <ld_word>
 800afa8:	4603      	mov	r3, r0
 800afaa:	461a      	mov	r2, r3
 800afac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afae:	899b      	ldrh	r3, [r3, #12]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d001      	beq.n	800afb8 <find_volume+0x1f0>
 800afb4:	230d      	movs	r3, #13
 800afb6:	e180      	b.n	800b2ba <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800afb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afba:	3338      	adds	r3, #56	@ 0x38
 800afbc:	3316      	adds	r3, #22
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fd ffa8 	bl	8008f14 <ld_word>
 800afc4:	4603      	mov	r3, r0
 800afc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800afc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d106      	bne.n	800afdc <find_volume+0x214>
 800afce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd0:	3338      	adds	r3, #56	@ 0x38
 800afd2:	3324      	adds	r3, #36	@ 0x24
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7fd ffb5 	bl	8008f44 <ld_dword>
 800afda:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800afdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800afe0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800afe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800afe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800afec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afee:	789b      	ldrb	r3, [r3, #2]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d005      	beq.n	800b000 <find_volume+0x238>
 800aff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff6:	789b      	ldrb	r3, [r3, #2]
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d001      	beq.n	800b000 <find_volume+0x238>
 800affc:	230d      	movs	r3, #13
 800affe:	e15c      	b.n	800b2ba <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b002:	789b      	ldrb	r3, [r3, #2]
 800b004:	461a      	mov	r2, r3
 800b006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b008:	fb02 f303 	mul.w	r3, r2, r3
 800b00c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b010:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b014:	461a      	mov	r2, r3
 800b016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b018:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b01c:	895b      	ldrh	r3, [r3, #10]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d008      	beq.n	800b034 <find_volume+0x26c>
 800b022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b024:	895b      	ldrh	r3, [r3, #10]
 800b026:	461a      	mov	r2, r3
 800b028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b02a:	895b      	ldrh	r3, [r3, #10]
 800b02c:	3b01      	subs	r3, #1
 800b02e:	4013      	ands	r3, r2
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <find_volume+0x270>
 800b034:	230d      	movs	r3, #13
 800b036:	e140      	b.n	800b2ba <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03a:	3338      	adds	r3, #56	@ 0x38
 800b03c:	3311      	adds	r3, #17
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fd ff68 	bl	8008f14 <ld_word>
 800b044:	4603      	mov	r3, r0
 800b046:	461a      	mov	r2, r3
 800b048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04e:	891b      	ldrh	r3, [r3, #8]
 800b050:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b052:	8992      	ldrh	r2, [r2, #12]
 800b054:	0952      	lsrs	r2, r2, #5
 800b056:	b292      	uxth	r2, r2
 800b058:	fbb3 f1f2 	udiv	r1, r3, r2
 800b05c:	fb01 f202 	mul.w	r2, r1, r2
 800b060:	1a9b      	subs	r3, r3, r2
 800b062:	b29b      	uxth	r3, r3
 800b064:	2b00      	cmp	r3, #0
 800b066:	d003      	beq.n	800b070 <find_volume+0x2a8>
 800b068:	230d      	movs	r3, #13
 800b06a:	e126      	b.n	800b2ba <find_volume+0x4f2>
 800b06c:	20005cf8 	.word	0x20005cf8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b072:	3338      	adds	r3, #56	@ 0x38
 800b074:	3313      	adds	r3, #19
 800b076:	4618      	mov	r0, r3
 800b078:	f7fd ff4c 	bl	8008f14 <ld_word>
 800b07c:	4603      	mov	r3, r0
 800b07e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b082:	2b00      	cmp	r3, #0
 800b084:	d106      	bne.n	800b094 <find_volume+0x2cc>
 800b086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b088:	3338      	adds	r3, #56	@ 0x38
 800b08a:	3320      	adds	r3, #32
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fd ff59 	bl	8008f44 <ld_dword>
 800b092:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b096:	3338      	adds	r3, #56	@ 0x38
 800b098:	330e      	adds	r3, #14
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fd ff3a 	bl	8008f14 <ld_word>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b0a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d101      	bne.n	800b0ae <find_volume+0x2e6>
 800b0aa:	230d      	movs	r3, #13
 800b0ac:	e105      	b.n	800b2ba <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b0ae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b0b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0b2:	4413      	add	r3, r2
 800b0b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0b6:	8911      	ldrh	r1, [r2, #8]
 800b0b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0ba:	8992      	ldrh	r2, [r2, #12]
 800b0bc:	0952      	lsrs	r2, r2, #5
 800b0be:	b292      	uxth	r2, r2
 800b0c0:	fbb1 f2f2 	udiv	r2, r1, r2
 800b0c4:	b292      	uxth	r2, r2
 800b0c6:	4413      	add	r3, r2
 800b0c8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b0ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d201      	bcs.n	800b0d6 <find_volume+0x30e>
 800b0d2:	230d      	movs	r3, #13
 800b0d4:	e0f1      	b.n	800b2ba <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b0d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0de:	8952      	ldrh	r2, [r2, #10]
 800b0e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0e4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <find_volume+0x328>
 800b0ec:	230d      	movs	r3, #13
 800b0ee:	e0e4      	b.n	800b2ba <find_volume+0x4f2>
		fmt = FS_FAT32;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d802      	bhi.n	800b106 <find_volume+0x33e>
 800b100:	2302      	movs	r3, #2
 800b102:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b108:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d802      	bhi.n	800b116 <find_volume+0x34e>
 800b110:	2301      	movs	r3, #1
 800b112:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b118:	1c9a      	adds	r2, r3, #2
 800b11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b120:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b122:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b124:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b128:	441a      	add	r2, r3
 800b12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b12c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b12e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b132:	441a      	add	r2, r3
 800b134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b136:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800b138:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	d11e      	bne.n	800b17e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b142:	3338      	adds	r3, #56	@ 0x38
 800b144:	332a      	adds	r3, #42	@ 0x2a
 800b146:	4618      	mov	r0, r3
 800b148:	f7fd fee4 	bl	8008f14 <ld_word>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <find_volume+0x38e>
 800b152:	230d      	movs	r3, #13
 800b154:	e0b1      	b.n	800b2ba <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b158:	891b      	ldrh	r3, [r3, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <find_volume+0x39a>
 800b15e:	230d      	movs	r3, #13
 800b160:	e0ab      	b.n	800b2ba <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b164:	3338      	adds	r3, #56	@ 0x38
 800b166:	332c      	adds	r3, #44	@ 0x2c
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fd feeb 	bl	8008f44 <ld_dword>
 800b16e:	4602      	mov	r2, r0
 800b170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b172:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b176:	69db      	ldr	r3, [r3, #28]
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b17c:	e01f      	b.n	800b1be <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b180:	891b      	ldrh	r3, [r3, #8]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <find_volume+0x3c2>
 800b186:	230d      	movs	r3, #13
 800b188:	e097      	b.n	800b2ba <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b18e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b190:	441a      	add	r2, r3
 800b192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b194:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b196:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d103      	bne.n	800b1a6 <find_volume+0x3de>
 800b19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a0:	69db      	ldr	r3, [r3, #28]
 800b1a2:	005b      	lsls	r3, r3, #1
 800b1a4:	e00a      	b.n	800b1bc <find_volume+0x3f4>
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a8:	69da      	ldr	r2, [r3, #28]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	005b      	lsls	r3, r3, #1
 800b1ae:	4413      	add	r3, r2
 800b1b0:	085a      	lsrs	r2, r3, #1
 800b1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b4:	69db      	ldr	r3, [r3, #28]
 800b1b6:	f003 0301 	and.w	r3, r3, #1
 800b1ba:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b1bc:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c0:	6a1a      	ldr	r2, [r3, #32]
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c4:	899b      	ldrh	r3, [r3, #12]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1ca:	440b      	add	r3, r1
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1d0:	8989      	ldrh	r1, [r1, #12]
 800b1d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d201      	bcs.n	800b1de <find_volume+0x416>
 800b1da:	230d      	movs	r3, #13
 800b1dc:	e06d      	b.n	800b2ba <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e4:	619a      	str	r2, [r3, #24]
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e8:	699a      	ldr	r2, [r3, #24]
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ec:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f0:	2280      	movs	r2, #128	@ 0x80
 800b1f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b1f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b1f8:	2b03      	cmp	r3, #3
 800b1fa:	d149      	bne.n	800b290 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fe:	3338      	adds	r3, #56	@ 0x38
 800b200:	3330      	adds	r3, #48	@ 0x30
 800b202:	4618      	mov	r0, r3
 800b204:	f7fd fe86 	bl	8008f14 <ld_word>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d140      	bne.n	800b290 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b20e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b210:	3301      	adds	r3, #1
 800b212:	4619      	mov	r1, r3
 800b214:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b216:	f7fe f92d 	bl	8009474 <move_window>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d137      	bne.n	800b290 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b222:	2200      	movs	r2, #0
 800b224:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b228:	3338      	adds	r3, #56	@ 0x38
 800b22a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fd fe70 	bl	8008f14 <ld_word>
 800b234:	4603      	mov	r3, r0
 800b236:	461a      	mov	r2, r3
 800b238:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d127      	bne.n	800b290 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b242:	3338      	adds	r3, #56	@ 0x38
 800b244:	4618      	mov	r0, r3
 800b246:	f7fd fe7d 	bl	8008f44 <ld_dword>
 800b24a:	4603      	mov	r3, r0
 800b24c:	4a1d      	ldr	r2, [pc, #116]	@ (800b2c4 <find_volume+0x4fc>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d11e      	bne.n	800b290 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b254:	3338      	adds	r3, #56	@ 0x38
 800b256:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fd fe72 	bl	8008f44 <ld_dword>
 800b260:	4603      	mov	r3, r0
 800b262:	4a19      	ldr	r2, [pc, #100]	@ (800b2c8 <find_volume+0x500>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d113      	bne.n	800b290 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b26a:	3338      	adds	r3, #56	@ 0x38
 800b26c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b270:	4618      	mov	r0, r3
 800b272:	f7fd fe67 	bl	8008f44 <ld_dword>
 800b276:	4602      	mov	r2, r0
 800b278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27e:	3338      	adds	r3, #56	@ 0x38
 800b280:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b284:	4618      	mov	r0, r3
 800b286:	f7fd fe5d 	bl	8008f44 <ld_dword>
 800b28a:	4602      	mov	r2, r0
 800b28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b292:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b296:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b298:	4b0c      	ldr	r3, [pc, #48]	@ (800b2cc <find_volume+0x504>)
 800b29a:	881b      	ldrh	r3, [r3, #0]
 800b29c:	3301      	adds	r3, #1
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b2cc <find_volume+0x504>)
 800b2a2:	801a      	strh	r2, [r3, #0]
 800b2a4:	4b09      	ldr	r3, [pc, #36]	@ (800b2cc <find_volume+0x504>)
 800b2a6:	881a      	ldrh	r2, [r3, #0]
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2aa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ae:	4a08      	ldr	r2, [pc, #32]	@ (800b2d0 <find_volume+0x508>)
 800b2b0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b2b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b2b4:	f7fe f876 	bl	80093a4 <clear_lock>
#endif
	return FR_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3758      	adds	r7, #88	@ 0x58
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	41615252 	.word	0x41615252
 800b2c8:	61417272 	.word	0x61417272
 800b2cc:	20005cfc 	.word	0x20005cfc
 800b2d0:	20005d20 	.word	0x20005d20

0800b2d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b2de:	2309      	movs	r3, #9
 800b2e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d01c      	beq.n	800b322 <validate+0x4e>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d018      	beq.n	800b322 <validate+0x4e>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d013      	beq.n	800b322 <validate+0x4e>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	889a      	ldrh	r2, [r3, #4]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	88db      	ldrh	r3, [r3, #6]
 800b304:	429a      	cmp	r2, r3
 800b306:	d10c      	bne.n	800b322 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	785b      	ldrb	r3, [r3, #1]
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fd fd62 	bl	8008dd8 <disk_status>
 800b314:	4603      	mov	r3, r0
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <validate+0x4e>
			res = FR_OK;
 800b31e:	2300      	movs	r3, #0
 800b320:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b322:	7bfb      	ldrb	r3, [r7, #15]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d102      	bne.n	800b32e <validate+0x5a>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	e000      	b.n	800b330 <validate+0x5c>
 800b32e:	2300      	movs	r3, #0
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	6013      	str	r3, [r2, #0]
	return res;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
	...

0800b340 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b088      	sub	sp, #32
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	4613      	mov	r3, r2
 800b34c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b352:	f107 0310 	add.w	r3, r7, #16
 800b356:	4618      	mov	r0, r3
 800b358:	f7ff fc9c 	bl	800ac94 <get_ldnumber>
 800b35c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	2b00      	cmp	r3, #0
 800b362:	da01      	bge.n	800b368 <f_mount+0x28>
 800b364:	230b      	movs	r3, #11
 800b366:	e02b      	b.n	800b3c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b368:	4a17      	ldr	r2, [pc, #92]	@ (800b3c8 <f_mount+0x88>)
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b370:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d005      	beq.n	800b384 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b378:	69b8      	ldr	r0, [r7, #24]
 800b37a:	f7fe f813 	bl	80093a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	2200      	movs	r2, #0
 800b382:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d002      	beq.n	800b390 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	490d      	ldr	r1, [pc, #52]	@ (800b3c8 <f_mount+0x88>)
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d002      	beq.n	800b3a6 <f_mount+0x66>
 800b3a0:	79fb      	ldrb	r3, [r7, #7]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d001      	beq.n	800b3aa <f_mount+0x6a>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	e00a      	b.n	800b3c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b3aa:	f107 010c 	add.w	r1, r7, #12
 800b3ae:	f107 0308 	add.w	r3, r7, #8
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7ff fd07 	bl	800adc8 <find_volume>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b3be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3720      	adds	r7, #32
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	20005cf8 	.word	0x20005cf8

0800b3cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b09a      	sub	sp, #104	@ 0x68
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d101      	bne.n	800b3e4 <f_open+0x18>
 800b3e0:	2309      	movs	r3, #9
 800b3e2:	e1b7      	b.n	800b754 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b3e4:	79fb      	ldrb	r3, [r7, #7]
 800b3e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b3ec:	79fa      	ldrb	r2, [r7, #7]
 800b3ee:	f107 0114 	add.w	r1, r7, #20
 800b3f2:	f107 0308 	add.w	r3, r7, #8
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7ff fce6 	bl	800adc8 <find_volume>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800b402:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b406:	2b00      	cmp	r3, #0
 800b408:	f040 819b 	bne.w	800b742 <f_open+0x376>
		dj.obj.fs = fs;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	f107 0318 	add.w	r3, r7, #24
 800b416:	4611      	mov	r1, r2
 800b418:	4618      	mov	r0, r3
 800b41a:	f7ff fbc5 	bl	800aba8 <follow_path>
 800b41e:	4603      	mov	r3, r0
 800b420:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b424:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d118      	bne.n	800b45e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b42c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b430:	b25b      	sxtb	r3, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	da03      	bge.n	800b43e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b436:	2306      	movs	r3, #6
 800b438:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b43c:	e00f      	b.n	800b45e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b43e:	79fb      	ldrb	r3, [r7, #7]
 800b440:	2b01      	cmp	r3, #1
 800b442:	bf8c      	ite	hi
 800b444:	2301      	movhi	r3, #1
 800b446:	2300      	movls	r3, #0
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	461a      	mov	r2, r3
 800b44c:	f107 0318 	add.w	r3, r7, #24
 800b450:	4611      	mov	r1, r2
 800b452:	4618      	mov	r0, r3
 800b454:	f7fd fe5e 	bl	8009114 <chk_lock>
 800b458:	4603      	mov	r3, r0
 800b45a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b45e:	79fb      	ldrb	r3, [r7, #7]
 800b460:	f003 031c 	and.w	r3, r3, #28
 800b464:	2b00      	cmp	r3, #0
 800b466:	d07f      	beq.n	800b568 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b468:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d017      	beq.n	800b4a0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b470:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b474:	2b04      	cmp	r3, #4
 800b476:	d10e      	bne.n	800b496 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b478:	f7fd fea8 	bl	80091cc <enq_lock>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d006      	beq.n	800b490 <f_open+0xc4>
 800b482:	f107 0318 	add.w	r3, r7, #24
 800b486:	4618      	mov	r0, r3
 800b488:	f7ff f800 	bl	800a48c <dir_register>
 800b48c:	4603      	mov	r3, r0
 800b48e:	e000      	b.n	800b492 <f_open+0xc6>
 800b490:	2312      	movs	r3, #18
 800b492:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b496:	79fb      	ldrb	r3, [r7, #7]
 800b498:	f043 0308 	orr.w	r3, r3, #8
 800b49c:	71fb      	strb	r3, [r7, #7]
 800b49e:	e010      	b.n	800b4c2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b4a0:	7fbb      	ldrb	r3, [r7, #30]
 800b4a2:	f003 0311 	and.w	r3, r3, #17
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d003      	beq.n	800b4b2 <f_open+0xe6>
					res = FR_DENIED;
 800b4aa:	2307      	movs	r3, #7
 800b4ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b4b0:	e007      	b.n	800b4c2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b4b2:	79fb      	ldrb	r3, [r7, #7]
 800b4b4:	f003 0304 	and.w	r3, r3, #4
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <f_open+0xf6>
 800b4bc:	2308      	movs	r3, #8
 800b4be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b4c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d168      	bne.n	800b59c <f_open+0x1d0>
 800b4ca:	79fb      	ldrb	r3, [r7, #7]
 800b4cc:	f003 0308 	and.w	r3, r3, #8
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d063      	beq.n	800b59c <f_open+0x1d0>
				dw = GET_FATTIME();
 800b4d4:	f7fc ff56 	bl	8008384 <get_fattime>
 800b4d8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4dc:	330e      	adds	r3, #14
 800b4de:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7fd fd6d 	bl	8008fc0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e8:	3316      	adds	r3, #22
 800b4ea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fd fd67 	bl	8008fc0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f4:	330b      	adds	r3, #11
 800b4f6:	2220      	movs	r2, #32
 800b4f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4fe:	4611      	mov	r1, r2
 800b500:	4618      	mov	r0, r3
 800b502:	f7fe fd3c 	bl	8009f7e <ld_clust>
 800b506:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b50c:	2200      	movs	r2, #0
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fe fd54 	bl	8009fbc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b516:	331c      	adds	r3, #28
 800b518:	2100      	movs	r1, #0
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fd fd50 	bl	8008fc0 <st_dword>
					fs->wflag = 1;
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	2201      	movs	r2, #1
 800b524:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d037      	beq.n	800b59c <f_open+0x1d0>
						dw = fs->winsect;
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b530:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b532:	f107 0318 	add.w	r3, r7, #24
 800b536:	2200      	movs	r2, #0
 800b538:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fe fa44 	bl	80099c8 <remove_chain>
 800b540:	4603      	mov	r3, r0
 800b542:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800b546:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d126      	bne.n	800b59c <f_open+0x1d0>
							res = move_window(fs, dw);
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b552:	4618      	mov	r0, r3
 800b554:	f7fd ff8e 	bl	8009474 <move_window>
 800b558:	4603      	mov	r3, r0
 800b55a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b562:	3a01      	subs	r2, #1
 800b564:	615a      	str	r2, [r3, #20]
 800b566:	e019      	b.n	800b59c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b568:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d115      	bne.n	800b59c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b570:	7fbb      	ldrb	r3, [r7, #30]
 800b572:	f003 0310 	and.w	r3, r3, #16
 800b576:	2b00      	cmp	r3, #0
 800b578:	d003      	beq.n	800b582 <f_open+0x1b6>
					res = FR_NO_FILE;
 800b57a:	2304      	movs	r3, #4
 800b57c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b580:	e00c      	b.n	800b59c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b582:	79fb      	ldrb	r3, [r7, #7]
 800b584:	f003 0302 	and.w	r3, r3, #2
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d007      	beq.n	800b59c <f_open+0x1d0>
 800b58c:	7fbb      	ldrb	r3, [r7, #30]
 800b58e:	f003 0301 	and.w	r3, r3, #1
 800b592:	2b00      	cmp	r3, #0
 800b594:	d002      	beq.n	800b59c <f_open+0x1d0>
						res = FR_DENIED;
 800b596:	2307      	movs	r3, #7
 800b598:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b59c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d126      	bne.n	800b5f2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b5a4:	79fb      	ldrb	r3, [r7, #7]
 800b5a6:	f003 0308 	and.w	r3, r3, #8
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b5ae:	79fb      	ldrb	r3, [r7, #7]
 800b5b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b5be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5c4:	79fb      	ldrb	r3, [r7, #7]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	bf8c      	ite	hi
 800b5ca:	2301      	movhi	r3, #1
 800b5cc:	2300      	movls	r3, #0
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	f107 0318 	add.w	r3, r7, #24
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fd fe19 	bl	8009210 <inc_lock>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d102      	bne.n	800b5f2 <f_open+0x226>
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b5f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f040 80a3 	bne.w	800b742 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b600:	4611      	mov	r1, r2
 800b602:	4618      	mov	r0, r3
 800b604:	f7fe fcbb 	bl	8009f7e <ld_clust>
 800b608:	4602      	mov	r2, r0
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b610:	331c      	adds	r3, #28
 800b612:	4618      	mov	r0, r3
 800b614:	f7fd fc96 	bl	8008f44 <ld_dword>
 800b618:	4602      	mov	r2, r0
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2200      	movs	r2, #0
 800b622:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b624:	697a      	ldr	r2, [r7, #20]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	88da      	ldrh	r2, [r3, #6]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	79fa      	ldrb	r2, [r7, #7]
 800b636:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2200      	movs	r2, #0
 800b63c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2200      	movs	r2, #0
 800b648:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	3330      	adds	r3, #48	@ 0x30
 800b64e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b652:	2100      	movs	r1, #0
 800b654:	4618      	mov	r0, r3
 800b656:	f7fd fd00 	bl	800905a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b65a:	79fb      	ldrb	r3, [r7, #7]
 800b65c:	f003 0320 	and.w	r3, r3, #32
 800b660:	2b00      	cmp	r3, #0
 800b662:	d06e      	beq.n	800b742 <f_open+0x376>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d06a      	beq.n	800b742 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	68da      	ldr	r2, [r3, #12]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	895b      	ldrh	r3, [r3, #10]
 800b678:	461a      	mov	r2, r3
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	899b      	ldrh	r3, [r3, #12]
 800b67e:	fb02 f303 	mul.w	r3, r2, r3
 800b682:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b690:	e016      	b.n	800b6c0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b696:	4618      	mov	r0, r3
 800b698:	f7fd ffa9 	bl	80095ee <get_fat>
 800b69c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b69e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d802      	bhi.n	800b6aa <f_open+0x2de>
 800b6a4:	2302      	movs	r3, #2
 800b6a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b6aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b0:	d102      	bne.n	800b6b8 <f_open+0x2ec>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b6b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b6ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b6c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d103      	bne.n	800b6d0 <f_open+0x304>
 800b6c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b6ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d8e0      	bhi.n	800b692 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b6d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b6d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d131      	bne.n	800b742 <f_open+0x376>
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	899b      	ldrh	r3, [r3, #12]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6ea:	fb01 f202 	mul.w	r2, r1, r2
 800b6ee:	1a9b      	subs	r3, r3, r2
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d026      	beq.n	800b742 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fd ff59 	bl	80095b0 <clust2sect>
 800b6fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800b700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b702:	2b00      	cmp	r3, #0
 800b704:	d103      	bne.n	800b70e <f_open+0x342>
						res = FR_INT_ERR;
 800b706:	2302      	movs	r3, #2
 800b708:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b70c:	e019      	b.n	800b742 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	899b      	ldrh	r3, [r3, #12]
 800b712:	461a      	mov	r2, r3
 800b714:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b716:	fbb3 f2f2 	udiv	r2, r3, r2
 800b71a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b71c:	441a      	add	r2, r3
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	7858      	ldrb	r0, [r3, #1]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6a1a      	ldr	r2, [r3, #32]
 800b730:	2301      	movs	r3, #1
 800b732:	f7fd fb91 	bl	8008e58 <disk_read>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <f_open+0x376>
 800b73c:	2301      	movs	r3, #1
 800b73e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b742:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b746:	2b00      	cmp	r3, #0
 800b748:	d002      	beq.n	800b750 <f_open+0x384>
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b750:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800b754:	4618      	mov	r0, r3
 800b756:	3768      	adds	r7, #104	@ 0x68
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b08e      	sub	sp, #56	@ 0x38
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
 800b768:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2200      	movs	r2, #0
 800b772:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f107 0214 	add.w	r2, r7, #20
 800b77a:	4611      	mov	r1, r2
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7ff fda9 	bl	800b2d4 <validate>
 800b782:	4603      	mov	r3, r0
 800b784:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b788:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d107      	bne.n	800b7a0 <f_read+0x44>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	7d5b      	ldrb	r3, [r3, #21]
 800b794:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b798:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <f_read+0x4a>
 800b7a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7a4:	e135      	b.n	800ba12 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	7d1b      	ldrb	r3, [r3, #20]
 800b7aa:	f003 0301 	and.w	r3, r3, #1
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <f_read+0x5a>
 800b7b2:	2307      	movs	r3, #7
 800b7b4:	e12d      	b.n	800ba12 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	68da      	ldr	r2, [r3, #12]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	6a3b      	ldr	r3, [r7, #32]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	f240 811e 	bls.w	800ba08 <f_read+0x2ac>
 800b7cc:	6a3b      	ldr	r3, [r7, #32]
 800b7ce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b7d0:	e11a      	b.n	800ba08 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	699b      	ldr	r3, [r3, #24]
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	8992      	ldrh	r2, [r2, #12]
 800b7da:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7de:	fb01 f202 	mul.w	r2, r1, r2
 800b7e2:	1a9b      	subs	r3, r3, r2
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f040 80d5 	bne.w	800b994 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	699b      	ldr	r3, [r3, #24]
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	8992      	ldrh	r2, [r2, #12]
 800b7f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	8952      	ldrh	r2, [r2, #10]
 800b7fa:	3a01      	subs	r2, #1
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d12f      	bne.n	800b866 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d103      	bne.n	800b816 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	633b      	str	r3, [r7, #48]	@ 0x30
 800b814:	e013      	b.n	800b83e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d007      	beq.n	800b82e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	4619      	mov	r1, r3
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f7fe f9cc 	bl	8009bc2 <clmt_clust>
 800b82a:	6338      	str	r0, [r7, #48]	@ 0x30
 800b82c:	e007      	b.n	800b83e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	69db      	ldr	r3, [r3, #28]
 800b834:	4619      	mov	r1, r3
 800b836:	4610      	mov	r0, r2
 800b838:	f7fd fed9 	bl	80095ee <get_fat>
 800b83c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b840:	2b01      	cmp	r3, #1
 800b842:	d804      	bhi.n	800b84e <f_read+0xf2>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2202      	movs	r2, #2
 800b848:	755a      	strb	r2, [r3, #21]
 800b84a:	2302      	movs	r3, #2
 800b84c:	e0e1      	b.n	800ba12 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b854:	d104      	bne.n	800b860 <f_read+0x104>
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	755a      	strb	r2, [r3, #21]
 800b85c:	2301      	movs	r3, #1
 800b85e:	e0d8      	b.n	800ba12 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b864:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	69db      	ldr	r3, [r3, #28]
 800b86c:	4619      	mov	r1, r3
 800b86e:	4610      	mov	r0, r2
 800b870:	f7fd fe9e 	bl	80095b0 <clust2sect>
 800b874:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d104      	bne.n	800b886 <f_read+0x12a>
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2202      	movs	r2, #2
 800b880:	755a      	strb	r2, [r3, #21]
 800b882:	2302      	movs	r3, #2
 800b884:	e0c5      	b.n	800ba12 <f_read+0x2b6>
			sect += csect;
 800b886:	69ba      	ldr	r2, [r7, #24]
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	4413      	add	r3, r2
 800b88c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	899b      	ldrh	r3, [r3, #12]
 800b892:	461a      	mov	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	fbb3 f3f2 	udiv	r3, r3, r2
 800b89a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d041      	beq.n	800b926 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b8a2:	69fa      	ldr	r2, [r7, #28]
 800b8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a6:	4413      	add	r3, r2
 800b8a8:	697a      	ldr	r2, [r7, #20]
 800b8aa:	8952      	ldrh	r2, [r2, #10]
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d905      	bls.n	800b8bc <f_read+0x160>
					cc = fs->csize - csect;
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	895b      	ldrh	r3, [r3, #10]
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	7858      	ldrb	r0, [r3, #1]
 800b8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c2:	69ba      	ldr	r2, [r7, #24]
 800b8c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b8c6:	f7fd fac7 	bl	8008e58 <disk_read>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d004      	beq.n	800b8da <f_read+0x17e>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	755a      	strb	r2, [r3, #21]
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e09b      	b.n	800ba12 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	7d1b      	ldrb	r3, [r3, #20]
 800b8de:	b25b      	sxtb	r3, r3
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	da18      	bge.n	800b916 <f_read+0x1ba>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6a1a      	ldr	r2, [r3, #32]
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d911      	bls.n	800b916 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6a1a      	ldr	r2, [r3, #32]
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	8992      	ldrh	r2, [r2, #12]
 800b8fe:	fb02 f303 	mul.w	r3, r2, r3
 800b902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b904:	18d0      	adds	r0, r2, r3
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	899b      	ldrh	r3, [r3, #12]
 800b910:	461a      	mov	r2, r3
 800b912:	f7fd fb81 	bl	8009018 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	899b      	ldrh	r3, [r3, #12]
 800b91a:	461a      	mov	r2, r3
 800b91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91e:	fb02 f303 	mul.w	r3, r2, r3
 800b922:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800b924:	e05c      	b.n	800b9e0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6a1b      	ldr	r3, [r3, #32]
 800b92a:	69ba      	ldr	r2, [r7, #24]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d02e      	beq.n	800b98e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	7d1b      	ldrb	r3, [r3, #20]
 800b934:	b25b      	sxtb	r3, r3
 800b936:	2b00      	cmp	r3, #0
 800b938:	da18      	bge.n	800b96c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	7858      	ldrb	r0, [r3, #1]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6a1a      	ldr	r2, [r3, #32]
 800b948:	2301      	movs	r3, #1
 800b94a:	f7fd faa5 	bl	8008e98 <disk_write>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d004      	beq.n	800b95e <f_read+0x202>
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2201      	movs	r2, #1
 800b958:	755a      	strb	r2, [r3, #21]
 800b95a:	2301      	movs	r3, #1
 800b95c:	e059      	b.n	800ba12 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	7d1b      	ldrb	r3, [r3, #20]
 800b962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b966:	b2da      	uxtb	r2, r3
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	7858      	ldrb	r0, [r3, #1]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b976:	2301      	movs	r3, #1
 800b978:	69ba      	ldr	r2, [r7, #24]
 800b97a:	f7fd fa6d 	bl	8008e58 <disk_read>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d004      	beq.n	800b98e <f_read+0x232>
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2201      	movs	r2, #1
 800b988:	755a      	strb	r2, [r3, #21]
 800b98a:	2301      	movs	r3, #1
 800b98c:	e041      	b.n	800ba12 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	69ba      	ldr	r2, [r7, #24]
 800b992:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	899b      	ldrh	r3, [r3, #12]
 800b998:	4618      	mov	r0, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	699b      	ldr	r3, [r3, #24]
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	8992      	ldrh	r2, [r2, #12]
 800b9a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9a6:	fb01 f202 	mul.w	r2, r1, r2
 800b9aa:	1a9b      	subs	r3, r3, r2
 800b9ac:	1ac3      	subs	r3, r0, r3
 800b9ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b9b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d901      	bls.n	800b9bc <f_read+0x260>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	8992      	ldrh	r2, [r2, #12]
 800b9ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9ce:	fb00 f202 	mul.w	r2, r0, r2
 800b9d2:	1a9b      	subs	r3, r3, r2
 800b9d4:	440b      	add	r3, r1
 800b9d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9d8:	4619      	mov	r1, r3
 800b9da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b9dc:	f7fd fb1c 	bl	8009018 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b9e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e4:	4413      	add	r3, r2
 800b9e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	699a      	ldr	r2, [r3, #24]
 800b9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ee:	441a      	add	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	619a      	str	r2, [r3, #24]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fa:	441a      	add	r2, r3
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	601a      	str	r2, [r3, #0]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f47f aee1 	bne.w	800b7d2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3738      	adds	r7, #56	@ 0x38
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b08c      	sub	sp, #48	@ 0x30
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	60f8      	str	r0, [r7, #12]
 800ba22:	60b9      	str	r1, [r7, #8]
 800ba24:	607a      	str	r2, [r7, #4]
 800ba26:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f107 0210 	add.w	r2, r7, #16
 800ba38:	4611      	mov	r1, r2
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff fc4a 	bl	800b2d4 <validate>
 800ba40:	4603      	mov	r3, r0
 800ba42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ba46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d107      	bne.n	800ba5e <f_write+0x44>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	7d5b      	ldrb	r3, [r3, #21]
 800ba52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ba56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d002      	beq.n	800ba64 <f_write+0x4a>
 800ba5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ba62:	e16a      	b.n	800bd3a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	7d1b      	ldrb	r3, [r3, #20]
 800ba68:	f003 0302 	and.w	r3, r3, #2
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d101      	bne.n	800ba74 <f_write+0x5a>
 800ba70:	2307      	movs	r3, #7
 800ba72:	e162      	b.n	800bd3a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	699a      	ldr	r2, [r3, #24]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	441a      	add	r2, r3
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	f080 814c 	bcs.w	800bd1e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	43db      	mvns	r3, r3
 800ba8c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ba8e:	e146      	b.n	800bd1e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	8992      	ldrh	r2, [r2, #12]
 800ba98:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba9c:	fb01 f202 	mul.w	r2, r1, r2
 800baa0:	1a9b      	subs	r3, r3, r2
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f040 80f1 	bne.w	800bc8a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	699b      	ldr	r3, [r3, #24]
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	8992      	ldrh	r2, [r2, #12]
 800bab0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	8952      	ldrh	r2, [r2, #10]
 800bab8:	3a01      	subs	r2, #1
 800baba:	4013      	ands	r3, r2
 800babc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d143      	bne.n	800bb4c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	699b      	ldr	r3, [r3, #24]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10c      	bne.n	800bae6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d11a      	bne.n	800bb0e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2100      	movs	r1, #0
 800badc:	4618      	mov	r0, r3
 800bade:	f7fd ffd8 	bl	8009a92 <create_chain>
 800bae2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bae4:	e013      	b.n	800bb0e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baea:	2b00      	cmp	r3, #0
 800baec:	d007      	beq.n	800bafe <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	699b      	ldr	r3, [r3, #24]
 800baf2:	4619      	mov	r1, r3
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f7fe f864 	bl	8009bc2 <clmt_clust>
 800bafa:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bafc:	e007      	b.n	800bb0e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	69db      	ldr	r3, [r3, #28]
 800bb04:	4619      	mov	r1, r3
 800bb06:	4610      	mov	r0, r2
 800bb08:	f7fd ffc3 	bl	8009a92 <create_chain>
 800bb0c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bb0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 8109 	beq.w	800bd28 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bb16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d104      	bne.n	800bb26 <f_write+0x10c>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2202      	movs	r2, #2
 800bb20:	755a      	strb	r2, [r3, #21]
 800bb22:	2302      	movs	r3, #2
 800bb24:	e109      	b.n	800bd3a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2c:	d104      	bne.n	800bb38 <f_write+0x11e>
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2201      	movs	r2, #1
 800bb32:	755a      	strb	r2, [r3, #21]
 800bb34:	2301      	movs	r3, #1
 800bb36:	e100      	b.n	800bd3a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb3c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d102      	bne.n	800bb4c <f_write+0x132>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb4a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	7d1b      	ldrb	r3, [r3, #20]
 800bb50:	b25b      	sxtb	r3, r3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	da18      	bge.n	800bb88 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	7858      	ldrb	r0, [r3, #1]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6a1a      	ldr	r2, [r3, #32]
 800bb64:	2301      	movs	r3, #1
 800bb66:	f7fd f997 	bl	8008e98 <disk_write>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d004      	beq.n	800bb7a <f_write+0x160>
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2201      	movs	r2, #1
 800bb74:	755a      	strb	r2, [r3, #21]
 800bb76:	2301      	movs	r3, #1
 800bb78:	e0df      	b.n	800bd3a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	7d1b      	ldrb	r3, [r3, #20]
 800bb7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bb88:	693a      	ldr	r2, [r7, #16]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	69db      	ldr	r3, [r3, #28]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	4610      	mov	r0, r2
 800bb92:	f7fd fd0d 	bl	80095b0 <clust2sect>
 800bb96:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d104      	bne.n	800bba8 <f_write+0x18e>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2202      	movs	r2, #2
 800bba2:	755a      	strb	r2, [r3, #21]
 800bba4:	2302      	movs	r3, #2
 800bba6:	e0c8      	b.n	800bd3a <f_write+0x320>
			sect += csect;
 800bba8:	697a      	ldr	r2, [r7, #20]
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	4413      	add	r3, r2
 800bbae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	899b      	ldrh	r3, [r3, #12]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbbc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bbbe:	6a3b      	ldr	r3, [r7, #32]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d043      	beq.n	800bc4c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bbc4:	69ba      	ldr	r2, [r7, #24]
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	4413      	add	r3, r2
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	8952      	ldrh	r2, [r2, #10]
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d905      	bls.n	800bbde <f_write+0x1c4>
					cc = fs->csize - csect;
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	895b      	ldrh	r3, [r3, #10]
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	7858      	ldrb	r0, [r3, #1]
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	69f9      	ldr	r1, [r7, #28]
 800bbe8:	f7fd f956 	bl	8008e98 <disk_write>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d004      	beq.n	800bbfc <f_write+0x1e2>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	755a      	strb	r2, [r3, #21]
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e09e      	b.n	800bd3a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6a1a      	ldr	r2, [r3, #32]
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	6a3a      	ldr	r2, [r7, #32]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d918      	bls.n	800bc3c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6a1a      	ldr	r2, [r3, #32]
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	8992      	ldrh	r2, [r2, #12]
 800bc1c:	fb02 f303 	mul.w	r3, r2, r3
 800bc20:	69fa      	ldr	r2, [r7, #28]
 800bc22:	18d1      	adds	r1, r2, r3
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	899b      	ldrh	r3, [r3, #12]
 800bc28:	461a      	mov	r2, r3
 800bc2a:	f7fd f9f5 	bl	8009018 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	7d1b      	ldrb	r3, [r3, #20]
 800bc32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	899b      	ldrh	r3, [r3, #12]
 800bc40:	461a      	mov	r2, r3
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	fb02 f303 	mul.w	r3, r2, r3
 800bc48:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800bc4a:	e04b      	b.n	800bce4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6a1b      	ldr	r3, [r3, #32]
 800bc50:	697a      	ldr	r2, [r7, #20]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d016      	beq.n	800bc84 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	699a      	ldr	r2, [r3, #24]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d210      	bcs.n	800bc84 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	7858      	ldrb	r0, [r3, #1]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	f7fd f8f2 	bl	8008e58 <disk_read>
 800bc74:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d004      	beq.n	800bc84 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	755a      	strb	r2, [r3, #21]
 800bc80:	2301      	movs	r3, #1
 800bc82:	e05a      	b.n	800bd3a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	697a      	ldr	r2, [r7, #20]
 800bc88:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	899b      	ldrh	r3, [r3, #12]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	8992      	ldrh	r2, [r2, #12]
 800bc98:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc9c:	fb01 f202 	mul.w	r2, r1, r2
 800bca0:	1a9b      	subs	r3, r3, r2
 800bca2:	1ac3      	subs	r3, r0, r3
 800bca4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d901      	bls.n	800bcb2 <f_write+0x298>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	699b      	ldr	r3, [r3, #24]
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	8992      	ldrh	r2, [r2, #12]
 800bcc0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bcc4:	fb00 f202 	mul.w	r2, r0, r2
 800bcc8:	1a9b      	subs	r3, r3, r2
 800bcca:	440b      	add	r3, r1
 800bccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcce:	69f9      	ldr	r1, [r7, #28]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7fd f9a1 	bl	8009018 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	7d1b      	ldrb	r3, [r3, #20]
 800bcda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bce4:	69fa      	ldr	r2, [r7, #28]
 800bce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce8:	4413      	add	r3, r2
 800bcea:	61fb      	str	r3, [r7, #28]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	699a      	ldr	r2, [r3, #24]
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf2:	441a      	add	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	619a      	str	r2, [r3, #24]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	68da      	ldr	r2, [r3, #12]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	bf38      	it	cc
 800bd04:	461a      	movcc	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	60da      	str	r2, [r3, #12]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd10:	441a      	add	r2, r3
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	601a      	str	r2, [r3, #0]
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f47f aeb5 	bne.w	800ba90 <f_write+0x76>
 800bd26:	e000      	b.n	800bd2a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bd28:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	7d1b      	ldrb	r3, [r3, #20]
 800bd2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3730      	adds	r7, #48	@ 0x30
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b086      	sub	sp, #24
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f107 0208 	add.w	r2, r7, #8
 800bd50:	4611      	mov	r1, r2
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff fabe 	bl	800b2d4 <validate>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d168      	bne.n	800be34 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	7d1b      	ldrb	r3, [r3, #20]
 800bd66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d062      	beq.n	800be34 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	7d1b      	ldrb	r3, [r3, #20]
 800bd72:	b25b      	sxtb	r3, r3
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	da15      	bge.n	800bda4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	7858      	ldrb	r0, [r3, #1]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a1a      	ldr	r2, [r3, #32]
 800bd86:	2301      	movs	r3, #1
 800bd88:	f7fd f886 	bl	8008e98 <disk_write>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <f_sync+0x54>
 800bd92:	2301      	movs	r3, #1
 800bd94:	e04f      	b.n	800be36 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	7d1b      	ldrb	r3, [r3, #20]
 800bd9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bda4:	f7fc faee 	bl	8008384 <get_fattime>
 800bda8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	4610      	mov	r0, r2
 800bdb4:	f7fd fb5e 	bl	8009474 <move_window>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bdbc:	7dfb      	ldrb	r3, [r7, #23]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d138      	bne.n	800be34 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	330b      	adds	r3, #11
 800bdcc:	781a      	ldrb	r2, [r3, #0]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	330b      	adds	r3, #11
 800bdd2:	f042 0220 	orr.w	r2, r2, #32
 800bdd6:	b2d2      	uxtb	r2, r2
 800bdd8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6818      	ldr	r0, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	461a      	mov	r2, r3
 800bde4:	68f9      	ldr	r1, [r7, #12]
 800bde6:	f7fe f8e9 	bl	8009fbc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f103 021c 	add.w	r2, r3, #28
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	4610      	mov	r0, r2
 800bdf8:	f7fd f8e2 	bl	8008fc0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	3316      	adds	r3, #22
 800be00:	6939      	ldr	r1, [r7, #16]
 800be02:	4618      	mov	r0, r3
 800be04:	f7fd f8dc 	bl	8008fc0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	3312      	adds	r3, #18
 800be0c:	2100      	movs	r1, #0
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fd f8bb 	bl	8008f8a <st_word>
					fs->wflag = 1;
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	2201      	movs	r2, #1
 800be18:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7fd fb57 	bl	80094d0 <sync_fs>
 800be22:	4603      	mov	r3, r0
 800be24:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	7d1b      	ldrb	r3, [r3, #20]
 800be2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be2e:	b2da      	uxtb	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800be34:	7dfb      	ldrb	r3, [r7, #23]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b084      	sub	sp, #16
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7ff ff7b 	bl	800bd42 <f_sync>
 800be4c:	4603      	mov	r3, r0
 800be4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800be50:	7bfb      	ldrb	r3, [r7, #15]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d118      	bne.n	800be88 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f107 0208 	add.w	r2, r7, #8
 800be5c:	4611      	mov	r1, r2
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff fa38 	bl	800b2d4 <validate>
 800be64:	4603      	mov	r3, r0
 800be66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800be68:	7bfb      	ldrb	r3, [r7, #15]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10c      	bne.n	800be88 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	691b      	ldr	r3, [r3, #16]
 800be72:	4618      	mov	r0, r3
 800be74:	f7fd fa5a 	bl	800932c <dec_lock>
 800be78:	4603      	mov	r3, r0
 800be7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d102      	bne.n	800be88 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800be88:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b090      	sub	sp, #64	@ 0x40
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
 800be9a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800be9c:	f107 0108 	add.w	r1, r7, #8
 800bea0:	1d3b      	adds	r3, r7, #4
 800bea2:	2200      	movs	r2, #0
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fe ff8f 	bl	800adc8 <find_volume>
 800beaa:	4603      	mov	r3, r0
 800beac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800beb0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d11f      	bne.n	800bef8 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	f107 0308 	add.w	r3, r7, #8
 800bebe:	4611      	mov	r1, r2
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7fe fe71 	bl	800aba8 <follow_path>
 800bec6:	4603      	mov	r3, r0
 800bec8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800becc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d111      	bne.n	800bef8 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800bed4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bed8:	b25b      	sxtb	r3, r3
 800beda:	2b00      	cmp	r3, #0
 800bedc:	da03      	bge.n	800bee6 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800bede:	2306      	movs	r3, #6
 800bee0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bee4:	e008      	b.n	800bef8 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d005      	beq.n	800bef8 <f_stat+0x66>
 800beec:	f107 0308 	add.w	r3, r7, #8
 800bef0:	6839      	ldr	r1, [r7, #0]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fe fbc2 	bl	800a67c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800bef8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800befc:	4618      	mov	r0, r3
 800befe:	3740      	adds	r7, #64	@ 0x40
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b092      	sub	sp, #72	@ 0x48
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800bf10:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800bf14:	f107 030c 	add.w	r3, r7, #12
 800bf18:	2200      	movs	r2, #0
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7fe ff54 	bl	800adc8 <find_volume>
 800bf20:	4603      	mov	r3, r0
 800bf22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800bf26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	f040 8099 	bne.w	800c062 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800bf30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800bf36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf38:	699a      	ldr	r2, [r3, #24]
 800bf3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf3c:	69db      	ldr	r3, [r3, #28]
 800bf3e:	3b02      	subs	r3, #2
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d804      	bhi.n	800bf4e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800bf44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf46:	699a      	ldr	r2, [r3, #24]
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	e089      	b.n	800c062 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800bf52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d128      	bne.n	800bfac <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf60:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800bf62:	f107 0314 	add.w	r3, r7, #20
 800bf66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fd fb40 	bl	80095ee <get_fat>
 800bf6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800bf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf76:	d103      	bne.n	800bf80 <f_getfree+0x7c>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bf7e:	e063      	b.n	800c048 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800bf80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d103      	bne.n	800bf8e <f_getfree+0x8a>
 800bf86:	2302      	movs	r3, #2
 800bf88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bf8c:	e05c      	b.n	800c048 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800bf8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d102      	bne.n	800bf9a <f_getfree+0x96>
 800bf94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf96:	3301      	adds	r3, #1
 800bf98:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800bf9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa2:	69db      	ldr	r3, [r3, #28]
 800bfa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d3db      	bcc.n	800bf62 <f_getfree+0x5e>
 800bfaa:	e04d      	b.n	800c048 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800bfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfae:	69db      	ldr	r3, [r3, #28]
 800bfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb6:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800bfc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d113      	bne.n	800bfee <f_getfree+0xea>
							res = move_window(fs, sect++);
 800bfc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bfce:	4619      	mov	r1, r3
 800bfd0:	f7fd fa50 	bl	8009474 <move_window>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800bfda:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d131      	bne.n	800c046 <f_getfree+0x142>
							p = fs->win;
 800bfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe4:	3338      	adds	r3, #56	@ 0x38
 800bfe6:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800bfe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfea:	899b      	ldrh	r3, [r3, #12]
 800bfec:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800bfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	2b02      	cmp	r3, #2
 800bff4:	d10f      	bne.n	800c016 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800bff6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bff8:	f7fc ff8c 	bl	8008f14 <ld_word>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d102      	bne.n	800c008 <f_getfree+0x104>
 800c002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c004:	3301      	adds	r3, #1
 800c006:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800c008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00a:	3302      	adds	r3, #2
 800c00c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c00e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c010:	3b02      	subs	r3, #2
 800c012:	637b      	str	r3, [r7, #52]	@ 0x34
 800c014:	e010      	b.n	800c038 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c016:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c018:	f7fc ff94 	bl	8008f44 <ld_dword>
 800c01c:	4603      	mov	r3, r0
 800c01e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c022:	2b00      	cmp	r3, #0
 800c024:	d102      	bne.n	800c02c <f_getfree+0x128>
 800c026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c028:	3301      	adds	r3, #1
 800c02a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800c02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c02e:	3304      	adds	r3, #4
 800c030:	633b      	str	r3, [r7, #48]	@ 0x30
 800c032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c034:	3b04      	subs	r3, #4
 800c036:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800c038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c03a:	3b01      	subs	r3, #1
 800c03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c03e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1bd      	bne.n	800bfc0 <f_getfree+0xbc>
 800c044:	e000      	b.n	800c048 <f_getfree+0x144>
							if (res != FR_OK) break;
 800c046:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c04c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c050:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c052:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c056:	791a      	ldrb	r2, [r3, #4]
 800c058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c05a:	f042 0201 	orr.w	r2, r2, #1
 800c05e:	b2d2      	uxtb	r2, r2
 800c060:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c062:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c066:	4618      	mov	r0, r3
 800c068:	3748      	adds	r7, #72	@ 0x48
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c070:	b480      	push	{r7}
 800c072:	b087      	sub	sp, #28
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	4613      	mov	r3, r2
 800c07c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c07e:	2301      	movs	r3, #1
 800c080:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c086:	4b1f      	ldr	r3, [pc, #124]	@ (800c104 <FATFS_LinkDriverEx+0x94>)
 800c088:	7a5b      	ldrb	r3, [r3, #9]
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d131      	bne.n	800c0f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c090:	4b1c      	ldr	r3, [pc, #112]	@ (800c104 <FATFS_LinkDriverEx+0x94>)
 800c092:	7a5b      	ldrb	r3, [r3, #9]
 800c094:	b2db      	uxtb	r3, r3
 800c096:	461a      	mov	r2, r3
 800c098:	4b1a      	ldr	r3, [pc, #104]	@ (800c104 <FATFS_LinkDriverEx+0x94>)
 800c09a:	2100      	movs	r1, #0
 800c09c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c09e:	4b19      	ldr	r3, [pc, #100]	@ (800c104 <FATFS_LinkDriverEx+0x94>)
 800c0a0:	7a5b      	ldrb	r3, [r3, #9]
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	4a17      	ldr	r2, [pc, #92]	@ (800c104 <FATFS_LinkDriverEx+0x94>)
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c0ae:	4b15      	ldr	r3, [pc, #84]	@ (800c104 <FATFS_LinkDriverEx+0x94>)
 800c0b0:	7a5b      	ldrb	r3, [r3, #9]
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	4b13      	ldr	r3, [pc, #76]	@ (800c104 <FATFS_LinkDriverEx+0x94>)
 800c0b8:	4413      	add	r3, r2
 800c0ba:	79fa      	ldrb	r2, [r7, #7]
 800c0bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c0be:	4b11      	ldr	r3, [pc, #68]	@ (800c104 <FATFS_LinkDriverEx+0x94>)
 800c0c0:	7a5b      	ldrb	r3, [r3, #9]
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	1c5a      	adds	r2, r3, #1
 800c0c6:	b2d1      	uxtb	r1, r2
 800c0c8:	4a0e      	ldr	r2, [pc, #56]	@ (800c104 <FATFS_LinkDriverEx+0x94>)
 800c0ca:	7251      	strb	r1, [r2, #9]
 800c0cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c0ce:	7dbb      	ldrb	r3, [r7, #22]
 800c0d0:	3330      	adds	r3, #48	@ 0x30
 800c0d2:	b2da      	uxtb	r2, r3
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	223a      	movs	r2, #58	@ 0x3a
 800c0de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	3302      	adds	r3, #2
 800c0e4:	222f      	movs	r2, #47	@ 0x2f
 800c0e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	3303      	adds	r3, #3
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c0f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	371c      	adds	r7, #28
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	20005f20 	.word	0x20005f20

0800c108 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c112:	2200      	movs	r2, #0
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff ffaa 	bl	800c070 <FATFS_LinkDriverEx>
 800c11c:	4603      	mov	r3, r0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
	...

0800c128 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	4603      	mov	r3, r0
 800c130:	6039      	str	r1, [r7, #0]
 800c132:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c134:	88fb      	ldrh	r3, [r7, #6]
 800c136:	2b7f      	cmp	r3, #127	@ 0x7f
 800c138:	d802      	bhi.n	800c140 <ff_convert+0x18>
		c = chr;
 800c13a:	88fb      	ldrh	r3, [r7, #6]
 800c13c:	81fb      	strh	r3, [r7, #14]
 800c13e:	e025      	b.n	800c18c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00b      	beq.n	800c15e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c146:	88fb      	ldrh	r3, [r7, #6]
 800c148:	2bff      	cmp	r3, #255	@ 0xff
 800c14a:	d805      	bhi.n	800c158 <ff_convert+0x30>
 800c14c:	88fb      	ldrh	r3, [r7, #6]
 800c14e:	3b80      	subs	r3, #128	@ 0x80
 800c150:	4a12      	ldr	r2, [pc, #72]	@ (800c19c <ff_convert+0x74>)
 800c152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c156:	e000      	b.n	800c15a <ff_convert+0x32>
 800c158:	2300      	movs	r3, #0
 800c15a:	81fb      	strh	r3, [r7, #14]
 800c15c:	e016      	b.n	800c18c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c15e:	2300      	movs	r3, #0
 800c160:	81fb      	strh	r3, [r7, #14]
 800c162:	e009      	b.n	800c178 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c164:	89fb      	ldrh	r3, [r7, #14]
 800c166:	4a0d      	ldr	r2, [pc, #52]	@ (800c19c <ff_convert+0x74>)
 800c168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c16c:	88fa      	ldrh	r2, [r7, #6]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d006      	beq.n	800c180 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c172:	89fb      	ldrh	r3, [r7, #14]
 800c174:	3301      	adds	r3, #1
 800c176:	81fb      	strh	r3, [r7, #14]
 800c178:	89fb      	ldrh	r3, [r7, #14]
 800c17a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c17c:	d9f2      	bls.n	800c164 <ff_convert+0x3c>
 800c17e:	e000      	b.n	800c182 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c180:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c182:	89fb      	ldrh	r3, [r7, #14]
 800c184:	3380      	adds	r3, #128	@ 0x80
 800c186:	b29b      	uxth	r3, r3
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c18c:	89fb      	ldrh	r3, [r7, #14]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	0800d64c 	.word	0x0800d64c

0800c1a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b087      	sub	sp, #28
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c1aa:	88fb      	ldrh	r3, [r7, #6]
 800c1ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1b0:	d201      	bcs.n	800c1b6 <ff_wtoupper+0x16>
 800c1b2:	4b3e      	ldr	r3, [pc, #248]	@ (800c2ac <ff_wtoupper+0x10c>)
 800c1b4:	e000      	b.n	800c1b8 <ff_wtoupper+0x18>
 800c1b6:	4b3e      	ldr	r3, [pc, #248]	@ (800c2b0 <ff_wtoupper+0x110>)
 800c1b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	1c9a      	adds	r2, r3, #2
 800c1be:	617a      	str	r2, [r7, #20]
 800c1c0:	881b      	ldrh	r3, [r3, #0]
 800c1c2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c1c4:	8a7b      	ldrh	r3, [r7, #18]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d068      	beq.n	800c29c <ff_wtoupper+0xfc>
 800c1ca:	88fa      	ldrh	r2, [r7, #6]
 800c1cc:	8a7b      	ldrh	r3, [r7, #18]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d364      	bcc.n	800c29c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	1c9a      	adds	r2, r3, #2
 800c1d6:	617a      	str	r2, [r7, #20]
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	823b      	strh	r3, [r7, #16]
 800c1dc:	8a3b      	ldrh	r3, [r7, #16]
 800c1de:	0a1b      	lsrs	r3, r3, #8
 800c1e0:	81fb      	strh	r3, [r7, #14]
 800c1e2:	8a3b      	ldrh	r3, [r7, #16]
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c1e8:	88fa      	ldrh	r2, [r7, #6]
 800c1ea:	8a79      	ldrh	r1, [r7, #18]
 800c1ec:	8a3b      	ldrh	r3, [r7, #16]
 800c1ee:	440b      	add	r3, r1
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	da49      	bge.n	800c288 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c1f4:	89fb      	ldrh	r3, [r7, #14]
 800c1f6:	2b08      	cmp	r3, #8
 800c1f8:	d84f      	bhi.n	800c29a <ff_wtoupper+0xfa>
 800c1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c200 <ff_wtoupper+0x60>)
 800c1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c200:	0800c225 	.word	0x0800c225
 800c204:	0800c237 	.word	0x0800c237
 800c208:	0800c24d 	.word	0x0800c24d
 800c20c:	0800c255 	.word	0x0800c255
 800c210:	0800c25d 	.word	0x0800c25d
 800c214:	0800c265 	.word	0x0800c265
 800c218:	0800c26d 	.word	0x0800c26d
 800c21c:	0800c275 	.word	0x0800c275
 800c220:	0800c27d 	.word	0x0800c27d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c224:	88fa      	ldrh	r2, [r7, #6]
 800c226:	8a7b      	ldrh	r3, [r7, #18]
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	697a      	ldr	r2, [r7, #20]
 800c22e:	4413      	add	r3, r2
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	80fb      	strh	r3, [r7, #6]
 800c234:	e027      	b.n	800c286 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c236:	88fa      	ldrh	r2, [r7, #6]
 800c238:	8a7b      	ldrh	r3, [r7, #18]
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	f003 0301 	and.w	r3, r3, #1
 800c242:	b29b      	uxth	r3, r3
 800c244:	88fa      	ldrh	r2, [r7, #6]
 800c246:	1ad3      	subs	r3, r2, r3
 800c248:	80fb      	strh	r3, [r7, #6]
 800c24a:	e01c      	b.n	800c286 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c24c:	88fb      	ldrh	r3, [r7, #6]
 800c24e:	3b10      	subs	r3, #16
 800c250:	80fb      	strh	r3, [r7, #6]
 800c252:	e018      	b.n	800c286 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c254:	88fb      	ldrh	r3, [r7, #6]
 800c256:	3b20      	subs	r3, #32
 800c258:	80fb      	strh	r3, [r7, #6]
 800c25a:	e014      	b.n	800c286 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c25c:	88fb      	ldrh	r3, [r7, #6]
 800c25e:	3b30      	subs	r3, #48	@ 0x30
 800c260:	80fb      	strh	r3, [r7, #6]
 800c262:	e010      	b.n	800c286 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c264:	88fb      	ldrh	r3, [r7, #6]
 800c266:	3b1a      	subs	r3, #26
 800c268:	80fb      	strh	r3, [r7, #6]
 800c26a:	e00c      	b.n	800c286 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c26c:	88fb      	ldrh	r3, [r7, #6]
 800c26e:	3308      	adds	r3, #8
 800c270:	80fb      	strh	r3, [r7, #6]
 800c272:	e008      	b.n	800c286 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c274:	88fb      	ldrh	r3, [r7, #6]
 800c276:	3b50      	subs	r3, #80	@ 0x50
 800c278:	80fb      	strh	r3, [r7, #6]
 800c27a:	e004      	b.n	800c286 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c27c:	88fb      	ldrh	r3, [r7, #6]
 800c27e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800c282:	80fb      	strh	r3, [r7, #6]
 800c284:	bf00      	nop
			}
			break;
 800c286:	e008      	b.n	800c29a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c288:	89fb      	ldrh	r3, [r7, #14]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d195      	bne.n	800c1ba <ff_wtoupper+0x1a>
 800c28e:	8a3b      	ldrh	r3, [r7, #16]
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	4413      	add	r3, r2
 800c296:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c298:	e78f      	b.n	800c1ba <ff_wtoupper+0x1a>
			break;
 800c29a:	bf00      	nop
	}

	return chr;
 800c29c:	88fb      	ldrh	r3, [r7, #6]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	371c      	adds	r7, #28
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	0800d74c 	.word	0x0800d74c
 800c2b0:	0800d940 	.word	0x0800d940

0800c2b4 <std>:
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	b510      	push	{r4, lr}
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	e9c0 3300 	strd	r3, r3, [r0]
 800c2be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2c2:	6083      	str	r3, [r0, #8]
 800c2c4:	8181      	strh	r1, [r0, #12]
 800c2c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800c2c8:	81c2      	strh	r2, [r0, #14]
 800c2ca:	6183      	str	r3, [r0, #24]
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	2208      	movs	r2, #8
 800c2d0:	305c      	adds	r0, #92	@ 0x5c
 800c2d2:	f000 f9f9 	bl	800c6c8 <memset>
 800c2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c30c <std+0x58>)
 800c2d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800c2da:	4b0d      	ldr	r3, [pc, #52]	@ (800c310 <std+0x5c>)
 800c2dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c2de:	4b0d      	ldr	r3, [pc, #52]	@ (800c314 <std+0x60>)
 800c2e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c318 <std+0x64>)
 800c2e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800c2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c31c <std+0x68>)
 800c2e8:	6224      	str	r4, [r4, #32]
 800c2ea:	429c      	cmp	r4, r3
 800c2ec:	d006      	beq.n	800c2fc <std+0x48>
 800c2ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c2f2:	4294      	cmp	r4, r2
 800c2f4:	d002      	beq.n	800c2fc <std+0x48>
 800c2f6:	33d0      	adds	r3, #208	@ 0xd0
 800c2f8:	429c      	cmp	r4, r3
 800c2fa:	d105      	bne.n	800c308 <std+0x54>
 800c2fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c304:	f000 ba6a 	b.w	800c7dc <__retarget_lock_init_recursive>
 800c308:	bd10      	pop	{r4, pc}
 800c30a:	bf00      	nop
 800c30c:	0800c519 	.word	0x0800c519
 800c310:	0800c53b 	.word	0x0800c53b
 800c314:	0800c573 	.word	0x0800c573
 800c318:	0800c597 	.word	0x0800c597
 800c31c:	20005f2c 	.word	0x20005f2c

0800c320 <stdio_exit_handler>:
 800c320:	4a02      	ldr	r2, [pc, #8]	@ (800c32c <stdio_exit_handler+0xc>)
 800c322:	4903      	ldr	r1, [pc, #12]	@ (800c330 <stdio_exit_handler+0x10>)
 800c324:	4803      	ldr	r0, [pc, #12]	@ (800c334 <stdio_exit_handler+0x14>)
 800c326:	f000 b869 	b.w	800c3fc <_fwalk_sglue>
 800c32a:	bf00      	nop
 800c32c:	2000007c 	.word	0x2000007c
 800c330:	0800d07d 	.word	0x0800d07d
 800c334:	2000008c 	.word	0x2000008c

0800c338 <cleanup_stdio>:
 800c338:	6841      	ldr	r1, [r0, #4]
 800c33a:	4b0c      	ldr	r3, [pc, #48]	@ (800c36c <cleanup_stdio+0x34>)
 800c33c:	4299      	cmp	r1, r3
 800c33e:	b510      	push	{r4, lr}
 800c340:	4604      	mov	r4, r0
 800c342:	d001      	beq.n	800c348 <cleanup_stdio+0x10>
 800c344:	f000 fe9a 	bl	800d07c <_fflush_r>
 800c348:	68a1      	ldr	r1, [r4, #8]
 800c34a:	4b09      	ldr	r3, [pc, #36]	@ (800c370 <cleanup_stdio+0x38>)
 800c34c:	4299      	cmp	r1, r3
 800c34e:	d002      	beq.n	800c356 <cleanup_stdio+0x1e>
 800c350:	4620      	mov	r0, r4
 800c352:	f000 fe93 	bl	800d07c <_fflush_r>
 800c356:	68e1      	ldr	r1, [r4, #12]
 800c358:	4b06      	ldr	r3, [pc, #24]	@ (800c374 <cleanup_stdio+0x3c>)
 800c35a:	4299      	cmp	r1, r3
 800c35c:	d004      	beq.n	800c368 <cleanup_stdio+0x30>
 800c35e:	4620      	mov	r0, r4
 800c360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c364:	f000 be8a 	b.w	800d07c <_fflush_r>
 800c368:	bd10      	pop	{r4, pc}
 800c36a:	bf00      	nop
 800c36c:	20005f2c 	.word	0x20005f2c
 800c370:	20005f94 	.word	0x20005f94
 800c374:	20005ffc 	.word	0x20005ffc

0800c378 <global_stdio_init.part.0>:
 800c378:	b510      	push	{r4, lr}
 800c37a:	4b0b      	ldr	r3, [pc, #44]	@ (800c3a8 <global_stdio_init.part.0+0x30>)
 800c37c:	4c0b      	ldr	r4, [pc, #44]	@ (800c3ac <global_stdio_init.part.0+0x34>)
 800c37e:	4a0c      	ldr	r2, [pc, #48]	@ (800c3b0 <global_stdio_init.part.0+0x38>)
 800c380:	601a      	str	r2, [r3, #0]
 800c382:	4620      	mov	r0, r4
 800c384:	2200      	movs	r2, #0
 800c386:	2104      	movs	r1, #4
 800c388:	f7ff ff94 	bl	800c2b4 <std>
 800c38c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c390:	2201      	movs	r2, #1
 800c392:	2109      	movs	r1, #9
 800c394:	f7ff ff8e 	bl	800c2b4 <std>
 800c398:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c39c:	2202      	movs	r2, #2
 800c39e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3a2:	2112      	movs	r1, #18
 800c3a4:	f7ff bf86 	b.w	800c2b4 <std>
 800c3a8:	20006064 	.word	0x20006064
 800c3ac:	20005f2c 	.word	0x20005f2c
 800c3b0:	0800c321 	.word	0x0800c321

0800c3b4 <__sfp_lock_acquire>:
 800c3b4:	4801      	ldr	r0, [pc, #4]	@ (800c3bc <__sfp_lock_acquire+0x8>)
 800c3b6:	f000 ba12 	b.w	800c7de <__retarget_lock_acquire_recursive>
 800c3ba:	bf00      	nop
 800c3bc:	2000606d 	.word	0x2000606d

0800c3c0 <__sfp_lock_release>:
 800c3c0:	4801      	ldr	r0, [pc, #4]	@ (800c3c8 <__sfp_lock_release+0x8>)
 800c3c2:	f000 ba0d 	b.w	800c7e0 <__retarget_lock_release_recursive>
 800c3c6:	bf00      	nop
 800c3c8:	2000606d 	.word	0x2000606d

0800c3cc <__sinit>:
 800c3cc:	b510      	push	{r4, lr}
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	f7ff fff0 	bl	800c3b4 <__sfp_lock_acquire>
 800c3d4:	6a23      	ldr	r3, [r4, #32]
 800c3d6:	b11b      	cbz	r3, 800c3e0 <__sinit+0x14>
 800c3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3dc:	f7ff bff0 	b.w	800c3c0 <__sfp_lock_release>
 800c3e0:	4b04      	ldr	r3, [pc, #16]	@ (800c3f4 <__sinit+0x28>)
 800c3e2:	6223      	str	r3, [r4, #32]
 800c3e4:	4b04      	ldr	r3, [pc, #16]	@ (800c3f8 <__sinit+0x2c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d1f5      	bne.n	800c3d8 <__sinit+0xc>
 800c3ec:	f7ff ffc4 	bl	800c378 <global_stdio_init.part.0>
 800c3f0:	e7f2      	b.n	800c3d8 <__sinit+0xc>
 800c3f2:	bf00      	nop
 800c3f4:	0800c339 	.word	0x0800c339
 800c3f8:	20006064 	.word	0x20006064

0800c3fc <_fwalk_sglue>:
 800c3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c400:	4607      	mov	r7, r0
 800c402:	4688      	mov	r8, r1
 800c404:	4614      	mov	r4, r2
 800c406:	2600      	movs	r6, #0
 800c408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c40c:	f1b9 0901 	subs.w	r9, r9, #1
 800c410:	d505      	bpl.n	800c41e <_fwalk_sglue+0x22>
 800c412:	6824      	ldr	r4, [r4, #0]
 800c414:	2c00      	cmp	r4, #0
 800c416:	d1f7      	bne.n	800c408 <_fwalk_sglue+0xc>
 800c418:	4630      	mov	r0, r6
 800c41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c41e:	89ab      	ldrh	r3, [r5, #12]
 800c420:	2b01      	cmp	r3, #1
 800c422:	d907      	bls.n	800c434 <_fwalk_sglue+0x38>
 800c424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c428:	3301      	adds	r3, #1
 800c42a:	d003      	beq.n	800c434 <_fwalk_sglue+0x38>
 800c42c:	4629      	mov	r1, r5
 800c42e:	4638      	mov	r0, r7
 800c430:	47c0      	blx	r8
 800c432:	4306      	orrs	r6, r0
 800c434:	3568      	adds	r5, #104	@ 0x68
 800c436:	e7e9      	b.n	800c40c <_fwalk_sglue+0x10>

0800c438 <iprintf>:
 800c438:	b40f      	push	{r0, r1, r2, r3}
 800c43a:	b507      	push	{r0, r1, r2, lr}
 800c43c:	4906      	ldr	r1, [pc, #24]	@ (800c458 <iprintf+0x20>)
 800c43e:	ab04      	add	r3, sp, #16
 800c440:	6808      	ldr	r0, [r1, #0]
 800c442:	f853 2b04 	ldr.w	r2, [r3], #4
 800c446:	6881      	ldr	r1, [r0, #8]
 800c448:	9301      	str	r3, [sp, #4]
 800c44a:	f000 faed 	bl	800ca28 <_vfiprintf_r>
 800c44e:	b003      	add	sp, #12
 800c450:	f85d eb04 	ldr.w	lr, [sp], #4
 800c454:	b004      	add	sp, #16
 800c456:	4770      	bx	lr
 800c458:	20000088 	.word	0x20000088

0800c45c <_puts_r>:
 800c45c:	6a03      	ldr	r3, [r0, #32]
 800c45e:	b570      	push	{r4, r5, r6, lr}
 800c460:	6884      	ldr	r4, [r0, #8]
 800c462:	4605      	mov	r5, r0
 800c464:	460e      	mov	r6, r1
 800c466:	b90b      	cbnz	r3, 800c46c <_puts_r+0x10>
 800c468:	f7ff ffb0 	bl	800c3cc <__sinit>
 800c46c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c46e:	07db      	lsls	r3, r3, #31
 800c470:	d405      	bmi.n	800c47e <_puts_r+0x22>
 800c472:	89a3      	ldrh	r3, [r4, #12]
 800c474:	0598      	lsls	r0, r3, #22
 800c476:	d402      	bmi.n	800c47e <_puts_r+0x22>
 800c478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c47a:	f000 f9b0 	bl	800c7de <__retarget_lock_acquire_recursive>
 800c47e:	89a3      	ldrh	r3, [r4, #12]
 800c480:	0719      	lsls	r1, r3, #28
 800c482:	d502      	bpl.n	800c48a <_puts_r+0x2e>
 800c484:	6923      	ldr	r3, [r4, #16]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d135      	bne.n	800c4f6 <_puts_r+0x9a>
 800c48a:	4621      	mov	r1, r4
 800c48c:	4628      	mov	r0, r5
 800c48e:	f000 f8c5 	bl	800c61c <__swsetup_r>
 800c492:	b380      	cbz	r0, 800c4f6 <_puts_r+0x9a>
 800c494:	f04f 35ff 	mov.w	r5, #4294967295
 800c498:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c49a:	07da      	lsls	r2, r3, #31
 800c49c:	d405      	bmi.n	800c4aa <_puts_r+0x4e>
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	059b      	lsls	r3, r3, #22
 800c4a2:	d402      	bmi.n	800c4aa <_puts_r+0x4e>
 800c4a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4a6:	f000 f99b 	bl	800c7e0 <__retarget_lock_release_recursive>
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	bd70      	pop	{r4, r5, r6, pc}
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	da04      	bge.n	800c4bc <_puts_r+0x60>
 800c4b2:	69a2      	ldr	r2, [r4, #24]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	dc17      	bgt.n	800c4e8 <_puts_r+0x8c>
 800c4b8:	290a      	cmp	r1, #10
 800c4ba:	d015      	beq.n	800c4e8 <_puts_r+0x8c>
 800c4bc:	6823      	ldr	r3, [r4, #0]
 800c4be:	1c5a      	adds	r2, r3, #1
 800c4c0:	6022      	str	r2, [r4, #0]
 800c4c2:	7019      	strb	r1, [r3, #0]
 800c4c4:	68a3      	ldr	r3, [r4, #8]
 800c4c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	60a3      	str	r3, [r4, #8]
 800c4ce:	2900      	cmp	r1, #0
 800c4d0:	d1ed      	bne.n	800c4ae <_puts_r+0x52>
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	da11      	bge.n	800c4fa <_puts_r+0x9e>
 800c4d6:	4622      	mov	r2, r4
 800c4d8:	210a      	movs	r1, #10
 800c4da:	4628      	mov	r0, r5
 800c4dc:	f000 f85f 	bl	800c59e <__swbuf_r>
 800c4e0:	3001      	adds	r0, #1
 800c4e2:	d0d7      	beq.n	800c494 <_puts_r+0x38>
 800c4e4:	250a      	movs	r5, #10
 800c4e6:	e7d7      	b.n	800c498 <_puts_r+0x3c>
 800c4e8:	4622      	mov	r2, r4
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	f000 f857 	bl	800c59e <__swbuf_r>
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	d1e7      	bne.n	800c4c4 <_puts_r+0x68>
 800c4f4:	e7ce      	b.n	800c494 <_puts_r+0x38>
 800c4f6:	3e01      	subs	r6, #1
 800c4f8:	e7e4      	b.n	800c4c4 <_puts_r+0x68>
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	1c5a      	adds	r2, r3, #1
 800c4fe:	6022      	str	r2, [r4, #0]
 800c500:	220a      	movs	r2, #10
 800c502:	701a      	strb	r2, [r3, #0]
 800c504:	e7ee      	b.n	800c4e4 <_puts_r+0x88>
	...

0800c508 <puts>:
 800c508:	4b02      	ldr	r3, [pc, #8]	@ (800c514 <puts+0xc>)
 800c50a:	4601      	mov	r1, r0
 800c50c:	6818      	ldr	r0, [r3, #0]
 800c50e:	f7ff bfa5 	b.w	800c45c <_puts_r>
 800c512:	bf00      	nop
 800c514:	20000088 	.word	0x20000088

0800c518 <__sread>:
 800c518:	b510      	push	{r4, lr}
 800c51a:	460c      	mov	r4, r1
 800c51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c520:	f000 f90e 	bl	800c740 <_read_r>
 800c524:	2800      	cmp	r0, #0
 800c526:	bfab      	itete	ge
 800c528:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c52a:	89a3      	ldrhlt	r3, [r4, #12]
 800c52c:	181b      	addge	r3, r3, r0
 800c52e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c532:	bfac      	ite	ge
 800c534:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c536:	81a3      	strhlt	r3, [r4, #12]
 800c538:	bd10      	pop	{r4, pc}

0800c53a <__swrite>:
 800c53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c53e:	461f      	mov	r7, r3
 800c540:	898b      	ldrh	r3, [r1, #12]
 800c542:	05db      	lsls	r3, r3, #23
 800c544:	4605      	mov	r5, r0
 800c546:	460c      	mov	r4, r1
 800c548:	4616      	mov	r6, r2
 800c54a:	d505      	bpl.n	800c558 <__swrite+0x1e>
 800c54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c550:	2302      	movs	r3, #2
 800c552:	2200      	movs	r2, #0
 800c554:	f000 f8e2 	bl	800c71c <_lseek_r>
 800c558:	89a3      	ldrh	r3, [r4, #12]
 800c55a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c55e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c562:	81a3      	strh	r3, [r4, #12]
 800c564:	4632      	mov	r2, r6
 800c566:	463b      	mov	r3, r7
 800c568:	4628      	mov	r0, r5
 800c56a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c56e:	f000 b8f9 	b.w	800c764 <_write_r>

0800c572 <__sseek>:
 800c572:	b510      	push	{r4, lr}
 800c574:	460c      	mov	r4, r1
 800c576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c57a:	f000 f8cf 	bl	800c71c <_lseek_r>
 800c57e:	1c43      	adds	r3, r0, #1
 800c580:	89a3      	ldrh	r3, [r4, #12]
 800c582:	bf15      	itete	ne
 800c584:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c586:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c58a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c58e:	81a3      	strheq	r3, [r4, #12]
 800c590:	bf18      	it	ne
 800c592:	81a3      	strhne	r3, [r4, #12]
 800c594:	bd10      	pop	{r4, pc}

0800c596 <__sclose>:
 800c596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c59a:	f000 b8af 	b.w	800c6fc <_close_r>

0800c59e <__swbuf_r>:
 800c59e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a0:	460e      	mov	r6, r1
 800c5a2:	4614      	mov	r4, r2
 800c5a4:	4605      	mov	r5, r0
 800c5a6:	b118      	cbz	r0, 800c5b0 <__swbuf_r+0x12>
 800c5a8:	6a03      	ldr	r3, [r0, #32]
 800c5aa:	b90b      	cbnz	r3, 800c5b0 <__swbuf_r+0x12>
 800c5ac:	f7ff ff0e 	bl	800c3cc <__sinit>
 800c5b0:	69a3      	ldr	r3, [r4, #24]
 800c5b2:	60a3      	str	r3, [r4, #8]
 800c5b4:	89a3      	ldrh	r3, [r4, #12]
 800c5b6:	071a      	lsls	r2, r3, #28
 800c5b8:	d501      	bpl.n	800c5be <__swbuf_r+0x20>
 800c5ba:	6923      	ldr	r3, [r4, #16]
 800c5bc:	b943      	cbnz	r3, 800c5d0 <__swbuf_r+0x32>
 800c5be:	4621      	mov	r1, r4
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f000 f82b 	bl	800c61c <__swsetup_r>
 800c5c6:	b118      	cbz	r0, 800c5d0 <__swbuf_r+0x32>
 800c5c8:	f04f 37ff 	mov.w	r7, #4294967295
 800c5cc:	4638      	mov	r0, r7
 800c5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5d0:	6823      	ldr	r3, [r4, #0]
 800c5d2:	6922      	ldr	r2, [r4, #16]
 800c5d4:	1a98      	subs	r0, r3, r2
 800c5d6:	6963      	ldr	r3, [r4, #20]
 800c5d8:	b2f6      	uxtb	r6, r6
 800c5da:	4283      	cmp	r3, r0
 800c5dc:	4637      	mov	r7, r6
 800c5de:	dc05      	bgt.n	800c5ec <__swbuf_r+0x4e>
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	f000 fd4a 	bl	800d07c <_fflush_r>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d1ed      	bne.n	800c5c8 <__swbuf_r+0x2a>
 800c5ec:	68a3      	ldr	r3, [r4, #8]
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	60a3      	str	r3, [r4, #8]
 800c5f2:	6823      	ldr	r3, [r4, #0]
 800c5f4:	1c5a      	adds	r2, r3, #1
 800c5f6:	6022      	str	r2, [r4, #0]
 800c5f8:	701e      	strb	r6, [r3, #0]
 800c5fa:	6962      	ldr	r2, [r4, #20]
 800c5fc:	1c43      	adds	r3, r0, #1
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d004      	beq.n	800c60c <__swbuf_r+0x6e>
 800c602:	89a3      	ldrh	r3, [r4, #12]
 800c604:	07db      	lsls	r3, r3, #31
 800c606:	d5e1      	bpl.n	800c5cc <__swbuf_r+0x2e>
 800c608:	2e0a      	cmp	r6, #10
 800c60a:	d1df      	bne.n	800c5cc <__swbuf_r+0x2e>
 800c60c:	4621      	mov	r1, r4
 800c60e:	4628      	mov	r0, r5
 800c610:	f000 fd34 	bl	800d07c <_fflush_r>
 800c614:	2800      	cmp	r0, #0
 800c616:	d0d9      	beq.n	800c5cc <__swbuf_r+0x2e>
 800c618:	e7d6      	b.n	800c5c8 <__swbuf_r+0x2a>
	...

0800c61c <__swsetup_r>:
 800c61c:	b538      	push	{r3, r4, r5, lr}
 800c61e:	4b29      	ldr	r3, [pc, #164]	@ (800c6c4 <__swsetup_r+0xa8>)
 800c620:	4605      	mov	r5, r0
 800c622:	6818      	ldr	r0, [r3, #0]
 800c624:	460c      	mov	r4, r1
 800c626:	b118      	cbz	r0, 800c630 <__swsetup_r+0x14>
 800c628:	6a03      	ldr	r3, [r0, #32]
 800c62a:	b90b      	cbnz	r3, 800c630 <__swsetup_r+0x14>
 800c62c:	f7ff fece 	bl	800c3cc <__sinit>
 800c630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c634:	0719      	lsls	r1, r3, #28
 800c636:	d422      	bmi.n	800c67e <__swsetup_r+0x62>
 800c638:	06da      	lsls	r2, r3, #27
 800c63a:	d407      	bmi.n	800c64c <__swsetup_r+0x30>
 800c63c:	2209      	movs	r2, #9
 800c63e:	602a      	str	r2, [r5, #0]
 800c640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c644:	81a3      	strh	r3, [r4, #12]
 800c646:	f04f 30ff 	mov.w	r0, #4294967295
 800c64a:	e033      	b.n	800c6b4 <__swsetup_r+0x98>
 800c64c:	0758      	lsls	r0, r3, #29
 800c64e:	d512      	bpl.n	800c676 <__swsetup_r+0x5a>
 800c650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c652:	b141      	cbz	r1, 800c666 <__swsetup_r+0x4a>
 800c654:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c658:	4299      	cmp	r1, r3
 800c65a:	d002      	beq.n	800c662 <__swsetup_r+0x46>
 800c65c:	4628      	mov	r0, r5
 800c65e:	f000 f8c1 	bl	800c7e4 <_free_r>
 800c662:	2300      	movs	r3, #0
 800c664:	6363      	str	r3, [r4, #52]	@ 0x34
 800c666:	89a3      	ldrh	r3, [r4, #12]
 800c668:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c66c:	81a3      	strh	r3, [r4, #12]
 800c66e:	2300      	movs	r3, #0
 800c670:	6063      	str	r3, [r4, #4]
 800c672:	6923      	ldr	r3, [r4, #16]
 800c674:	6023      	str	r3, [r4, #0]
 800c676:	89a3      	ldrh	r3, [r4, #12]
 800c678:	f043 0308 	orr.w	r3, r3, #8
 800c67c:	81a3      	strh	r3, [r4, #12]
 800c67e:	6923      	ldr	r3, [r4, #16]
 800c680:	b94b      	cbnz	r3, 800c696 <__swsetup_r+0x7a>
 800c682:	89a3      	ldrh	r3, [r4, #12]
 800c684:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c68c:	d003      	beq.n	800c696 <__swsetup_r+0x7a>
 800c68e:	4621      	mov	r1, r4
 800c690:	4628      	mov	r0, r5
 800c692:	f000 fd41 	bl	800d118 <__smakebuf_r>
 800c696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c69a:	f013 0201 	ands.w	r2, r3, #1
 800c69e:	d00a      	beq.n	800c6b6 <__swsetup_r+0x9a>
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	60a2      	str	r2, [r4, #8]
 800c6a4:	6962      	ldr	r2, [r4, #20]
 800c6a6:	4252      	negs	r2, r2
 800c6a8:	61a2      	str	r2, [r4, #24]
 800c6aa:	6922      	ldr	r2, [r4, #16]
 800c6ac:	b942      	cbnz	r2, 800c6c0 <__swsetup_r+0xa4>
 800c6ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c6b2:	d1c5      	bne.n	800c640 <__swsetup_r+0x24>
 800c6b4:	bd38      	pop	{r3, r4, r5, pc}
 800c6b6:	0799      	lsls	r1, r3, #30
 800c6b8:	bf58      	it	pl
 800c6ba:	6962      	ldrpl	r2, [r4, #20]
 800c6bc:	60a2      	str	r2, [r4, #8]
 800c6be:	e7f4      	b.n	800c6aa <__swsetup_r+0x8e>
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	e7f7      	b.n	800c6b4 <__swsetup_r+0x98>
 800c6c4:	20000088 	.word	0x20000088

0800c6c8 <memset>:
 800c6c8:	4402      	add	r2, r0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d100      	bne.n	800c6d2 <memset+0xa>
 800c6d0:	4770      	bx	lr
 800c6d2:	f803 1b01 	strb.w	r1, [r3], #1
 800c6d6:	e7f9      	b.n	800c6cc <memset+0x4>

0800c6d8 <strncmp>:
 800c6d8:	b510      	push	{r4, lr}
 800c6da:	b16a      	cbz	r2, 800c6f8 <strncmp+0x20>
 800c6dc:	3901      	subs	r1, #1
 800c6de:	1884      	adds	r4, r0, r2
 800c6e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d103      	bne.n	800c6f4 <strncmp+0x1c>
 800c6ec:	42a0      	cmp	r0, r4
 800c6ee:	d001      	beq.n	800c6f4 <strncmp+0x1c>
 800c6f0:	2a00      	cmp	r2, #0
 800c6f2:	d1f5      	bne.n	800c6e0 <strncmp+0x8>
 800c6f4:	1ad0      	subs	r0, r2, r3
 800c6f6:	bd10      	pop	{r4, pc}
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	e7fc      	b.n	800c6f6 <strncmp+0x1e>

0800c6fc <_close_r>:
 800c6fc:	b538      	push	{r3, r4, r5, lr}
 800c6fe:	4d06      	ldr	r5, [pc, #24]	@ (800c718 <_close_r+0x1c>)
 800c700:	2300      	movs	r3, #0
 800c702:	4604      	mov	r4, r0
 800c704:	4608      	mov	r0, r1
 800c706:	602b      	str	r3, [r5, #0]
 800c708:	f7f6 f871 	bl	80027ee <_close>
 800c70c:	1c43      	adds	r3, r0, #1
 800c70e:	d102      	bne.n	800c716 <_close_r+0x1a>
 800c710:	682b      	ldr	r3, [r5, #0]
 800c712:	b103      	cbz	r3, 800c716 <_close_r+0x1a>
 800c714:	6023      	str	r3, [r4, #0]
 800c716:	bd38      	pop	{r3, r4, r5, pc}
 800c718:	20006068 	.word	0x20006068

0800c71c <_lseek_r>:
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4d07      	ldr	r5, [pc, #28]	@ (800c73c <_lseek_r+0x20>)
 800c720:	4604      	mov	r4, r0
 800c722:	4608      	mov	r0, r1
 800c724:	4611      	mov	r1, r2
 800c726:	2200      	movs	r2, #0
 800c728:	602a      	str	r2, [r5, #0]
 800c72a:	461a      	mov	r2, r3
 800c72c:	f7f6 f886 	bl	800283c <_lseek>
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d102      	bne.n	800c73a <_lseek_r+0x1e>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	b103      	cbz	r3, 800c73a <_lseek_r+0x1e>
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	20006068 	.word	0x20006068

0800c740 <_read_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4d07      	ldr	r5, [pc, #28]	@ (800c760 <_read_r+0x20>)
 800c744:	4604      	mov	r4, r0
 800c746:	4608      	mov	r0, r1
 800c748:	4611      	mov	r1, r2
 800c74a:	2200      	movs	r2, #0
 800c74c:	602a      	str	r2, [r5, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	f7f6 f814 	bl	800277c <_read>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_read_r+0x1e>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_read_r+0x1e>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20006068 	.word	0x20006068

0800c764 <_write_r>:
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	4d07      	ldr	r5, [pc, #28]	@ (800c784 <_write_r+0x20>)
 800c768:	4604      	mov	r4, r0
 800c76a:	4608      	mov	r0, r1
 800c76c:	4611      	mov	r1, r2
 800c76e:	2200      	movs	r2, #0
 800c770:	602a      	str	r2, [r5, #0]
 800c772:	461a      	mov	r2, r3
 800c774:	f7f6 f81f 	bl	80027b6 <_write>
 800c778:	1c43      	adds	r3, r0, #1
 800c77a:	d102      	bne.n	800c782 <_write_r+0x1e>
 800c77c:	682b      	ldr	r3, [r5, #0]
 800c77e:	b103      	cbz	r3, 800c782 <_write_r+0x1e>
 800c780:	6023      	str	r3, [r4, #0]
 800c782:	bd38      	pop	{r3, r4, r5, pc}
 800c784:	20006068 	.word	0x20006068

0800c788 <__errno>:
 800c788:	4b01      	ldr	r3, [pc, #4]	@ (800c790 <__errno+0x8>)
 800c78a:	6818      	ldr	r0, [r3, #0]
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	20000088 	.word	0x20000088

0800c794 <__libc_init_array>:
 800c794:	b570      	push	{r4, r5, r6, lr}
 800c796:	4d0d      	ldr	r5, [pc, #52]	@ (800c7cc <__libc_init_array+0x38>)
 800c798:	4c0d      	ldr	r4, [pc, #52]	@ (800c7d0 <__libc_init_array+0x3c>)
 800c79a:	1b64      	subs	r4, r4, r5
 800c79c:	10a4      	asrs	r4, r4, #2
 800c79e:	2600      	movs	r6, #0
 800c7a0:	42a6      	cmp	r6, r4
 800c7a2:	d109      	bne.n	800c7b8 <__libc_init_array+0x24>
 800c7a4:	4d0b      	ldr	r5, [pc, #44]	@ (800c7d4 <__libc_init_array+0x40>)
 800c7a6:	4c0c      	ldr	r4, [pc, #48]	@ (800c7d8 <__libc_init_array+0x44>)
 800c7a8:	f000 fd24 	bl	800d1f4 <_init>
 800c7ac:	1b64      	subs	r4, r4, r5
 800c7ae:	10a4      	asrs	r4, r4, #2
 800c7b0:	2600      	movs	r6, #0
 800c7b2:	42a6      	cmp	r6, r4
 800c7b4:	d105      	bne.n	800c7c2 <__libc_init_array+0x2e>
 800c7b6:	bd70      	pop	{r4, r5, r6, pc}
 800c7b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7bc:	4798      	blx	r3
 800c7be:	3601      	adds	r6, #1
 800c7c0:	e7ee      	b.n	800c7a0 <__libc_init_array+0xc>
 800c7c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7c6:	4798      	blx	r3
 800c7c8:	3601      	adds	r6, #1
 800c7ca:	e7f2      	b.n	800c7b2 <__libc_init_array+0x1e>
 800c7cc:	0800da38 	.word	0x0800da38
 800c7d0:	0800da38 	.word	0x0800da38
 800c7d4:	0800da38 	.word	0x0800da38
 800c7d8:	0800da3c 	.word	0x0800da3c

0800c7dc <__retarget_lock_init_recursive>:
 800c7dc:	4770      	bx	lr

0800c7de <__retarget_lock_acquire_recursive>:
 800c7de:	4770      	bx	lr

0800c7e0 <__retarget_lock_release_recursive>:
 800c7e0:	4770      	bx	lr
	...

0800c7e4 <_free_r>:
 800c7e4:	b538      	push	{r3, r4, r5, lr}
 800c7e6:	4605      	mov	r5, r0
 800c7e8:	2900      	cmp	r1, #0
 800c7ea:	d041      	beq.n	800c870 <_free_r+0x8c>
 800c7ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7f0:	1f0c      	subs	r4, r1, #4
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	bfb8      	it	lt
 800c7f6:	18e4      	addlt	r4, r4, r3
 800c7f8:	f000 f8e0 	bl	800c9bc <__malloc_lock>
 800c7fc:	4a1d      	ldr	r2, [pc, #116]	@ (800c874 <_free_r+0x90>)
 800c7fe:	6813      	ldr	r3, [r2, #0]
 800c800:	b933      	cbnz	r3, 800c810 <_free_r+0x2c>
 800c802:	6063      	str	r3, [r4, #4]
 800c804:	6014      	str	r4, [r2, #0]
 800c806:	4628      	mov	r0, r5
 800c808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c80c:	f000 b8dc 	b.w	800c9c8 <__malloc_unlock>
 800c810:	42a3      	cmp	r3, r4
 800c812:	d908      	bls.n	800c826 <_free_r+0x42>
 800c814:	6820      	ldr	r0, [r4, #0]
 800c816:	1821      	adds	r1, r4, r0
 800c818:	428b      	cmp	r3, r1
 800c81a:	bf01      	itttt	eq
 800c81c:	6819      	ldreq	r1, [r3, #0]
 800c81e:	685b      	ldreq	r3, [r3, #4]
 800c820:	1809      	addeq	r1, r1, r0
 800c822:	6021      	streq	r1, [r4, #0]
 800c824:	e7ed      	b.n	800c802 <_free_r+0x1e>
 800c826:	461a      	mov	r2, r3
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	b10b      	cbz	r3, 800c830 <_free_r+0x4c>
 800c82c:	42a3      	cmp	r3, r4
 800c82e:	d9fa      	bls.n	800c826 <_free_r+0x42>
 800c830:	6811      	ldr	r1, [r2, #0]
 800c832:	1850      	adds	r0, r2, r1
 800c834:	42a0      	cmp	r0, r4
 800c836:	d10b      	bne.n	800c850 <_free_r+0x6c>
 800c838:	6820      	ldr	r0, [r4, #0]
 800c83a:	4401      	add	r1, r0
 800c83c:	1850      	adds	r0, r2, r1
 800c83e:	4283      	cmp	r3, r0
 800c840:	6011      	str	r1, [r2, #0]
 800c842:	d1e0      	bne.n	800c806 <_free_r+0x22>
 800c844:	6818      	ldr	r0, [r3, #0]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	6053      	str	r3, [r2, #4]
 800c84a:	4408      	add	r0, r1
 800c84c:	6010      	str	r0, [r2, #0]
 800c84e:	e7da      	b.n	800c806 <_free_r+0x22>
 800c850:	d902      	bls.n	800c858 <_free_r+0x74>
 800c852:	230c      	movs	r3, #12
 800c854:	602b      	str	r3, [r5, #0]
 800c856:	e7d6      	b.n	800c806 <_free_r+0x22>
 800c858:	6820      	ldr	r0, [r4, #0]
 800c85a:	1821      	adds	r1, r4, r0
 800c85c:	428b      	cmp	r3, r1
 800c85e:	bf04      	itt	eq
 800c860:	6819      	ldreq	r1, [r3, #0]
 800c862:	685b      	ldreq	r3, [r3, #4]
 800c864:	6063      	str	r3, [r4, #4]
 800c866:	bf04      	itt	eq
 800c868:	1809      	addeq	r1, r1, r0
 800c86a:	6021      	streq	r1, [r4, #0]
 800c86c:	6054      	str	r4, [r2, #4]
 800c86e:	e7ca      	b.n	800c806 <_free_r+0x22>
 800c870:	bd38      	pop	{r3, r4, r5, pc}
 800c872:	bf00      	nop
 800c874:	20006074 	.word	0x20006074

0800c878 <sbrk_aligned>:
 800c878:	b570      	push	{r4, r5, r6, lr}
 800c87a:	4e0f      	ldr	r6, [pc, #60]	@ (800c8b8 <sbrk_aligned+0x40>)
 800c87c:	460c      	mov	r4, r1
 800c87e:	6831      	ldr	r1, [r6, #0]
 800c880:	4605      	mov	r5, r0
 800c882:	b911      	cbnz	r1, 800c88a <sbrk_aligned+0x12>
 800c884:	f000 fca6 	bl	800d1d4 <_sbrk_r>
 800c888:	6030      	str	r0, [r6, #0]
 800c88a:	4621      	mov	r1, r4
 800c88c:	4628      	mov	r0, r5
 800c88e:	f000 fca1 	bl	800d1d4 <_sbrk_r>
 800c892:	1c43      	adds	r3, r0, #1
 800c894:	d103      	bne.n	800c89e <sbrk_aligned+0x26>
 800c896:	f04f 34ff 	mov.w	r4, #4294967295
 800c89a:	4620      	mov	r0, r4
 800c89c:	bd70      	pop	{r4, r5, r6, pc}
 800c89e:	1cc4      	adds	r4, r0, #3
 800c8a0:	f024 0403 	bic.w	r4, r4, #3
 800c8a4:	42a0      	cmp	r0, r4
 800c8a6:	d0f8      	beq.n	800c89a <sbrk_aligned+0x22>
 800c8a8:	1a21      	subs	r1, r4, r0
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	f000 fc92 	bl	800d1d4 <_sbrk_r>
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	d1f2      	bne.n	800c89a <sbrk_aligned+0x22>
 800c8b4:	e7ef      	b.n	800c896 <sbrk_aligned+0x1e>
 800c8b6:	bf00      	nop
 800c8b8:	20006070 	.word	0x20006070

0800c8bc <_malloc_r>:
 800c8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8c0:	1ccd      	adds	r5, r1, #3
 800c8c2:	f025 0503 	bic.w	r5, r5, #3
 800c8c6:	3508      	adds	r5, #8
 800c8c8:	2d0c      	cmp	r5, #12
 800c8ca:	bf38      	it	cc
 800c8cc:	250c      	movcc	r5, #12
 800c8ce:	2d00      	cmp	r5, #0
 800c8d0:	4606      	mov	r6, r0
 800c8d2:	db01      	blt.n	800c8d8 <_malloc_r+0x1c>
 800c8d4:	42a9      	cmp	r1, r5
 800c8d6:	d904      	bls.n	800c8e2 <_malloc_r+0x26>
 800c8d8:	230c      	movs	r3, #12
 800c8da:	6033      	str	r3, [r6, #0]
 800c8dc:	2000      	movs	r0, #0
 800c8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c9b8 <_malloc_r+0xfc>
 800c8e6:	f000 f869 	bl	800c9bc <__malloc_lock>
 800c8ea:	f8d8 3000 	ldr.w	r3, [r8]
 800c8ee:	461c      	mov	r4, r3
 800c8f0:	bb44      	cbnz	r4, 800c944 <_malloc_r+0x88>
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f7ff ffbf 	bl	800c878 <sbrk_aligned>
 800c8fa:	1c43      	adds	r3, r0, #1
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	d158      	bne.n	800c9b2 <_malloc_r+0xf6>
 800c900:	f8d8 4000 	ldr.w	r4, [r8]
 800c904:	4627      	mov	r7, r4
 800c906:	2f00      	cmp	r7, #0
 800c908:	d143      	bne.n	800c992 <_malloc_r+0xd6>
 800c90a:	2c00      	cmp	r4, #0
 800c90c:	d04b      	beq.n	800c9a6 <_malloc_r+0xea>
 800c90e:	6823      	ldr	r3, [r4, #0]
 800c910:	4639      	mov	r1, r7
 800c912:	4630      	mov	r0, r6
 800c914:	eb04 0903 	add.w	r9, r4, r3
 800c918:	f000 fc5c 	bl	800d1d4 <_sbrk_r>
 800c91c:	4581      	cmp	r9, r0
 800c91e:	d142      	bne.n	800c9a6 <_malloc_r+0xea>
 800c920:	6821      	ldr	r1, [r4, #0]
 800c922:	1a6d      	subs	r5, r5, r1
 800c924:	4629      	mov	r1, r5
 800c926:	4630      	mov	r0, r6
 800c928:	f7ff ffa6 	bl	800c878 <sbrk_aligned>
 800c92c:	3001      	adds	r0, #1
 800c92e:	d03a      	beq.n	800c9a6 <_malloc_r+0xea>
 800c930:	6823      	ldr	r3, [r4, #0]
 800c932:	442b      	add	r3, r5
 800c934:	6023      	str	r3, [r4, #0]
 800c936:	f8d8 3000 	ldr.w	r3, [r8]
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	bb62      	cbnz	r2, 800c998 <_malloc_r+0xdc>
 800c93e:	f8c8 7000 	str.w	r7, [r8]
 800c942:	e00f      	b.n	800c964 <_malloc_r+0xa8>
 800c944:	6822      	ldr	r2, [r4, #0]
 800c946:	1b52      	subs	r2, r2, r5
 800c948:	d420      	bmi.n	800c98c <_malloc_r+0xd0>
 800c94a:	2a0b      	cmp	r2, #11
 800c94c:	d917      	bls.n	800c97e <_malloc_r+0xc2>
 800c94e:	1961      	adds	r1, r4, r5
 800c950:	42a3      	cmp	r3, r4
 800c952:	6025      	str	r5, [r4, #0]
 800c954:	bf18      	it	ne
 800c956:	6059      	strne	r1, [r3, #4]
 800c958:	6863      	ldr	r3, [r4, #4]
 800c95a:	bf08      	it	eq
 800c95c:	f8c8 1000 	streq.w	r1, [r8]
 800c960:	5162      	str	r2, [r4, r5]
 800c962:	604b      	str	r3, [r1, #4]
 800c964:	4630      	mov	r0, r6
 800c966:	f000 f82f 	bl	800c9c8 <__malloc_unlock>
 800c96a:	f104 000b 	add.w	r0, r4, #11
 800c96e:	1d23      	adds	r3, r4, #4
 800c970:	f020 0007 	bic.w	r0, r0, #7
 800c974:	1ac2      	subs	r2, r0, r3
 800c976:	bf1c      	itt	ne
 800c978:	1a1b      	subne	r3, r3, r0
 800c97a:	50a3      	strne	r3, [r4, r2]
 800c97c:	e7af      	b.n	800c8de <_malloc_r+0x22>
 800c97e:	6862      	ldr	r2, [r4, #4]
 800c980:	42a3      	cmp	r3, r4
 800c982:	bf0c      	ite	eq
 800c984:	f8c8 2000 	streq.w	r2, [r8]
 800c988:	605a      	strne	r2, [r3, #4]
 800c98a:	e7eb      	b.n	800c964 <_malloc_r+0xa8>
 800c98c:	4623      	mov	r3, r4
 800c98e:	6864      	ldr	r4, [r4, #4]
 800c990:	e7ae      	b.n	800c8f0 <_malloc_r+0x34>
 800c992:	463c      	mov	r4, r7
 800c994:	687f      	ldr	r7, [r7, #4]
 800c996:	e7b6      	b.n	800c906 <_malloc_r+0x4a>
 800c998:	461a      	mov	r2, r3
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	42a3      	cmp	r3, r4
 800c99e:	d1fb      	bne.n	800c998 <_malloc_r+0xdc>
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	6053      	str	r3, [r2, #4]
 800c9a4:	e7de      	b.n	800c964 <_malloc_r+0xa8>
 800c9a6:	230c      	movs	r3, #12
 800c9a8:	6033      	str	r3, [r6, #0]
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	f000 f80c 	bl	800c9c8 <__malloc_unlock>
 800c9b0:	e794      	b.n	800c8dc <_malloc_r+0x20>
 800c9b2:	6005      	str	r5, [r0, #0]
 800c9b4:	e7d6      	b.n	800c964 <_malloc_r+0xa8>
 800c9b6:	bf00      	nop
 800c9b8:	20006074 	.word	0x20006074

0800c9bc <__malloc_lock>:
 800c9bc:	4801      	ldr	r0, [pc, #4]	@ (800c9c4 <__malloc_lock+0x8>)
 800c9be:	f7ff bf0e 	b.w	800c7de <__retarget_lock_acquire_recursive>
 800c9c2:	bf00      	nop
 800c9c4:	2000606c 	.word	0x2000606c

0800c9c8 <__malloc_unlock>:
 800c9c8:	4801      	ldr	r0, [pc, #4]	@ (800c9d0 <__malloc_unlock+0x8>)
 800c9ca:	f7ff bf09 	b.w	800c7e0 <__retarget_lock_release_recursive>
 800c9ce:	bf00      	nop
 800c9d0:	2000606c 	.word	0x2000606c

0800c9d4 <__sfputc_r>:
 800c9d4:	6893      	ldr	r3, [r2, #8]
 800c9d6:	3b01      	subs	r3, #1
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	b410      	push	{r4}
 800c9dc:	6093      	str	r3, [r2, #8]
 800c9de:	da08      	bge.n	800c9f2 <__sfputc_r+0x1e>
 800c9e0:	6994      	ldr	r4, [r2, #24]
 800c9e2:	42a3      	cmp	r3, r4
 800c9e4:	db01      	blt.n	800c9ea <__sfputc_r+0x16>
 800c9e6:	290a      	cmp	r1, #10
 800c9e8:	d103      	bne.n	800c9f2 <__sfputc_r+0x1e>
 800c9ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9ee:	f7ff bdd6 	b.w	800c59e <__swbuf_r>
 800c9f2:	6813      	ldr	r3, [r2, #0]
 800c9f4:	1c58      	adds	r0, r3, #1
 800c9f6:	6010      	str	r0, [r2, #0]
 800c9f8:	7019      	strb	r1, [r3, #0]
 800c9fa:	4608      	mov	r0, r1
 800c9fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <__sfputs_r>:
 800ca02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca04:	4606      	mov	r6, r0
 800ca06:	460f      	mov	r7, r1
 800ca08:	4614      	mov	r4, r2
 800ca0a:	18d5      	adds	r5, r2, r3
 800ca0c:	42ac      	cmp	r4, r5
 800ca0e:	d101      	bne.n	800ca14 <__sfputs_r+0x12>
 800ca10:	2000      	movs	r0, #0
 800ca12:	e007      	b.n	800ca24 <__sfputs_r+0x22>
 800ca14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca18:	463a      	mov	r2, r7
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	f7ff ffda 	bl	800c9d4 <__sfputc_r>
 800ca20:	1c43      	adds	r3, r0, #1
 800ca22:	d1f3      	bne.n	800ca0c <__sfputs_r+0xa>
 800ca24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca28 <_vfiprintf_r>:
 800ca28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2c:	460d      	mov	r5, r1
 800ca2e:	b09d      	sub	sp, #116	@ 0x74
 800ca30:	4614      	mov	r4, r2
 800ca32:	4698      	mov	r8, r3
 800ca34:	4606      	mov	r6, r0
 800ca36:	b118      	cbz	r0, 800ca40 <_vfiprintf_r+0x18>
 800ca38:	6a03      	ldr	r3, [r0, #32]
 800ca3a:	b90b      	cbnz	r3, 800ca40 <_vfiprintf_r+0x18>
 800ca3c:	f7ff fcc6 	bl	800c3cc <__sinit>
 800ca40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca42:	07d9      	lsls	r1, r3, #31
 800ca44:	d405      	bmi.n	800ca52 <_vfiprintf_r+0x2a>
 800ca46:	89ab      	ldrh	r3, [r5, #12]
 800ca48:	059a      	lsls	r2, r3, #22
 800ca4a:	d402      	bmi.n	800ca52 <_vfiprintf_r+0x2a>
 800ca4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca4e:	f7ff fec6 	bl	800c7de <__retarget_lock_acquire_recursive>
 800ca52:	89ab      	ldrh	r3, [r5, #12]
 800ca54:	071b      	lsls	r3, r3, #28
 800ca56:	d501      	bpl.n	800ca5c <_vfiprintf_r+0x34>
 800ca58:	692b      	ldr	r3, [r5, #16]
 800ca5a:	b99b      	cbnz	r3, 800ca84 <_vfiprintf_r+0x5c>
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	4630      	mov	r0, r6
 800ca60:	f7ff fddc 	bl	800c61c <__swsetup_r>
 800ca64:	b170      	cbz	r0, 800ca84 <_vfiprintf_r+0x5c>
 800ca66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca68:	07dc      	lsls	r4, r3, #31
 800ca6a:	d504      	bpl.n	800ca76 <_vfiprintf_r+0x4e>
 800ca6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca70:	b01d      	add	sp, #116	@ 0x74
 800ca72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca76:	89ab      	ldrh	r3, [r5, #12]
 800ca78:	0598      	lsls	r0, r3, #22
 800ca7a:	d4f7      	bmi.n	800ca6c <_vfiprintf_r+0x44>
 800ca7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca7e:	f7ff feaf 	bl	800c7e0 <__retarget_lock_release_recursive>
 800ca82:	e7f3      	b.n	800ca6c <_vfiprintf_r+0x44>
 800ca84:	2300      	movs	r3, #0
 800ca86:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca88:	2320      	movs	r3, #32
 800ca8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca92:	2330      	movs	r3, #48	@ 0x30
 800ca94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc44 <_vfiprintf_r+0x21c>
 800ca98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca9c:	f04f 0901 	mov.w	r9, #1
 800caa0:	4623      	mov	r3, r4
 800caa2:	469a      	mov	sl, r3
 800caa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caa8:	b10a      	cbz	r2, 800caae <_vfiprintf_r+0x86>
 800caaa:	2a25      	cmp	r2, #37	@ 0x25
 800caac:	d1f9      	bne.n	800caa2 <_vfiprintf_r+0x7a>
 800caae:	ebba 0b04 	subs.w	fp, sl, r4
 800cab2:	d00b      	beq.n	800cacc <_vfiprintf_r+0xa4>
 800cab4:	465b      	mov	r3, fp
 800cab6:	4622      	mov	r2, r4
 800cab8:	4629      	mov	r1, r5
 800caba:	4630      	mov	r0, r6
 800cabc:	f7ff ffa1 	bl	800ca02 <__sfputs_r>
 800cac0:	3001      	adds	r0, #1
 800cac2:	f000 80a7 	beq.w	800cc14 <_vfiprintf_r+0x1ec>
 800cac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cac8:	445a      	add	r2, fp
 800caca:	9209      	str	r2, [sp, #36]	@ 0x24
 800cacc:	f89a 3000 	ldrb.w	r3, [sl]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f000 809f 	beq.w	800cc14 <_vfiprintf_r+0x1ec>
 800cad6:	2300      	movs	r3, #0
 800cad8:	f04f 32ff 	mov.w	r2, #4294967295
 800cadc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cae0:	f10a 0a01 	add.w	sl, sl, #1
 800cae4:	9304      	str	r3, [sp, #16]
 800cae6:	9307      	str	r3, [sp, #28]
 800cae8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800caec:	931a      	str	r3, [sp, #104]	@ 0x68
 800caee:	4654      	mov	r4, sl
 800caf0:	2205      	movs	r2, #5
 800caf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf6:	4853      	ldr	r0, [pc, #332]	@ (800cc44 <_vfiprintf_r+0x21c>)
 800caf8:	f7f3 fb6a 	bl	80001d0 <memchr>
 800cafc:	9a04      	ldr	r2, [sp, #16]
 800cafe:	b9d8      	cbnz	r0, 800cb38 <_vfiprintf_r+0x110>
 800cb00:	06d1      	lsls	r1, r2, #27
 800cb02:	bf44      	itt	mi
 800cb04:	2320      	movmi	r3, #32
 800cb06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb0a:	0713      	lsls	r3, r2, #28
 800cb0c:	bf44      	itt	mi
 800cb0e:	232b      	movmi	r3, #43	@ 0x2b
 800cb10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb14:	f89a 3000 	ldrb.w	r3, [sl]
 800cb18:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb1a:	d015      	beq.n	800cb48 <_vfiprintf_r+0x120>
 800cb1c:	9a07      	ldr	r2, [sp, #28]
 800cb1e:	4654      	mov	r4, sl
 800cb20:	2000      	movs	r0, #0
 800cb22:	f04f 0c0a 	mov.w	ip, #10
 800cb26:	4621      	mov	r1, r4
 800cb28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb2c:	3b30      	subs	r3, #48	@ 0x30
 800cb2e:	2b09      	cmp	r3, #9
 800cb30:	d94b      	bls.n	800cbca <_vfiprintf_r+0x1a2>
 800cb32:	b1b0      	cbz	r0, 800cb62 <_vfiprintf_r+0x13a>
 800cb34:	9207      	str	r2, [sp, #28]
 800cb36:	e014      	b.n	800cb62 <_vfiprintf_r+0x13a>
 800cb38:	eba0 0308 	sub.w	r3, r0, r8
 800cb3c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb40:	4313      	orrs	r3, r2
 800cb42:	9304      	str	r3, [sp, #16]
 800cb44:	46a2      	mov	sl, r4
 800cb46:	e7d2      	b.n	800caee <_vfiprintf_r+0xc6>
 800cb48:	9b03      	ldr	r3, [sp, #12]
 800cb4a:	1d19      	adds	r1, r3, #4
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	9103      	str	r1, [sp, #12]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bfbb      	ittet	lt
 800cb54:	425b      	neglt	r3, r3
 800cb56:	f042 0202 	orrlt.w	r2, r2, #2
 800cb5a:	9307      	strge	r3, [sp, #28]
 800cb5c:	9307      	strlt	r3, [sp, #28]
 800cb5e:	bfb8      	it	lt
 800cb60:	9204      	strlt	r2, [sp, #16]
 800cb62:	7823      	ldrb	r3, [r4, #0]
 800cb64:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb66:	d10a      	bne.n	800cb7e <_vfiprintf_r+0x156>
 800cb68:	7863      	ldrb	r3, [r4, #1]
 800cb6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb6c:	d132      	bne.n	800cbd4 <_vfiprintf_r+0x1ac>
 800cb6e:	9b03      	ldr	r3, [sp, #12]
 800cb70:	1d1a      	adds	r2, r3, #4
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	9203      	str	r2, [sp, #12]
 800cb76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb7a:	3402      	adds	r4, #2
 800cb7c:	9305      	str	r3, [sp, #20]
 800cb7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc54 <_vfiprintf_r+0x22c>
 800cb82:	7821      	ldrb	r1, [r4, #0]
 800cb84:	2203      	movs	r2, #3
 800cb86:	4650      	mov	r0, sl
 800cb88:	f7f3 fb22 	bl	80001d0 <memchr>
 800cb8c:	b138      	cbz	r0, 800cb9e <_vfiprintf_r+0x176>
 800cb8e:	9b04      	ldr	r3, [sp, #16]
 800cb90:	eba0 000a 	sub.w	r0, r0, sl
 800cb94:	2240      	movs	r2, #64	@ 0x40
 800cb96:	4082      	lsls	r2, r0
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	3401      	adds	r4, #1
 800cb9c:	9304      	str	r3, [sp, #16]
 800cb9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cba2:	4829      	ldr	r0, [pc, #164]	@ (800cc48 <_vfiprintf_r+0x220>)
 800cba4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cba8:	2206      	movs	r2, #6
 800cbaa:	f7f3 fb11 	bl	80001d0 <memchr>
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d03f      	beq.n	800cc32 <_vfiprintf_r+0x20a>
 800cbb2:	4b26      	ldr	r3, [pc, #152]	@ (800cc4c <_vfiprintf_r+0x224>)
 800cbb4:	bb1b      	cbnz	r3, 800cbfe <_vfiprintf_r+0x1d6>
 800cbb6:	9b03      	ldr	r3, [sp, #12]
 800cbb8:	3307      	adds	r3, #7
 800cbba:	f023 0307 	bic.w	r3, r3, #7
 800cbbe:	3308      	adds	r3, #8
 800cbc0:	9303      	str	r3, [sp, #12]
 800cbc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbc4:	443b      	add	r3, r7
 800cbc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbc8:	e76a      	b.n	800caa0 <_vfiprintf_r+0x78>
 800cbca:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbce:	460c      	mov	r4, r1
 800cbd0:	2001      	movs	r0, #1
 800cbd2:	e7a8      	b.n	800cb26 <_vfiprintf_r+0xfe>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	3401      	adds	r4, #1
 800cbd8:	9305      	str	r3, [sp, #20]
 800cbda:	4619      	mov	r1, r3
 800cbdc:	f04f 0c0a 	mov.w	ip, #10
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbe6:	3a30      	subs	r2, #48	@ 0x30
 800cbe8:	2a09      	cmp	r2, #9
 800cbea:	d903      	bls.n	800cbf4 <_vfiprintf_r+0x1cc>
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d0c6      	beq.n	800cb7e <_vfiprintf_r+0x156>
 800cbf0:	9105      	str	r1, [sp, #20]
 800cbf2:	e7c4      	b.n	800cb7e <_vfiprintf_r+0x156>
 800cbf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbf8:	4604      	mov	r4, r0
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e7f0      	b.n	800cbe0 <_vfiprintf_r+0x1b8>
 800cbfe:	ab03      	add	r3, sp, #12
 800cc00:	9300      	str	r3, [sp, #0]
 800cc02:	462a      	mov	r2, r5
 800cc04:	4b12      	ldr	r3, [pc, #72]	@ (800cc50 <_vfiprintf_r+0x228>)
 800cc06:	a904      	add	r1, sp, #16
 800cc08:	4630      	mov	r0, r6
 800cc0a:	f3af 8000 	nop.w
 800cc0e:	4607      	mov	r7, r0
 800cc10:	1c78      	adds	r0, r7, #1
 800cc12:	d1d6      	bne.n	800cbc2 <_vfiprintf_r+0x19a>
 800cc14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc16:	07d9      	lsls	r1, r3, #31
 800cc18:	d405      	bmi.n	800cc26 <_vfiprintf_r+0x1fe>
 800cc1a:	89ab      	ldrh	r3, [r5, #12]
 800cc1c:	059a      	lsls	r2, r3, #22
 800cc1e:	d402      	bmi.n	800cc26 <_vfiprintf_r+0x1fe>
 800cc20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc22:	f7ff fddd 	bl	800c7e0 <__retarget_lock_release_recursive>
 800cc26:	89ab      	ldrh	r3, [r5, #12]
 800cc28:	065b      	lsls	r3, r3, #25
 800cc2a:	f53f af1f 	bmi.w	800ca6c <_vfiprintf_r+0x44>
 800cc2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc30:	e71e      	b.n	800ca70 <_vfiprintf_r+0x48>
 800cc32:	ab03      	add	r3, sp, #12
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	462a      	mov	r2, r5
 800cc38:	4b05      	ldr	r3, [pc, #20]	@ (800cc50 <_vfiprintf_r+0x228>)
 800cc3a:	a904      	add	r1, sp, #16
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	f000 f879 	bl	800cd34 <_printf_i>
 800cc42:	e7e4      	b.n	800cc0e <_vfiprintf_r+0x1e6>
 800cc44:	0800d9fc 	.word	0x0800d9fc
 800cc48:	0800da06 	.word	0x0800da06
 800cc4c:	00000000 	.word	0x00000000
 800cc50:	0800ca03 	.word	0x0800ca03
 800cc54:	0800da02 	.word	0x0800da02

0800cc58 <_printf_common>:
 800cc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc5c:	4616      	mov	r6, r2
 800cc5e:	4698      	mov	r8, r3
 800cc60:	688a      	ldr	r2, [r1, #8]
 800cc62:	690b      	ldr	r3, [r1, #16]
 800cc64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	bfb8      	it	lt
 800cc6c:	4613      	movlt	r3, r2
 800cc6e:	6033      	str	r3, [r6, #0]
 800cc70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cc74:	4607      	mov	r7, r0
 800cc76:	460c      	mov	r4, r1
 800cc78:	b10a      	cbz	r2, 800cc7e <_printf_common+0x26>
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	6033      	str	r3, [r6, #0]
 800cc7e:	6823      	ldr	r3, [r4, #0]
 800cc80:	0699      	lsls	r1, r3, #26
 800cc82:	bf42      	ittt	mi
 800cc84:	6833      	ldrmi	r3, [r6, #0]
 800cc86:	3302      	addmi	r3, #2
 800cc88:	6033      	strmi	r3, [r6, #0]
 800cc8a:	6825      	ldr	r5, [r4, #0]
 800cc8c:	f015 0506 	ands.w	r5, r5, #6
 800cc90:	d106      	bne.n	800cca0 <_printf_common+0x48>
 800cc92:	f104 0a19 	add.w	sl, r4, #25
 800cc96:	68e3      	ldr	r3, [r4, #12]
 800cc98:	6832      	ldr	r2, [r6, #0]
 800cc9a:	1a9b      	subs	r3, r3, r2
 800cc9c:	42ab      	cmp	r3, r5
 800cc9e:	dc26      	bgt.n	800ccee <_printf_common+0x96>
 800cca0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cca4:	6822      	ldr	r2, [r4, #0]
 800cca6:	3b00      	subs	r3, #0
 800cca8:	bf18      	it	ne
 800ccaa:	2301      	movne	r3, #1
 800ccac:	0692      	lsls	r2, r2, #26
 800ccae:	d42b      	bmi.n	800cd08 <_printf_common+0xb0>
 800ccb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ccb4:	4641      	mov	r1, r8
 800ccb6:	4638      	mov	r0, r7
 800ccb8:	47c8      	blx	r9
 800ccba:	3001      	adds	r0, #1
 800ccbc:	d01e      	beq.n	800ccfc <_printf_common+0xa4>
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	6922      	ldr	r2, [r4, #16]
 800ccc2:	f003 0306 	and.w	r3, r3, #6
 800ccc6:	2b04      	cmp	r3, #4
 800ccc8:	bf02      	ittt	eq
 800ccca:	68e5      	ldreq	r5, [r4, #12]
 800cccc:	6833      	ldreq	r3, [r6, #0]
 800ccce:	1aed      	subeq	r5, r5, r3
 800ccd0:	68a3      	ldr	r3, [r4, #8]
 800ccd2:	bf0c      	ite	eq
 800ccd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccd8:	2500      	movne	r5, #0
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	bfc4      	itt	gt
 800ccde:	1a9b      	subgt	r3, r3, r2
 800cce0:	18ed      	addgt	r5, r5, r3
 800cce2:	2600      	movs	r6, #0
 800cce4:	341a      	adds	r4, #26
 800cce6:	42b5      	cmp	r5, r6
 800cce8:	d11a      	bne.n	800cd20 <_printf_common+0xc8>
 800ccea:	2000      	movs	r0, #0
 800ccec:	e008      	b.n	800cd00 <_printf_common+0xa8>
 800ccee:	2301      	movs	r3, #1
 800ccf0:	4652      	mov	r2, sl
 800ccf2:	4641      	mov	r1, r8
 800ccf4:	4638      	mov	r0, r7
 800ccf6:	47c8      	blx	r9
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	d103      	bne.n	800cd04 <_printf_common+0xac>
 800ccfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cd00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd04:	3501      	adds	r5, #1
 800cd06:	e7c6      	b.n	800cc96 <_printf_common+0x3e>
 800cd08:	18e1      	adds	r1, r4, r3
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	2030      	movs	r0, #48	@ 0x30
 800cd0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd12:	4422      	add	r2, r4
 800cd14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cd18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cd1c:	3302      	adds	r3, #2
 800cd1e:	e7c7      	b.n	800ccb0 <_printf_common+0x58>
 800cd20:	2301      	movs	r3, #1
 800cd22:	4622      	mov	r2, r4
 800cd24:	4641      	mov	r1, r8
 800cd26:	4638      	mov	r0, r7
 800cd28:	47c8      	blx	r9
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	d0e6      	beq.n	800ccfc <_printf_common+0xa4>
 800cd2e:	3601      	adds	r6, #1
 800cd30:	e7d9      	b.n	800cce6 <_printf_common+0x8e>
	...

0800cd34 <_printf_i>:
 800cd34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd38:	7e0f      	ldrb	r7, [r1, #24]
 800cd3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cd3c:	2f78      	cmp	r7, #120	@ 0x78
 800cd3e:	4691      	mov	r9, r2
 800cd40:	4680      	mov	r8, r0
 800cd42:	460c      	mov	r4, r1
 800cd44:	469a      	mov	sl, r3
 800cd46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cd4a:	d807      	bhi.n	800cd5c <_printf_i+0x28>
 800cd4c:	2f62      	cmp	r7, #98	@ 0x62
 800cd4e:	d80a      	bhi.n	800cd66 <_printf_i+0x32>
 800cd50:	2f00      	cmp	r7, #0
 800cd52:	f000 80d2 	beq.w	800cefa <_printf_i+0x1c6>
 800cd56:	2f58      	cmp	r7, #88	@ 0x58
 800cd58:	f000 80b9 	beq.w	800cece <_printf_i+0x19a>
 800cd5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cd60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cd64:	e03a      	b.n	800cddc <_printf_i+0xa8>
 800cd66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cd6a:	2b15      	cmp	r3, #21
 800cd6c:	d8f6      	bhi.n	800cd5c <_printf_i+0x28>
 800cd6e:	a101      	add	r1, pc, #4	@ (adr r1, 800cd74 <_printf_i+0x40>)
 800cd70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd74:	0800cdcd 	.word	0x0800cdcd
 800cd78:	0800cde1 	.word	0x0800cde1
 800cd7c:	0800cd5d 	.word	0x0800cd5d
 800cd80:	0800cd5d 	.word	0x0800cd5d
 800cd84:	0800cd5d 	.word	0x0800cd5d
 800cd88:	0800cd5d 	.word	0x0800cd5d
 800cd8c:	0800cde1 	.word	0x0800cde1
 800cd90:	0800cd5d 	.word	0x0800cd5d
 800cd94:	0800cd5d 	.word	0x0800cd5d
 800cd98:	0800cd5d 	.word	0x0800cd5d
 800cd9c:	0800cd5d 	.word	0x0800cd5d
 800cda0:	0800cee1 	.word	0x0800cee1
 800cda4:	0800ce0b 	.word	0x0800ce0b
 800cda8:	0800ce9b 	.word	0x0800ce9b
 800cdac:	0800cd5d 	.word	0x0800cd5d
 800cdb0:	0800cd5d 	.word	0x0800cd5d
 800cdb4:	0800cf03 	.word	0x0800cf03
 800cdb8:	0800cd5d 	.word	0x0800cd5d
 800cdbc:	0800ce0b 	.word	0x0800ce0b
 800cdc0:	0800cd5d 	.word	0x0800cd5d
 800cdc4:	0800cd5d 	.word	0x0800cd5d
 800cdc8:	0800cea3 	.word	0x0800cea3
 800cdcc:	6833      	ldr	r3, [r6, #0]
 800cdce:	1d1a      	adds	r2, r3, #4
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6032      	str	r2, [r6, #0]
 800cdd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cddc:	2301      	movs	r3, #1
 800cdde:	e09d      	b.n	800cf1c <_printf_i+0x1e8>
 800cde0:	6833      	ldr	r3, [r6, #0]
 800cde2:	6820      	ldr	r0, [r4, #0]
 800cde4:	1d19      	adds	r1, r3, #4
 800cde6:	6031      	str	r1, [r6, #0]
 800cde8:	0606      	lsls	r6, r0, #24
 800cdea:	d501      	bpl.n	800cdf0 <_printf_i+0xbc>
 800cdec:	681d      	ldr	r5, [r3, #0]
 800cdee:	e003      	b.n	800cdf8 <_printf_i+0xc4>
 800cdf0:	0645      	lsls	r5, r0, #25
 800cdf2:	d5fb      	bpl.n	800cdec <_printf_i+0xb8>
 800cdf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cdf8:	2d00      	cmp	r5, #0
 800cdfa:	da03      	bge.n	800ce04 <_printf_i+0xd0>
 800cdfc:	232d      	movs	r3, #45	@ 0x2d
 800cdfe:	426d      	negs	r5, r5
 800ce00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce04:	4859      	ldr	r0, [pc, #356]	@ (800cf6c <_printf_i+0x238>)
 800ce06:	230a      	movs	r3, #10
 800ce08:	e011      	b.n	800ce2e <_printf_i+0xfa>
 800ce0a:	6821      	ldr	r1, [r4, #0]
 800ce0c:	6833      	ldr	r3, [r6, #0]
 800ce0e:	0608      	lsls	r0, r1, #24
 800ce10:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce14:	d402      	bmi.n	800ce1c <_printf_i+0xe8>
 800ce16:	0649      	lsls	r1, r1, #25
 800ce18:	bf48      	it	mi
 800ce1a:	b2ad      	uxthmi	r5, r5
 800ce1c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ce1e:	4853      	ldr	r0, [pc, #332]	@ (800cf6c <_printf_i+0x238>)
 800ce20:	6033      	str	r3, [r6, #0]
 800ce22:	bf14      	ite	ne
 800ce24:	230a      	movne	r3, #10
 800ce26:	2308      	moveq	r3, #8
 800ce28:	2100      	movs	r1, #0
 800ce2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ce2e:	6866      	ldr	r6, [r4, #4]
 800ce30:	60a6      	str	r6, [r4, #8]
 800ce32:	2e00      	cmp	r6, #0
 800ce34:	bfa2      	ittt	ge
 800ce36:	6821      	ldrge	r1, [r4, #0]
 800ce38:	f021 0104 	bicge.w	r1, r1, #4
 800ce3c:	6021      	strge	r1, [r4, #0]
 800ce3e:	b90d      	cbnz	r5, 800ce44 <_printf_i+0x110>
 800ce40:	2e00      	cmp	r6, #0
 800ce42:	d04b      	beq.n	800cedc <_printf_i+0x1a8>
 800ce44:	4616      	mov	r6, r2
 800ce46:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce4a:	fb03 5711 	mls	r7, r3, r1, r5
 800ce4e:	5dc7      	ldrb	r7, [r0, r7]
 800ce50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ce54:	462f      	mov	r7, r5
 800ce56:	42bb      	cmp	r3, r7
 800ce58:	460d      	mov	r5, r1
 800ce5a:	d9f4      	bls.n	800ce46 <_printf_i+0x112>
 800ce5c:	2b08      	cmp	r3, #8
 800ce5e:	d10b      	bne.n	800ce78 <_printf_i+0x144>
 800ce60:	6823      	ldr	r3, [r4, #0]
 800ce62:	07df      	lsls	r7, r3, #31
 800ce64:	d508      	bpl.n	800ce78 <_printf_i+0x144>
 800ce66:	6923      	ldr	r3, [r4, #16]
 800ce68:	6861      	ldr	r1, [r4, #4]
 800ce6a:	4299      	cmp	r1, r3
 800ce6c:	bfde      	ittt	le
 800ce6e:	2330      	movle	r3, #48	@ 0x30
 800ce70:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ce74:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ce78:	1b92      	subs	r2, r2, r6
 800ce7a:	6122      	str	r2, [r4, #16]
 800ce7c:	f8cd a000 	str.w	sl, [sp]
 800ce80:	464b      	mov	r3, r9
 800ce82:	aa03      	add	r2, sp, #12
 800ce84:	4621      	mov	r1, r4
 800ce86:	4640      	mov	r0, r8
 800ce88:	f7ff fee6 	bl	800cc58 <_printf_common>
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	d14a      	bne.n	800cf26 <_printf_i+0x1f2>
 800ce90:	f04f 30ff 	mov.w	r0, #4294967295
 800ce94:	b004      	add	sp, #16
 800ce96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	f043 0320 	orr.w	r3, r3, #32
 800cea0:	6023      	str	r3, [r4, #0]
 800cea2:	4833      	ldr	r0, [pc, #204]	@ (800cf70 <_printf_i+0x23c>)
 800cea4:	2778      	movs	r7, #120	@ 0x78
 800cea6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ceaa:	6823      	ldr	r3, [r4, #0]
 800ceac:	6831      	ldr	r1, [r6, #0]
 800ceae:	061f      	lsls	r7, r3, #24
 800ceb0:	f851 5b04 	ldr.w	r5, [r1], #4
 800ceb4:	d402      	bmi.n	800cebc <_printf_i+0x188>
 800ceb6:	065f      	lsls	r7, r3, #25
 800ceb8:	bf48      	it	mi
 800ceba:	b2ad      	uxthmi	r5, r5
 800cebc:	6031      	str	r1, [r6, #0]
 800cebe:	07d9      	lsls	r1, r3, #31
 800cec0:	bf44      	itt	mi
 800cec2:	f043 0320 	orrmi.w	r3, r3, #32
 800cec6:	6023      	strmi	r3, [r4, #0]
 800cec8:	b11d      	cbz	r5, 800ced2 <_printf_i+0x19e>
 800ceca:	2310      	movs	r3, #16
 800cecc:	e7ac      	b.n	800ce28 <_printf_i+0xf4>
 800cece:	4827      	ldr	r0, [pc, #156]	@ (800cf6c <_printf_i+0x238>)
 800ced0:	e7e9      	b.n	800cea6 <_printf_i+0x172>
 800ced2:	6823      	ldr	r3, [r4, #0]
 800ced4:	f023 0320 	bic.w	r3, r3, #32
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	e7f6      	b.n	800ceca <_printf_i+0x196>
 800cedc:	4616      	mov	r6, r2
 800cede:	e7bd      	b.n	800ce5c <_printf_i+0x128>
 800cee0:	6833      	ldr	r3, [r6, #0]
 800cee2:	6825      	ldr	r5, [r4, #0]
 800cee4:	6961      	ldr	r1, [r4, #20]
 800cee6:	1d18      	adds	r0, r3, #4
 800cee8:	6030      	str	r0, [r6, #0]
 800ceea:	062e      	lsls	r6, r5, #24
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	d501      	bpl.n	800cef4 <_printf_i+0x1c0>
 800cef0:	6019      	str	r1, [r3, #0]
 800cef2:	e002      	b.n	800cefa <_printf_i+0x1c6>
 800cef4:	0668      	lsls	r0, r5, #25
 800cef6:	d5fb      	bpl.n	800cef0 <_printf_i+0x1bc>
 800cef8:	8019      	strh	r1, [r3, #0]
 800cefa:	2300      	movs	r3, #0
 800cefc:	6123      	str	r3, [r4, #16]
 800cefe:	4616      	mov	r6, r2
 800cf00:	e7bc      	b.n	800ce7c <_printf_i+0x148>
 800cf02:	6833      	ldr	r3, [r6, #0]
 800cf04:	1d1a      	adds	r2, r3, #4
 800cf06:	6032      	str	r2, [r6, #0]
 800cf08:	681e      	ldr	r6, [r3, #0]
 800cf0a:	6862      	ldr	r2, [r4, #4]
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f7f3 f95e 	bl	80001d0 <memchr>
 800cf14:	b108      	cbz	r0, 800cf1a <_printf_i+0x1e6>
 800cf16:	1b80      	subs	r0, r0, r6
 800cf18:	6060      	str	r0, [r4, #4]
 800cf1a:	6863      	ldr	r3, [r4, #4]
 800cf1c:	6123      	str	r3, [r4, #16]
 800cf1e:	2300      	movs	r3, #0
 800cf20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf24:	e7aa      	b.n	800ce7c <_printf_i+0x148>
 800cf26:	6923      	ldr	r3, [r4, #16]
 800cf28:	4632      	mov	r2, r6
 800cf2a:	4649      	mov	r1, r9
 800cf2c:	4640      	mov	r0, r8
 800cf2e:	47d0      	blx	sl
 800cf30:	3001      	adds	r0, #1
 800cf32:	d0ad      	beq.n	800ce90 <_printf_i+0x15c>
 800cf34:	6823      	ldr	r3, [r4, #0]
 800cf36:	079b      	lsls	r3, r3, #30
 800cf38:	d413      	bmi.n	800cf62 <_printf_i+0x22e>
 800cf3a:	68e0      	ldr	r0, [r4, #12]
 800cf3c:	9b03      	ldr	r3, [sp, #12]
 800cf3e:	4298      	cmp	r0, r3
 800cf40:	bfb8      	it	lt
 800cf42:	4618      	movlt	r0, r3
 800cf44:	e7a6      	b.n	800ce94 <_printf_i+0x160>
 800cf46:	2301      	movs	r3, #1
 800cf48:	4632      	mov	r2, r6
 800cf4a:	4649      	mov	r1, r9
 800cf4c:	4640      	mov	r0, r8
 800cf4e:	47d0      	blx	sl
 800cf50:	3001      	adds	r0, #1
 800cf52:	d09d      	beq.n	800ce90 <_printf_i+0x15c>
 800cf54:	3501      	adds	r5, #1
 800cf56:	68e3      	ldr	r3, [r4, #12]
 800cf58:	9903      	ldr	r1, [sp, #12]
 800cf5a:	1a5b      	subs	r3, r3, r1
 800cf5c:	42ab      	cmp	r3, r5
 800cf5e:	dcf2      	bgt.n	800cf46 <_printf_i+0x212>
 800cf60:	e7eb      	b.n	800cf3a <_printf_i+0x206>
 800cf62:	2500      	movs	r5, #0
 800cf64:	f104 0619 	add.w	r6, r4, #25
 800cf68:	e7f5      	b.n	800cf56 <_printf_i+0x222>
 800cf6a:	bf00      	nop
 800cf6c:	0800da0d 	.word	0x0800da0d
 800cf70:	0800da1e 	.word	0x0800da1e

0800cf74 <__sflush_r>:
 800cf74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7c:	0716      	lsls	r6, r2, #28
 800cf7e:	4605      	mov	r5, r0
 800cf80:	460c      	mov	r4, r1
 800cf82:	d454      	bmi.n	800d02e <__sflush_r+0xba>
 800cf84:	684b      	ldr	r3, [r1, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	dc02      	bgt.n	800cf90 <__sflush_r+0x1c>
 800cf8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	dd48      	ble.n	800d022 <__sflush_r+0xae>
 800cf90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf92:	2e00      	cmp	r6, #0
 800cf94:	d045      	beq.n	800d022 <__sflush_r+0xae>
 800cf96:	2300      	movs	r3, #0
 800cf98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf9c:	682f      	ldr	r7, [r5, #0]
 800cf9e:	6a21      	ldr	r1, [r4, #32]
 800cfa0:	602b      	str	r3, [r5, #0]
 800cfa2:	d030      	beq.n	800d006 <__sflush_r+0x92>
 800cfa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cfa6:	89a3      	ldrh	r3, [r4, #12]
 800cfa8:	0759      	lsls	r1, r3, #29
 800cfaa:	d505      	bpl.n	800cfb8 <__sflush_r+0x44>
 800cfac:	6863      	ldr	r3, [r4, #4]
 800cfae:	1ad2      	subs	r2, r2, r3
 800cfb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cfb2:	b10b      	cbz	r3, 800cfb8 <__sflush_r+0x44>
 800cfb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cfb6:	1ad2      	subs	r2, r2, r3
 800cfb8:	2300      	movs	r3, #0
 800cfba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfbc:	6a21      	ldr	r1, [r4, #32]
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	47b0      	blx	r6
 800cfc2:	1c43      	adds	r3, r0, #1
 800cfc4:	89a3      	ldrh	r3, [r4, #12]
 800cfc6:	d106      	bne.n	800cfd6 <__sflush_r+0x62>
 800cfc8:	6829      	ldr	r1, [r5, #0]
 800cfca:	291d      	cmp	r1, #29
 800cfcc:	d82b      	bhi.n	800d026 <__sflush_r+0xb2>
 800cfce:	4a2a      	ldr	r2, [pc, #168]	@ (800d078 <__sflush_r+0x104>)
 800cfd0:	410a      	asrs	r2, r1
 800cfd2:	07d6      	lsls	r6, r2, #31
 800cfd4:	d427      	bmi.n	800d026 <__sflush_r+0xb2>
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	6062      	str	r2, [r4, #4]
 800cfda:	04d9      	lsls	r1, r3, #19
 800cfdc:	6922      	ldr	r2, [r4, #16]
 800cfde:	6022      	str	r2, [r4, #0]
 800cfe0:	d504      	bpl.n	800cfec <__sflush_r+0x78>
 800cfe2:	1c42      	adds	r2, r0, #1
 800cfe4:	d101      	bne.n	800cfea <__sflush_r+0x76>
 800cfe6:	682b      	ldr	r3, [r5, #0]
 800cfe8:	b903      	cbnz	r3, 800cfec <__sflush_r+0x78>
 800cfea:	6560      	str	r0, [r4, #84]	@ 0x54
 800cfec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfee:	602f      	str	r7, [r5, #0]
 800cff0:	b1b9      	cbz	r1, 800d022 <__sflush_r+0xae>
 800cff2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cff6:	4299      	cmp	r1, r3
 800cff8:	d002      	beq.n	800d000 <__sflush_r+0x8c>
 800cffa:	4628      	mov	r0, r5
 800cffc:	f7ff fbf2 	bl	800c7e4 <_free_r>
 800d000:	2300      	movs	r3, #0
 800d002:	6363      	str	r3, [r4, #52]	@ 0x34
 800d004:	e00d      	b.n	800d022 <__sflush_r+0xae>
 800d006:	2301      	movs	r3, #1
 800d008:	4628      	mov	r0, r5
 800d00a:	47b0      	blx	r6
 800d00c:	4602      	mov	r2, r0
 800d00e:	1c50      	adds	r0, r2, #1
 800d010:	d1c9      	bne.n	800cfa6 <__sflush_r+0x32>
 800d012:	682b      	ldr	r3, [r5, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d0c6      	beq.n	800cfa6 <__sflush_r+0x32>
 800d018:	2b1d      	cmp	r3, #29
 800d01a:	d001      	beq.n	800d020 <__sflush_r+0xac>
 800d01c:	2b16      	cmp	r3, #22
 800d01e:	d11e      	bne.n	800d05e <__sflush_r+0xea>
 800d020:	602f      	str	r7, [r5, #0]
 800d022:	2000      	movs	r0, #0
 800d024:	e022      	b.n	800d06c <__sflush_r+0xf8>
 800d026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d02a:	b21b      	sxth	r3, r3
 800d02c:	e01b      	b.n	800d066 <__sflush_r+0xf2>
 800d02e:	690f      	ldr	r7, [r1, #16]
 800d030:	2f00      	cmp	r7, #0
 800d032:	d0f6      	beq.n	800d022 <__sflush_r+0xae>
 800d034:	0793      	lsls	r3, r2, #30
 800d036:	680e      	ldr	r6, [r1, #0]
 800d038:	bf08      	it	eq
 800d03a:	694b      	ldreq	r3, [r1, #20]
 800d03c:	600f      	str	r7, [r1, #0]
 800d03e:	bf18      	it	ne
 800d040:	2300      	movne	r3, #0
 800d042:	eba6 0807 	sub.w	r8, r6, r7
 800d046:	608b      	str	r3, [r1, #8]
 800d048:	f1b8 0f00 	cmp.w	r8, #0
 800d04c:	dde9      	ble.n	800d022 <__sflush_r+0xae>
 800d04e:	6a21      	ldr	r1, [r4, #32]
 800d050:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d052:	4643      	mov	r3, r8
 800d054:	463a      	mov	r2, r7
 800d056:	4628      	mov	r0, r5
 800d058:	47b0      	blx	r6
 800d05a:	2800      	cmp	r0, #0
 800d05c:	dc08      	bgt.n	800d070 <__sflush_r+0xfc>
 800d05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d066:	81a3      	strh	r3, [r4, #12]
 800d068:	f04f 30ff 	mov.w	r0, #4294967295
 800d06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d070:	4407      	add	r7, r0
 800d072:	eba8 0800 	sub.w	r8, r8, r0
 800d076:	e7e7      	b.n	800d048 <__sflush_r+0xd4>
 800d078:	dfbffffe 	.word	0xdfbffffe

0800d07c <_fflush_r>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	690b      	ldr	r3, [r1, #16]
 800d080:	4605      	mov	r5, r0
 800d082:	460c      	mov	r4, r1
 800d084:	b913      	cbnz	r3, 800d08c <_fflush_r+0x10>
 800d086:	2500      	movs	r5, #0
 800d088:	4628      	mov	r0, r5
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	b118      	cbz	r0, 800d096 <_fflush_r+0x1a>
 800d08e:	6a03      	ldr	r3, [r0, #32]
 800d090:	b90b      	cbnz	r3, 800d096 <_fflush_r+0x1a>
 800d092:	f7ff f99b 	bl	800c3cc <__sinit>
 800d096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d0f3      	beq.n	800d086 <_fflush_r+0xa>
 800d09e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d0a0:	07d0      	lsls	r0, r2, #31
 800d0a2:	d404      	bmi.n	800d0ae <_fflush_r+0x32>
 800d0a4:	0599      	lsls	r1, r3, #22
 800d0a6:	d402      	bmi.n	800d0ae <_fflush_r+0x32>
 800d0a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0aa:	f7ff fb98 	bl	800c7de <__retarget_lock_acquire_recursive>
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	4621      	mov	r1, r4
 800d0b2:	f7ff ff5f 	bl	800cf74 <__sflush_r>
 800d0b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0b8:	07da      	lsls	r2, r3, #31
 800d0ba:	4605      	mov	r5, r0
 800d0bc:	d4e4      	bmi.n	800d088 <_fflush_r+0xc>
 800d0be:	89a3      	ldrh	r3, [r4, #12]
 800d0c0:	059b      	lsls	r3, r3, #22
 800d0c2:	d4e1      	bmi.n	800d088 <_fflush_r+0xc>
 800d0c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0c6:	f7ff fb8b 	bl	800c7e0 <__retarget_lock_release_recursive>
 800d0ca:	e7dd      	b.n	800d088 <_fflush_r+0xc>

0800d0cc <__swhatbuf_r>:
 800d0cc:	b570      	push	{r4, r5, r6, lr}
 800d0ce:	460c      	mov	r4, r1
 800d0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d4:	2900      	cmp	r1, #0
 800d0d6:	b096      	sub	sp, #88	@ 0x58
 800d0d8:	4615      	mov	r5, r2
 800d0da:	461e      	mov	r6, r3
 800d0dc:	da0d      	bge.n	800d0fa <__swhatbuf_r+0x2e>
 800d0de:	89a3      	ldrh	r3, [r4, #12]
 800d0e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d0e4:	f04f 0100 	mov.w	r1, #0
 800d0e8:	bf14      	ite	ne
 800d0ea:	2340      	movne	r3, #64	@ 0x40
 800d0ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	6031      	str	r1, [r6, #0]
 800d0f4:	602b      	str	r3, [r5, #0]
 800d0f6:	b016      	add	sp, #88	@ 0x58
 800d0f8:	bd70      	pop	{r4, r5, r6, pc}
 800d0fa:	466a      	mov	r2, sp
 800d0fc:	f000 f848 	bl	800d190 <_fstat_r>
 800d100:	2800      	cmp	r0, #0
 800d102:	dbec      	blt.n	800d0de <__swhatbuf_r+0x12>
 800d104:	9901      	ldr	r1, [sp, #4]
 800d106:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d10a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d10e:	4259      	negs	r1, r3
 800d110:	4159      	adcs	r1, r3
 800d112:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d116:	e7eb      	b.n	800d0f0 <__swhatbuf_r+0x24>

0800d118 <__smakebuf_r>:
 800d118:	898b      	ldrh	r3, [r1, #12]
 800d11a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d11c:	079d      	lsls	r5, r3, #30
 800d11e:	4606      	mov	r6, r0
 800d120:	460c      	mov	r4, r1
 800d122:	d507      	bpl.n	800d134 <__smakebuf_r+0x1c>
 800d124:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d128:	6023      	str	r3, [r4, #0]
 800d12a:	6123      	str	r3, [r4, #16]
 800d12c:	2301      	movs	r3, #1
 800d12e:	6163      	str	r3, [r4, #20]
 800d130:	b003      	add	sp, #12
 800d132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d134:	ab01      	add	r3, sp, #4
 800d136:	466a      	mov	r2, sp
 800d138:	f7ff ffc8 	bl	800d0cc <__swhatbuf_r>
 800d13c:	9f00      	ldr	r7, [sp, #0]
 800d13e:	4605      	mov	r5, r0
 800d140:	4639      	mov	r1, r7
 800d142:	4630      	mov	r0, r6
 800d144:	f7ff fbba 	bl	800c8bc <_malloc_r>
 800d148:	b948      	cbnz	r0, 800d15e <__smakebuf_r+0x46>
 800d14a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d14e:	059a      	lsls	r2, r3, #22
 800d150:	d4ee      	bmi.n	800d130 <__smakebuf_r+0x18>
 800d152:	f023 0303 	bic.w	r3, r3, #3
 800d156:	f043 0302 	orr.w	r3, r3, #2
 800d15a:	81a3      	strh	r3, [r4, #12]
 800d15c:	e7e2      	b.n	800d124 <__smakebuf_r+0xc>
 800d15e:	89a3      	ldrh	r3, [r4, #12]
 800d160:	6020      	str	r0, [r4, #0]
 800d162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d166:	81a3      	strh	r3, [r4, #12]
 800d168:	9b01      	ldr	r3, [sp, #4]
 800d16a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d16e:	b15b      	cbz	r3, 800d188 <__smakebuf_r+0x70>
 800d170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d174:	4630      	mov	r0, r6
 800d176:	f000 f81d 	bl	800d1b4 <_isatty_r>
 800d17a:	b128      	cbz	r0, 800d188 <__smakebuf_r+0x70>
 800d17c:	89a3      	ldrh	r3, [r4, #12]
 800d17e:	f023 0303 	bic.w	r3, r3, #3
 800d182:	f043 0301 	orr.w	r3, r3, #1
 800d186:	81a3      	strh	r3, [r4, #12]
 800d188:	89a3      	ldrh	r3, [r4, #12]
 800d18a:	431d      	orrs	r5, r3
 800d18c:	81a5      	strh	r5, [r4, #12]
 800d18e:	e7cf      	b.n	800d130 <__smakebuf_r+0x18>

0800d190 <_fstat_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	4d07      	ldr	r5, [pc, #28]	@ (800d1b0 <_fstat_r+0x20>)
 800d194:	2300      	movs	r3, #0
 800d196:	4604      	mov	r4, r0
 800d198:	4608      	mov	r0, r1
 800d19a:	4611      	mov	r1, r2
 800d19c:	602b      	str	r3, [r5, #0]
 800d19e:	f7f5 fb32 	bl	8002806 <_fstat>
 800d1a2:	1c43      	adds	r3, r0, #1
 800d1a4:	d102      	bne.n	800d1ac <_fstat_r+0x1c>
 800d1a6:	682b      	ldr	r3, [r5, #0]
 800d1a8:	b103      	cbz	r3, 800d1ac <_fstat_r+0x1c>
 800d1aa:	6023      	str	r3, [r4, #0]
 800d1ac:	bd38      	pop	{r3, r4, r5, pc}
 800d1ae:	bf00      	nop
 800d1b0:	20006068 	.word	0x20006068

0800d1b4 <_isatty_r>:
 800d1b4:	b538      	push	{r3, r4, r5, lr}
 800d1b6:	4d06      	ldr	r5, [pc, #24]	@ (800d1d0 <_isatty_r+0x1c>)
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	4608      	mov	r0, r1
 800d1be:	602b      	str	r3, [r5, #0]
 800d1c0:	f7f5 fb31 	bl	8002826 <_isatty>
 800d1c4:	1c43      	adds	r3, r0, #1
 800d1c6:	d102      	bne.n	800d1ce <_isatty_r+0x1a>
 800d1c8:	682b      	ldr	r3, [r5, #0]
 800d1ca:	b103      	cbz	r3, 800d1ce <_isatty_r+0x1a>
 800d1cc:	6023      	str	r3, [r4, #0]
 800d1ce:	bd38      	pop	{r3, r4, r5, pc}
 800d1d0:	20006068 	.word	0x20006068

0800d1d4 <_sbrk_r>:
 800d1d4:	b538      	push	{r3, r4, r5, lr}
 800d1d6:	4d06      	ldr	r5, [pc, #24]	@ (800d1f0 <_sbrk_r+0x1c>)
 800d1d8:	2300      	movs	r3, #0
 800d1da:	4604      	mov	r4, r0
 800d1dc:	4608      	mov	r0, r1
 800d1de:	602b      	str	r3, [r5, #0]
 800d1e0:	f7f5 fb3a 	bl	8002858 <_sbrk>
 800d1e4:	1c43      	adds	r3, r0, #1
 800d1e6:	d102      	bne.n	800d1ee <_sbrk_r+0x1a>
 800d1e8:	682b      	ldr	r3, [r5, #0]
 800d1ea:	b103      	cbz	r3, 800d1ee <_sbrk_r+0x1a>
 800d1ec:	6023      	str	r3, [r4, #0]
 800d1ee:	bd38      	pop	{r3, r4, r5, pc}
 800d1f0:	20006068 	.word	0x20006068

0800d1f4 <_init>:
 800d1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f6:	bf00      	nop
 800d1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1fa:	bc08      	pop	{r3}
 800d1fc:	469e      	mov	lr, r3
 800d1fe:	4770      	bx	lr

0800d200 <_fini>:
 800d200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d202:	bf00      	nop
 800d204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d206:	bc08      	pop	{r3}
 800d208:	469e      	mov	lr, r3
 800d20a:	4770      	bx	lr
